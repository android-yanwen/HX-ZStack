###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             15/Aug/2016  21:35:54 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\Source\TransmitAp #
#                          p.c                                                #
#    Command line       =  -f D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£© #
#                          \Projects\zstack\Utilities\Transmit\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO         #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00001000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1178                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=3             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=2    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\work\ZSTACK-GTAMODBUS-Ö÷ #
#                          ¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tra #
#                          nsmit\Source\TransmitApp.c -D NWK_AUTO_POLL -D     #
#                          MT_TASK -D ZTOOL_P1 -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D ZDNWKMGR_MIN_TRANSMISSIONS=0 -D GTA_DEBUG -D    #
#                          ZIGBEEPRO -D GTA_WWSB_R1 -lC                       #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\GTA-WWSB #
#                          -R1\List\ -lA D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140 #
#                          707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC2 #
#                          530DB\GTA-WWSB-R1\List\ --diag_suppress            #
#                          Pe001,Pa010 -o D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«14 #
#                          0707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC #
#                          2530DB\GTA-WWSB-R1\Obj\ -e --no_code_motion        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£© #
#                          \Projects\zstack\Utilities\Transmit\CC2530DB\ -I   #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\Sourc #
#                          e\ -I D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³Î #
#                          Ä£©\Projects\zstack\Utilities\Transmit\CC2530DB\.. #
#                          \..\..\ZMain\TI2530DB\ -I                          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\hal\include\ -I                  #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\hal\target\CC2530EB\ -I          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\include\ -I                  #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf04\ -I          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf04\single_chip\ #
#                           -I D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£ #
#                          ©\Projects\zstack\Utilities\Transmit\CC2530DB\..\. #
#                          .\..\..\..\Components\mt\ -I                       #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\osal\include\ -I                 #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\services\saddr\ -I               #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\services\sdata\ -I               #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\af\ -I                     #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\nwk\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sapi\ -I                   #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sec\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sys\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\zdo\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\zmac\ -I                         #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\zmac\f8w\ -Ohz                   #
#                          --require_prototypes                               #
#    List file          =  D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\GTA-WWSB #
#                          -R1\List\TransmitApp.lst                           #
#    Object file        =  D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\GTA-WWSB #
#                          -R1\Obj\TransmitApp.r51                            #
#                                                                             #
#                                                                             #
###############################################################################

D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c
      1          /**************************************************************************************************
      2            Filename:       TransmitApp.c
      3            Revised:        $Date: 2012-03-05 09:54:49 -0800 (Mon, 05 Mar 2012) $
      4            Revision:       $Revision: 29619 $
      5          
      6            Description:    Transmit Application (no Profile).
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application will send a data packet to another
     42            tranmitApp device as fast as it can.  The receiving
     43            transmitApp device will calculate the following transmit
     44            rate statistics:
     45              - Number bytes in the last second
     46              - Number of seconds running
     47              - Average number of bytes per second
     48              - Number of packets received.
     49          
     50            The application will send one message and as soon as it
     51            receives the confirmation for that message it will send
     52            the next message.
     53          
     54            If you would like a delay between messages
     55            define TRANSMITAPP_DELAY_SEND and set the delay amount
     56            in TRANSMITAPP_SEND_DELAY.
     57          
     58            TransmitApp_MaxDataLength defines the message size
     59          
     60            Set TRANSMITAPP_TX_OPTIONS to AF_MSG_ACK_REQUEST to send
     61            the message expecting an APS ACK, this will decrease your
     62            throughput.  Set TRANSMITAPP_TX_OPTIONS to 0 for no
     63            APS ACK.
     64          
     65            This applications doesn't have a profile, so it handles
     66            everything directly - itself.
     67          
     68            Key control:
     69              SW1:  Starts and stops the transmitting
     70              SW2:  initiates end device binding
     71              SW3:  Resets the display totals
     72              SW4:  initiates a match description request
     73          
     74            Notes:
     75          
     76              This application was intended to be used to test the maximum
     77              throughput between 2 devices in a network - between routers
     78              coordinators.
     79          
     80              Although not recommended, it can be used between
     81              an end device and a router (or coordinator), but you must
     82              enable the delay feature (TRANSMITAPP_DELAY_SEND and
     83              TRANSMITAPP_SEND_DELAY).  If you don't include the delay, the
     84              end device can't receive messages because it will stop polling.
     85              Also, the delay must be greater than RESPONSE_POLL_RATE (default 100 MSec).
     86          *********************************************************************/
     87          
     88          /*********************************************************************
     89           * INCLUDES
     90           */
     91          #include "OSAL.h"
     92          #include "AF.h"
     93          #include "ZDObject.h"
     94          #include "ZDProfile.h"
     95          
     96          #include "TransmitApp.h"

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1
     97          #include "OnBoard.h"
     98          
     99          #include "DebugTrace.h"
    100          
    101          /* HAL */
    102          #include "hal_lcd.h"
    103          #include "hal_led.h"
    104          #include "hal_key.h"
    105          #include "hal_uart.h"
    106          
    107          #include "OSAL_NV.h"
    108          
    109          #include "ZComDef.h"
    110          #include "sapi.h"//
    111          
    112          #include "hal_types.h"
    113          
    114          #if defined(GTA_WTHSB_R1)
    115          #include "hal_sht11.h"
    116          #endif
    117          
    118          #if defined(GTA_WHFRFID_R1)
    119          #include "WHFRFID.h"
    120          #endif
    121          #include <string.h>
    122          /*********************************************************************
    123           * MACROS
    124           */
    125          
    126          /*********************************************************************
    127           * CONSTANTS
    128           */
    129          //#define TRANSMITAPP_RANDOM_LEN
    130          
    131          #define TRANSMITAPP_STATE_WAITING 0
    132          #define TRANSMITAPP_STATE_SENDING 1
    133          
    134          #if !defined ( RTR_NWK )
    135            // Use these 2 lines to add a delay between each packet sent
    136            //  - default for end devices
    137            #define TRANSMITAPP_DELAY_SEND
    138            #define TRANSMITAPP_SEND_DELAY    (RESPONSE_POLL_RATE * 2)  // in MSecs
    139          #endif
    140          
    141          // Send with or without APS ACKs
    142          //#define TRANSMITAPP_TX_OPTIONS    (AF_DISCV_ROUTE | AF_ACK_REQUEST)
    143          #define TRANSMITAPP_TX_OPTIONS    AF_DISCV_ROUTE
    144          
    145          #define TRANSMITAPP_INITIAL_MSG_COUNT  2
    146          
    147          #define TRANSMITAPP_TRANSMIT_TIME   4  // 4 MS
    148          #define TRANSMITAPP_DISPLAY_TIMER   (2 * 1000)
    149          
    150          #if defined ( TRANSMITAPP_FRAGMENTED )
    151          #define TRANSMITAPP_MAX_DATA_LEN    225
    152          #else
    153          #define TRANSMITAPP_MAX_DATA_LEN    102
    154          #endif
    155          
    156          /*********************************************************************
    157           * TYPEDEFS
    158           */
    159          
    160          /*********************************************************************
    161           * GLOBAL VARIABLES
    162           */
    163          
    164          
    165          // This is the buffer that is sent out as data.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ];
   \                     TransmitApp_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
    167          
    168          // This is the Cluster ID List and should be filled with Application
    169          // specific cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    170          const cId_t TransmitApp_ClusterList[TRANSMITAPP_MAX_CLUSTERS] =
   \                     TransmitApp_ClusterList:
   \   000000   A100         DW 161
    171          {
    172            TRANSMITAPP_CLUSTERID_TESTMSG  // MSG Cluster ID
    173          };
    174          

   \                                 In  segment XDATA_ROM_C, align 1
    175          const SimpleDescriptionFormat_t TransmitApp_SimpleDesc =
   \                     TransmitApp_SimpleDesc:
   \   000000   01           DB 1
   \   000001   050F         DW 3845
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW TransmitApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW TransmitApp_ClusterList
    176          {
    177            TRANSMITAPP_ENDPOINT,              //  int    Endpoint;
    178            TRANSMITAPP_PROFID,                //  uint16 AppProfId[2];
    179            TRANSMITAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    180            TRANSMITAPP_DEVICE_VERSION,        //  int    AppDevVer:4;
    181            TRANSMITAPP_FLAGS,                 //  int    AppFlags:4;
    182            TRANSMITAPP_MAX_CLUSTERS,          //  byte   AppNumInClusters;
    183            (cId_t *)TransmitApp_ClusterList,  //  byte   *pAppInClusterList;
    184            TRANSMITAPP_MAX_CLUSTERS,          //  byte   AppNumInClusters;
    185            (cId_t *)TransmitApp_ClusterList   //  byte   *pAppInClusterList;
    186          };
    187          
    188          // This is the Endpoint/Interface description.  It is defined here, but
    189          // filled-in in TransmitApp_Init().  Another way to go would be to fill
    190          // in the structure here and make it a "const" (in code space).  The
    191          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          endPointDesc_t TransmitApp_epDesc;
   \                     TransmitApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    193          
    194          /*********************************************************************
    195           * EXTERNAL VARIABLES
    196           */
    197          
    198          /*********************************************************************
    199           * EXTERNAL FUNCTIONS
    200           */
    201          
    202          /*********************************************************************
    203           * LOCAL VARIABLES
    204           */
    205          
    206          // Task ID for event processing - received when TransmitApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          byte TransmitApp_TaskID;
   \                     TransmitApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    208          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    209          devStates_t TransmitApp_NwkState;
   \                     TransmitApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    210          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          static byte TransmitApp_TransID;  // This is the unique message ID (counter)
   \                     TransmitApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    212          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          afAddrType_t TransmitApp_DstAddr;
   \                     TransmitApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214          afAddrType_t TestDirectSent_DstAddr;
   \                     TestDirectSent_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          byte TransmitApp_State;
   \                     TransmitApp_State:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    216          
    217          // Shadow of the OSAL system clock used for calculating actual time expired.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          static uint32 clkShdw;
   \                     clkShdw:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    219          // Running total count of test messages recv/sent since beginning current run.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          static uint32 rxTotal, txTotal;
   \                     rxTotal:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     txTotal:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    221          // Running count of test messages recv/sent since last display / update - 1 Hz.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    222          static uint32 rxAccum, txAccum;
   \                     rxAccum:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     txAccum:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    223          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    224          static byte timerOn;
   \                     timerOn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    225          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    226          static byte timesToSend;
   \                     timesToSend:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    227          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    228          uint16 pktCounter;
   \                     pktCounter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    229          
    230          // Max Data Request Length

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    231          uint16 TransmitApp_MaxDataLength;
   \                     TransmitApp_MaxDataLength:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    232          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    233          uint8   NativeAddr=0x01;
   \                     NativeAddr:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for NativeAddr>`
   \   000001                REQUIRE __INIT_XDATA_I
    234          
    235          #if defined(GTA_DEBUG)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    236          uint8 Test_Mark=0;
   \                     Test_Mark:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    237          uint8 Test_Buf[15];
   \                     Test_Buf:
   \   000000                DS 15
   \   00000F                REQUIRE __INIT_XDATA_Z
    238          #endif
    239          
    240          #if defined(GTA_WTHSB_R1)
    241          
    242          char temp_val[2];
    243          char humi_val[2];
    244          static uint8 readTempHumi(void);
    245          #endif
    246          
    247          #if defined(GTA_WMSCB_R1)
    248          
    249          #endif
    250          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    251          uint8 Flag_ReportData=0;
   \                     Flag_ReportData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    252          
    253          /*********************************************************************
    254           * LOCAL FUNCTIONS
    255           */
    256          void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    257          void TransmitApp_HandleKeys( byte shift, byte keys );
    258          void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    259          void TransmitApp_ProcessZDOIncomingMsgs( zdoIncomingMsg_t *inMsg );//microdjg
    260          void TransmitApp_SendTheMessage( void );
    261          void TransmitApp_ChangeState( void );
    262          
    263          void ReportData(ModBusFrame_t *pRxFrame);
    264          uint16 FramePackage(uint8 *pFrame,uint8 addr,uint8 cmd,uint8 *data,uint16 datalen);
    265          uint16 ReadADC(uint8 channel);
    266          void SendDataRequest(uint8 *pBuf,uint16 len);
    267          
    268          /*********************************************************************
    269           * NETWORK LAYER CALLBACKS
    270           */
    271          
    272          /*********************************************************************
    273           * PUBLIC FUNCTIONS
    274           */
    275          void TransmitApp_DisplayResults( void );
    276          
    277          /*********************************************************************
    278           * @fn      TransmitApp_Init
    279           *
    280           * @brief   Initialization function for the Generic App Task.
    281           *          This is called during initialization and should contain
    282           *          any application specific initialization (ie. hardware
    283           *          initialization/setup, table initialization, power up
    284           *          notificaiton ... ).
    285           *
    286           * @param   task_id - the ID assigned by OSAL.  This ID should be
    287           *                    used to send messages and set timers.
    288           *
    289           * @return  none
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          void TransmitApp_Init( byte task_id )
   \                     TransmitApp_Init:
    292          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    293          #if !defined ( TRANSMITAPP_FRAGMENTED )
    294            afDataReqMTU_t mtu;
    295          #endif
    296            uint16 i;
    297            
    298            #if defined(GTA_WTHSB_R1)
    299            Hal_SHT11_Init();
    300            s_connectionreset();
    301            #endif
    302          /*#if defined (HX_18B20_R1)
    303            P0SEL &= 0x00;
    304          #endif*/
    305            
    306            
    307            initUart(uartRxCB);//microdjg
   \   00000C                ; Setup parameters for call to function initUart
   \   00000C   7A..         MOV     R2,#??uartRxCB?relay & 0xff
   \   00000E   7B..         MOV     R3,#(??uartRxCB?relay >> 8) & 0xff
   \   000010   12....       LCALL   ??initUart?relay
    308            osal_nv_item_init(ZCD_NV_NATIVE_ADDRESS,sizeof(NativeAddr),NULL);
   \   000013                ; Setup parameters for call to function osal_nv_item_init
   \   000013   E4           CLR     A
   \   000014   F5..         MOV     ?V0 + 0,A
   \   000016   F5..         MOV     ?V0 + 1,A
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   7C01         MOV     R4,#0x1
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   7A01         MOV     R2,#0x1
   \   000023   7B04         MOV     R3,#0x4
   \   000025   12....       LCALL   ??osal_nv_item_init?relay
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?DEALLOC_XSTACK8
    309            osal_nv_read(ZCD_NV_NATIVE_ADDRESS,0,sizeof(NativeAddr),&NativeAddr);
   \   00002D                ; Setup parameters for call to function osal_nv_read
   \   00002D   75....       MOV     ?V0 + 0,#NativeAddr & 0xff
   \   000030   75....       MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   75..01       MOV     ?V0 + 0,#0x1
   \   00003B   75..00       MOV     ?V0 + 1,#0x0
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7C00         MOV     R4,#0x0
   \   000045   7D00         MOV     R5,#0x0
   \   000047   7A01         MOV     R2,#0x1
   \   000049   7B04         MOV     R3,#0x4
   \   00004B   12....       LCALL   ??osal_nv_read?relay
   \   00004E   7404         MOV     A,#0x4
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
    310            
    311            TransmitApp_TaskID = task_id;
   \   000053   EE           MOV     A,R6
   \   000054   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000057   F0           MOVX    @DPTR,A
    312            TransmitApp_NwkState = DEV_INIT;
   \   000058   90....       MOV     DPTR,#TransmitApp_NwkState
   \   00005B   7401         MOV     A,#0x1
   \   00005D   F0           MOVX    @DPTR,A
    313            TransmitApp_TransID = 0;
   \   00005E   90....       MOV     DPTR,#TransmitApp_TransID
   \   000061   E4           CLR     A
   \   000062   F0           MOVX    @DPTR,A
    314          
    315            pktCounter = 0;
   \   000063   90....       MOV     DPTR,#pktCounter
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   F0           MOVX    @DPTR,A
    316          
    317            TransmitApp_State = TRANSMITAPP_STATE_WAITING;
   \   000069   90....       MOV     DPTR,#TransmitApp_State
   \   00006C   F0           MOVX    @DPTR,A
    318          
    319            // Device hardware initialization can be added here or in main() (Zmain.c).
    320            // If the hardware is application specific - add it here.
    321            // If the hardware is other parts of the device add it in main().
    322          
    323            TransmitApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;//°ó¶¨·¢
   \   00006D   90....       MOV     DPTR,#TransmitApp_DstAddr + 8
   \   000070   F0           MOVX    @DPTR,A
    324            TransmitApp_DstAddr.endPoint = 0;
   \   000071   A3           INC     DPTR
   \   000072   F0           MOVX    @DPTR,A
    325            TransmitApp_DstAddr.addr.shortAddr = 0;//ÎÞËùÎ½
   \   000073   90....       MOV     DPTR,#TransmitApp_DstAddr
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   F0           MOVX    @DPTR,A
    326          
    327            // Fill out the endpoint description.
    328            TransmitApp_epDesc.endPoint = TRANSMITAPP_ENDPOINT;
   \   000079   90....       MOV     DPTR,#TransmitApp_epDesc
   \   00007C   04           INC     A
   \   00007D   F0           MOVX    @DPTR,A
    329            TransmitApp_epDesc.task_id = &TransmitApp_TaskID;
   \   00007E   A3           INC     DPTR
   \   00007F   74..         MOV     A,#TransmitApp_TaskID & 0xff
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   74..         MOV     A,#(TransmitApp_TaskID >> 8) & 0xff
   \   000085   F0           MOVX    @DPTR,A
    330            TransmitApp_epDesc.simpleDesc
    331                      = (SimpleDescriptionFormat_t *)&TransmitApp_SimpleDesc;
   \   000086   A3           INC     DPTR
   \   000087   74..         MOV     A,#TransmitApp_SimpleDesc & 0xff
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   74..         MOV     A,#(TransmitApp_SimpleDesc >> 8) & 0xff
   \   00008D   12....       LCALL   ??Subroutine19_0 & 0xFFFF
    332            TransmitApp_epDesc.latencyReq = noLatencyReqs;
    333            
    334            
    335            
    336            //if(ZG_DEVICE_COORDINATOR_TYPE)
    337            //{
    338              //HalLcdInit();
    339              //HalLcd_HW_WriteLine(HAL_LCD_LINE_1,"GTA Zigbee Test");
    340              HalLcdWriteString( "GTA Zigbee", HAL_LCD_LINE_1 );
   \                     ??CrossCallReturnLabel_26:
   \   000090                ; Setup parameters for call to function HalLcdWriteString
   \   000090   7901         MOV     R1,#0x1
   \   000092   7A..         MOV     R2,#`?<Constant "GTA Zigbee">` & 0xff
   \   000094   7B..         MOV     R3,#(`?<Constant "GTA Zigbee">` >> 8) & 0xff
   \   000096   12....       LCALL   ??HalLcdWriteString?relay
    341            //}
    342          
    343          
    344            // Register the endpoint/interface description with the AF
    345            afRegister( &TransmitApp_epDesc );
   \   000099                ; Setup parameters for call to function afRegister
   \   000099   7A..         MOV     R2,#TransmitApp_epDesc & 0xff
   \   00009B   7B..         MOV     R3,#(TransmitApp_epDesc >> 8) & 0xff
   \   00009D   12....       LCALL   ??afRegister?relay
    346          
    347            // Register for all key events - This app will handle all key events
    348            RegisterForKeys( TransmitApp_TaskID );
   \   0000A0                ; Setup parameters for call to function RegisterForKeys
   \   0000A0   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F9           MOV     R1,A
   \   0000A5   12....       LCALL   ??RegisterForKeys?relay
    349          
    350            // Update the display
    351          #if defined ( LCD_SUPPORTED )
    352            HalLcdWriteString( "TransmitApp", HAL_LCD_LINE_2 );
    353          #endif
    354          
    355            // Set the data length
    356          #if defined ( TRANSMITAPP_FRAGMENTED )
    357            TransmitApp_MaxDataLength = TRANSMITAPP_MAX_DATA_LEN;
    358          #else
    359            mtu.kvp        = FALSE;
   \   0000A8   85..82       MOV     DPL,?XSP + 0
   \   0000AB   85..83       MOV     DPH,?XSP + 1
   \   0000AE   E4           CLR     A
   \   0000AF   F0           MOVX    @DPTR,A
    360            mtu.aps.secure = FALSE;
   \   0000B0   04           INC     A
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   E4           CLR     A
   \   0000B5   12....       LCALL   ?Subroutine5 & 0xFFFF
    361            TransmitApp_MaxDataLength = afDataReqMTU( &mtu );
   \                     ??CrossCallReturnLabel_0:
   \   0000B8   12....       LCALL   ??afDataReqMTU?relay
   \   0000BB   E9           MOV     A,R1
   \   0000BC   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   0000BF   12....       LCALL   ??Subroutine19_0 & 0xFFFF
    362          #endif
    363          
    364            // Generate the data
    365            for (i=0; i<TransmitApp_MaxDataLength; i++)
   \                     ??CrossCallReturnLabel_29:
   \   0000C2   F8           MOV     R0,A
   \   0000C3   8012         SJMP    ??TransmitApp_Init_0
    366            {
    367              TransmitApp_Msg[i] = (uint8) i;
   \                     ??TransmitApp_Init_1:
   \   0000C5   74..         MOV     A,#TransmitApp_Msg & 0xff
   \   0000C7   28           ADD     A,R0
   \   0000C8   F582         MOV     DPL,A
   \   0000CA   74..         MOV     A,#(TransmitApp_Msg >> 8) & 0xff
   \   0000CC   39           ADDC    A,R1
   \   0000CD   F583         MOV     DPH,A
   \   0000CF   E8           MOV     A,R0
   \   0000D0   F0           MOVX    @DPTR,A
    368            }
   \   0000D1   2401         ADD     A,#0x1
   \   0000D3   08           INC     R0
   \   0000D4   E9           MOV     A,R1
   \   0000D5   3400         ADDC    A,#0x0
   \                     ??TransmitApp_Init_0:
   \   0000D7   F9           MOV     R1,A
   \   0000D8   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   FA           MOV     R2,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   FB           MOV     R3,A
   \   0000E0   C3           CLR     C
   \   0000E1   E8           MOV     A,R0
   \   0000E2   9A           SUBB    A,R2
   \   0000E3   E9           MOV     A,R1
   \   0000E4   9B           SUBB    A,R3
   \   0000E5   40DE         JC      ??TransmitApp_Init_1
    369          
    370            ZDO_RegisterForZDOMsg( TransmitApp_TaskID, End_Device_Bind_rsp );
   \   0000E7                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000E7   7A20         MOV     R2,#0x20
   \   0000E9   7B80         MOV     R3,#-0x80
   \   0000EB   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F9           MOV     R1,A
   \   0000F0   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    371            ZDO_RegisterForZDOMsg( TransmitApp_TaskID, Match_Desc_rsp );
   \   0000F3                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000F3   7A06         MOV     R2,#0x6
   \   0000F5   7B80         MOV     R3,#-0x80
   \   0000F7   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F9           MOV     R1,A
   \   0000FC   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    372            ZDO_RegisterForZDOMsg( TransmitApp_TaskID,TRANSMITAPP_CLUSTERID_TESTMSG);
   \   0000FF                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000FF   7AA1         MOV     R2,#-0x5f
   \   000101   7B00         MOV     R3,#0x0
   \   000103   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000106   E0           MOVX    A,@DPTR
   \   000107   F9           MOV     R1,A
   \   000108   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    373            
    374          #if defined (HX_18B20_R1)
    375            osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 1000);
    376            Flag_ReportData = true;
    377          #endif
    378          
    379          }
   \   00010B   7402         MOV     A,#0x2
   \   00010D                REQUIRE ?Subroutine4
   \   00010D                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine16_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function afDataReqMTU
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    380          
    381          /*********************************************************************
    382           * @fn      TransmitApp_ProcessEvent
    383           *
    384           * @brief   Generic Application Task event processor.  This function
    385           *          is called to process all events for the task.  Events
    386           *          include timers, messages and any other user defined events.
    387           *
    388           * @param   task_id  - The OSAL assigned task ID.
    389           * @param   events - events to process.  This is a bit map and can
    390           *                   contain more than one event.
    391           *
    392           * @return  none
    393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    394          UINT16 TransmitApp_ProcessEvent( byte task_id, UINT16 events )
   \                     TransmitApp_ProcessEvent:
    395          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    396            afIncomingMSGPacket_t *MSGpkt;
    397            afDataConfirm_t *afDataConfirm;
    398            (void)task_id;  // Intentionally unreferenced parameter
    399          
    400            // Data Confirmation message fields
    401            ZStatus_t sentStatus;
    402            byte sentEP;
    403            
    404          
    405            
    406            uint8 Frame[20];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
    407            uint8 data[10];//
    408            uint16 i=0,j=0;
                          ^
Warning[Pe177]: variable "i" was declared but never referenced

    uint16 i=0,j=0;
               ^
"D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c",408  Warning[Pe177]: 
          variable "j" was declared but never referenced
    409            uint8 led=0;
                         ^
Warning[Pe177]: variable "led" was declared but never referenced
    410            uint16 temp;
    411            uint16 FrameLen;
    412            
    413          
    414            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??TransmitApp_ProcessEvent_0 & 0xFFFF
    415            {
    416              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
   \   000015                ; Setup parameters for call to function osal_msg_receive
   \   000015   800D         SJMP    ??TransmitApp_ProcessEvent_1
    417              while ( MSGpkt )
    418              {
    419                switch ( MSGpkt->hdr.event )
    420                {
    421                  case ZDO_CB_MSG:
    422                    TransmitApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    423                    break;
    424          
    425                  case KEY_CHANGE:
    426                    TransmitApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    427                    break;
    428          
    429                  case AF_DATA_CONFIRM_CMD:
    430                    // This message is received as a confirmation of a data packet sent.
    431                    // The status is of ZStatus_t type [defined in ZComDef.h]
    432                    // The message fields are defined in AF.h
    433                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    434                    sentEP = afDataConfirm->endpoint;
    435                    sentStatus = afDataConfirm->hdr.status;
    436          
    437                    if ( (ZSuccess == sentStatus) &&
    438                         (TransmitApp_epDesc.endPoint == sentEP) )
    439                    {
    440          #if !defined ( TRANSMITAPP_RANDOM_LEN )
    441                      txAccum += TransmitApp_MaxDataLength;
    442          #endif
    443                      if ( !timerOn )
    444                      {
    445                        osal_start_timerEx( TransmitApp_TaskID,TRANSMITAPP_RCVTIMER_EVT,
    446                                                               TRANSMITAPP_DISPLAY_TIMER);
    447                        clkShdw = osal_GetSystemClock();
    448                        timerOn = TRUE;
    449                      }
    450                    }
    451          
    452                    // Action taken when confirmation is received: Send the next message.
    453                    TransmitApp_SetSendEvt();
    454                    break;
    455          
    456                  case AF_INCOMING_MSG_CMD:
    457                    TransmitApp_MessageMSGCB( MSGpkt );
    458                    
    459                    break;
    460          
    461                  case ZDO_STATE_CHANGE:
    462                    TransmitApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??TransmitApp_ProcessEvent_2:
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   90....       MOV     DPTR,#TransmitApp_NwkState
   \   00001C   F0           MOVX    @DPTR,A
    463          
    464                    break;
    465          
    466                  default:
    467                    break;
    468                }
    469          
    470                // Release the memory
    471                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??TransmitApp_ProcessEvent_3:
   \   00001D                ; Setup parameters for call to function osal_msg_deallocate
   \   00001D   AA..         MOV     R2,?V0 + 0
   \   00001F   AB..         MOV     R3,?V0 + 1
   \   000021   12....       LCALL   ??osal_msg_deallocate?relay
    472          
    473                // Next
    474                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
   \   000024                ; Setup parameters for call to function osal_msg_receive
   \                     ??TransmitApp_ProcessEvent_1:
   \   000024   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   ??osal_msg_receive?relay
   \   00002C   8A..         MOV     ?V0 + 0,R2
   \   00002E   8B..         MOV     ?V0 + 1,R3
   \   000030   E5..         MOV     A,?V0 + 0
   \   000032   45..         ORL     A,?V0 + 1
   \   000034   7003         JNZ     $+5
   \   000036   02....       LJMP    ??TransmitApp_ProcessEvent_4 & 0xFFFF
   \   000039   85..82       MOV     DPL,?V0 + 0
   \   00003C   85..83       MOV     DPH,?V0 + 1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   2440         ADD     A,#0x40
   \   000042   6017         JZ      ??TransmitApp_ProcessEvent_5
   \   000044   24EF         ADD     A,#-0x11
   \   000046   60CF         JZ      ??TransmitApp_ProcessEvent_2
   \   000048   24FE         ADD     A,#-0x2
   \   00004A   6006         JZ      ??TransmitApp_ProcessEvent_6
   \   00004C   24D6         ADD     A,#-0x2a
   \   00004E   601F         JZ      ??TransmitApp_ProcessEvent_7
   \   000050   80CB         SJMP    ??TransmitApp_ProcessEvent_3
   \                     ??TransmitApp_ProcessEvent_6:
   \   000052                ; Setup parameters for call to function TransmitApp_ProcessZDOMsgs
   \   000052   AA..         MOV     R2,?V0 + 0
   \   000054   AB..         MOV     R3,?V0 + 1
   \   000056   12....       LCALL   ??TransmitApp_ProcessZDOMsgs?relay
   \   000059   80C2         SJMP    ??TransmitApp_ProcessEvent_3
   \                     ??TransmitApp_ProcessEvent_5:
   \   00005B                ; Setup parameters for call to function TransmitApp_HandleKeys
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FA           MOV     R2,A
   \   000060   85..82       MOV     DPL,?V0 + 0
   \   000063   85..83       MOV     DPH,?V0 + 1
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F9           MOV     R1,A
   \   00006A   12....       LCALL   ??TransmitApp_HandleKeys?relay
   \   00006D   80AE         SJMP    ??TransmitApp_ProcessEvent_3
   \                     ??TransmitApp_ProcessEvent_7:
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   704D         JNZ     ??TransmitApp_ProcessEvent_8
   \   000073   90....       MOV     DPTR,#TransmitApp_epDesc
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F8           MOV     R0,A
   \   000078   85..82       MOV     DPL,?V0 + 0
   \   00007B   85..83       MOV     DPH,?V0 + 1
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   68           XRL     A,R0
   \   000082   703C         JNZ     ??TransmitApp_ProcessEvent_8
   \   000084   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F5..         MOV     ?V0 + 4,A
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F5..         MOV     ?V0 + 5,A
   \   00008E   E4           CLR     A
   \   00008F   F5..         MOV     ?V0 + 6,A
   \   000091   F5..         MOV     ?V0 + 7,A
   \   000093   90....       MOV     DPTR,#txAccum
   \   000096   78..         MOV     R0,#?V0 + 4
   \   000098   12....       LCALL   ?L_ADD_TO_X
   \   00009B   90....       MOV     DPTR,#timerOn
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   701F         JNZ     ??TransmitApp_ProcessEvent_8
   \   0000A1                ; Setup parameters for call to function osal_start_timerEx
   \   0000A1   7CD0         MOV     R4,#-0x30
   \   0000A3   7D07         MOV     R5,#0x7
   \   0000A5   7A02         MOV     R2,#0x2
   \   0000A7   7B00         MOV     R3,#0x0
   \   0000A9   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F9           MOV     R1,A
   \   0000AE   12....       LCALL   ??osal_start_timerEx?relay
   \   0000B1                ; Setup parameters for call to function osal_GetSystemClock
   \   0000B1   12....       LCALL   ??osal_GetSystemClock?relay
   \   0000B4   90....       MOV     DPTR,#clkShdw
   \   0000B7   12....       LCALL   ?XSTORE_R2345
   \   0000BA   90....       MOV     DPTR,#timerOn
   \   0000BD   7401         MOV     A,#0x1
   \   0000BF   F0           MOVX    @DPTR,A
   \                     ??TransmitApp_ProcessEvent_8:
   \   0000C0                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   0000C0   12....       LCALL   ??TransmitApp_SetSendEvt?relay
   \   0000C3   02....       LJMP    ??TransmitApp_ProcessEvent_3 & 0xFFFF
    475              }
    476          
    477              // Squash compiler warnings until values are used.
    478              (void)sentStatus;
    479              (void)sentEP;
    480          
    481              // Return unprocessed events
    482              return (events ^ SYS_EVENT_MSG);
   \                     ??TransmitApp_ProcessEvent_4:
   \   0000C6   EE           MOV     A,R6
   \   0000C7   FA           MOV     R2,A
   \   0000C8   EF           MOV     A,R7
   \   0000C9   6480         XRL     A,#0x80
   \   0000CB   02....       LJMP    ??TransmitApp_ProcessEvent_9 & 0xFFFF
    483            }
    484          
    485            // Send a message out
    486            if ( events & TRANSMITAPP_SEND_MSG_EVT )
   \                     ??TransmitApp_ProcessEvent_0:
   \   0000CE   EE           MOV     A,R6
   \   0000CF   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000D1   5011         JNC     ??TransmitApp_ProcessEvent_10
    487            {
    488              if ( TransmitApp_State == TRANSMITAPP_STATE_SENDING )
   \   0000D3   90....       MOV     DPTR,#TransmitApp_State
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   6401         XRL     A,#0x1
   \   0000D9   7003         JNZ     ??TransmitApp_ProcessEvent_11
    489              {
    490                TransmitApp_SendTheMessage();
   \   0000DB                ; Setup parameters for call to function TransmitApp_SendTheMessage
   \   0000DB   12....       LCALL   ??TransmitApp_SendTheMessage?relay
    491              }
    492          
    493              // Return unprocessed events
    494              return (events ^ TRANSMITAPP_SEND_MSG_EVT);
   \                     ??TransmitApp_ProcessEvent_11:
   \   0000DE   EE           MOV     A,R6
   \   0000DF   6401         XRL     A,#0x1
   \   0000E1   02....       LJMP    ??TransmitApp_ProcessEvent_12 & 0xFFFF
    495            }
    496          
    497            // Timed wait from error
    498            if ( events & TRANSMITAPP_SEND_ERR_EVT )
   \                     ??TransmitApp_ProcessEvent_10:
   \   0000E4   5404         ANL     A,#0x4
   \   0000E6   6009         JZ      ??TransmitApp_ProcessEvent_13
    499            {
    500              TransmitApp_SetSendEvt();
   \   0000E8                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   0000E8   12....       LCALL   ??TransmitApp_SetSendEvt?relay
    501          
    502              // Return unprocessed events
    503              return (events ^ TRANSMITAPP_SEND_ERR_EVT);
   \   0000EB   EE           MOV     A,R6
   \   0000EC   6404         XRL     A,#0x4
   \   0000EE   02....       LJMP    ??TransmitApp_ProcessEvent_12 & 0xFFFF
    504            }
    505          
    506            // Receive timer
    507            if ( events & TRANSMITAPP_RCVTIMER_EVT )
   \                     ??TransmitApp_ProcessEvent_13:
   \   0000F1   EE           MOV     A,R6
   \   0000F2   5402         ANL     A,#0x2
   \   0000F4   6019         JZ      ??TransmitApp_ProcessEvent_14
    508            {
    509              // Setup to display the next result
    510              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT,
    511                                                      TRANSMITAPP_DISPLAY_TIMER );
   \   0000F6                ; Setup parameters for call to function osal_start_timerEx
   \   0000F6   7CD0         MOV     R4,#-0x30
   \   0000F8   7D07         MOV     R5,#0x7
   \   0000FA   7A02         MOV     R2,#0x2
   \   0000FC   7B00         MOV     R3,#0x0
   \   0000FE   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000101   E0           MOVX    A,@DPTR
   \   000102   F9           MOV     R1,A
   \   000103   12....       LCALL   ??osal_start_timerEx?relay
    512              TransmitApp_DisplayResults();
   \   000106                ; Setup parameters for call to function TransmitApp_DisplayResults
   \   000106   12....       LCALL   ??TransmitApp_DisplayResults?relay
    513          
    514              return (events ^ TRANSMITAPP_RCVTIMER_EVT);
   \   000109   EE           MOV     A,R6
   \   00010A   6402         XRL     A,#0x2
   \   00010C   02....       LJMP    ??TransmitApp_ProcessEvent_12 & 0xFFFF
    515            }
    516            if ( events & TRANSMITAPP_BIND_REQUEST_EVT)//microdjg
   \                     ??TransmitApp_ProcessEvent_14:
   \   00010F   EE           MOV     A,R6
   \   000110   5408         ANL     A,#0x8
   \   000112   6009         JZ      ??TransmitApp_ProcessEvent_15
    517            {
    518              SendBindRequest();//×Ô¶¯¿ªÊ¼°ó¶¨ microdjg
   \   000114                ; Setup parameters for call to function SendBindRequest
   \   000114   12....       LCALL   ??SendBindRequest?relay
    519              //osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT,3000 );
    520              return (events ^ TRANSMITAPP_BIND_REQUEST_EVT);
   \   000117   EE           MOV     A,R6
   \   000118   6408         XRL     A,#0x8
   \   00011A   02....       LJMP    ??TransmitApp_ProcessEvent_12 & 0xFFFF
    521            }
    522            
    523            
    524            if ( events & TRANSMITAPP_START_REPORT_EVT )
   \                     ??TransmitApp_ProcessEvent_15:
   \   00011D   EE           MOV     A,R6
   \   00011E   5410         ANL     A,#0x10
   \   000120   7003         JNZ     $+5
   \   000122   02....       LJMP    ??TransmitApp_ProcessEvent_16 & 0xFFFF
    525            {
    526              if(Flag_ReportData)
   \   000125   90....       MOV     DPTR,#Flag_ReportData
   \   000128   E0           MOVX    A,@DPTR
   \   000129   6010         JZ      ??TransmitApp_ProcessEvent_17
    527                {
    528                  osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 1000);
   \   00012B                ; Setup parameters for call to function osal_start_timerEx
   \   00012B   7CE8         MOV     R4,#-0x18
   \   00012D   7D03         MOV     R5,#0x3
   \   00012F   7A10         MOV     R2,#0x10
   \   000131   7B00         MOV     R3,#0x0
   \   000133   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000136   E0           MOVX    A,@DPTR
   \   000137   F9           MOV     R1,A
   \   000138   12....       LCALL   ??osal_start_timerEx?relay
    529                }
    530              HalLedBlink(HAL_LED_1,1,50,300);
   \                     ??TransmitApp_ProcessEvent_17:
   \   00013B                ; Setup parameters for call to function HalLedBlink
   \   00013B   7C2C         MOV     R4,#0x2c
   \   00013D   7D01         MOV     R5,#0x1
   \   00013F   7B32         MOV     R3,#0x32
   \   000141   7A01         MOV     R2,#0x1
   \   000143   7901         MOV     R1,#0x1
   \   000145   12....       LCALL   ??HalLedBlink?relay
    531              
    532              
    533              
    534              
    535              #if defined ( GTA_WWSB_R1 )||(GTA_WFSB_R1) //´«¸ÐÆ÷   
    536              temp=ReadADC(4);//¶ÁÓêµÎµçÑ¹Öµ
   \   000148                ; Setup parameters for call to function ReadADC
   \   000148   7904         MOV     R1,#0x4
   \   00014A   12....       LCALL   ??ReadADC?relay
    537              data[0]=1;
   \   00014D   12....       LCALL   ?Subroutine6 & 0xFFFF
    538              if(temp>3000)
   \                     ??CrossCallReturnLabel_2:
   \   000150   4007         JC      ??TransmitApp_ProcessEvent_18
    539                data[1]=0x01;
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   7401         MOV     A,#0x1
   \   000157   8004         SJMP    ??TransmitApp_ProcessEvent_19
    540              else
    541                data[1]=0x00;
   \                     ??TransmitApp_ProcessEvent_18:
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   E4           CLR     A
   \                     ??TransmitApp_ProcessEvent_19:
   \   00015D   F0           MOVX    @DPTR,A
    542              //data[1]=LO_UINT16(temp);
    543              //data[2]=HI_UINT16(temp);
    544          #if defined GTA_WWSB_R1
    545              NativeAddr = 0x11;//ÓêµÎ´«¸ÐÆ÷µØÖ·
   \   00015E   90....       MOV     DPTR,#NativeAddr
   \   000161   7411         MOV     A,#0x11
   \   000163   12....       LCALL   ?Subroutine9 & 0xFFFF
    546          #elif defined GTA_WFSB_R1
    547              NativeAddr = 0x16;//»ðÑæ´«¸ÐÆ÷µØÖ·
    548          #endif
    549              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    550              SendDataRequest(Frame,FrameLen);//·¢ËÍ
   \                     ??CrossCallReturnLabel_6:
   \   000166   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000169   7402         MOV     A,#0x2
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   8582..       MOV     ?V0 + 0,DPL
   \   000171   8583..       MOV     ?V0 + 1,DPH
   \   000174   78..         MOV     R0,#?V0 + 0
   \   000176   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000179   7C03         MOV     R4,#0x3
   \   00017B   7911         MOV     R1,#0x11
   \   00017D   740E         MOV     A,#0xe
   \   00017F   12....       LCALL   ?XSTACK_DISP0_8
   \   000182   AA82         MOV     R2,DPL
   \   000184   AB83         MOV     R3,DPH
   \   000186   12....       LCALL   ??FramePackage?relay
   \   000189   7404         MOV     A,#0x4
   \   00018B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018E   EA           MOV     A,R2
   \   00018F   FC           MOV     R4,A
   \   000190   EB           MOV     A,R3
   \   000191   FD           MOV     R5,A
   \   000192   740A         MOV     A,#0xa
   \   000194   12....       LCALL   ?XSTACK_DISP0_8
   \   000197   AA82         MOV     R2,DPL
   \   000199   AB83         MOV     R3,DPH
   \   00019B   12....       LCALL   ??SendDataRequest?relay
    551              #endif
    552              
    553              
    554              #if defined (GTA_WVSB_R1)||(GTA_WIRSB_R1)
    555              temp=ReadADC(4);//¶ÁÓêµÎµçÑ¹Öµ
    556              data[0]=1;
    557              if(temp>3000)
    558                data[1]=0x00;
    559              else
    560                data[1]=0x01;
    561          #if defined GTA_WVSB_R1
    562              NativeAddr = 0x13;//Çã½Ç´«¸ÐÆ÷µØÖ·
    563          #elif defined GTA_WIRSB_R1
    564              NativeAddr = 0x15;//ºìÍâ´«¸ÐÆ÷µØÖ·
    565          #endif
    566              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    567              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    568              #endif
    569              
    570              #if defined ( GTA_WUSB_R1 )
    571              IO_DIR_PORT_PIN(0, 6, IO_IN);
    572              data[0]=1;
    573              if(IO_SENSOR)
    574                data[1]=0x01;
    575              else
    576                data[1]=0x00;
    577              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    578              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    579              #endif
    580              
    581              #if defined (GTA_WISB_R1)
    582              temp=ReadADC(4);//
    583              data[0]=2;
    584              data[1]=LO_UINT16(temp);
    585              data[2]=HI_UINT16(temp);
    586              NativeAddr = 0x14;//¹âÕÕ´«¸ÐÆ÷µØÖ·
    587              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,3);//´ò°ü
    588              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    589              #endif
    590              
    591              
    592              #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷  
    593              
    594              readTempHumi();
    595              data[0]=4;
    596              data[1]=humi_val[0];//L
    597              data[2]=humi_val[1];//H
    598              data[3]=temp_val[0];
    599              data[4]=temp_val[1];
    600              NativeAddr = 0x12;//ÎÂÊª¶È´«¸ÐÆ÷µØÖ·
    601              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,5);//´ò°ü
    602              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    603              HalUARTWrite(HAL_UART_PORT_0, Frame, FrameLen);
    604              
    605              #endif
    606              
    607              //¿ÉÈ¼ÆøÌåCombustible gas¡¢¾Æ¾«Alcohol¡¢ÑÌÎíSmoke
    608          #if defined ( HX_WCGSB_R1 ) || (HX_ALCOHOL_SENSOR) || (HX_SMOKE_SENSOR)
    609              IO_DIR_PORT_PIN(0, 1, IO_IN);
    610              data[0]=1;
    611              if(IO_COMBUSTIBLE_GAS_PORT)
    612                data[1] = 1;
    613              else
    614                data[1] = 0;
    615          #if defined HX_SMOKE_SENSOR
    616              NativeAddr = 0x21;//ÑÌÎí´«¸ÐÆ÷µØÖ·
    617          #elif defined HX_ALCOHOL_SENSOR
    618              NativeAddr = 0x20;//¾Æ¾«´«¸ÐÆ÷µØÖ·
    619          #elif defined HX_WCGSB_R1
    620              NativeAddr = 0x18;//¿ÉÈ¼ÆøÌå´«¸ÐÆ÷µØÖ·
    621          #endif
    622              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    623              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    624          #endif
    625              
    626          #if defined ( HX_18B20_R1 )
    627              uint8* pTempData;
    628              read_data();
    629              pTempData = DataChange();
    630              data[0]=4;
    631              data[1]=*pTempData++;//temperature H
    632              data[2]=*pTempData;//temperature L
    633              NativeAddr = 0x19;//ÉèÖÃ18b20µÄZigBeeµØÖ·Îª19h
    634              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,3);//´ò°ü
    635              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    636              HalUARTWrite(HAL_UART_PORT_0, Frame, FrameLen);
    637          #endif
    638              
    639              
    640              return (events ^ TRANSMITAPP_START_REPORT_EVT);
   \   00019E   EE           MOV     A,R6
   \   00019F   6410         XRL     A,#0x10
   \                     ??TransmitApp_ProcessEvent_12:
   \   0001A1   FA           MOV     R2,A
   \   0001A2   EF           MOV     A,R7
   \                     ??TransmitApp_ProcessEvent_9:
   \   0001A3   FB           MOV     R3,A
   \   0001A4   8004         SJMP    ??TransmitApp_ProcessEvent_20
    641            }
    642            
    643            
    644          
    645            // Discard unknown events
    646            return 0;
   \                     ??TransmitApp_ProcessEvent_16:
   \   0001A6   7A00         MOV     R2,#0x0
   \   0001A8   7B00         MOV     R3,#0x0
   \                     ??TransmitApp_ProcessEvent_20:
   \   0001AA   741E         MOV     A,#0x1e
   \   0001AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001AF   02....       LJMP    ?Subroutine1 & 0xFFFF
    647          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function SendDataRequest
   \   000001                ; Setup parameters for call to function FramePackage
   \   000001                ; Setup parameters for call to function SendDataRequest
   \   000001                ; Setup parameters for call to function FramePackage
   \   000001   75..02       MOV     ?V0 + 0,#0x2
   \   000004   75..00       MOV     ?V0 + 1,#0x0
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7401         MOV     A,#0x1
   \   000008   F0           MOVX    @DPTR,A
   \   000009   C3           CLR     C
   \   00000A   EA           MOV     A,R2
   \   00000B   94B9         SUBB    A,#-0x47
   \   00000D   EB           MOV     A,R3
   \   00000E   940B         SUBB    A,#0xb
   \   000010   7401         MOV     A,#0x1
   \   000012   22           RET
    648          
    649          /*********************************************************************
    650           * Event Generation Functions
    651           */
    652          /*********************************************************************
    653           * @fn      TransmitApp_ProcessZDOMsgs()
    654           *
    655           * @brief   Process response messages
    656           *
    657           * @param   none
    658           *
    659           * @return  none
    660           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    661          void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     TransmitApp_ProcessZDOMsgs:
    662          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    663            switch ( inMsg->clusterID )
   \   000005   EA           MOV     A,R2
   \   000006   240C         ADD     A,#0xc
   \   000008   F582         MOV     DPL,A
   \   00000A   EB           MOV     A,R3
   \   00000B   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 1,A
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for TransmitApp_ProcessZDOMsgs>_0`:
   \   000019   0000         DW        0
   \   00001B   0300         DW        3
   \   00001D   A100         DW        161
   \   00001F   ....         DW        ??TransmitApp_ProcessZDOMsgs_0
   \   000021   0680         DW        32774
   \   000023   ....         DW        ??TransmitApp_ProcessZDOMsgs_1
   \   000025   2080         DW        32800
   \   000027   ....         DW        ??TransmitApp_ProcessZDOMsgs_2
   \   000029   ....         DW        ??TransmitApp_ProcessZDOMsgs_3
    664            {
    665              case End_Device_Bind_rsp:
    666                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
   \                     ??TransmitApp_ProcessZDOMsgs_2:
   \   00002B   EA           MOV     A,R2
   \   00002C   2413         ADD     A,#0x13
   \   00002E   F582         MOV     DPL,A
   \   000030   EB           MOV     A,R3
   \   000031   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000034   7015         JNZ     ??TransmitApp_ProcessZDOMsgs_4
    667                {
    668                  // Light LED
    669                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000036                ; Setup parameters for call to function HalLedSet
   \   000036   7A01         MOV     R2,#0x1
   \   000038   7908         MOV     R1,#0x8
   \   00003A   12....       LCALL   ??HalLedSet?relay
    670                  osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT );
   \   00003D                ; Setup parameters for call to function osal_stop_timerEx
   \   00003D   7A08         MOV     R2,#0x8
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   ??osal_stop_timerEx?relay
   \   000049   8067         SJMP    ??TransmitApp_ProcessZDOMsgs_3
    671          
    672                }
    673          #if defined(BLINK_LEDS)
    674                else
    675                {
    676                  // Flash LED to show failure
    677                  //HalLedSet ( HAL_LED_2, HAL_LED_MODE_FLASH );//4
    678                  HalLedBlink(HAL_LED_2,1,50,1000);//Ö¸Ê¾°ó¶¨ÓÐÎó
   \                     ??TransmitApp_ProcessZDOMsgs_4:
   \   00004B                ; Setup parameters for call to function HalLedBlink
   \   00004B   7CE8         MOV     R4,#-0x18
   \   00004D   7D03         MOV     R5,#0x3
   \   00004F   7B32         MOV     R3,#0x32
   \   000051   7A01         MOV     R2,#0x1
   \   000053   7902         MOV     R1,#0x2
   \   000055   8058         SJMP    ??TransmitApp_ProcessZDOMsgs_5
    679                }
    680          #endif
    681                break;
    682          
    683              case Match_Desc_rsp:
    684                {
    685                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??TransmitApp_ProcessZDOMsgs_1:
   \   000057                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000057   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   00005A   8A..         MOV     ?V0 + 0,R2
   \   00005C   8B..         MOV     ?V0 + 1,R3
   \   00005E   AE..         MOV     R6,?V0 + 0
   \   000060   AF..         MOV     R7,?V0 + 1
    686                  if ( pRsp )
   \   000062   EE           MOV     A,R6
   \   000063   4F           ORL     A,R7
   \   000064   604C         JZ      ??TransmitApp_ProcessZDOMsgs_3
    687                  {
    688                    if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   702C         JNZ     ??TransmitApp_ProcessZDOMsgs_6
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   6026         JZ      ??TransmitApp_ProcessZDOMsgs_6
    689                    {
    690                      TransmitApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000073   90....       MOV     DPTR,#TransmitApp_DstAddr + 8
   \   000076   7402         MOV     A,#0x2
   \   000078   12....       LCALL   ?Subroutine10 & 0xFFFF
    691                      TransmitApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \                     ??CrossCallReturnLabel_8:
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F8           MOV     R0,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080   90....       MOV     DPTR,#TransmitApp_DstAddr
   \   000083   E8           MOV     A,R0
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E9           MOV     A,R1
   \   000087   12....       LCALL   ?Subroutine10 & 0xFFFF
    692                      // Take the first endpoint, Can be changed to search through endpoints
    693                      TransmitApp_DstAddr.endPoint = pRsp->epList[0];
   \                     ??CrossCallReturnLabel_9:
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   90....       MOV     DPTR,#TransmitApp_DstAddr + 9
   \   000091   F0           MOVX    @DPTR,A
    694          
    695                      // Light LED
    696                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000092                ; Setup parameters for call to function HalLedSet
   \   000092   7A01         MOV     R2,#0x1
   \   000094   7908         MOV     R1,#0x8
   \   000096   12....       LCALL   ??HalLedSet?relay
    697                    }
    698                    osal_mem_free( pRsp );
   \                     ??TransmitApp_ProcessZDOMsgs_6:
   \   000099                ; Setup parameters for call to function osal_mem_free
   \   000099   EE           MOV     A,R6
   \   00009A   FA           MOV     R2,A
   \   00009B   EF           MOV     A,R7
   \   00009C   FB           MOV     R3,A
   \   00009D   12....       LCALL   ??osal_mem_free?relay
   \   0000A0   8010         SJMP    ??TransmitApp_ProcessZDOMsgs_3
    699                  }
    700                }
    701                break;
    702                
    703            case TRANSMITAPP_CLUSTERID_TESTMSG://microdjg
    704              {  
    705                //osal_set_event( TransmitApp_TaskID, AF_INCOMING_MSG_CMD );///
    706                TransmitApp_ProcessZDOIncomingMsgs(inMsg);
   \                     ??TransmitApp_ProcessZDOMsgs_0:
   \   0000A2                ; Setup parameters for call to function TransmitApp_ProcessZDOIncomingMsgs
   \   0000A2   12....       LCALL   ??TransmitApp_ProcessZDOIncomingMsgs?relay
    707                HalLedBlink(HAL_LED_4,1,50,500);///
   \   0000A5                ; Setup parameters for call to function HalLedBlink
   \   0000A5   7CF4         MOV     R4,#-0xc
   \   0000A7   7D01         MOV     R5,#0x1
   \   0000A9   7B32         MOV     R3,#0x32
   \   0000AB   7A01         MOV     R2,#0x1
   \   0000AD   7908         MOV     R1,#0x8
   \                     ??TransmitApp_ProcessZDOMsgs_5:
   \   0000AF   12....       LCALL   ??HalLedBlink?relay
    708              }
    709            }
    710          }
   \                     ??TransmitApp_ProcessZDOMsgs_3:
   \   0000B2   80..         SJMP    ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F583         MOV     DPH,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET
    711          
    712          /*********************************************************************
    713           * @fn      TransmitApp_HandleKeys
    714           *
    715           * @brief   Handles all key events for this device.
    716           *
    717           * @param   shift - true if in shift/alt.
    718           * @param   keys - bit field for key events. Valid entries:
    719           *                 EVAL_SW4
    720           *                 EVAL_SW3
    721           *                 EVAL_SW2
    722           *                 EVAL_SW1
    723           *
    724           * @return  none
    725           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    726          void TransmitApp_HandleKeys( byte shift, byte keys )
   \                     TransmitApp_HandleKeys:
    727          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    728            //zAddrType_t dstAddr;
    729                
    730              if ( keys == HAL_KEY_INT_1)
   \   000007   74E1         MOV     A,#-0x1f
   \   000009   6E           XRL     A,R6
   \   00000A   7050         JNZ     ??TransmitApp_HandleKeys_0
    731              {
    732                #if defined(GTA_DEBUG)
    733                Test_Mark=0x01;
   \   00000C   90....       MOV     DPTR,#Test_Mark
   \   00000F   7401         MOV     A,#0x1
   \   000011   F0           MOVX    @DPTR,A
    734                Test_Buf[0] = 0x99;
   \   000012   90....       MOV     DPTR,#Test_Buf
   \   000015   7499         MOV     A,#-0x67
   \   000017   F0           MOVX    @DPTR,A
    735                Test_Buf[1] = 0x88;
   \   000018   A3           INC     DPTR
   \   000019   7488         MOV     A,#-0x78
   \   00001B   F0           MOVX    @DPTR,A
    736                Test_Buf[2] = 0x77;
   \   00001C   A3           INC     DPTR
   \   00001D   7477         MOV     A,#0x77
   \   00001F   F0           MOVX    @DPTR,A
    737                Test_Buf[3] = 0x66;
   \   000020   A3           INC     DPTR
   \   000021   7466         MOV     A,#0x66
   \   000023   F0           MOVX    @DPTR,A
    738                HalUARTWrite(HAL_UART_PORT_0,Test_Buf,15);
   \   000024                ; Setup parameters for call to function HalUARTWrite
   \   000024   7C0F         MOV     R4,#0xf
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A..         MOV     R2,#Test_Buf & 0xff
   \   00002A   7B..         MOV     R3,#(Test_Buf >> 8) & 0xff
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   12....       LCALL   ??HalUARTWrite?relay
    739                #endif
    740                Flag_ReportData=!Flag_ReportData;
   \   000031   90....       MOV     DPTR,#Flag_ReportData
   \   000034   E0           MOVX    A,@DPTR
   \   000035   7004         JNZ     ??TransmitApp_HandleKeys_1
   \   000037   7401         MOV     A,#0x1
   \   000039   8001         SJMP    ??TransmitApp_HandleKeys_2
   \                     ??TransmitApp_HandleKeys_1:
   \   00003B   E4           CLR     A
   \                     ??TransmitApp_HandleKeys_2:
   \   00003C   F0           MOVX    @DPTR,A
    741                HalLedBlink (HAL_LED_1, 1, 50, 100);
   \   00003D                ; Setup parameters for call to function HalLedBlink
   \   00003D   7C64         MOV     R4,#0x64
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7B32         MOV     R3,#0x32
   \   000043   7A01         MOV     R2,#0x1
   \   000045   7901         MOV     R1,#0x1
   \   000047   12....       LCALL   ??HalLedBlink?relay
    742                if(Flag_ReportData)
   \   00004A   90....       MOV     DPTR,#Flag_ReportData
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   600C         JZ      ??TransmitApp_HandleKeys_0
    743                {
    744                  //osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 2000);
    745                  osal_set_event( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT );
   \   000050                ; Setup parameters for call to function osal_set_event
   \   000050   7A10         MOV     R2,#0x10
   \   000052   7B00         MOV     R3,#0x0
   \   000054   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   ??osal_set_event?relay
    746                }
    747              }
    748           //}
    749          }
   \                     ??TransmitApp_HandleKeys_0:
   \   00005C                REQUIRE ?Subroutine2
   \   00005C                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    750          
    751          /*********************************************************************
    752           * LOCAL FUNCTIONS
    753           */
    754          
    755          /*********************************************************************
    756           * @fn      TransmitApp_MessageMSGCB
    757           *
    758           * @brief   Data message processor callback.  This function processes
    759           *          any incoming data - probably from other devices.  So, based
    760           *          on cluster ID, perform the intended action.
    761           *
    762           * @param   none
    763           *
    764           * @return  none
    765           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    766          void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     TransmitApp_MessageMSGCB:
    767          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    768            uint16 i;
                          ^
Warning[Pe177]: variable "i" was declared but never referenced
    769            uint8 error = FALSE;
                         ^
Warning[Pe177]: variable "error" was declared but never referenced
    770          //HalLedBlink (HAL_LED_2, 1, 50, 300);
    771          //HalUARTWrite(HAL_UART_PORT_0,pkt->cmd.Data,pkt->cmd.DataLength);//microdjg
    772            switch ( pkt->clusterId )
    773            {
    774              case TRANSMITAPP_CLUSTERID_TESTMSG:
    775                
    776                //HalUARTWrite(HAL_UART_PORT_0,pkt->cmd.Data,pkt->cmd.DataLength);//microdjg
    777                //HalLedBlink ( HAL_LED_2, 1, 50, 300 );//Blink to indicate RX
    778                break;
    779            default:break;
    780            }
    781          }
   \   000000   02....       LJMP    ?BRET
    782          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    783          void TransmitApp_ProcessZDOIncomingMsgs( zdoIncomingMsg_t *inMsg )
   \                     TransmitApp_ProcessZDOIncomingMsgs:
    784          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    785              ModBusFrame_t RxFrame;
    786              uint16 temp;
                            ^
Warning[Pe177]: variable "temp" was declared but never referenced
    787              //uint8 recdatabuf[20];
    788              HalLedBlink (HAL_LED_2, 1, 50, 300);
   \   00000E                ; Setup parameters for call to function HalLedBlink
   \   00000E   7C2C         MOV     R4,#0x2c
   \   000010   7D01         MOV     R5,#0x1
   \   000012   7B32         MOV     R3,#0x32
   \   000014   7A01         MOV     R2,#0x1
   \   000016   7902         MOV     R1,#0x2
   \   000018   12....       LCALL   ??HalLedBlink?relay
    789              uint8 i;
    790              //#if defined(GTA_DEBUG)
    791              //  uint8 i;
    792              //#endif
    793              
    794              //HalUARTWrite(HAL_UART_PORT_0,inMsg->asdu,inMsg->asduLen);//²âÊÔ
    795              
    796              if(ZG_DEVICE_COORDINATOR_TYPE)
   \   00001B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   7066         JNZ     ??TransmitApp_ProcessZDOIncomingMsgs_0
    797              {
    798                
    799                if(inMsg->asduLen!=0&&inMsg->asdu[0]!=0)
   \   000021   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000024   6019         JZ      ??TransmitApp_ProcessZDOIncomingMsgs_1
   \   000026   EE           MOV     A,R6
   \   000027   2413         ADD     A,#0x13
   \   000029   F582         MOV     DPL,A
   \   00002B   EF           MOV     A,R7
   \   00002C   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00002F   600E         JZ      ??TransmitApp_ProcessZDOIncomingMsgs_1
    800                {/*
    801                  for(i=0;i<inMsg->asduLen;i++)
    802                  {
    803                    recdatabuf[i]=inMsg->asdu[i];
    804                  } 
    805                  HalUARTWrite(HAL_UART_PORT_0,recdatabuf,inMsg->asduLen);
    806                  */
    807                  HalUARTWrite(HAL_UART_PORT_0,inMsg->asdu,inMsg->asduLen);
   \   000031                ; Setup parameters for call to function HalUARTWrite
   \   000031   12....       LCALL   ?Subroutine12 & 0xFFFF
    808                }
   \                     ??CrossCallReturnLabel_14:
   \   000034   FC           MOV     R4,A
   \   000035   7D00         MOV     R5,#0x0
   \   000037   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   ??HalUARTWrite?relay
    809                
    810                //HalUARTWrite(HAL_UART_PORT_0,recdatabuf,inMsg->asduLen);
    811                #if defined(GTA_DEBUG)
    812                if(Test_Mark==0x01)
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_1:
   \   00003F   90....       MOV     DPTR,#Test_Mark
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6401         XRL     A,#0x1
   \   000045   7067         JNZ     ??TransmitApp_ProcessZDOIncomingMsgs_2
    813                {
    814                  for(i=0;i<15;i++)
    815                  {
    816                    Test_Buf[i]=0;
   \   000047   E4           CLR     A
   \   000048   90....       MOV     DPTR,#Test_Buf
   \   00004B   780F         MOV     R0,#0xf
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_3:
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   D8FC         DJNZ    R0,??TransmitApp_ProcessZDOIncomingMsgs_3
    817                  }
    818                  for(i=0;i<inMsg->asduLen;i++)
   \   000051   FB           MOV     R3,A
   \   000052   8023         SJMP    ??TransmitApp_ProcessZDOIncomingMsgs_4
    819                  {
    820                    Test_Buf[i]=inMsg->asdu[i];
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_5:
   \   000054   8B82         MOV     DPL,R3
   \   000056   A882         MOV     R0,DPL
   \   000058   12....       LCALL   ?Subroutine15 & 0xFFFF
    821                  }
   \                     ??CrossCallReturnLabel_24:
   \   00005B   28           ADD     A,R0
   \   00005C   FA           MOV     R2,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   3400         ADDC    A,#0x0
   \   000061   8A82         MOV     DPL,R2
   \   000063   F583         MOV     DPH,A
   \   000065   E0           MOVX    A,@DPTR
   \   000066   C0E0         PUSH    A
   \   000068   74..         MOV     A,#Test_Buf & 0xff
   \   00006A   28           ADD     A,R0
   \   00006B   F582         MOV     DPL,A
   \   00006D   74..         MOV     A,#(Test_Buf >> 8) & 0xff
   \   00006F   3400         ADDC    A,#0x0
   \   000071   F583         MOV     DPH,A
   \   000073   D0E0         POP     A
   \   000075   F0           MOVX    @DPTR,A
   \   000076   0B           INC     R3
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_4:
   \   000077   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00007A   F8           MOV     R0,A
   \   00007B   EB           MOV     A,R3
   \   00007C   C3           CLR     C
   \   00007D   98           SUBB    A,R0
   \   00007E   40D4         JC      ??TransmitApp_ProcessZDOIncomingMsgs_5
    822                  Test_Mark=0;
   \   000080   90....       MOV     DPTR,#Test_Mark
   \   000083   E4           CLR     A
   \   000084   F0           MOVX    @DPTR,A
   \   000085   8027         SJMP    ??TransmitApp_ProcessZDOIncomingMsgs_2
    823                }
    824                
    825                #endif
    826              }
    827              else
    828              {
    829                FrameUnPackage(inMsg->asdu,&RxFrame);//check Package
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_0:
   \   000087                ; Setup parameters for call to function FrameUnPackage
   \   000087   85..82       MOV     DPL,?XSP + 0
   \   00008A   85..83       MOV     DPH,?XSP + 1
   \   00008D   AC82         MOV     R4,DPL
   \   00008F   AD83         MOV     R5,DPH
   \   000091   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000094   12....       LCALL   ??FrameUnPackage?relay
    830                if(RxFrame.COMFIRM==FRAME_CHECK_RIGHT)
   \   000097   7417         MOV     A,#0x17
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   6401         XRL     A,#0x1
   \   00009F   700D         JNZ     ??TransmitApp_ProcessZDOIncomingMsgs_2
    831                {
    832                  ReportData(&RxFrame);
   \   0000A1                ; Setup parameters for call to function ReportData
   \   0000A1   85..82       MOV     DPL,?XSP + 0
   \   0000A4   85..83       MOV     DPH,?XSP + 1
   \   0000A7   AA82         MOV     R2,DPL
   \   0000A9   AB83         MOV     R3,DPH
   \   0000AB   12....       LCALL   ??ReportData?relay
    833                  
    834                }
    835              } 
    836              
    837          }
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_2:
   \   0000AE   7418         MOV     A,#0x18
   \   0000B0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B3   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV     A,R6
   \   000001   2410         ADD     A,#0x10
   \   000003   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003                REQUIRE ??Subroutine17_0
   \   000003                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine18_0
   \   000003                ; // Fall through to label ??Subroutine18_0
    838          
    839          /*********************************************************************
    840           * @fn      TransmitApp_SendTheMessage
    841           *
    842           * @brief   Send "the" message.
    843           *
    844           * @param   none
    845           *
    846           * @return  none
    847           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    848          void TransmitApp_SendTheMessage( void )
   \                     TransmitApp_SendTheMessage:
    849          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    850            uint16 len;
    851            uint8 tmp;
    852          
    853            do {
    854              // put the sequence number in the message
    855              tmp = HI_UINT8( TransmitApp_TransID );
   \                     ??TransmitApp_SendTheMessage_0:
   \   000005   90....       MOV     DPTR,#TransmitApp_TransID
   \   000008   E0           MOVX    A,@DPTR
   \   000009   C4           SWAP    A
   \   00000A   540F         ANL     A,#0xf
   \   00000C   FE           MOV     R6,A
    856              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \   00000D   C3           CLR     C
   \   00000E   940A         SUBB    A,#0xa
   \   000010   5004         JNC     ??TransmitApp_SendTheMessage_1
   \   000012   7830         MOV     R0,#0x30
   \   000014   8002         SJMP    ??TransmitApp_SendTheMessage_2
   \                     ??TransmitApp_SendTheMessage_1:
   \   000016   7837         MOV     R0,#0x37
    857              TransmitApp_Msg[2] = tmp;
   \                     ??TransmitApp_SendTheMessage_2:
   \   000018   E8           MOV     A,R0
   \   000019   2E           ADD     A,R6
   \   00001A   90....       MOV     DPTR,#TransmitApp_Msg + 2
   \   00001D   F0           MOVX    @DPTR,A
    858              tmp = LO_UINT8( TransmitApp_TransID );
   \   00001E   90....       MOV     DPTR,#TransmitApp_TransID
   \   000021   E0           MOVX    A,@DPTR
   \   000022   540F         ANL     A,#0xf
   \   000024   FE           MOV     R6,A
    859              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \   000025   C3           CLR     C
   \   000026   940A         SUBB    A,#0xa
   \   000028   5004         JNC     ??TransmitApp_SendTheMessage_3
   \   00002A   7830         MOV     R0,#0x30
   \   00002C   8002         SJMP    ??TransmitApp_SendTheMessage_4
   \                     ??TransmitApp_SendTheMessage_3:
   \   00002E   7837         MOV     R0,#0x37
    860              TransmitApp_Msg[3] = tmp;
   \                     ??TransmitApp_SendTheMessage_4:
   \   000030   E8           MOV     A,R0
   \   000031   2E           ADD     A,R6
   \   000032   90....       MOV     DPTR,#TransmitApp_Msg + 3
   \   000035   F0           MOVX    @DPTR,A
    861          
    862              len = TransmitApp_MaxDataLength;
    863          
    864          #if defined ( TRANSMITAPP_RANDOM_LEN )
    865              len = (uint8)(osal_rand() & 0x7F);
    866              if( len > TransmitApp_MaxDataLength || len == 0 )
    867                len = TransmitApp_MaxDataLength;
    868              else if ( len < 4 )
    869                len = 4;
    870          #endif
    871          	
    872              tmp = AF_DataRequest( &TransmitApp_DstAddr, &TransmitApp_epDesc,
    873                                     TRANSMITAPP_CLUSTERID_TESTMSG,
    874                                     len, TransmitApp_Msg,
    875                                    &TransmitApp_TransID,
    876                                     TRANSMITAPP_TX_OPTIONS,
    877                                     AF_DEFAULT_RADIUS );
   \   000036                ; Setup parameters for call to function AF_DataRequest
   \   000036   75..1E       MOV     ?V0 + 0,#0x1e
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003E   75....       MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
   \   000041   75....       MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   75....       MOV     ?V0 + 0,#TransmitApp_Msg & 0xff
   \   00004C   75....       MOV     ?V0 + 1,#(TransmitApp_Msg >> 8) & 0xff
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   000057   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005A   75..A1       MOV     ?V0 + 0,#-0x5f
   \   00005D   75..00       MOV     ?V0 + 1,#0x0
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   7920         MOV     R1,#0x20
   \   000067   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000069   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   00006B   7A..         MOV     R2,#TransmitApp_DstAddr & 0xff
   \   00006D   7B..         MOV     R3,#(TransmitApp_DstAddr >> 8) & 0xff
   \   00006F   12....       LCALL   ??AF_DataRequest?relay
   \   000072   7409         MOV     A,#0x9
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   E9           MOV     A,R1
   \   000078   FE           MOV     R6,A
    878              HalLedBlink ( HAL_LED_3, 1, 50, 200 );//Blink to indicate TX  microdjg
   \   000079                ; Setup parameters for call to function HalLedBlink
   \   000079   7CC8         MOV     R4,#-0x38
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   7B32         MOV     R3,#0x32
   \   00007F   7A01         MOV     R2,#0x1
   \   000081   7904         MOV     R1,#0x4
   \   000083   12....       LCALL   ??HalLedBlink?relay
    879          
    880          #if defined ( TRANSMITAPP_RANDOM_LEN )
    881              if ( tmp == afStatus_SUCCESS )
    882              {
    883                txAccum += len;
    884              }
    885          #endif
    886          
    887              if ( timesToSend )
   \   000086   90....       MOV     DPTR,#timesToSend
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   600A         JZ      ??TransmitApp_SendTheMessage_5
    888              {
    889                timesToSend--;
    890              }
    891            } while ( (timesToSend != 0) && (afStatus_SUCCESS == tmp) );
   \   00008C   14           DEC     A
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   6006         JZ      ??TransmitApp_SendTheMessage_5
   \   000090   EE           MOV     A,R6
   \   000091   7003         JNZ     $+5
   \   000093   02....       LJMP    ??TransmitApp_SendTheMessage_0 & 0xFFFF
    892          
    893            if ( afStatus_SUCCESS == tmp )
   \                     ??TransmitApp_SendTheMessage_5:
   \   000096   EE           MOV     A,R6
   \   000097   700E         JNZ     ??TransmitApp_SendTheMessage_6
    894            {
    895              pktCounter++;
   \   000099   90....       MOV     DPTR,#pktCounter
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   2401         ADD     A,#0x1
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   3400         ADDC    A,#0x0
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   8010         SJMP    ??TransmitApp_SendTheMessage_7
    896            }
    897            else
    898            {
    899              // Error, so wait (10 mSec) and try again.
    900              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_SEND_ERR_EVT, 10 );
   \                     ??TransmitApp_SendTheMessage_6:
   \   0000A7                ; Setup parameters for call to function osal_start_timerEx
   \   0000A7   7C0A         MOV     R4,#0xa
   \   0000A9   7D00         MOV     R5,#0x0
   \   0000AB   7A04         MOV     R2,#0x4
   \   0000AD   7B00         MOV     R3,#0x0
   \   0000AF   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   12....       LCALL   ??osal_start_timerEx?relay
    901            }
    902          }
   \                     ??TransmitApp_SendTheMessage_7:
   \   0000B7   02....       LJMP    ??Subroutine16_0 & 0xFFFF
    903          
    904          /*********************************************************************
    905           * @fn      TransmitApp_ChangeState
    906           *
    907           * @brief   Toggle the Sending/Waiting state flag
    908           *
    909           * @param   none
    910           *
    911           * @return  none
    912           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    913          void TransmitApp_ChangeState( void )
   \                     TransmitApp_ChangeState:
    914          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    915            if ( TransmitApp_State == TRANSMITAPP_STATE_WAITING )
   \   000004   90....       MOV     DPTR,#TransmitApp_State
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700D         JNZ     ??TransmitApp_ChangeState_0
    916            {
    917              TransmitApp_State = TRANSMITAPP_STATE_SENDING;
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
    918              TransmitApp_SetSendEvt();
   \   00000D                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   00000D   12....       LCALL   ??TransmitApp_SetSendEvt?relay
    919              timesToSend = TRANSMITAPP_INITIAL_MSG_COUNT;
   \   000010   90....       MOV     DPTR,#timesToSend
   \   000013   7402         MOV     A,#0x2
   \   000015   8001         SJMP    ??TransmitApp_ChangeState_1
    920            }
    921            else
    922            {
    923              TransmitApp_State = TRANSMITAPP_STATE_WAITING;
   \                     ??TransmitApp_ChangeState_0:
   \   000017   E4           CLR     A
   \                     ??TransmitApp_ChangeState_1:
   \   000018   F0           MOVX    @DPTR,A
    924            }
    925          }
   \   000019                REQUIRE ?Subroutine3
   \   000019                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    926          
    927          /*********************************************************************
    928           * @fn      TransmitApp_SetSendEvt
    929           *
    930           * @brief   Set the event flag
    931           *
    932           * @param   none
    933           *
    934           * @return  none
    935           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    936          void TransmitApp_SetSendEvt( void )
   \                     TransmitApp_SetSendEvt:
    937          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    938          #if defined( TRANSMITAPP_DELAY_SEND )
    939            // Adds a delay to sending the data
    940            osal_start_timerEx( TransmitApp_TaskID,
    941                              TRANSMITAPP_SEND_MSG_EVT, TRANSMITAPP_SEND_DELAY );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   7CC8         MOV     R4,#-0x38
   \   000006   7D00         MOV     R5,#0x0
   \   000008   7A01         MOV     R2,#0x1
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??osal_start_timerEx?relay
    942          #else
    943            // No Delay - just send the data
    944            osal_set_event( TransmitApp_TaskID, TRANSMITAPP_SEND_MSG_EVT );
    945          #endif
    946          }
   \   000014   80..         SJMP    ?Subroutine3
    947          
    948          /*********************************************************************
    949           * @fn      TransmitApp_DisplayResults
    950           *
    951           * @brief   Display the results and clear the accumulators
    952           *
    953           * @param   none
    954           *
    955           * @return  none
    956           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    957          void TransmitApp_DisplayResults( void )
   \                     TransmitApp_DisplayResults:
    958          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    959          #ifdef LCD_SUPPORTED
    960            #define LCD_W  16
    961            uint32 rxShdw, txShdw, tmp;
    962            byte lcd_buf[LCD_W+1];
    963            byte idx;
    964          #endif
    965          
    966            // The OSAL timers are not real-time, so calculate the actual time expired.
    967            uint32 msecs = osal_GetSystemClock() - clkShdw;
   \   000005                ; Setup parameters for call to function osal_GetSystemClock
   \   000005   12....       LCALL   ??osal_GetSystemClock?relay
   \   000008   8A..         MOV     ?V0 + 4,R2
   \   00000A   8B..         MOV     ?V0 + 5,R3
   \   00000C   8C..         MOV     ?V0 + 6,R4
   \   00000E   8D..         MOV     ?V0 + 7,R5
   \   000010   90....       MOV     DPTR,#clkShdw
   \   000013   78..         MOV     R0,#?V0 + 4
   \   000015   12....       LCALL   ?L_SUB_X
    968            clkShdw = osal_GetSystemClock();
   \   000018                ; Setup parameters for call to function osal_GetSystemClock
   \   000018   12....       LCALL   ??osal_GetSystemClock?relay
   \   00001B   90....       MOV     DPTR,#clkShdw
   \   00001E   12....       LCALL   ?XSTORE_R2345
    969          
    970            rxTotal += rxAccum;
   \   000021   90....       MOV     DPTR,#rxAccum
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_MOV_X
   \   000029   90....       MOV     DPTR,#rxTotal
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?L_ADD_TO_X
    971            txTotal += txAccum;
   \   000031   90....       MOV     DPTR,#txAccum
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?L_MOV_X
   \   000039   90....       MOV     DPTR,#txTotal
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?L_ADD_TO_X
    972          
    973          #if defined ( LCD_SUPPORTED )
    974            rxShdw = (rxAccum * 1000 + msecs/2) / msecs;
    975            txShdw = (txAccum * 1000 + msecs/2) / msecs;
    976          
    977            osal_memset( lcd_buf, ' ', LCD_W );
    978            lcd_buf[LCD_W] = NULL;
    979          
    980            idx = 4;
    981            tmp = (rxShdw >= 100000) ? 99999 : rxShdw;
    982            do
    983            {
    984              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
    985              tmp /= 10;
    986            } while ( tmp );
    987          
    988            idx = LCD_W-1;
    989            tmp = rxTotal;
    990            do
    991            {
    992              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
    993              tmp /= 10;
    994            } while ( tmp );
    995          
    996            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_1 );
    997            osal_memset( lcd_buf, ' ', LCD_W );
    998          
    999            idx = 4;
   1000            tmp = (txShdw >= 100000) ? 99999 : txShdw;
   1001            do
   1002            {
   1003              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
   1004              tmp /= 10;
   1005            } while ( tmp );
   1006          
   1007            idx = LCD_W-1;
   1008            tmp = txTotal;
   1009            do
   1010            {
   1011              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
   1012              tmp /= 10;
   1013            } while ( tmp );
   1014          
   1015            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
   1016          
   1017          #elif defined( MT_TASK )
   1018            DEBUG_INFO( COMPID_APP, SEVERITY_INFORMATION, 3,
   1019                        rxAccum, (uint16)msecs, (uint16)rxTotal );
   \   000041                ; Setup parameters for call to function debug_msg
   \   000041   90....       MOV     DPTR,#rxTotal
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?L_MOV_X
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   78..         MOV     R0,#?V0 + 4
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   90....       MOV     DPTR,#rxAccum
   \   000056   78..         MOV     R0,#?V0 + 0
   \   000058   12....       LCALL   ?L_MOV_X
   \   00005B   AC..         MOV     R4,?V0 + 0
   \   00005D   AD..         MOV     R5,?V0 + 1
   \   00005F   7B03         MOV     R3,#0x3
   \   000061   7A03         MOV     R2,#0x3
   \   000063   7907         MOV     R1,#0x7
   \   000065   12....       LCALL   ??debug_msg?relay
   \   000068   7404         MOV     A,#0x4
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
   1020          #else
   1021            (void)msecs;  // Not used when no output
   1022          #endif
   1023          
   1024            if ( (rxAccum == 0) && (txAccum == 0) )
   \   00006D   90....       MOV     DPTR,#rxAccum
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?L_MOV_X
   \   000075   E5..         MOV     A,?V0 + 0
   \   000077   45..         ORL     A,?V0 + 1
   \   000079   45..         ORL     A,?V0 + 2
   \   00007B   45..         ORL     A,?V0 + 3
   \   00007D   7023         JNZ     ??TransmitApp_DisplayResults_0
   \   00007F   90....       MOV     DPTR,#txAccum
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?L_MOV_X
   \   000087   E5..         MOV     A,?V0 + 0
   \   000089   45..         ORL     A,?V0 + 1
   \   00008B   45..         ORL     A,?V0 + 2
   \   00008D   45..         ORL     A,?V0 + 3
   \   00008F   7011         JNZ     ??TransmitApp_DisplayResults_0
   1025            {
   1026              osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT );
   \   000091                ; Setup parameters for call to function osal_stop_timerEx
   \   000091   7A02         MOV     R2,#0x2
   \   000093   7B00         MOV     R3,#0x0
   \   000095   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F9           MOV     R1,A
   \   00009A   12....       LCALL   ??osal_stop_timerEx?relay
   1027              timerOn = FALSE;
   \   00009D   90....       MOV     DPTR,#timerOn
   \   0000A0   E4           CLR     A
   \   0000A1   F0           MOVX    @DPTR,A
   1028            }
   1029          
   1030            rxAccum = txAccum = 0;
   \                     ??TransmitApp_DisplayResults_0:
   \   0000A2   90....       MOV     DPTR,#txAccum
   \   0000A5   E4           CLR     A
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   90....       MOV     DPTR,#rxAccum
   \   0000B0   F0           MOVX    @DPTR,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   F0           MOVX    @DPTR,A
   1031          }
   \   0000B7   02....       LJMP    ?Subroutine1 & 0xFFFF
   1032          
   1033          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1034          void initUart(halUARTCBack_t pf)
   \                     initUart:
   1035          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1036            halUARTCfg_t uartConfig;
   1037            
   1038            uartConfig.configured           = TRUE;              
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7401         MOV     A,#0x1
   \   000011   F0           MOVX    @DPTR,A
   1039            uartConfig.baudRate             = HAL_UART_BR_9600;//HAL_UART_BR_38400;  //HAL_UART_BR_19200;
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
   1040            uartConfig.flowControl          = FALSE;              
   \   000017   7402         MOV     A,#0x2
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E4           CLR     A
   \   00001D   F0           MOVX    @DPTR,A
   1041            uartConfig.flowControlThreshold = 48;
   \   00001E   7403         MOV     A,#0x3
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7430         MOV     A,#0x30
   \   000025   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   1042            uartConfig.rx.maxBufSize        = RX_BUF_LEN;
   \                     ??CrossCallReturnLabel_30:
   \   000028   740A         MOV     A,#0xa
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   12....       LCALL   ?Subroutine8 & 0xFFFF
   1043            uartConfig.tx.maxBufSize        = 128;
   \                     ??CrossCallReturnLabel_31:
   \   000030   7412         MOV     A,#0x12
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?Subroutine8 & 0xFFFF
   1044            
   1045            uartConfig.idleTimeout          = 6;   
   \                     ??CrossCallReturnLabel_32:
   \   000038   7405         MOV     A,#0x5
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   7406         MOV     A,#0x6
   \   00003F   F0           MOVX    @DPTR,A
   1046            uartConfig.intEnable            = TRUE;              
   \   000040   7416         MOV     A,#0x16
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   7401         MOV     A,#0x1
   \   000047   F0           MOVX    @DPTR,A
   1047            uartConfig.callBackFunc         = pf;
   \   000048   741B         MOV     A,#0x1b
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   EA           MOV     A,R2
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   EB           MOV     A,R3
   \   000051   12....       LCALL   ?Subroutine5 & 0xFFFF
   1048            
   1049            HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
   \                     ??CrossCallReturnLabel_1:
   \   000054   7900         MOV     R1,#0x0
   \   000056   12....       LCALL   ??HalUARTOpen?relay
   1050          }
   \   000059   741D         MOV     A,#0x1d
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005E   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7480         MOV     A,#-0x80
   \   000002                REQUIRE ??Subroutine19_0
   \   000002                ; // Fall through to label ??Subroutine19_0
   1051          
   1052          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1053          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
   1054          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 128
   \   000005   7480         MOV     A,#-0x80
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1055            uint8 pBuf[RX_BUF_LEN];
   1056            uint16 len;
   1057            static uint16 destAddr;
                                 ^
Warning[Pe177]: variable "destAddr" was declared but never referenced
   1058            ModBusFrame_t *pRxFrame;
                                  ^
Warning[Pe177]: variable "pRxFrame" was declared but never referenced
   1059            zAddrType_t dstAddr;
                               ^
Warning[Pe177]: variable "dstAddr" was declared but never referenced
   1060            #if defined (GTA_WHFRFID_R1) 
   1061            RC623Frame_t *pRC623Frame;
   1062            uint8 Frame[15];//ÁÙÊ±Éè¶¨µÄ´óÐ¡  
   1063            uint8 data[10];//
   1064            uint16 FrameLen;
   1065            uint8 i;
   1066            #endif
   1067           
   1068              len = HalUARTRead( HAL_UART_PORT_0, pBuf, RX_BUF_LEN );
   \   00000A                ; Setup parameters for call to function HalUARTRead
   \   00000A   7C80         MOV     R4,#-0x80
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AA82         MOV     R2,DPL
   \   000016   AB83         MOV     R3,DPH
   \   000018   7900         MOV     R1,#0x0
   \   00001A   12....       LCALL   ??HalUARTRead?relay
   \   00001D   8A..         MOV     ?V0 + 0,R2
   \   00001F   8B..         MOV     ?V0 + 1,R3
   1069              if ( len>0 ) 
   \   000021   EA           MOV     A,R2
   \   000022   45..         ORL     A,?V0 + 1
   \   000024   606B         JZ      ??uartRxCB_0
   1070              {
   1071                //SentDataInBind(pBuf,len);
   1072                if(!ZG_DEVICE_COORDINATOR_TYPE)//·ÇÐ­µ÷Æ÷
   \   000026   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   90....       MOV     DPTR,#TestDirectSent_DstAddr + 8
   \   00002D   600A         JZ      ??uartRxCB_1
   1073                {
   1074                  #if defined (GTA_WHFRFID_R1) 
   1075                  UnPackRC623Data(pBuf,pRC623Frame);
   1076                  if(pRC623Frame->Comfirm==FRAME_CHECK_RIGHT)
   1077                  {
   1078                    switch(pRC623Frame->Cmd)
   1079                    {
   1080                        case RFID_CMD_SET_ISOTYPE:
   1081          
   1082                          break;
   1083                        case RFID_CMD_SELECT_CARD:
   1084          
   1085                          break;
   1086                        case RFID_CMD_GET_CARD_ID:
   1087                          data[0]=7;
   1088                          data[1]=MODBUS_RFID_CMD_GET_CARD_ID&0x00FF;
   1089                          data[2]=(MODBUS_RFID_CMD_GET_CARD_ID>>8)&0x00FF;
   1090                          data[3]=pRC623Frame->Data[1];
   1091                          data[4]=pRC623Frame->Data[2];
   1092                          data[5]=pRC623Frame->Data[3];
   1093                          data[6]=pRC623Frame->Data[4];
   1094                          //data[4]=pRC623Frame->Data[3];
   1095                          FrameLen=FramePackage(Frame,NativeAddr,0x03,data,7);//´ò°ü
   1096                          SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1097                          break;
   1098                        case RFID_CMD_FIND_ISO14443_CARD:
   1099                          //for(i=0;i<RC623Frame.DataLen;i++)
   1100                          //{
   1101                          //  RC623Frame.Data
   1102                          //}
   1103                          data[0]=5;//2+1+2
   1104                          data[1]=MODBUS_RFID_CMD_FIND_ISO14443_CARD&0x00FF;
   1105                          data[2]=(MODBUS_RFID_CMD_FIND_ISO14443_CARD>>8)&0x00FF;
   1106                          data[3]=pRC623Frame->Data[0];
   1107                          data[4]=pRC623Frame->Data[1];
   1108                          data[5]=pRC623Frame->Data[2];
   1109                          data[6]=pRC623Frame->Data[3];
   1110                          FrameLen=FramePackage(Frame,NativeAddr,0x03,data,6);//´ò°ü
   1111                          SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1112          
   1113                          break;
   1114                        case RFID_CMD_CONFIG_KEY:
   1115          
   1116                          break;
   1117                        case RFID_CMD_READ_VAL:
   1118          
   1119                          break;
   1120                        default:
   1121                          break;
   1122                    }
   1123                  }
   1124                  #else
   1125                  TestDirectSent_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;//µØÖ·´«ËÍ
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   1126                  TestDirectSent_DstAddr.endPoint = 0;
   1127                  TestDirectSent_DstAddr.addr.shortAddr = 0x0000;
   \                     ??CrossCallReturnLabel_27:
   \   000034   90....       MOV     DPTR,#TestDirectSent_DstAddr
   \   000037   8003         SJMP    ??CrossCallReturnLabel_4
   1128              
   1129                  AF_DataRequest( 
   1130                                &TestDirectSent_DstAddr,               //µØÖ·
   1131                                &TransmitApp_epDesc,                //ÃèÊö
   1132                                TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1133                                  len,                                  //len
   1134                                  pBuf,//TransmitApp_Msg,             //DATA
   1135                                &TransmitApp_TransID,               //
   1136                                TRANSMITAPP_TX_OPTIONS,
   1137                                AF_DEFAULT_RADIUS 
   1138                                );
   1139                  HalLedBlink (HAL_LED_3, 1, 50, 200);
   1140                  #endif
   1141                }
   1142                else
   1143                {
   1144                  //destAddr=BUILD_UINT16(pBuf[1],pBuf[0]);
   1145                  if(ZG_DEVICE_COORDINATOR_TYPE)
   1146                  {
   1147                    TestDirectSent_DstAddr.addrMode=(afAddrMode_t)AddrBroadcast;//Addr16Bit;//µØÖ·´«ËÍ
   \                     ??uartRxCB_1:
   \   000039   12....       LCALL   ?Subroutine7 & 0xFFFF
   1148                    TestDirectSent_DstAddr.endPoint = 0;
   1149                    TestDirectSent_DstAddr.addr.shortAddr = 0xffff;//destAddr;
   \                     ??CrossCallReturnLabel_4:
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   F0           MOVX    @DPTR,A
   1150                    //TestDirectSent_DstAddr.addr.extAddr
   1151                    
   1152                    AF_DataRequest( 
   1153                                &TestDirectSent_DstAddr,               //µØÖ·
   1154                                &TransmitApp_epDesc,                //ÃèÊö
   1155                                TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1156                                  len,                                  //len
   1157                                  pBuf,//TransmitApp_Msg,             //DATA
   1158                                &TransmitApp_TransID,               //
   1159                                TRANSMITAPP_TX_OPTIONS,
   1160                                AF_DEFAULT_RADIUS 
   1161                                );
   \   00003F                ; Setup parameters for call to function AF_DataRequest
   \   00003F   75..1E       MOV     ?V0 + 2,#0x1e
   \   000042   78..         MOV     R0,#?V0 + 2
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   75....       MOV     ?V0 + 2,#TransmitApp_TransID & 0xff
   \   00004A   75....       MOV     ?V0 + 3,#(TransmitApp_TransID >> 8) & 0xff
   \   00004D   78..         MOV     R0,#?V0 + 2
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   7403         MOV     A,#0x3
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   8582..       MOV     ?V0 + 2,DPL
   \   00005A   8583..       MOV     ?V0 + 3,DPH
   \   00005D   78..         MOV     R0,#?V0 + 2
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   78..         MOV     R0,#?V0 + 0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   75..A1       MOV     ?V0 + 0,#-0x5f
   \   00006A   75..00       MOV     ?V0 + 1,#0x0
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   7920         MOV     R1,#0x20
   \   000074   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000076   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   000078   7A..         MOV     R2,#TestDirectSent_DstAddr & 0xff
   \   00007A   7B..         MOV     R3,#(TestDirectSent_DstAddr >> 8) & 0xff
   \   00007C   12....       LCALL   ??AF_DataRequest?relay
   \   00007F   7409         MOV     A,#0x9
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   1162                    HalLedBlink (HAL_LED_3, 1, 50, 200);
   \   000084                ; Setup parameters for call to function HalLedBlink
   \   000084   7CC8         MOV     R4,#-0x38
   \   000086   7D00         MOV     R5,#0x0
   \   000088   7B32         MOV     R3,#0x32
   \   00008A   7A01         MOV     R2,#0x1
   \   00008C   7904         MOV     R1,#0x4
   \   00008E   12....       LCALL   ??HalLedBlink?relay
   1163                  }
   1164                }
   1165              }
   1166          
   1167          }
   \                     ??uartRxCB_0:
   \   000091   7480         MOV     A,#-0x80
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   \   000096   7F04         MOV     R7,#0x4
   \   000098   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   90....       MOV     DPTR,#TestDirectSent_DstAddr
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   22           RET
   1168          /*********************************************************************
   1169          *********************************************************************/
   1170          
   1171          
   1172          
   1173          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1174          void FrameUnPackage(uint8 *pBuf,ModBusFrame_t *pFrame)
   \                     FrameUnPackage:
   1175          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1176             uint16 crc;
   1177             uint8 datalen;
   1178             uint8 cmd;
   1179             uint8 i;
   1180             
   1181             if(pBuf[0]==FRAME_HEAD)
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   647E         XRL     A,#0x7e
   \   000014   6003         JZ      $+5
   \   000016   02....       LJMP    ??FrameUnPackage_0 & 0xFFFF
   1182             {
   1183             	cmd=pBuf[2];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 5,A
   1184          	switch(cmd)
   \   00001E   14           DEC     A
   \   00001F   6024         JZ      ??FrameUnPackage_1
   \   000021   24FE         ADD     A,#-0x2
   \   000023   6020         JZ      ??FrameUnPackage_1
   \   000025   24FE         ADD     A,#-0x2
   \   000027   601C         JZ      ??FrameUnPackage_1
   \   000029   14           DEC     A
   \   00002A   6019         JZ      ??FrameUnPackage_1
   \   00002C   24F7         ADD     A,#-0x9
   \   00002E   607E         JZ      ??FrameUnPackage_2
   \   000030   14           DEC     A
   \   000031   7003         JNZ     $+5
   \   000033   02....       LJMP    ??FrameUnPackage_3 & 0xFFFF
   \   000036   14           DEC     A
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??FrameUnPackage_4 & 0xFFFF
   \   00003C   14           DEC     A
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??FrameUnPackage_5 & 0xFFFF
   \   000042   02....       LJMP    ??FrameUnPackage_6 & 0xFFFF
   1185          		{
   1186          		case FUN_CODE_READ_COIL_STATE:		
   1187          		case FUN_CODE_READ_HOLDING_REGISTERS:
   1188          			datalen =4;
   1189          			break;
   1190          		case 0x05:	
   1191          		case 0x06:
   1192          			datalen =4;
   \                     ??FrameUnPackage_1:
   \   000045   75..04       MOV     ?V0 + 4,#0x4
   1193          			break;
   1194          		case 0x0F:
   1195          			datalen =5+((BUILD_UINT16(pBuf[6],pBuf[5])+7)/8);//2+2+1+(N+7)/8
   1196          			break;
   1197          		case 0x10:
   1198          			datalen=5+((BUILD_UINT16(pBuf[6],pBuf[5])*2));//2+2+1+2N
   1199          			break;
   1200          		case 0x11:
   1201                                  datalen = 0;
   1202                                  break;
   1203          		case 0x12:
   1204          			datalen = 1;	//1+ 6;
   1205          			break;
   1206          		default:pFrame->COMFIRM=FRAME_CHECK_CMD_WRONG;
   1207          			return ;
   1208          		}
   1209             	crc=BUILD_UINT16(pBuf[3+datalen],pBuf[3+datalen+1]);
   \                     ??FrameUnPackage_7:
   \   000048   85....       MOV     ?V0 + 2,?V0 + 4
   \   00004B   E5..         MOV     A,?V0 + 0
   \   00004D   25..         ADD     A,?V0 + 2
   \   00004F   F8           MOV     R0,A
   \   000050   EB           MOV     A,R3
   \   000051   3400         ADDC    A,#0x0
   \   000053   F9           MOV     R1,A
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FA           MOV     R2,A
   \   00005D   8882         MOV     DPL,R0
   \   00005F   8983         MOV     DPH,R1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F9           MOV     R1,A
   \   000067   EA           MOV     A,R2
   \   000068   2400         ADD     A,#0x0
   \   00006A   F5..         MOV     ?V0 + 2,A
   \   00006C   E4           CLR     A
   \   00006D   39           ADDC    A,R1
   \   00006E   F5..         MOV     ?V0 + 3,A
   1210               if(crc==Crc16Code(pBuf+1,datalen+2))//pBuf+1  ²»¼ÆHEAD  ³¤¶ÈÊÇ1+1+1-1
   \   000070                ; Setup parameters for call to function Crc16Code
   \   000070   7402         MOV     A,#0x2
   \   000072   25..         ADD     A,?V0 + 4
   \   000074   F9           MOV     R1,A
   \   000075   85..82       MOV     DPL,?V0 + 0
   \   000078   8B83         MOV     DPH,R3
   \   00007A   A3           INC     DPTR
   \   00007B   AA82         MOV     R2,DPL
   \   00007D   AB83         MOV     R3,DPH
   \   00007F   12....       LCALL   ??Crc16Code?relay
   \   000082   EA           MOV     A,R2
   \   000083   65..         XRL     A,?V0 + 2
   \   000085   7003         JNZ     ??FrameUnPackage_8
   \   000087   EB           MOV     A,R3
   \   000088   65..         XRL     A,?V0 + 3
   \                     ??FrameUnPackage_8:
   \   00008A   6003         JZ      $+5
   \   00008C   02....       LJMP    ??FrameUnPackage_9 & 0xFFFF
   1211               	{
   1212               		pFrame->CMD=cmd;
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   A3           INC     DPTR
   \   000094   E5..         MOV     A,?V0 + 5
   \   000096   12....       LCALL   ?Subroutine10 & 0xFFFF
   1213          		pFrame->DATALEN=datalen;
   \                     ??CrossCallReturnLabel_10:
   \   000099   A3           INC     DPTR
   \   00009A   E5..         MOV     A,?V0 + 4
   \   00009C   F0           MOVX    @DPTR,A
   1214          		pFrame->ADDR=pBuf[1];
   \   00009D   85..82       MOV     DPL,?V0 + 0
   \   0000A0   85..83       MOV     DPH,?V0 + 1
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   F0           MOVX    @DPTR,A
   1215          		for(i=0;i<datalen;i++)
   \   0000AA   7A00         MOV     R2,#0x0
   \   0000AC   8079         SJMP    ??FrameUnPackage_10
   \                     ??FrameUnPackage_2:
   \   0000AE   8A82         MOV     DPL,R2
   \   0000B0   8B83         MOV     DPH,R3
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FA           MOV     R2,A
   \   0000BA   85..82       MOV     DPL,?V0 + 0
   \   0000BD   8B83         MOV     DPH,R3
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F9           MOV     R1,A
   \   0000C6   EA           MOV     A,R2
   \   0000C7   2407         ADD     A,#0x7
   \   0000C9   F5..         MOV     ?V0 + 2,A
   \   0000CB   E9           MOV     A,R1
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   F5..         MOV     ?V0 + 3,A
   \   0000D0   7403         MOV     A,#0x3
   \   0000D2   78..         MOV     R0,#?V0 + 2
   \   0000D4   12....       LCALL   ?US_SHR
   \   0000D7   E5..         MOV     A,?V0 + 2
   \                     ??FrameUnPackage_11:
   \   0000D9   2405         ADD     A,#0x5
   \   0000DB   F5..         MOV     ?V0 + 4,A
   \   0000DD   02....       LJMP    ??FrameUnPackage_7 & 0xFFFF
   \                     ??FrameUnPackage_3:
   \   0000E0   8A82         MOV     DPL,R2
   \   0000E2   8B83         MOV     DPH,R3
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   C3           CLR     C
   \   0000EC   33           RLC     A
   \   0000ED   80EA         SJMP    ??FrameUnPackage_11
   \                     ??FrameUnPackage_4:
   \   0000EF   75..00       MOV     ?V0 + 4,#0x0
   \   0000F2   02....       LJMP    ??FrameUnPackage_7 & 0xFFFF
   \                     ??FrameUnPackage_5:
   \   0000F5   75..01       MOV     ?V0 + 4,#0x1
   \   0000F8   02....       LJMP    ??FrameUnPackage_7 & 0xFFFF
   \                     ??FrameUnPackage_6:
   \   0000FB   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000FE   7403         MOV     A,#0x3
   \   000100   8037         SJMP    ??FrameUnPackage_12
   1216                              {
   1217                              pFrame->pData[i]=pBuf[3+i];
   \                     ??FrameUnPackage_13:
   \   000102   8A82         MOV     DPL,R2
   \   000104   A882         MOV     R0,DPL
   \   000106   E5..         MOV     A,?V0 + 0
   \   000108   28           ADD     A,R0
   \   000109   F582         MOV     DPL,A
   \   00010B   E5..         MOV     A,?V0 + 1
   \   00010D   3400         ADDC    A,#0x0
   \   00010F   F583         MOV     DPH,A
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   C0E0         PUSH    A
   \   000117   EE           MOV     A,R6
   \   000118   28           ADD     A,R0
   \   000119   F582         MOV     DPL,A
   \   00011B   EF           MOV     A,R7
   \   00011C   3400         ADDC    A,#0x0
   \   00011E   F583         MOV     DPH,A
   \   000120   A3           INC     DPTR
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   D0E0         POP     A
   \   000125   F0           MOVX    @DPTR,A
   1218                              }
   \   000126   0A           INC     R2
   \                     ??FrameUnPackage_10:
   \   000127   EA           MOV     A,R2
   \   000128   C3           CLR     C
   \   000129   95..         SUBB    A,?V0 + 4
   \   00012B   40D5         JC      ??FrameUnPackage_13
   1219                          pFrame->COMFIRM=FRAME_CHECK_RIGHT;
   \   00012D   12....       LCALL   ?Subroutine13 & 0xFFFF
   1220                          return ;//ÍêÈ«ÕýÈ· ²¢°Ñ°ü·µ»Ø
   1221               	}
   1222          	 	
   1223             }
   \                     ??CrossCallReturnLabel_17:
   \   000130   7401         MOV     A,#0x1
   \   000132   8005         SJMP    ??FrameUnPackage_12
   1224             else
   1225             {
   1226             	 pFrame->COMFIRM=FRAME_CHECK_HEAD_WRONG;
   \                     ??FrameUnPackage_0:
   \   000134   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000137   7402         MOV     A,#0x2
   \                     ??FrameUnPackage_12:
   \   000139   F0           MOVX    @DPTR,A
   1227          	 return ;
   1228             }
   \                     ??FrameUnPackage_9:
   \   00013A                REQUIRE ?Subroutine1
   \   00013A                ; // Fall through to label ?Subroutine1
   1229               
   1230          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EE           MOV     A,R6
   \   000001   2417         ADD     A,#0x17
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET
   1231          
   1232          
   1233          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1234          uint16 Crc16Code(uint8 *str, uint8 len)//Modbus Ckeck Code.//LO First
   \                     Crc16Code:
   1235          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FC           MOV     R4,A
   1236              uint16 code = 0xFFFF;
   \   00000B   7AFF         MOV     R2,#-0x1
   \   00000D   7BFF         MOV     R3,#-0x1
   1237              uint16 Poly = 0xA001;
   1238          // Dnp is 0x3D65 or A6BC
   1239          
   1240              int flag = 0;
   \   00000F   7E00         MOV     R6,#0x0
   1241              int j = 0;
   \   000011   7800         MOV     R0,#0x0
   \   000013   7900         MOV     R1,#0x0
   1242          
   1243              for(j=0; j<len; j++)
   \   000015   802D         SJMP    ??Crc16Code_0
   1244              {
   1245          		code ^= (uint16) (*str);
   \                     ??Crc16Code_1:
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6A           XRL     A,R2
   \   000019   FA           MOV     R2,A
   1246          		for(int i=0; i<8;i++)
   \   00001A   7D08         MOV     R5,#0x8
   1247          		{
   1248          			if ( code & 0x0001 ) flag = 1;
   \                     ??Crc16Code_2:
   \   00001C   EA           MOV     A,R2
   \   00001D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001F   5002         JNC     ??Crc16Code_3
   \   000021   7E01         MOV     R6,#0x1
   1249          			code = code>>1;
   \                     ??Crc16Code_3:
   \   000023   EB           MOV     A,R3
   \   000024   C3           CLR     C
   \   000025   13           RRC     A
   \   000026   FB           MOV     R3,A
   \   000027   EA           MOV     A,R2
   \   000028   13           RRC     A
   \   000029   FA           MOV     R2,A
   1250          			if ( flag )
   \   00002A   EE           MOV     A,R6
   \   00002B   600A         JZ      ??Crc16Code_4
   1251          			{
   1252          				code ^= Poly;
   \   00002D   7401         MOV     A,#0x1
   \   00002F   6A           XRL     A,R2
   \   000030   FA           MOV     R2,A
   \   000031   74A0         MOV     A,#-0x60
   \   000033   6B           XRL     A,R3
   \   000034   FB           MOV     R3,A
   1253          				flag = 0;
   \   000035   7E00         MOV     R6,#0x0
   1254          			}
   1255          		}
   \                     ??Crc16Code_4:
   \   000037   1D           DEC     R5
   \   000038   ED           MOV     A,R5
   \   000039   70E1         JNZ     ??Crc16Code_2
   1256          		str ++;
   \   00003B   A3           INC     DPTR
   1257              }
   \   00003C   E8           MOV     A,R0
   \   00003D   2401         ADD     A,#0x1
   \   00003F   08           INC     R0
   \   000040   E9           MOV     A,R1
   \   000041   3400         ADDC    A,#0x0
   \   000043   F9           MOV     R1,A
   \                     ??Crc16Code_0:
   \   000044   8C..         MOV     ?V0 + 0,R4
   \   000046   C3           CLR     C
   \   000047   E8           MOV     A,R0
   \   000048   95..         SUBB    A,?V0 + 0
   \   00004A   E9           MOV     A,R1
   \   00004B   9400         SUBB    A,#0x0
   \   00004D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00004F   65D0         XRL     A,PSW
   \   000051   33           RLC     A
   \   000052   40C3         JC      ??Crc16Code_1
   1258              return code;
   \   000054   02....       LJMP    ??Subroutine16_0 & 0xFFFF
   1259          }
   1260          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B32         MOV     R3,#0x32
   \   000002   7A01         MOV     R2,#0x1
   \   000004   7904         MOV     R1,#0x4
   \   000006   12....       LCALL   ??HalLedBlink?relay
   \   000009                REQUIRE ??Subroutine16_0
   \   000009                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1261          void SentDataInBind(uint8 *pdata,uint16 len)
   \                     SentDataInBind:
   1262          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1263            //uint8 data[]="hello";
   1264               AF_DataRequest( 
   1265                              &TransmitApp_DstAddr,               //µØÖ·
   1266                              &TransmitApp_epDesc,                //ÃèÊö
   1267                              TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1268                              len,                                  //len
   1269                              pdata,//TransmitApp_Msg,             //DATA
   1270                              &TransmitApp_TransID,               //
   1271                              TRANSMITAPP_TX_OPTIONS,
   1272                              AF_DEFAULT_RADIUS 
   1273                              );
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   8A..         MOV     ?V0 + 0,R2
   \   00001A   8B..         MOV     ?V0 + 1,R3
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   8C..         MOV     ?V0 + 0,R4
   \   000023   8D..         MOV     ?V0 + 1,R5
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..A1       MOV     ?V0 + 0,#-0x5f
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7920         MOV     R1,#0x20
   \   000037   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000039   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   00003B   7A..         MOV     R2,#TransmitApp_DstAddr & 0xff
   \   00003D   7B..         MOV     R3,#(TransmitApp_DstAddr >> 8) & 0xff
   \   00003F   12....       LCALL   ??AF_DataRequest?relay
   \   000042   7409         MOV     A,#0x9
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   1274               HalLedBlink (HAL_LED_3, 1, 50, 300);
   \   000047                ; Setup parameters for call to function HalLedBlink
   \   000047   7C2C         MOV     R4,#0x2c
   \   000049   7D01         MOV     R5,#0x1
   \   00004B   02....       LJMP    ?Subroutine0 & 0xFFFF
   1275          }
   1276          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1277          void SendBindRequest(void)
   \                     SendBindRequest:
   1278          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1279              zAddrType_t dstAddr;
   1280              dstAddr.addrMode = Addr16Bit;
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
   1281              dstAddr.addr.shortAddr = 0x0000; // Coordinator
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
   1282              ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
   1283                            TransmitApp_epDesc.endPoint,
   1284                            TRANSMITAPP_PROFID,
   1285                            TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
   1286                            TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
   1287                            FALSE );
   \   00001C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001C   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00001F   8A..         MOV     ?V0 + 0,R2
   \   000021   8B..         MOV     ?V0 + 1,R3
   \   000023   AC..         MOV     R4,?V0 + 0
   \   000025   AD..         MOV     R5,?V0 + 1
   \   000027   75....       MOV     ?V0 + 0,#TransmitApp_ClusterList & 0xff
   \   00002A   75....       MOV     ?V0 + 1,#(TransmitApp_ClusterList >> 8) & 0xff
   \   00002D                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   00002D   75..00       MOV     ?V0 + 2,#0x0
   \   000030   78..         MOV     R0,#?V0 + 2
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..01       MOV     ?V0 + 2,#0x1
   \   00003D   78..         MOV     R0,#?V0 + 2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..01       MOV     ?V0 + 0,#0x1
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..05       MOV     ?V0 + 0,#0x5
   \   000052   75..0F       MOV     ?V0 + 1,#0xf
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   90....       MOV     DPTR,#TransmitApp_epDesc
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   7409         MOV     A,#0x9
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
   \   000068   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   00006B   7409         MOV     A,#0x9
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   1288              HalLedBlink (HAL_LED_1, 1, 50, 300);
   \   000070                ; Setup parameters for call to function HalLedBlink
   \   000070   7C2C         MOV     R4,#0x2c
   \   000072   7D01         MOV     R5,#0x1
   \   000074   7B32         MOV     R3,#0x32
   \   000076   7A01         MOV     R2,#0x1
   \   000078   7901         MOV     R1,#0x1
   \   00007A   12....       LCALL   ??HalLedBlink?relay
   1289          }
   \   00007D   7409         MOV     A,#0x9
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   7F03         MOV     R7,#0x3
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
   1290          
   1291          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1292          void ReportData(ModBusFrame_t *pRxFrame)
   \                     ReportData:
   1293          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1294           /* 
   1295            #if defined ( GTA_WWSB_R1 ) //ÓêµÎ´«¸ÐÆ÷   
   1296            uint8 Frame[10];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
   1297            uint8 data[3];//GTA_WWSB_R1 Êý¾ÝÎª3
   1298            #endif
   1299            #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷   
   1300            uint8 Frame[10];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
   1301            uint8 data[5];//GTA_WWSB_R1 Êý¾ÝÎª3
   1302            #endif
   1303          */
   1304          
   1305            #if defined (GTA_WHFRFID_R1)
   1306            RC623Frame_t pframe;
   1307            uint16 cmd;
   1308            #endif
   1309          
   1310            uint8 Frame[20];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
   1311            uint8 data[10];//
   1312            uint16 i=0,j=0;
                          ^
Warning[Pe177]: variable "i" was declared but never referenced

    uint16 i=0,j=0;
               ^
"D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c",1312  Warning[Pe177]: 
          variable "j" was declared but never referenced
   1313            uint8 led=0;
                         ^
Warning[Pe177]: variable "led" was declared but never referenced
   1314          
   1315            
   1316            uint16 temp;
   1317            uint16 FrameLen;
   1318            switch(pRxFrame->CMD)
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   24FD         ADD     A,#-0x3
   \   000016   600D         JZ      ??ReportData_0
   \   000018   24F2         ADD     A,#-0xe
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??ReportData_1 & 0xFFFF
   \   00001F   14           DEC     A
   \   000020   6046         JZ      ??ReportData_2
   \   000022   02....       LJMP    ??ReportData_3 & 0xFFFF
   1319                {
   1320                case FUN_CODE_READ_HOLDING_REGISTERS://¶Á¼Ä´æÆ÷Êý¾Ý
   1321                  {
   1322                    //temp=BUILD_UINT16(pRxFrame->pData[1],pRxFrame->pData[0]);
   1323                    //if(temp==NativeAddr)//1 2×Ö½ÚÊÇµØÖ·£¬ÊÇ·ñ±¾»úµØÖ·
   1324                    if(pRxFrame->ADDR==NativeAddr)//ÊÇ·ñ±¾»úµØÖ·
   \                     ??ReportData_0:
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   90....       MOV     DPTR,#NativeAddr
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   68           XRL     A,R0
   \   000030   6003         JZ      $+5
   \   000032   02....       LJMP    ??ReportData_3 & 0xFFFF
   1325                    {
   1326                        #if defined ( GTA_WWSB_R1 )||(GTA_WFSB_R1) //´«¸ÐÆ÷   
   1327                        temp=ReadADC(4);//¶ÁÓêµÎµçÑ¹Öµ,»ðÑæ´«¸ÐÆ÷
   \   000035                ; Setup parameters for call to function ReadADC
   \   000035   7904         MOV     R1,#0x4
   \   000037   12....       LCALL   ??ReadADC?relay
   1328                        data[0]=1;
   \   00003A   12....       LCALL   ?Subroutine6 & 0xFFFF
   1329                        if(temp>3000)
   \                     ??CrossCallReturnLabel_3:
   \   00003D   4007         JC      ??ReportData_4
   1330                          data[1]=0x01;
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   7401         MOV     A,#0x1
   \   000044   8004         SJMP    ??ReportData_5
   1331                        else
   1332                          data[1]=0x00;
   \                     ??ReportData_4:
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E4           CLR     A
   1333                        //data[1]=LO_UINT16(temp);
   1334                        //data[2]=HI_UINT16(temp);
   1335                        FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
   1336                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1337                        #endif
   1338                        
   1339                        #if defined ( GTA_WUSB_R1 )
   1340                        IO_DIR_PORT_PIN(0, 6, IO_IN);
   1341                        data[0]=1;
   1342                        if(IO_SENSOR)
   1343                          data[1]=0x01;
   1344                        else
   1345                          data[1]=0x00;
   1346                        FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
   1347                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1348                        #endif
   1349          
   1350                        #if defined(GTA_WRCB_R1)
   1351                        IO_DIR_PORT_PIN(0, 6, IO_OUT);
   1352                        IO_DIR_PORT_PIN(0, 0, IO_OUT);
   1353                        if(pRxFrame->pData[0]==0x01)
   1354                          {
   1355                            if(pRxFrame->pData[1]==0x00)
   1356                              IO_RELAY1=0;
   1357                            if(pRxFrame->pData[1]==0x01)
   1358                              IO_RELAY1=1;
   1359                          }
   1360                        if(pRxFrame->pData[0]==0x02)
   1361                          {
   1362                            if(pRxFrame->pData[1]==0x00)
   1363                              IO_RELAY2=0;
   1364                            if(pRxFrame->pData[1]==0x01)
   1365                              IO_RELAY2=1;
   1366                          }
   1367                        #endif
   1368                        
   1369                        
   1370                        #if defined (GTA_WVSB_R1)||(GTA_WIRSB_R1)
   1371                        temp=ReadADC(4);//ºìÍâ´«¸ÐÆ÷
   1372                        data[0]=1;
   1373                        if(temp>3000)
   1374                          data[1]=0x00;
   1375                        else
   1376                          data[1]=0x01;
   1377                        FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
   1378                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1379                        #endif
   1380                        
   1381                        #if defined (GTA_WISB_R1)
   1382                        temp=ReadADC(4);//
   1383                        data[0]=2;
   1384                        data[1]=LO_UINT16(temp);
   1385                        data[2]=HI_UINT16(temp);
   1386                        FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,data,3);//´ò°ü
   1387                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1388                        #endif
   1389                        
   1390                        
   1391                        #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷  
   1392                        osal_int_disable( INTS_ALL );
   1393                        readTempHumi();
   1394                        osal_int_enable( INTS_ALL );
   1395                        data[0]=4;
   1396                        data[1]=humi_val[0];//L
   1397                        data[2]=humi_val[1];//H
   1398                        data[3]=temp_val[0];
   1399                        data[4]=temp_val[1];
   1400                        FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,data,5);//´ò°ü
   1401                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1402                        #endif
   1403                        
   1404                        #if defined (GTA_WHFRFID_R1)
   1405                        cmd=BUILD_UINT16(pRxFrame->pData[0],pRxFrame->pData[1]);
   1406                          switch(cmd)
   1407                          {
   1408                          case MODBUS_RFID_CMD_FIND_ISO14443_CARD://7E xx 03 01 0A 00 00 xx
   1409                            FrameLen=PackUpRC623Data(RFID_CMD_FIND_ISO14443_CARD,&(pRxFrame->pData[2]),Frame);//´ò°ü
   1410                             HalUARTWrite(HAL_UART_PORT_0,Frame,FrameLen);
   1411                            //SendDataRequest(Frame,FrameLen);
   1412                            break;
   1413                          case MODBUS_RFID_CMD_GET_CARD_ID:
   1414                            FrameLen=PackUpRC623Data(RFID_CMD_GET_CARD_ID,&(pRxFrame->pData[2]),Frame);//´ò°ü
   1415                             HalUARTWrite(HAL_UART_PORT_0,Frame,FrameLen);
   1416                            break;
   1417                          case MODBUS_RFID_CMD_READ_VAL:
   1418                            
   1419                            break;
   1420                          default:
   1421                            break;
   1422                          }
   1423                        
   1424                        #endif
   1425                          
   1426                        #if defined(GTA_WMSCB_R1)
   1427                         /*
   1428                        ctrl_GTA_WMSCB('M',0x80);
   1429                        for(j=0;j<1000;j++)
   1430                        {
   1431                         
   1432                         ctrl_GTA_WMSCB('A',led);
   1433                         ctrl_GTA_WMSCB('B',led++);
   1434                        StepMotorRun(1,4096);
   1435                        StepMotorRun(0,4096);
   1436                        }
   1437                          */
   1438                          init_GTA_WMSCB();
   1439                          ctrl_GTA_WMSCB('M',0x80);
   1440                          if(pRxFrame->pData[0]==0x00)
   1441                          {
   1442                            //ctrl_GTA_WMSCB('M',0x80);
   1443                            osal_int_disable( INTS_ALL );
   1444                            StepMotorRun(pRxFrame->pData[1],BUILD_UINT16(pRxFrame->pData[2],pRxFrame->pData[3]));
   1445                            osal_int_enable( INTS_ALL );
   1446                          }
   1447                          if(pRxFrame->pData[0]==0x01)
   1448                          {
   1449                            //ctrl_GTA_WMSCB('M',0x80);
   1450                            ctrl_GTA_WMSCB('A',pRxFrame->pData[1]);
   1451                          }
   1452                          if(pRxFrame->pData[0]==0x02)
   1453                          {
   1454          
   1455                            SegDisplay(pRxFrame->pData[1]);
   1456                          }
   1457                        #endif
   1458                        
   1459                    }
   1460                  }
   \                     ??ReportData_5:
   \   00004A   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   7402         MOV     A,#0x2
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   8582..       MOV     ?V0 + 0,DPL
   \   000058   8583..       MOV     ?V0 + 1,DPH
   \   00005B   78..         MOV     R0,#?V0 + 0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   7C03         MOV     R4,#0x3
   \   000062   90....       MOV     DPTR,#NativeAddr
   \   000065   02....       LJMP    ??ReportData_6 & 0xFFFF
   1461                  break;
   1462                case FUN_CODE_SET_ADDR://ÉèµØÖ·
   1463                  {
   1464                    if(pRxFrame->ADDR==NativeAddr)//ÊÇ·ñ±¾»úµØÖ·
   \                     ??ReportData_2:
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F8           MOV     R0,A
   \   00006E   90....       MOV     DPTR,#NativeAddr
   \   000071   E0           MOVX    A,@DPTR
   \   000072   68           XRL     A,R0
   \   000073   6003         JZ      $+5
   \   000075   02....       LJMP    ??ReportData_3 & 0xFFFF
   1465                    {
   1466                    NativeAddr=pRxFrame->pData[0];
   \   000078   8E82         MOV     DPL,R6
   \   00007A   8F83         MOV     DPH,R7
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   90....       MOV     DPTR,#NativeAddr
   \   000083   F0           MOVX    @DPTR,A
   1467                    osal_nv_item_init(ZCD_NV_NATIVE_ADDRESS,sizeof(NativeAddr),NULL);
   \   000084                ; Setup parameters for call to function osal_nv_item_init
   \   000084   E4           CLR     A
   \   000085   F5..         MOV     ?V0 + 0,A
   \   000087   F5..         MOV     ?V0 + 1,A
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   7C01         MOV     R4,#0x1
   \   000090   7D00         MOV     R5,#0x0
   \   000092   7A01         MOV     R2,#0x1
   \   000094   7B04         MOV     R3,#0x4
   \   000096   12....       LCALL   ??osal_nv_item_init?relay
   \   000099   7402         MOV     A,#0x2
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
   1468                    osal_nv_write(ZCD_NV_NATIVE_ADDRESS,0,sizeof(NativeAddr),&NativeAddr);
   \   00009E                ; Setup parameters for call to function osal_nv_write
   \   00009E   75....       MOV     ?V0 + 0,#NativeAddr & 0xff
   \   0000A1   75....       MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A9   75..01       MOV     ?V0 + 0,#0x1
   \   0000AC   75..00       MOV     ?V0 + 1,#0x0
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   7C00         MOV     R4,#0x0
   \   0000B6   7D00         MOV     R5,#0x0
   \   0000B8   7A01         MOV     R2,#0x1
   \   0000BA   7B04         MOV     R3,#0x4
   \   0000BC   12....       LCALL   ??osal_nv_write?relay
   \   0000BF   7404         MOV     A,#0x4
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
   1469                    FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,pRxFrame->pData,1);//´ò°ü
   1470                    SendDataRequest(Frame,FrameLen);//·¢ËÍ
   \   0000C4                ; Setup parameters for call to function SendDataRequest
   \   0000C4                ; Setup parameters for call to function FramePackage
   \   0000C4   78..         MOV     R0,#?V0 + 0
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C9   EE           MOV     A,R6
   \   0000CA   2403         ADD     A,#0x3
   \   0000CC   F5..         MOV     ?V0 + 0,A
   \   0000CE   EF           MOV     A,R7
   \   0000CF   3400         ADDC    A,#0x0
   \   0000D1   F5..         MOV     ?V0 + 1,A
   \   0000D3   78..         MOV     R0,#?V0 + 0
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D8   8E82         MOV     DPL,R6
   \   0000DA   8F83         MOV     DPH,R7
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   FC           MOV     R4,A
   \   0000DF   8018         SJMP    ??ReportData_7
   1471                    }
   1472                  }
   1473                  break;
   1474                case FUN_CODE_READ_ADDR://¶ÁµØÖ·
   1475                  {
   1476                    FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,&NativeAddr,1);//´ò°ü
   1477                    SendDataRequest(Frame,FrameLen);//·¢ËÍ
   \                     ??ReportData_1:
   \   0000E1                ; Setup parameters for call to function SendDataRequest
   \   0000E1                ; Setup parameters for call to function FramePackage
   \   0000E1   75..01       MOV     ?V0 + 0,#0x1
   \   0000E4   75..00       MOV     ?V0 + 1,#0x0
   \   0000E7   78..         MOV     R0,#?V0 + 0
   \   0000E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EC   75....       MOV     ?V0 + 0,#NativeAddr & 0xff
   \   0000EF   75....       MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
   \   0000F2   78..         MOV     R0,#?V0 + 0
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F7   7C11         MOV     R4,#0x11
   \                     ??ReportData_7:
   \   0000F9   8E82         MOV     DPL,R6
   \   0000FB   8F83         MOV     DPH,R7
   \                     ??ReportData_6:
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F9           MOV     R1,A
   \   0000FF   740E         MOV     A,#0xe
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   AA82         MOV     R2,DPL
   \   000106   AB83         MOV     R3,DPH
   \   000108   12....       LCALL   ??FramePackage?relay
   \   00010B   7404         MOV     A,#0x4
   \   00010D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000110   EA           MOV     A,R2
   \   000111   FC           MOV     R4,A
   \   000112   EB           MOV     A,R3
   \   000113   FD           MOV     R5,A
   \   000114   740A         MOV     A,#0xa
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   AA82         MOV     R2,DPL
   \   00011B   AB83         MOV     R3,DPH
   \   00011D   12....       LCALL   ??SendDataRequest?relay
   1478                    
   1479                  }
   1480                  break;
   1481                }
   1482            
   1483            
   1484          
   1485          }
   \                     ??ReportData_3:
   \   000120   741E         MOV     A,#0x1e
   \   000122   02....       LJMP    ?Subroutine4 & 0xFFFF
   1486          #if defined(GTA_WMSCB_R1)
   1487          void StepMotorRun(uint8 Dir,uint16 StepNum)
   1488          {
   1489            uint8 ForwardStep[4]={0x03,0x09,0x0C,0x06};
   1490            uint8 BackStep[4]={0x03,0x06,0x0C,0x09};
   1491            uint16 i=0,j=0,k=0;
   1492            uint8 index=0,l=0;
   1493            for(i=0;i<StepNum;i++)
   1494            {
   1495              if(Dir)
   1496                ctrl_GTA_WMSCB('C',ForwardStep[index]);
   1497              else
   1498                ctrl_GTA_WMSCB('C',BackStep[index]);
   1499              if(i==(k*255-1)||i==0)
   1500              {
   1501                SegDisplay(l);
   1502                if(l++>8)l=0;
   1503                k++;
   1504              }
   1505              ctrl_GTA_WMSCB('A',i);
   1506              
   1507              if(++index>=4)index=0;
   1508              
   1509              for(j=0;j<3000;j++)
   1510              {
   1511                asm("nop");            
   1512              }
   1513              //ctrl_GTA_WMSCB('A',StepNum);
   1514            }
   1515          }
   1516          
   1517          void SegDisplay(uint8 num)
   1518          {
   1519            uint8 DispNum[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
   1520            //ctrl_GTA_WMSCB('M',0x80);
   1521            if(num<0x10)
   1522              ctrl_GTA_WMSCB('B',DispNum[num]);
   1523          }
   1524          #endif

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1525          uint16 FramePackage(uint8 *pFrame,uint8 addr,uint8 cmd,uint8 *data,uint16 datalen)
   \                     FramePackage:
   1526          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   1527            uint16 i;
   1528            uint16 crc;
   1529            uint8 *p;
   1530              p=pFrame;
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1531            *p++=FRAME_HEAD;//²»Ã÷bug ÔÙ¼ÓÒ»¸ö×Ö½Ú
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   747E         MOV     A,#0x7e
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   1532            *p++=FRAME_HEAD;
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   1533            *p++=addr;
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   1534            *p++=cmd;
   \   000016   EC           MOV     A,R4
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   AE82         MOV     R6,DPL
   \   00001B   AF83         MOV     R7,DPH
   1535            for(i=0;i<datalen;i++)
   \   00001D   7C00         MOV     R4,#0x0
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   740E         MOV     A,#0xe
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   7410         MOV     A,#0x10
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 1,A
   \   000037   8024         SJMP    ??FramePackage_0
   1536            {
   1537              *p++=*data++;
   \                     ??FramePackage_1:
   \   000039   8882         MOV     DPL,R0
   \   00003B   8983         MOV     DPH,R1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   F0           MOVX    @DPTR,A
   \   000043   8882         MOV     DPL,R0
   \   000045   8983         MOV     DPH,R1
   \   000047   A3           INC     DPTR
   \   000048   A882         MOV     R0,DPL
   \   00004A   A983         MOV     R1,DPH
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   A3           INC     DPTR
   \   000051   AE82         MOV     R6,DPL
   \   000053   AF83         MOV     R7,DPH
   1538            }
   \   000055   EC           MOV     A,R4
   \   000056   2401         ADD     A,#0x1
   \   000058   0C           INC     R4
   \   000059   ED           MOV     A,R5
   \   00005A   3400         ADDC    A,#0x0
   \   00005C   FD           MOV     R5,A
   \                     ??FramePackage_0:
   \   00005D   C3           CLR     C
   \   00005E   EC           MOV     A,R4
   \   00005F   95..         SUBB    A,?V0 + 0
   \   000061   ED           MOV     A,R5
   \   000062   95..         SUBB    A,?V0 + 1
   \   000064   40D3         JC      ??FramePackage_1
   1539            //crc=Crc16Code(pFrame+1,datalen+2);//FRAME_HEAD²»¼Æ
   1540             crc=Crc16Code(pFrame+2,datalen+2);//FRAME_HEAD²»¼Æ
   \   000066                ; Setup parameters for call to function Crc16Code
   \   000066   E5..         MOV     A,?V0 + 0
   \   000068   2402         ADD     A,#0x2
   \   00006A   F9           MOV     R1,A
   \   00006B   EA           MOV     A,R2
   \   00006C   2402         ADD     A,#0x2
   \   00006E   FA           MOV     R2,A
   \   00006F   EB           MOV     A,R3
   \   000070   3400         ADDC    A,#0x0
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   ??Crc16Code?relay
   1541            *p++=LO_UINT16(crc);
   \   000076   EA           MOV     A,R2
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   1542            *p=HI_UINT16(crc);
   \   00007D   EB           MOV     A,R3
   \   00007E   F0           MOVX    @DPTR,A
   1543            //return datalen+5;
   1544            return datalen+6;//¶à¼ÓÒ»¸öFRAME_HEAD
   \   00007F   E5..         MOV     A,?V0 + 0
   \   000081   2406         ADD     A,#0x6
   \   000083   FA           MOV     R2,A
   \   000084   E5..         MOV     A,?V0 + 1
   \   000086   3400         ADDC    A,#0x0
   \   000088   FB           MOV     R3,A
   \   000089   7F06         MOV     R7,#0x6
   \   00008B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1545          }
   1546          
   1547            /*********************************************************************
   1548           * º¯ÊýÃû³Æ£ºReadADC
   1549           * ¹¦    ÄÜ£º¶ÁÈ¡ADCÖµ
   1550           * Èë¿Ú²ÎÊý£ºÍ¨µÀ
   1551           * ³ö¿Ú²ÎÊý£ºÎÞ
   1552           * ·µ »Ø Öµ£ºADÊý¾Ý()
   1553           ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1554          uint16 ReadADC( uint8 channel )
   \                     ReadADC:
   1555          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
   1556            volatile unsigned char tmp,n;
   1557            signed short adcvalue;
   1558            float voltagevalue_X;
   1559          
   1560            /* XÖá¼ÓËÙ¶È²É¼¯ */
   1561            /* ÉèÖÃ»ù×¼µçÑ¹¡¢³éÈ¡ÂÊºÍµ¥¶ËÊäÈëÍ¨µÀ */
   1562            ADCCON3 = ((0x02 << 6) |  // ²ÉÓÃAVDD5Òý½ÅÉÏµÄµçÑ¹Îª»ù×¼µçÑ¹
   1563                       (0x03 << 4) |  // ³éÈ¡ÂÊÎª512£¬ÏàÓ¦µÄÓÐÐ§Î»Îª12Î»(×î¸ßÎ»Îª·ûºÅÎ»)
   1564                       channel);
   \   000007   74B0         MOV     A,#-0x50
   \   000009   4C           ORL     A,R4
   \   00000A   F5B6         MOV     0xb6,A
   1565          
   1566            /* µÈ´ýÍ¨µÀ×ª»»Íê³É */
   1567            while ((ADCCON1 & 0x80) != 0x80);
   \                     ??ReadADC_0:
   \   00000C   E5B4         MOV     A,0xb4
   \   00000E   A2E7         MOV     C,0xE0 /* A   */.7
   \   000010   50FA         JNC     ??ReadADC_0
   1568          
   1569            /* ´ÓADCL£¬ADCH¶ÁÈ¡×ª»»Öµ£¬´Ë²Ù×÷»¹ÇåÁãADCCON1.EOC */
   1570            adcvalue = (signed short)ADCL;
   \   000012   E5BA         MOV     A,0xba
   \   000014   F5..         MOV     ?V0 + 0,A
   1571            adcvalue |= (signed short)(ADCH << 8); 
   \   000016   E5BB         MOV     A,0xbb
   \   000018   F8           MOV     R0,A
   \   000019   E4           CLR     A
   \   00001A   C8           XCH     A,R0
   \   00001B   F5..         MOV     ?V0 + 1,A
   1572          
   1573            /* ÈôadcvalueÐ¡ÓÚ0£¬¾ÍÈÏÎªËüÎª0 */
   1574            if(adcvalue < 0) adcvalue = 0;
   \   00001D   C3           CLR     C
   \   00001E   9400         SUBB    A,#0x0
   \   000020   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000022   65D0         XRL     A,PSW
   \   000024   33           RLC     A
   \   000025   5004         JNC     ??ReadADC_1
   \   000027   88..         MOV     ?V0 + 0,R0
   \   000029   88..         MOV     ?V0 + 1,R0
   1575              
   1576            adcvalue >>= 4;  // È¡³ö12Î»ÓÐÐ§Î»
   1577              
   1578            /* ½«×ª»»Öµ»»ËãÎªÊµ¼ÊµçÑ¹Öµ */
   1579            voltagevalue_X = (adcvalue * 3.3) / 2047;  // 2047ÊÇÄ£ÄâÊäÈë´ïµ½VREFÊ±µÄÂúÁ¿³ÌÖµ
   1580                                                       // ÓÉÓÚÓÐÐ§Î»ÊÇ12Î»(×î¸ßÎ»Îª·ûºÅÎ»)£¬
   1581                                                       // ËùÒÔÕýµÄÂúÁ¿³ÌÖµÎª2047
   1582                                                       // ´Ë´¦£¬VREF = 3.3V
   1583            return ((uint16)(voltagevalue_X * 1000));  // µçÑ¹·Å´ó100±¶±ãÓÚ´«Êä¼°ÉÏÎ»»ú´¦Àí
   \                     ??ReadADC_1:
   \   00002B   7404         MOV     A,#0x4
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?SS_SHR
   \   000032   E5..         MOV     A,?V0 + 1
   \   000034   33           RLC     A
   \   000035   95E0         SUBB    A,0xE0 /* A   */
   \   000037   F5..         MOV     ?V0 + 2,A
   \   000039   F5..         MOV     ?V0 + 3,A
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?L_TO_FLT
   \   000040   90....       MOV     DPTR,#__Constant_40533333
   \   000043   78..         MOV     R0,#?V0 + 4
   \   000045   12....       LCALL   ?L_MOV_X
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   79..         MOV     R1,#?V0 + 4
   \   00004C   12....       LCALL   ?FLT_MUL
   \   00004F   90....       MOV     DPTR,#__Constant_44ffe000
   \   000052   78..         MOV     R0,#?V0 + 4
   \   000054   12....       LCALL   ?L_MOV_X
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   79..         MOV     R1,#?V0 + 4
   \   00005B   12....       LCALL   ?FLT_DIV
   \   00005E   90....       MOV     DPTR,#__Constant_447a0000
   \   000061   78..         MOV     R0,#?V0 + 4
   \   000063   12....       LCALL   ?L_MOV_X
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   79..         MOV     R1,#?V0 + 4
   \   00006A   12....       LCALL   ?FLT_MUL
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?FLT_TO_L
   \   000072   AA..         MOV     R2,?V0 + 0
   \   000074   AB..         MOV     R3,?V0 + 1
   \   000076   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000079                REQUIRE ADCCON3
   \   000079                REQUIRE ADCCON1
   \   000079                REQUIRE ADCL
   \   000079                REQUIRE ADCH
   1584          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1585          void SendDataRequest(uint8 *pBuf,uint16 len)
   \                     SendDataRequest:
   1586          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1587              if(!ZG_DEVICE_COORDINATOR_TYPE)//·ÇÐ­µ÷Æ÷
   \   000005   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000008   E0           MOVX    A,@DPTR
   \   000009   90....       MOV     DPTR,#TestDirectSent_DstAddr + 8
   \   00000C   600A         JZ      ??SendDataRequest_0
   1588                {
   1589                  TestDirectSent_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;//µØÖ·´«ËÍ
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   1590                  TestDirectSent_DstAddr.endPoint = 0;
   1591                  TestDirectSent_DstAddr.addr.shortAddr = 0x0000;
   \                     ??CrossCallReturnLabel_28:
   \   000013   90....       MOV     DPTR,#TestDirectSent_DstAddr
   \   000016   8003         SJMP    ??CrossCallReturnLabel_5
   1592                }
   1593                else
   1594                {
   1595                  if(ZG_DEVICE_COORDINATOR_TYPE)
   1596                  {
   1597                    TestDirectSent_DstAddr.addrMode=(afAddrMode_t)AddrBroadcast;//Addr16Bit;//µØÖ·´«ËÍ
   \                     ??SendDataRequest_0:
   \   000018   12....       LCALL   ?Subroutine7 & 0xFFFF
   1598                    TestDirectSent_DstAddr.endPoint = 0;
   1599                    TestDirectSent_DstAddr.addr.shortAddr = 0xffff;//destAddr;
   1600                    //TestDirectSent_DstAddr.addr.extAddr
   1601                  }
   1602                }
   \                     ??CrossCallReturnLabel_5:
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
   1603               AF_DataRequest(    
   1604                        &TestDirectSent_DstAddr,               //µØÖ·
   1605                        &TransmitApp_epDesc,                //ÃèÊö
   1606                        TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1607                          len,                                  //len
   1608                          pBuf,//TransmitApp_Msg,             //DATA
   1609                        &TransmitApp_TransID,               //
   1610                        TRANSMITAPP_TX_OPTIONS,
   1611                        AF_DEFAULT_RADIUS 
   1612                        );
   \   00001E                ; Setup parameters for call to function AF_DataRequest
   \   00001E   75..1E       MOV     ?V0 + 0,#0x1e
   \   000021   78..         MOV     R0,#?V0 + 0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000026   75....       MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
   \   000029   75....       MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8A..         MOV     ?V0 + 0,R2
   \   000033   8B..         MOV     ?V0 + 1,R3
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   8C..         MOV     ?V0 + 0,R4
   \   00003C   8D..         MOV     ?V0 + 1,R5
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   75..A1       MOV     ?V0 + 0,#-0x5f
   \   000046   75..00       MOV     ?V0 + 1,#0x0
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   7920         MOV     R1,#0x20
   \   000050   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000052   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   000054   7A..         MOV     R2,#TestDirectSent_DstAddr & 0xff
   \   000056   7B..         MOV     R3,#(TestDirectSent_DstAddr >> 8) & 0xff
   \   000058   12....       LCALL   ??AF_DataRequest?relay
   \   00005B   7409         MOV     A,#0x9
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   1613               HalLedBlink (HAL_LED_3, 1, 50, 200);
   \   000060                ; Setup parameters for call to function HalLedBlink
   \   000060   7CC8         MOV     R4,#-0x38
   \   000062   7D00         MOV     R5,#0x0
   \   000064   02....       LJMP    ?Subroutine0 & 0xFFFF
   1614          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for NativeAddr>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessZDOIncomingMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessZDOIncomingMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_SendTheMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ChangeState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ChangeState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_SetSendEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_SetSendEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_DisplayResults?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_DisplayResults

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initUart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initUart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??uartRxCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FrameUnPackage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FrameUnPackage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Crc16Code?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Crc16Code

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SentDataInBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SentDataInBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendBindRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReportData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReportData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FramePackage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FramePackage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadADC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadADC

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendDataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendDataRequest

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GTA Zigbee">`:
   \   000000   47544120     DB "GTA Zigbee"
   \            5A696762
   \            656500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40533333:
   \   000000   33335340     DD 40533333H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_44ffe000:
   \   000000   00E0FF44     DD 44FFE000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_447a0000:
   \   000000   00007A44     DD 447A0000H
   1615          
   1616          #if defined(GTA_WTHSB_R1)
   1617          uint8 readTempHumi(void)
   1618          {
   1619           float f_humi=0,f_temp=0; 
   1620           
   1621            uint8 checksum;
   1622           
   1623            /* ¿ØÖÆSHT11½øÐÐÎÂÊª¶È²âÁ¿ */
   1624            
   1625            
   1626            s_measure(temp_val,&checksum,TEMP); // ²âÁ¿ÎÂ¶È
   1627            s_measure(humi_val,&checksum,HUMI); // ²âÁ¿Ïà¶ÔÊª¶È
   1628            f_humi=BUILD_UINT16(humi_val[0],humi_val[1]);
   1629            f_temp=BUILD_UINT16(temp_val[0],temp_val[1]);
   1630            calc_sth11(&f_humi,&f_temp);
   1631            humi_val[0]=f_humi;//&(uint8)f_humi;
   1632            humi_val[1]=(f_humi-humi_val[0])*100;  
   1633            temp_val[0]=f_temp; 
   1634            temp_val[1]=(f_temp-temp_val[0])*100;  
   1635            return TRUE;
   1636          }
   1637          #endif
   1638          
   1639          #if defined(GTA_WMSCB_R1)
   1640          void init_GTA_WMSCB(void)
   1641          {
   1642            P0SEL=P0SEL&0x8C;//10001100
   1643            P1SEL=P1SEL&0xF0;
   1644            P2SEL=P2SEL&0xFA;
   1645            //HAL_CONFIG_IO_OUTPUT(0, HAL_LCD_CS_PIN, 1);
   1646            IO_DIR_PORT_PIN(0, 0, IO_OUT);
   1647            IO_DIR_PORT_PIN(0, 1, IO_OUT);
   1648            IO_DIR_PORT_PIN(0, 4, IO_OUT);
   1649            IO_DIR_PORT_PIN(0, 5, IO_OUT);
   1650            IO_DIR_PORT_PIN(0, 6, IO_OUT);
   1651            IO_DIR_PORT_PIN(1, 0, IO_OUT);
   1652            IO_DIR_PORT_PIN(1, 1, IO_OUT);
   1653            IO_DIR_PORT_PIN(1, 2, IO_OUT);
   1654            IO_DIR_PORT_PIN(1, 3, IO_OUT);
   1655            IO_DIR_PORT_PIN(2, 0, IO_OUT);
   1656            IO_DIR_PORT_PIN(2, 2, IO_OUT);
   1657          }
   1658          
   1659          void ctrl_GTA_WMSCB(uint8 port,uint8 data)
   1660          {
   1661            //uint8 i=0;
   1662            //init_GTA_WMSCB();
   1663            asm("nop"); 
   1664            asm("nop"); 
   1665          
   1666            T82C55A_WR=1;
   1667            asm("nop"); 
   1668            asm("nop"); 
   1669          
   1670            switch(port)
   1671            {
   1672            case        'A':
   1673              T82C55A_ADDR0=0;
   1674              T82C55A_ADDR1=0;
   1675              break;
   1676            case        'B':
   1677              T82C55A_ADDR0=1;
   1678              T82C55A_ADDR1=0;
   1679              break;  
   1680            case        'C':
   1681              T82C55A_ADDR0=0;
   1682              T82C55A_ADDR1=1;
   1683              break;
   1684            case        'M':
   1685              T82C55A_ADDR0=1;
   1686              T82C55A_ADDR1=1;
   1687              break;
   1688            default:break;
   1689            }
   1690            asm("nop"); 
   1691            asm("nop"); 
   1692          
   1693            T82C55A_WR=0;
   1694            asm("nop"); 
   1695            asm("nop"); 
   1696          
   1697            if(data&0x01)
   1698              T82C55A_D0=1;
   1699            else
   1700              T82C55A_D0=0;
   1701            
   1702            if(data&0x02)
   1703              T82C55A_D1=1;
   1704            else
   1705              T82C55A_D1=0;
   1706            
   1707            if(data&0x04)
   1708              T82C55A_D2=1;
   1709            else
   1710              T82C55A_D2=0;
   1711            
   1712            if(data&0x08)
   1713              T82C55A_D3=1;
   1714            else
   1715              T82C55A_D3=0;
   1716            
   1717            if(data&0x10)
   1718              T82C55A_D4=1;
   1719            else
   1720              T82C55A_D4=0;
   1721            
   1722            if(data&0x20)
   1723              T82C55A_D5=1;
   1724            else
   1725              T82C55A_D5=0;
   1726            
   1727            if(data&0x40)
   1728              T82C55A_D6=1;
   1729            else
   1730              T82C55A_D6=0;
   1731            
   1732            if(data&0x80)
   1733              T82C55A_D7=1;
   1734            else
   1735              T82C55A_D7=0;
   1736            asm("nop"); 
   1737            asm("nop"); 
   1738          
   1739            T82C55A_WR=1;
   1740            asm("nop"); 
   1741            asm("nop"); 
   1742          
   1743            T82C55A_WR=0;
   1744            
   1745          }
   1746          
   1747          #endif

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     26  Crc16Code
       1      0     64  FramePackage
                          0 0  14 -> Crc16Code
       1      0     49  FrameUnPackage
                          0 0  16 -> Crc16Code
       0      0     62  ReadADC
       0      0     77  ReportData
                          0 0  44 -> FramePackage
                          0 0  40 -> ReadADC
                          0 0  40 -> SendDataRequest
                          0 0  42 -> osal_nv_item_init
                          0 0  44 -> osal_nv_write
       0      0     75  SendBindRequest
                          0 0  20 -> HalLedBlink
                          0 0  20 -> NLME_GetShortAddr
                          0 0  29 -> ZDP_EndDeviceBindReq
       0      0     65  SendDataRequest
                          0 0  19 -> AF_DataRequest
                          0 0  10 -> HalLedBlink
       0      0     19  SentDataInBind
                          0 0  19 -> AF_DataRequest
                          0 0  10 -> HalLedBlink
       2      0      0  TransmitApp_ChangeState
                          2 0   0 -> TransmitApp_SetSendEvt
       0      0     66  TransmitApp_DisplayResults
                          0 0  20 -> debug_msg
                          0 0  16 -> osal_GetSystemClock
                          0 0  16 -> osal_stop_timerEx
       0      0     55  TransmitApp_HandleKeys
                          0 0   9 -> HalLedBlink
                          0 0   9 -> HalUARTWrite
                          0 0   9 -> osal_set_event
       1      0     16  TransmitApp_Init
                          0 0  12 -> HalLcdWriteString
                          0 0  12 -> RegisterForKeys
                          0 0  12 -> ZDO_RegisterForZDOMsg
                          0 0  12 -> afDataReqMTU
                          0 0  12 -> afRegister
                          0 0  12 -> initUart
                          0 0  14 -> osal_nv_item_init
                          0 0  16 -> osal_nv_read
       0      0      0  TransmitApp_MessageMSGCB
       0      0     50  TransmitApp_ProcessEvent
                          0 0  50 -> FramePackage
                          0 0  46 -> HalLedBlink
                          0 0  46 -> ReadADC
                          0 0  46 -> SendBindRequest
                          0 0  46 -> SendDataRequest
                          0 0  46 -> TransmitApp_DisplayResults
                          0 0  46 -> TransmitApp_HandleKeys
                          0 0  46 -> TransmitApp_ProcessZDOMsgs
                          0 0  46 -> TransmitApp_SendTheMessage
                          0 0  46 -> TransmitApp_SetSendEvt
                          0 0  46 -> osal_GetSystemClock
                          0 0  46 -> osal_msg_deallocate
                          0 0  46 -> osal_msg_receive
                          0 0  46 -> osal_start_timerEx
       1      0     43  TransmitApp_ProcessZDOIncomingMsgs
                          0 0  33 -> FrameUnPackage
                          0 0  33 -> HalLedBlink
                          0 0  33 -> HalUARTWrite
                          0 0  33 -> ReportData
       0      0     56  TransmitApp_ProcessZDOMsgs
                          0 0  10 -> HalLedBlink
                          0 0  10 -> HalLedSet
                          0 0  10 -> TransmitApp_ProcessZDOIncomingMsgs
                          0 0  10 -> ZDO_ParseEPListRsp
                          0 0  10 -> osal_mem_free
                          0 0  10 -> osal_stop_timerEx
       0      0     65  TransmitApp_SendTheMessage
                          0 0  19 -> AF_DataRequest
                          0 0  10 -> HalLedBlink
                          0 0  10 -> osal_start_timerEx
       2      0     46  TransmitApp_SetSendEvt
                          2 0   0 -> osal_start_timerEx
       2      0     41  initUart
                          2 0  29 -> HalUARTOpen
       0      0    149  uartRxCB
                          0 0 149 -> AF_DataRequest
                          0 0 140 -> HalLedBlink
                          0 0 140 -> HalUARTRead


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "GTA Zigbee">
       1  ?<Initializer for NativeAddr>
       6  ??Crc16Code?relay
       6  ??FramePackage?relay
       6  ??FrameUnPackage?relay
       6  ??ReadADC?relay
       6  ??ReportData?relay
       6  ??SendBindRequest?relay
       6  ??SendDataRequest?relay
       6  ??SentDataInBind?relay
       5  ??Subroutine16_0
       3  ??Subroutine17_0
       6  ??Subroutine18_0
       5  ??Subroutine19_0
       6  ??TransmitApp_ChangeState?relay
       6  ??TransmitApp_DisplayResults?relay
       6  ??TransmitApp_HandleKeys?relay
       6  ??TransmitApp_Init?relay
       6  ??TransmitApp_MessageMSGCB?relay
       6  ??TransmitApp_ProcessEvent?relay
       6  ??TransmitApp_ProcessZDOIncomingMsgs?relay
       6  ??TransmitApp_ProcessZDOMsgs?relay
       6  ??TransmitApp_SendTheMessage?relay
       6  ??TransmitApp_SetSendEvt?relay
       6  ??initUart?relay
       6  ??uartRxCB?relay
       9  ?Subroutine0
       5  ?Subroutine1
       7  ?Subroutine10
      12  ?Subroutine11
       7  ?Subroutine12
      11  ?Subroutine13
       8  ?Subroutine14
       3  ?Subroutine15
       5  ?Subroutine2
       7  ?Subroutine3
       6  ?Subroutine4
      12  ?Subroutine5
      19  ?Subroutine6
      12  ?Subroutine7
       2  ?Subroutine8
      10  ?Subroutine9
       1  ADCCON1
       1  ADCCON3
       1  ADCH
       1  ADCL
      87  Crc16Code
       1  Flag_ReportData
     142  FramePackage
     314  FrameUnPackage
       1  NativeAddr
     121  ReadADC
     293  ReportData
     135  SendBindRequest
     103  SendDataRequest
      78  SentDataInBind
      12  TestDirectSent_DstAddr
      15  Test_Buf
       1  Test_Mark
      25  TransmitApp_ChangeState
       2  TransmitApp_ClusterList
     186  TransmitApp_DisplayResults
      12  TransmitApp_DstAddr
      92  TransmitApp_HandleKeys
     269  TransmitApp_Init
       2  TransmitApp_MaxDataLength
       3  TransmitApp_MessageMSGCB
     102  TransmitApp_Msg
       1  TransmitApp_NwkState
     434  TransmitApp_ProcessEvent
     182  TransmitApp_ProcessZDOIncomingMsgs
     180  TransmitApp_ProcessZDOMsgs
     186  TransmitApp_SendTheMessage
      22  TransmitApp_SetSendEvt
      12  TransmitApp_SimpleDesc
       1  TransmitApp_State
       1  TransmitApp_TaskID
       1  TransmitApp_TransID
       6  TransmitApp_epDesc
       4  __Constant_40533333
       4  __Constant_447a0000
       4  __Constant_44ffe000
       4  clkShdw
      97  initUart
       2  pktCounter
       4  rxAccum
       4  rxTotal
       1  timerOn
       1  timesToSend
       4  txAccum
       4  txTotal
     155  uartRxCB

 
 3 258 bytes in segment BANKED_CODE
   120 bytes in segment BANK_RELAYS
     4 bytes in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    37 bytes in segment XDATA_ROM_C
   179 bytes in segment XDATA_Z
 
 3 379 bytes of CODE  memory
    25 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  4 bytes shared)
   180 bytes of XDATA memory

Errors: none
Warnings: 12
