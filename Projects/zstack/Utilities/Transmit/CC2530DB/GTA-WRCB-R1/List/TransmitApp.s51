///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            22/Sep/2014  16:07:41 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZSTA /
//                          CK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zsta /
//                          ck\Utilities\Transmit\Source\TransmitApp.c        /
//    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Projects\ /
//                          zstack\Utilities\Transmit\CC2530DB\..\..\..\Tools /
//                          \CC2530DB\f8wEndev.cfg" (-DCPU32MHZ               /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f         /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZST /
//                          ACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zst /
//                          ack\Utilities\Transmit\CC2530DB\..\..\..\Tools\CC /
//                          2530DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0     /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00001000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1178                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=3           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=2   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Documents and          /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\Source\TransmitApp.c" -D NWK_AUTO_POLL -D    /
//                          MT_TASK -D ZTOOL_P1 -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D ZDNWKMGR_MIN_TRANSMISSIONS=0 -D    /
//                          GTA_DEBUG -D ZIGBEEPRO -D GTA_WRCB_R1 -lC         /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZST /
//                          ACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zst /
//                          ack\Utilities\Transmit\CC2530DB\GTA-WRCB-R1\List\ /
//                          " -lA "C:\Documents and                           /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\GTA-WRCB-R1\List\" --diag_suppress  /
//                          Pe001,Pa010 -o "C:\Documents and                  /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\GTA-WRCB-R1\Obj\" -e                /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Documents and         /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\" -I "C:\Documents and              /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\Source\" -I "C:\Documents and    /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\ZMain\TI2530DB\" -I        /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZST /
//                          ACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zst /
//                          ack\Utilities\Transmit\CC2530DB\..\..\..\..\..\Co /
//                          mponents\hal\include\" -I "C:\Documents and       /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\..\..\Components\hal\targe /
//                          t\CC2530EB\" -I "C:\Documents and                 /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\..\..\Components\mac\inclu /
//                          de\" -I "C:\Documents and                         /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\..\..\Components\mac\high_ /
//                          level\" -I "C:\Documents and                      /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\..\..\Components\mac\low_l /
//                          evel\srf04\" -I "C:\Documents and                 /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\..\..\Components\mac\low_l /
//                          evel\srf04\single_chip\" -I "C:\Documents and     /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\..\..\Components\mt\" -I   /
//                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZST /
//                          ACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zst /
//                          ack\Utilities\Transmit\CC2530DB\..\..\..\..\..\Co /
//                          mponents\osal\include\" -I "C:\Documents and      /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\..\..\Components\services\ /
//                          saddr\" -I "C:\Documents and                      /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\..\..\Components\services\ /
//                          sdata\" -I "C:\Documents and                      /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\..\..\Components\stack\af\ /
//                          " -I "C:\Documents and Settings\Administrator\×ÀÃ /
//                          æ\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Project /
//                          s\zstack\Utilities\Transmit\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\nwk\" -I "C:\Documents and    /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\..\..\Components\stack\sap /
//                          i\" -I "C:\Documents and                          /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\..\..\Components\stack\sec /
//                          \" -I "C:\Documents and                           /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\..\..\Components\stack\sys /
//                          \" -I "C:\Documents and                           /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\..\..\Components\stack\zdo /
//                          \" -I "C:\Documents and                           /
//                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ /
//                          ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Tran /
//                          smit\CC2530DB\..\..\..\..\..\Components\zmac\"    /
//                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\ /
//                          ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Projects\ /
//                          zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. /
//                          \Components\zmac\f8w\" -Ohz --require_prototypes  /
//    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\ZSTA /
//                          CK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zsta /
//                          ck\Utilities\Transmit\CC2530DB\GTA-WRCB-R1\List\T /
//                          ransmitApp.s51                                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME TransmitApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_DIV
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SUB_X
        EXTERN ?L_TO_FLT
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SS_SHR
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Crc16Code?relay
        FUNCTION ??Crc16Code?relay,0203H
        PUBLIC ??FramePackage?relay
        FUNCTION ??FramePackage?relay,0203H
        PUBLIC ??FrameUnPackage?relay
        FUNCTION ??FrameUnPackage?relay,0203H
        PUBLIC ??ReadADC?relay
        FUNCTION ??ReadADC?relay,0203H
        PUBLIC ??ReportData?relay
        FUNCTION ??ReportData?relay,0203H
        PUBLIC ??SendBindRequest?relay
        FUNCTION ??SendBindRequest?relay,0203H
        PUBLIC ??SendDataRequest?relay
        FUNCTION ??SendDataRequest?relay,0203H
        PUBLIC ??SentDataInBind?relay
        FUNCTION ??SentDataInBind?relay,0203H
        PUBLIC ??TransmitApp_ChangeState?relay
        FUNCTION ??TransmitApp_ChangeState?relay,0203H
        PUBLIC ??TransmitApp_DisplayResults?relay
        FUNCTION ??TransmitApp_DisplayResults?relay,0203H
        PUBLIC ??TransmitApp_HandleKeys?relay
        FUNCTION ??TransmitApp_HandleKeys?relay,0203H
        PUBLIC ??TransmitApp_Init?relay
        FUNCTION ??TransmitApp_Init?relay,0203H
        PUBLIC ??TransmitApp_MessageMSGCB?relay
        FUNCTION ??TransmitApp_MessageMSGCB?relay,0203H
        PUBLIC ??TransmitApp_ProcessEvent?relay
        FUNCTION ??TransmitApp_ProcessEvent?relay,0203H
        PUBLIC ??TransmitApp_ProcessZDOIncomingMsgs?relay
        FUNCTION ??TransmitApp_ProcessZDOIncomingMsgs?relay,0203H
        PUBLIC ??TransmitApp_ProcessZDOMsgs?relay
        FUNCTION ??TransmitApp_ProcessZDOMsgs?relay,0203H
        PUBLIC ??TransmitApp_SendTheMessage?relay
        FUNCTION ??TransmitApp_SendTheMessage?relay,0203H
        PUBLIC ??TransmitApp_SetSendEvt?relay
        FUNCTION ??TransmitApp_SetSendEvt?relay,0203H
        PUBLIC ??initUart?relay
        FUNCTION ??initUart?relay,0203H
        PUBLIC ??uartRxCB?relay
        FUNCTION ??uartRxCB?relay,0203H
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBLIC Crc16Code
        FUNCTION Crc16Code,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC Flag_ReportData
        PUBLIC FramePackage
        FUNCTION FramePackage,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC FrameUnPackage
        FUNCTION FrameUnPackage,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC NativeAddr
        PUBWEAK P0DIR
        PUBLIC ReadADC
        FUNCTION ReadADC,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ReportData
        FUNCTION ReportData,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 34, STACK
        PUBLIC SendBindRequest
        FUNCTION SendBindRequest,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 29, STACK
        PUBLIC SendDataRequest
        FUNCTION SendDataRequest,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SentDataInBind
        FUNCTION SentDataInBind,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC TestDirectSent_DstAddr
        PUBLIC Test_Buf
        PUBLIC Test_Mark
        PUBLIC TransmitApp_ChangeState
        FUNCTION TransmitApp_ChangeState,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC TransmitApp_ClusterList
        PUBLIC TransmitApp_DisplayResults
        FUNCTION TransmitApp_DisplayResults,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC TransmitApp_DstAddr
        PUBLIC TransmitApp_HandleKeys
        FUNCTION TransmitApp_HandleKeys,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC TransmitApp_Init
        FUNCTION TransmitApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC TransmitApp_MaxDataLength
        PUBLIC TransmitApp_MessageMSGCB
        FUNCTION TransmitApp_MessageMSGCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC TransmitApp_Msg
        PUBLIC TransmitApp_NwkState
        PUBLIC TransmitApp_ProcessEvent
        FUNCTION TransmitApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC TransmitApp_ProcessZDOIncomingMsgs
        FUNCTION TransmitApp_ProcessZDOIncomingMsgs,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC TransmitApp_ProcessZDOMsgs
        FUNCTION TransmitApp_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC TransmitApp_SendTheMessage
        FUNCTION TransmitApp_SendTheMessage,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC TransmitApp_SetSendEvt
        FUNCTION TransmitApp_SetSendEvt,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC TransmitApp_SimpleDesc
        PUBLIC TransmitApp_State
        PUBLIC TransmitApp_TaskID
        PUBLIC TransmitApp_epDesc
        PUBWEAK _A_P0
        PUBWEAK __Constant_40533333
        PUBWEAK __Constant_447a0000
        PUBWEAK __Constant_44ffe000
        PUBLIC initUart
        FUNCTION initUart,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC pktCounter
        PUBLIC uartRxCB
        FUNCTION uartRxCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 149, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
HalLcdWriteString   SYMBOL "HalLcdWriteString"
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
HalLedBlink         SYMBOL "HalLedBlink"
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
HalUARTOpen         SYMBOL "HalUARTOpen"
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
RegisterForKeys     SYMBOL "RegisterForKeys"
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
afDataReqMTU        SYMBOL "afDataReqMTU"
??afDataReqMTU?relay SYMBOL "?relay", afDataReqMTU
afRegister          SYMBOL "afRegister"
??afRegister?relay  SYMBOL "?relay", afRegister
debug_msg           SYMBOL "debug_msg"
??debug_msg?relay   SYMBOL "?relay", debug_msg
osal_GetSystemClock SYMBOL "osal_GetSystemClock"
??osal_GetSystemClock?relay SYMBOL "?relay", osal_GetSystemClock
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_nv_item_init   SYMBOL "osal_nv_item_init"
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
osal_set_event      SYMBOL "osal_set_event"
??osal_set_event?relay SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
Crc16Code           SYMBOL "Crc16Code"
??Crc16Code?relay   SYMBOL "?relay", Crc16Code
FramePackage        SYMBOL "FramePackage"
??FramePackage?relay SYMBOL "?relay", FramePackage
FrameUnPackage      SYMBOL "FrameUnPackage"
??FrameUnPackage?relay SYMBOL "?relay", FrameUnPackage
ReadADC             SYMBOL "ReadADC"
??ReadADC?relay     SYMBOL "?relay", ReadADC
ReportData          SYMBOL "ReportData"
??ReportData?relay  SYMBOL "?relay", ReportData
SendBindRequest     SYMBOL "SendBindRequest"
??SendBindRequest?relay SYMBOL "?relay", SendBindRequest
SendDataRequest     SYMBOL "SendDataRequest"
??SendDataRequest?relay SYMBOL "?relay", SendDataRequest
SentDataInBind      SYMBOL "SentDataInBind"
??SentDataInBind?relay SYMBOL "?relay", SentDataInBind
TransmitApp_ChangeState SYMBOL "TransmitApp_ChangeState"
??TransmitApp_ChangeState?relay SYMBOL "?relay", TransmitApp_ChangeState
TransmitApp_DisplayResults SYMBOL "TransmitApp_DisplayResults"
??TransmitApp_DisplayResults?relay SYMBOL "?relay", TransmitApp_DisplayResults
TransmitApp_HandleKeys SYMBOL "TransmitApp_HandleKeys"
??TransmitApp_HandleKeys?relay SYMBOL "?relay", TransmitApp_HandleKeys
TransmitApp_Init    SYMBOL "TransmitApp_Init"
??TransmitApp_Init?relay SYMBOL "?relay", TransmitApp_Init
TransmitApp_MessageMSGCB SYMBOL "TransmitApp_MessageMSGCB"
??TransmitApp_MessageMSGCB?relay SYMBOL "?relay", TransmitApp_MessageMSGCB
TransmitApp_ProcessEvent SYMBOL "TransmitApp_ProcessEvent"
??TransmitApp_ProcessEvent?relay SYMBOL "?relay", TransmitApp_ProcessEvent
TransmitApp_ProcessZDOIncomingMsgs SYMBOL "TransmitApp_ProcessZDOIncomingMsgs"
??TransmitApp_ProcessZDOIncomingMsgs?relay SYMBOL "?relay", TransmitApp_ProcessZDOIncomingMsgs
TransmitApp_ProcessZDOMsgs SYMBOL "TransmitApp_ProcessZDOMsgs"
??TransmitApp_ProcessZDOMsgs?relay SYMBOL "?relay", TransmitApp_ProcessZDOMsgs
TransmitApp_SendTheMessage SYMBOL "TransmitApp_SendTheMessage"
??TransmitApp_SendTheMessage?relay SYMBOL "?relay", TransmitApp_SendTheMessage
TransmitApp_SetSendEvt SYMBOL "TransmitApp_SetSendEvt"
??TransmitApp_SetSendEvt?relay SYMBOL "?relay", TransmitApp_SetSendEvt
initUart            SYMBOL "initUart"
??initUart?relay    SYMBOL "?relay", initUart
uartRxCB            SYMBOL "uartRxCB"
??uartRxCB?relay    SYMBOL "?relay", uartRxCB

        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??afDataReqMTU?relay
        FUNCTION ??afDataReqMTU?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??debug_msg?relay
        FUNCTION ??debug_msg?relay,00H
        EXTERN ??osal_GetSystemClock?relay
        FUNCTION ??osal_GetSystemClock?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 149, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 140, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 140, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afDataReqMTU
        FUNCTION afDataReqMTU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN debug_msg
        FUNCTION debug_msg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_GetSystemClock
        FUNCTION osal_GetSystemClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgDeviceLogicalType

// C:\Documents and Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c
//    1 /**************************************************************************************************
//    2   Filename:       TransmitApp.c
//    3   Revised:        $Date: 2012-03-05 09:54:49 -0800 (Mon, 05 Mar 2012) $
//    4   Revision:       $Revision: 29619 $
//    5 
//    6   Description:    Transmit Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application will send a data packet to another
//   42   tranmitApp device as fast as it can.  The receiving
//   43   transmitApp device will calculate the following transmit
//   44   rate statistics:
//   45     - Number bytes in the last second
//   46     - Number of seconds running
//   47     - Average number of bytes per second
//   48     - Number of packets received.
//   49 
//   50   The application will send one message and as soon as it
//   51   receives the confirmation for that message it will send
//   52   the next message.
//   53 
//   54   If you would like a delay between messages
//   55   define TRANSMITAPP_DELAY_SEND and set the delay amount
//   56   in TRANSMITAPP_SEND_DELAY.
//   57 
//   58   TransmitApp_MaxDataLength defines the message size
//   59 
//   60   Set TRANSMITAPP_TX_OPTIONS to AF_MSG_ACK_REQUEST to send
//   61   the message expecting an APS ACK, this will decrease your
//   62   throughput.  Set TRANSMITAPP_TX_OPTIONS to 0 for no
//   63   APS ACK.
//   64 
//   65   This applications doesn't have a profile, so it handles
//   66   everything directly - itself.
//   67 
//   68   Key control:
//   69     SW1:  Starts and stops the transmitting
//   70     SW2:  initiates end device binding
//   71     SW3:  Resets the display totals
//   72     SW4:  initiates a match description request
//   73 
//   74   Notes:
//   75 
//   76     This application was intended to be used to test the maximum
//   77     throughput between 2 devices in a network - between routers
//   78     coordinators.
//   79 
//   80     Although not recommended, it can be used between
//   81     an end device and a router (or coordinator), but you must
//   82     enable the delay feature (TRANSMITAPP_DELAY_SEND and
//   83     TRANSMITAPP_SEND_DELAY).  If you don't include the delay, the
//   84     end device can't receive messages because it will stop polling.
//   85     Also, the delay must be greater than RESPONSE_POLL_RATE (default 100 MSec).
//   86 *********************************************************************/
//   87 
//   88 /*********************************************************************
//   89  * INCLUDES
//   90  */
//   91 #include "OSAL.h"
//   92 #include "AF.h"
//   93 #include "ZDObject.h"
//   94 #include "ZDProfile.h"
//   95 
//   96 #include "TransmitApp.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//   97 #include "OnBoard.h"
//   98 
//   99 #include "DebugTrace.h"
//  100 
//  101 /* HAL */
//  102 #include "hal_lcd.h"
//  103 #include "hal_led.h"
//  104 #include "hal_key.h"
//  105 #include "hal_uart.h"
//  106 
//  107 #include "OSAL_NV.h"
//  108 
//  109 #include "ZComDef.h"
//  110 #include "sapi.h"//
//  111 
//  112 #include "hal_types.h"
//  113 
//  114 #if defined(GTA_WTHSB_R1)
//  115 #include "hal_sht11.h"
//  116 #endif
//  117 
//  118 #if defined(GTA_WHFRFID_R1)
//  119 #include "WHFRFID.h"
//  120 #endif
//  121 
//  122 /*********************************************************************
//  123  * MACROS
//  124  */
//  125 
//  126 /*********************************************************************
//  127  * CONSTANTS
//  128  */
//  129 //#define TRANSMITAPP_RANDOM_LEN
//  130 
//  131 #define TRANSMITAPP_STATE_WAITING 0
//  132 #define TRANSMITAPP_STATE_SENDING 1
//  133 
//  134 #if !defined ( RTR_NWK )
//  135   // Use these 2 lines to add a delay between each packet sent
//  136   //  - default for end devices
//  137   #define TRANSMITAPP_DELAY_SEND
//  138   #define TRANSMITAPP_SEND_DELAY    (RESPONSE_POLL_RATE * 2)  // in MSecs
//  139 #endif
//  140 
//  141 // Send with or without APS ACKs
//  142 //#define TRANSMITAPP_TX_OPTIONS    (AF_DISCV_ROUTE | AF_ACK_REQUEST)
//  143 #define TRANSMITAPP_TX_OPTIONS    AF_DISCV_ROUTE
//  144 
//  145 #define TRANSMITAPP_INITIAL_MSG_COUNT  2
//  146 
//  147 #define TRANSMITAPP_TRANSMIT_TIME   4  // 4 MS
//  148 #define TRANSMITAPP_DISPLAY_TIMER   (2 * 1000)
//  149 
//  150 #if defined ( TRANSMITAPP_FRAGMENTED )
//  151 #define TRANSMITAPP_MAX_DATA_LEN    225
//  152 #else
//  153 #define TRANSMITAPP_MAX_DATA_LEN    102
//  154 #endif
//  155 
//  156 /*********************************************************************
//  157  * TYPEDEFS
//  158  */
//  159 
//  160 /*********************************************************************
//  161  * GLOBAL VARIABLES
//  162  */
//  163 
//  164 
//  165 // This is the buffer that is sent out as data.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  166 byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ];
TransmitApp_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z
//  167 
//  168 // This is the Cluster ID List and should be filled with Application
//  169 // specific cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  170 const cId_t TransmitApp_ClusterList[TRANSMITAPP_MAX_CLUSTERS] =
TransmitApp_ClusterList:
        DW 161
//  171 {
//  172   TRANSMITAPP_CLUSTERID_TESTMSG  // MSG Cluster ID
//  173 };
//  174 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  175 const SimpleDescriptionFormat_t TransmitApp_SimpleDesc =
TransmitApp_SimpleDesc:
        DB 1
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW TransmitApp_ClusterList
        DATA8
        DB 1
        DATA16
        DW TransmitApp_ClusterList
//  176 {
//  177   TRANSMITAPP_ENDPOINT,              //  int    Endpoint;
//  178   TRANSMITAPP_PROFID,                //  uint16 AppProfId[2];
//  179   TRANSMITAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  180   TRANSMITAPP_DEVICE_VERSION,        //  int    AppDevVer:4;
//  181   TRANSMITAPP_FLAGS,                 //  int    AppFlags:4;
//  182   TRANSMITAPP_MAX_CLUSTERS,          //  byte   AppNumInClusters;
//  183   (cId_t *)TransmitApp_ClusterList,  //  byte   *pAppInClusterList;
//  184   TRANSMITAPP_MAX_CLUSTERS,          //  byte   AppNumInClusters;
//  185   (cId_t *)TransmitApp_ClusterList   //  byte   *pAppInClusterList;
//  186 };
//  187 
//  188 // This is the Endpoint/Interface description.  It is defined here, but
//  189 // filled-in in TransmitApp_Init().  Another way to go would be to fill
//  190 // in the structure here and make it a "const" (in code space).  The
//  191 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  192 endPointDesc_t TransmitApp_epDesc;
TransmitApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  193 
//  194 /*********************************************************************
//  195  * EXTERNAL VARIABLES
//  196  */
//  197 
//  198 /*********************************************************************
//  199  * EXTERNAL FUNCTIONS
//  200  */
//  201 
//  202 /*********************************************************************
//  203  * LOCAL VARIABLES
//  204  */
//  205 
//  206 // Task ID for event processing - received when TransmitApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  207 byte TransmitApp_TaskID;
TransmitApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  208 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  209 devStates_t TransmitApp_NwkState;
TransmitApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  210 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  211 static byte TransmitApp_TransID;  // This is the unique message ID (counter)
TransmitApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  212 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  213 afAddrType_t TransmitApp_DstAddr;
TransmitApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  214 afAddrType_t TestDirectSent_DstAddr;
TestDirectSent_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  215 byte TransmitApp_State;
TransmitApp_State:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  216 
//  217 // Shadow of the OSAL system clock used for calculating actual time expired.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  218 static uint32 clkShdw;
clkShdw:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  219 // Running total count of test messages recv/sent since beginning current run.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  220 static uint32 rxTotal, txTotal;
rxTotal:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
txTotal:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  221 // Running count of test messages recv/sent since last display / update - 1 Hz.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  222 static uint32 rxAccum, txAccum;
rxAccum:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
txAccum:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  223 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  224 static byte timerOn;
timerOn:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  225 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  226 static byte timesToSend;
timesToSend:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  227 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  228 uint16 pktCounter;
pktCounter:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  229 
//  230 // Max Data Request Length

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  231 uint16 TransmitApp_MaxDataLength;
TransmitApp_MaxDataLength:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  232 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  233 uint8   NativeAddr=0x01;
NativeAddr:
        DATA8
        DS 1
        REQUIRE `?<Initializer for NativeAddr>`
        REQUIRE __INIT_XDATA_I
//  234 
//  235 #if defined(GTA_DEBUG)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  236 uint8 Test_Mark=0;
Test_Mark:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  237 uint8 Test_Buf[15];
Test_Buf:
        DS 15
        REQUIRE __INIT_XDATA_Z
//  238 #endif
//  239 
//  240 #if defined(GTA_WTHSB_R1)
//  241 
//  242 char temp_val[2];
//  243 char humi_val[2];
//  244 static uint8 readTempHumi(void);
//  245 #endif
//  246 
//  247 #if defined(GTA_WMSCB_R1)
//  248 
//  249 #endif
//  250 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  251 uint8 Flag_ReportData=0;
Flag_ReportData:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  252 
//  253 /*********************************************************************
//  254  * LOCAL FUNCTIONS
//  255  */
//  256 void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  257 void TransmitApp_HandleKeys( byte shift, byte keys );
//  258 void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  259 void TransmitApp_ProcessZDOIncomingMsgs( zdoIncomingMsg_t *inMsg );//microdjg
//  260 void TransmitApp_SendTheMessage( void );
//  261 void TransmitApp_ChangeState( void );
//  262 
//  263 void ReportData(ModBusFrame_t *pRxFrame);
//  264 uint16 FramePackage(uint8 *pFrame,uint8 addr,uint8 cmd,uint8 *data,uint16 datalen);
//  265 uint16 ReadADC(uint8 channel);
//  266 void SendDataRequest(uint8 *pBuf,uint16 len);
//  267 
//  268 /*********************************************************************
//  269  * NETWORK LAYER CALLBACKS
//  270  */
//  271 
//  272 /*********************************************************************
//  273  * PUBLIC FUNCTIONS
//  274  */
//  275 void TransmitApp_DisplayResults( void );
//  276 
//  277 /*********************************************************************
//  278  * @fn      TransmitApp_Init
//  279  *
//  280  * @brief   Initialization function for the Generic App Task.
//  281  *          This is called during initialization and should contain
//  282  *          any application specific initialization (ie. hardware
//  283  *          initialization/setup, table initialization, power up
//  284  *          notificaiton ... ).
//  285  *
//  286  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  287  *                    used to send messages and set timers.
//  288  *
//  289  * @return  none
//  290  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  291 void TransmitApp_Init( byte task_id )
TransmitApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function TransmitApp_Init
        CODE
//  292 {
        FUNCALL TransmitApp_Init, initUart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, afDataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        MOV     R6,A
//  293 #if !defined ( TRANSMITAPP_FRAGMENTED )
//  294   afDataReqMTU_t mtu;
//  295 #endif
//  296   uint16 i;
//  297   
//  298   #if defined(GTA_WTHSB_R1)
//  299   Hal_SHT11_Init();
//  300   s_connectionreset();
//  301   #endif
//  302   
//  303   
//  304   initUart(uartRxCB);//microdjg
        ; Setup parameters for call to function initUart
        MOV     R2,#??uartRxCB?relay & 0xff
        MOV     R3,#(??uartRxCB?relay >> 8) & 0xff
        LCALL   ??initUart?relay
//  305   osal_nv_item_init(ZCD_NV_NATIVE_ADDRESS,sizeof(NativeAddr),NULL);
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  306   osal_nv_read(ZCD_NV_NATIVE_ADDRESS,0,sizeof(NativeAddr),&NativeAddr);
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,#NativeAddr & 0xff
        MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  307   
//  308   TransmitApp_TaskID = task_id;
        MOV     A,R6
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    @DPTR,A
//  309   TransmitApp_NwkState = DEV_INIT;
        MOV     DPTR,#TransmitApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  310   TransmitApp_TransID = 0;
        MOV     DPTR,#TransmitApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  311 
//  312   pktCounter = 0;
        MOV     DPTR,#pktCounter
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  313 
//  314   TransmitApp_State = TRANSMITAPP_STATE_WAITING;
        MOV     DPTR,#TransmitApp_State
        MOVX    @DPTR,A
//  315 
//  316   // Device hardware initialization can be added here or in main() (Zmain.c).
//  317   // If the hardware is application specific - add it here.
//  318   // If the hardware is other parts of the device add it in main().
//  319 
//  320   TransmitApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;//°ó¶¨·¢
        MOV     DPTR,#TransmitApp_DstAddr + 8
        MOVX    @DPTR,A
//  321   TransmitApp_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  322   TransmitApp_DstAddr.addr.shortAddr = 0;//ÎÞËùÎ½
        MOV     DPTR,#TransmitApp_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  323 
//  324   // Fill out the endpoint description.
//  325   TransmitApp_epDesc.endPoint = TRANSMITAPP_ENDPOINT;
        MOV     DPTR,#TransmitApp_epDesc
        INC     A
        MOVX    @DPTR,A
//  326   TransmitApp_epDesc.task_id = &TransmitApp_TaskID;
        INC     DPTR
        MOV     A,#TransmitApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(TransmitApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  327   TransmitApp_epDesc.simpleDesc
//  328             = (SimpleDescriptionFormat_t *)&TransmitApp_SimpleDesc;
        INC     DPTR
        MOV     A,#TransmitApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(TransmitApp_SimpleDesc >> 8) & 0xff
        LCALL   ??Subroutine17_0 & 0xFFFF
//  329   TransmitApp_epDesc.latencyReq = noLatencyReqs;
//  330   
//  331   
//  332   
//  333   //if(ZG_DEVICE_COORDINATOR_TYPE)
//  334   //{
//  335     //HalLcdInit();
//  336     //HalLcd_HW_WriteLine(HAL_LCD_LINE_1,"GTA Zigbee Test");
//  337     HalLcdWriteString( "GTA Zigbee", HAL_LCD_LINE_1 );
??CrossCallReturnLabel_22:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "GTA Zigbee">` & 0xff
        MOV     R3,#(`?<Constant "GTA Zigbee">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  338   //}
//  339 
//  340 
//  341   // Register the endpoint/interface description with the AF
//  342   afRegister( &TransmitApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#TransmitApp_epDesc & 0xff
        MOV     R3,#(TransmitApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  343 
//  344   // Register for all key events - This app will handle all key events
//  345   RegisterForKeys( TransmitApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  346 
//  347   // Update the display
//  348 #if defined ( LCD_SUPPORTED )
//  349   HalLcdWriteString( "TransmitApp", HAL_LCD_LINE_2 );
//  350 #endif
//  351 
//  352   // Set the data length
//  353 #if defined ( TRANSMITAPP_FRAGMENTED )
//  354   TransmitApp_MaxDataLength = TRANSMITAPP_MAX_DATA_LEN;
//  355 #else
//  356   mtu.kvp        = FALSE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  357   mtu.aps.secure = FALSE;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine5 & 0xFFFF
//  358   TransmitApp_MaxDataLength = afDataReqMTU( &mtu );
??CrossCallReturnLabel_0:
        LCALL   ??afDataReqMTU?relay
        MOV     A,R1
        MOV     DPTR,#TransmitApp_MaxDataLength
        LCALL   ??Subroutine17_0 & 0xFFFF
//  359 #endif
//  360 
//  361   // Generate the data
//  362   for (i=0; i<TransmitApp_MaxDataLength; i++)
??CrossCallReturnLabel_25:
        MOV     R0,A
        SJMP    ??TransmitApp_Init_0
//  363   {
//  364     TransmitApp_Msg[i] = (uint8) i;
??TransmitApp_Init_1:
        MOV     A,#TransmitApp_Msg & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(TransmitApp_Msg >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
//  365   }
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
??TransmitApp_Init_0:
        MOV     R1,A
        MOV     DPTR,#TransmitApp_MaxDataLength
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??TransmitApp_Init_1
//  366 
//  367   ZDO_RegisterForZDOMsg( TransmitApp_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  368   ZDO_RegisterForZDOMsg( TransmitApp_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  369   ZDO_RegisterForZDOMsg( TransmitApp_TaskID,TRANSMITAPP_CLUSTERID_TESTMSG);
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#-0x5f
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  370   
//  371 }
        MOV     A,#0x2
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        LJMP    ??Subroutine14_0 & 0xFFFF
          CFI EndBlock cfiBlock1
//  372 
//  373 /*********************************************************************
//  374  * @fn      TransmitApp_ProcessEvent
//  375  *
//  376  * @brief   Generic Application Task event processor.  This function
//  377  *          is called to process all events for the task.  Events
//  378  *          include timers, messages and any other user defined events.
//  379  *
//  380  * @param   task_id  - The OSAL assigned task ID.
//  381  * @param   events - events to process.  This is a bit map and can
//  382  *                   contain more than one event.
//  383  *
//  384  * @return  none
//  385  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  386 UINT16 TransmitApp_ProcessEvent( byte task_id, UINT16 events )
TransmitApp_ProcessEvent:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function TransmitApp_ProcessEvent
        CODE
//  387 {
        FUNCALL TransmitApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_SetSendEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_SetSendEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_DisplayResults
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, SendBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  388   afIncomingMSGPacket_t *MSGpkt;
//  389   afDataConfirm_t *afDataConfirm;
//  390   (void)task_id;  // Intentionally unreferenced parameter
//  391 
//  392   // Data Confirmation message fields
//  393   ZStatus_t sentStatus;
//  394   byte sentEP;
//  395   
//  396   
//  397   
//  398   uint8 Frame[20];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
//  399   uint8 data[10];//
//  400   uint16 i=0,j=0;
//  401   uint8 led=0;
//  402   uint16 temp;
//  403   uint16 FrameLen;
//  404   
//  405 
//  406   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??TransmitApp_ProcessEvent_0 & 0xFFFF
//  407   {
//  408     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??TransmitApp_ProcessEvent_1
//  409     while ( MSGpkt )
//  410     {
//  411       switch ( MSGpkt->hdr.event )
//  412       {
//  413         case ZDO_CB_MSG:
//  414           TransmitApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  415           break;
//  416 
//  417         case KEY_CHANGE:
//  418           TransmitApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  419           break;
//  420 
//  421         case AF_DATA_CONFIRM_CMD:
//  422           // This message is received as a confirmation of a data packet sent.
//  423           // The status is of ZStatus_t type [defined in ZComDef.h]
//  424           // The message fields are defined in AF.h
//  425           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  426           sentEP = afDataConfirm->endpoint;
//  427           sentStatus = afDataConfirm->hdr.status;
//  428 
//  429           if ( (ZSuccess == sentStatus) &&
//  430                (TransmitApp_epDesc.endPoint == sentEP) )
//  431           {
//  432 #if !defined ( TRANSMITAPP_RANDOM_LEN )
//  433             txAccum += TransmitApp_MaxDataLength;
//  434 #endif
//  435             if ( !timerOn )
//  436             {
//  437               osal_start_timerEx( TransmitApp_TaskID,TRANSMITAPP_RCVTIMER_EVT,
//  438                                                      TRANSMITAPP_DISPLAY_TIMER);
//  439               clkShdw = osal_GetSystemClock();
//  440               timerOn = TRUE;
//  441             }
//  442           }
//  443 
//  444           // Action taken when confirmation is received: Send the next message.
//  445           TransmitApp_SetSendEvt();
//  446           break;
//  447 
//  448         case AF_INCOMING_MSG_CMD:
//  449           TransmitApp_MessageMSGCB( MSGpkt );
//  450           
//  451           break;
//  452 
//  453         case ZDO_STATE_CHANGE:
//  454           TransmitApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??TransmitApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#TransmitApp_NwkState
        MOVX    @DPTR,A
//  455           break;
//  456 
//  457         default:
//  458           break;
//  459       }
//  460 
//  461       // Release the memory
//  462       osal_msg_deallocate( (uint8 *)MSGpkt );
??TransmitApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  463 
//  464       // Next
//  465       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??TransmitApp_ProcessEvent_1:
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??TransmitApp_ProcessEvent_4 & 0xFFFF
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#0x40
        JZ      ??TransmitApp_ProcessEvent_5
        ADD     A,#-0x11
        JZ      ??TransmitApp_ProcessEvent_2
        ADD     A,#-0x2
        JZ      ??TransmitApp_ProcessEvent_6
        ADD     A,#-0x2a
        JZ      ??TransmitApp_ProcessEvent_7
        SJMP    ??TransmitApp_ProcessEvent_3
??TransmitApp_ProcessEvent_6:
        ; Setup parameters for call to function TransmitApp_ProcessZDOMsgs
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??TransmitApp_ProcessZDOMsgs?relay
        SJMP    ??TransmitApp_ProcessEvent_3
??TransmitApp_ProcessEvent_5:
        ; Setup parameters for call to function TransmitApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??TransmitApp_HandleKeys?relay
        SJMP    ??TransmitApp_ProcessEvent_3
??TransmitApp_ProcessEvent_7:
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_ProcessEvent_8
        MOV     DPTR,#TransmitApp_epDesc
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??TransmitApp_ProcessEvent_8
        MOV     DPTR,#TransmitApp_MaxDataLength
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     DPTR,#txAccum
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_TO_X
        MOV     DPTR,#timerOn
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_ProcessEvent_8
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL   ??osal_GetSystemClock?relay
        MOV     DPTR,#clkShdw
        LCALL   ?XSTORE_R2345
        MOV     DPTR,#timerOn
        MOV     A,#0x1
        MOVX    @DPTR,A
??TransmitApp_ProcessEvent_8:
        ; Setup parameters for call to function TransmitApp_SetSendEvt
        LCALL   ??TransmitApp_SetSendEvt?relay
        LJMP    ??TransmitApp_ProcessEvent_3 & 0xFFFF
//  466     }
//  467 
//  468     // Squash compiler warnings until values are used.
//  469     (void)sentStatus;
//  470     (void)sentEP;
//  471 
//  472     // Return unprocessed events
//  473     return (events ^ SYS_EVENT_MSG);
??TransmitApp_ProcessEvent_4:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??TransmitApp_ProcessEvent_9
//  474   }
//  475 
//  476   // Send a message out
//  477   if ( events & TRANSMITAPP_SEND_MSG_EVT )
??TransmitApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??TransmitApp_ProcessEvent_10
//  478   {
//  479     if ( TransmitApp_State == TRANSMITAPP_STATE_SENDING )
        MOV     DPTR,#TransmitApp_State
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_ProcessEvent_11
//  480     {
//  481       TransmitApp_SendTheMessage();
        ; Setup parameters for call to function TransmitApp_SendTheMessage
        LCALL   ??TransmitApp_SendTheMessage?relay
//  482     }
//  483 
//  484     // Return unprocessed events
//  485     return (events ^ TRANSMITAPP_SEND_MSG_EVT);
??TransmitApp_ProcessEvent_11:
        MOV     A,R6
        XRL     A,#0x1
        SJMP    ??TransmitApp_ProcessEvent_12
//  486   }
//  487 
//  488   // Timed wait from error
//  489   if ( events & TRANSMITAPP_SEND_ERR_EVT )
??TransmitApp_ProcessEvent_10:
        ANL     A,#0x4
        JZ      ??TransmitApp_ProcessEvent_13
//  490   {
//  491     TransmitApp_SetSendEvt();
        ; Setup parameters for call to function TransmitApp_SetSendEvt
        LCALL   ??TransmitApp_SetSendEvt?relay
//  492 
//  493     // Return unprocessed events
//  494     return (events ^ TRANSMITAPP_SEND_ERR_EVT);
        MOV     A,R6
        XRL     A,#0x4
        SJMP    ??TransmitApp_ProcessEvent_12
//  495   }
//  496 
//  497   // Receive timer
//  498   if ( events & TRANSMITAPP_RCVTIMER_EVT )
??TransmitApp_ProcessEvent_13:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??TransmitApp_ProcessEvent_14
//  499   {
//  500     // Setup to display the next result
//  501     osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT,
//  502                                             TRANSMITAPP_DISPLAY_TIMER );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  503     TransmitApp_DisplayResults();
        ; Setup parameters for call to function TransmitApp_DisplayResults
        LCALL   ??TransmitApp_DisplayResults?relay
//  504 
//  505     return (events ^ TRANSMITAPP_RCVTIMER_EVT);
        MOV     A,R6
        XRL     A,#0x2
        SJMP    ??TransmitApp_ProcessEvent_12
//  506   }
//  507   if ( events & TRANSMITAPP_BIND_REQUEST_EVT)//microdjg
??TransmitApp_ProcessEvent_14:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??TransmitApp_ProcessEvent_15
//  508   {
//  509     SendBindRequest();//×Ô¶¯¿ªÊ¼°ó¶¨ microdjg
        ; Setup parameters for call to function SendBindRequest
        LCALL   ??SendBindRequest?relay
//  510     //osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT,3000 );
//  511     return (events ^ TRANSMITAPP_BIND_REQUEST_EVT);
        MOV     A,R6
        XRL     A,#0x8
        SJMP    ??TransmitApp_ProcessEvent_12
//  512   }
//  513   
//  514   
//  515   if ( events & TRANSMITAPP_START_REPORT_EVT )
??TransmitApp_ProcessEvent_15:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??TransmitApp_ProcessEvent_16
//  516   {
//  517     if(Flag_ReportData)
        MOV     DPTR,#Flag_ReportData
        MOVX    A,@DPTR
        JZ      ??TransmitApp_ProcessEvent_17
//  518       {
//  519         osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  520       }
//  521     HalLedBlink(HAL_LED_1,1,50,300);
??TransmitApp_ProcessEvent_17:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x2c
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  522     
//  523     
//  524     
//  525     
//  526     #if defined ( GTA_WWSB_R1 )||(GTA_WFSB_R1) //´«¸ÐÆ÷   
//  527     temp=ReadADC(4);//¶ÁÓêµÎµçÑ¹Öµ
//  528     data[0]=1;
//  529     if(temp>3000)
//  530       data[1]=0x01;
//  531     else
//  532       data[1]=0x00;
//  533     //data[1]=LO_UINT16(temp);
//  534     //data[2]=HI_UINT16(temp);
//  535     FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
//  536     SendDataRequest(Frame,FrameLen);//·¢ËÍ
//  537     #endif
//  538     
//  539     
//  540     #if defined (GTA_WVSB_R1)||(GTA_WIRSB_R1)
//  541     temp=ReadADC(4);//¶ÁÓêµÎµçÑ¹Öµ
//  542     data[0]=1;
//  543     if(temp>3000)
//  544       data[1]=0x00;
//  545     else
//  546       data[1]=0x01;
//  547     FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
//  548     SendDataRequest(Frame,FrameLen);//·¢ËÍ
//  549     #endif
//  550     
//  551     #if defined ( GTA_WUSB_R1 )
//  552     IO_DIR_PORT_PIN(0, 6, IO_IN);
//  553     data[0]=1;
//  554     if(IO_SENSOR)
//  555       data[1]=0x01;
//  556     else
//  557       data[1]=0x00;
//  558     FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
//  559     SendDataRequest(Frame,FrameLen);//·¢ËÍ
//  560     #endif
//  561     
//  562     #if defined (GTA_WISB_R1)
//  563     temp=ReadADC(4);//
//  564     data[0]=2;
//  565     data[1]=LO_UINT16(temp);
//  566     data[2]=HI_UINT16(temp);
//  567     FrameLen=FramePackage(Frame,NativeAddr,0x03,data,3);//´ò°ü
//  568     SendDataRequest(Frame,FrameLen);//·¢ËÍ
//  569     #endif
//  570     
//  571     
//  572     #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷  
//  573     
//  574     readTempHumi();
//  575     data[0]=4;
//  576     data[1]=humi_val[0];//L
//  577     data[2]=humi_val[1];//H
//  578     data[3]=temp_val[0];
//  579     data[4]=temp_val[1];
//  580     FrameLen=FramePackage(Frame,NativeAddr,0x03,data,5);//´ò°ü
//  581     SendDataRequest(Frame,FrameLen);//·¢ËÍ
//  582     
//  583     #endif
//  584     
//  585     
//  586     
//  587     
//  588     return (events ^ TRANSMITAPP_START_REPORT_EVT);
        MOV     A,R6
        XRL     A,#0x10
??TransmitApp_ProcessEvent_12:
        MOV     R2,A
        MOV     A,R7
??TransmitApp_ProcessEvent_9:
        MOV     R3,A
        SJMP    ??TransmitApp_ProcessEvent_18
//  589   }
//  590   
//  591   
//  592 
//  593   // Discard unknown events
//  594   return 0;
??TransmitApp_ProcessEvent_16:
        MOV     R2,#0x0
        MOV     R3,#0x0
??TransmitApp_ProcessEvent_18:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock2
//  595 }
//  596 
//  597 /*********************************************************************
//  598  * Event Generation Functions
//  599  */
//  600 /*********************************************************************
//  601  * @fn      TransmitApp_ProcessZDOMsgs()
//  602  *
//  603  * @brief   Process response messages
//  604  *
//  605  * @param   none
//  606  *
//  607  * @return  none
//  608  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  609 void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
TransmitApp_ProcessZDOMsgs:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOMsgs
        CODE
//  610 {
        FUNCALL TransmitApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, TransmitApp_ProcessZDOIncomingMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  611   switch ( inMsg->clusterID )
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for TransmitApp_ProcessZDOMsgs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        161
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_ProcessZDOMsgs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_ProcessZDOMsgs_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_ProcessZDOMsgs_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_ProcessZDOMsgs_3
        CODE
//  612   {
//  613     case End_Device_Bind_rsp:
//  614       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
??TransmitApp_ProcessZDOMsgs_2:
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,R3
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_7:
        JNZ     ??TransmitApp_ProcessZDOMsgs_4
//  615       {
//  616         // Light LED
//  617         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  618         osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        SJMP    ??TransmitApp_ProcessZDOMsgs_3
//  619 
//  620       }
//  621 #if defined(BLINK_LEDS)
//  622       else
//  623       {
//  624         // Flash LED to show failure
//  625         //HalLedSet ( HAL_LED_2, HAL_LED_MODE_FLASH );//4
//  626         HalLedBlink(HAL_LED_2,1,50,1000);//Ö¸Ê¾°ó¶¨ÓÐÎó
??TransmitApp_ProcessZDOMsgs_4:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x2
        SJMP    ??TransmitApp_ProcessZDOMsgs_5
//  627       }
//  628 #endif
//  629       break;
//  630 
//  631     case Match_Desc_rsp:
//  632       {
//  633         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
??TransmitApp_ProcessZDOMsgs_1:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  634         if ( pRsp )
        MOV     A,R6
        ORL     A,R7
        JZ      ??TransmitApp_ProcessZDOMsgs_3
//  635         {
//  636           if ( pRsp->status == ZSuccess && pRsp->cnt )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_ProcessZDOMsgs_6
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??TransmitApp_ProcessZDOMsgs_6
//  637           {
//  638             TransmitApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#TransmitApp_DstAddr + 8
        MOV     A,#0x2
        LCALL   ?Subroutine8 & 0xFFFF
//  639             TransmitApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
??CrossCallReturnLabel_4:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#TransmitApp_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine8 & 0xFFFF
//  640             // Take the first endpoint, Can be changed to search through endpoints
//  641             TransmitApp_DstAddr.endPoint = pRsp->epList[0];
??CrossCallReturnLabel_5:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#TransmitApp_DstAddr + 9
        MOVX    @DPTR,A
//  642 
//  643             // Light LED
//  644             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  645           }
//  646           osal_mem_free( pRsp );
??TransmitApp_ProcessZDOMsgs_6:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
        SJMP    ??TransmitApp_ProcessZDOMsgs_3
//  647         }
//  648       }
//  649       break;
//  650       
//  651   case TRANSMITAPP_CLUSTERID_TESTMSG://microdjg
//  652     {  
//  653       //osal_set_event( TransmitApp_TaskID, AF_INCOMING_MSG_CMD );///
//  654       TransmitApp_ProcessZDOIncomingMsgs(inMsg);
??TransmitApp_ProcessZDOMsgs_0:
        ; Setup parameters for call to function TransmitApp_ProcessZDOIncomingMsgs
        LCALL   ??TransmitApp_ProcessZDOIncomingMsgs?relay
//  655       HalLedBlink(HAL_LED_4,1,50,500);///
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x8
??TransmitApp_ProcessZDOMsgs_5:
        LCALL   ??HalLedBlink?relay
//  656     }
//  657   }
//  658 }
??TransmitApp_ProcessZDOMsgs_3:
        SJMP    ??Subroutine14_0
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ??HalLedBlink?relay
          CFI EndBlock cfiBlock4
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  659 
//  660 /*********************************************************************
//  661  * @fn      TransmitApp_HandleKeys
//  662  *
//  663  * @brief   Handles all key events for this device.
//  664  *
//  665  * @param   shift - true if in shift/alt.
//  666  * @param   keys - bit field for key events. Valid entries:
//  667  *                 EVAL_SW4
//  668  *                 EVAL_SW3
//  669  *                 EVAL_SW2
//  670  *                 EVAL_SW1
//  671  *
//  672  * @return  none
//  673  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  674 void TransmitApp_HandleKeys( byte shift, byte keys )
TransmitApp_HandleKeys:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function TransmitApp_HandleKeys
        CODE
//  675 {
        FUNCALL TransmitApp_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_HandleKeys, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_HandleKeys, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  676   //zAddrType_t dstAddr;
//  677       
//  678     if ( keys == HAL_KEY_INT_1)
        MOV     A,#-0x1f
        XRL     A,R6
        JNZ     ??TransmitApp_HandleKeys_0
//  679     {
//  680       #if defined(GTA_DEBUG)
//  681       Test_Mark=0x01;
        MOV     DPTR,#Test_Mark
        MOV     A,#0x1
        MOVX    @DPTR,A
//  682       HalUARTWrite(HAL_UART_PORT_0,Test_Buf,15);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xf
        MOV     R5,#0x0
        MOV     R2,#Test_Buf & 0xff
        MOV     R3,#(Test_Buf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  683       #endif
//  684       Flag_ReportData=!Flag_ReportData;
        MOV     DPTR,#Flag_ReportData
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_HandleKeys_1
        MOV     A,#0x1
        SJMP    ??TransmitApp_HandleKeys_2
??TransmitApp_HandleKeys_1:
        CLR     A
??TransmitApp_HandleKeys_2:
        MOVX    @DPTR,A
//  685       HalLedBlink (HAL_LED_1, 1, 50, 100);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  686       if(Flag_ReportData)
        MOV     DPTR,#Flag_ReportData
        MOVX    A,@DPTR
        JZ      ??TransmitApp_HandleKeys_0
//  687       {
//  688         //osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 2000);
//  689         osal_set_event( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
          CFI EndBlock cfiBlock6
//  690       }
//  691     }
//  692  //}
//  693 }
??TransmitApp_HandleKeys_0:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock7
//  694 
//  695 /*********************************************************************
//  696  * LOCAL FUNCTIONS
//  697  */
//  698 
//  699 /*********************************************************************
//  700  * @fn      TransmitApp_MessageMSGCB
//  701  *
//  702  * @brief   Data message processor callback.  This function processes
//  703  *          any incoming data - probably from other devices.  So, based
//  704  *          on cluster ID, perform the intended action.
//  705  *
//  706  * @param   none
//  707  *
//  708  * @return  none
//  709  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  710 void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
TransmitApp_MessageMSGCB:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function TransmitApp_MessageMSGCB
        CODE
//  711 {
        ; Saved register size: 0
        ; Auto size: 0
//  712   uint16 i;
//  713   uint8 error = FALSE;
//  714 //HalLedBlink (HAL_LED_2, 1, 50, 300);
//  715 //HalUARTWrite(HAL_UART_PORT_0,pkt->cmd.Data,pkt->cmd.DataLength);//microdjg
//  716   switch ( pkt->clusterId )
//  717   {
//  718     case TRANSMITAPP_CLUSTERID_TESTMSG:
//  719       
//  720       //HalUARTWrite(HAL_UART_PORT_0,pkt->cmd.Data,pkt->cmd.DataLength);//microdjg
//  721       //HalLedBlink ( HAL_LED_2, 1, 50, 300 );//Blink to indicate RX
//  722       break;
//  723   default:break;
//  724   }
//  725 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock8
//  726 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  727 void TransmitApp_ProcessZDOIncomingMsgs( zdoIncomingMsg_t *inMsg )
TransmitApp_ProcessZDOIncomingMsgs:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOIncomingMsgs
        CODE
//  728 {
        FUNCALL TransmitApp_ProcessZDOIncomingMsgs, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOIncomingMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOIncomingMsgs, FrameUnPackage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOIncomingMsgs, ReportData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 24
        MOV     A,#-0x18
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  729     ModBusFrame_t RxFrame;
//  730     uint16 temp;
//  731     //uint8 recdatabuf[20];
//  732     HalLedBlink (HAL_LED_2, 1, 50, 300);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x2c
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedBlink?relay
//  733     uint8 i;
//  734     //#if defined(GTA_DEBUG)
//  735     //  uint8 i;
//  736     //#endif
//  737     
//  738     //HalUARTWrite(HAL_UART_PORT_0,inMsg->asdu,inMsg->asduLen);//²âÊÔ
//  739     
//  740     if(ZG_DEVICE_COORDINATOR_TYPE)
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_ProcessZDOIncomingMsgs_0
//  741     {
//  742       
//  743       if(inMsg->asduLen!=0&&inMsg->asdu[0]!=0)
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_9:
        JZ      ??TransmitApp_ProcessZDOIncomingMsgs_1
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,R7
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_8:
        JZ      ??TransmitApp_ProcessZDOIncomingMsgs_1
//  744       {/*
//  745         for(i=0;i<inMsg->asduLen;i++)
//  746         {
//  747           recdatabuf[i]=inMsg->asdu[i];
//  748         } 
//  749         HalUARTWrite(HAL_UART_PORT_0,recdatabuf,inMsg->asduLen);
//  750         */
//  751         HalUARTWrite(HAL_UART_PORT_0,inMsg->asdu,inMsg->asduLen);
        ; Setup parameters for call to function HalUARTWrite
        LCALL   ?Subroutine10 & 0xFFFF
//  752       }
??CrossCallReturnLabel_10:
        MOV     R4,A
        MOV     R5,#0x0
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  753       
//  754       //HalUARTWrite(HAL_UART_PORT_0,recdatabuf,inMsg->asduLen);
//  755       #if defined(GTA_DEBUG)
//  756       if(Test_Mark==0x01)
??TransmitApp_ProcessZDOIncomingMsgs_1:
        MOV     DPTR,#Test_Mark
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_ProcessZDOIncomingMsgs_2
//  757       {
//  758         for(i=0;i<15;i++)
//  759         {
//  760           Test_Buf[i]=0;
        CLR     A
        MOV     DPTR,#Test_Buf
        MOV     R0,#0xf
??TransmitApp_ProcessZDOIncomingMsgs_3:
        MOVX    @DPTR,A
        INC     DPTR
        DJNZ    R0,??TransmitApp_ProcessZDOIncomingMsgs_3
//  761         }
//  762         for(i=0;i<inMsg->asduLen;i++)
        MOV     R3,A
        SJMP    ??TransmitApp_ProcessZDOIncomingMsgs_4
//  763         {
//  764           Test_Buf[i]=inMsg->asdu[i];
??TransmitApp_ProcessZDOIncomingMsgs_5:
        MOV     DPL,R3
        MOV     R0,DPL
        LCALL   ?Subroutine13 & 0xFFFF
//  765         }
??CrossCallReturnLabel_20:
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R2
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#Test_Buf & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(Test_Buf >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R3
??TransmitApp_ProcessZDOIncomingMsgs_4:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     R0,A
        MOV     A,R3
        CLR     C
        SUBB    A,R0
        JC      ??TransmitApp_ProcessZDOIncomingMsgs_5
//  766         Test_Mark=0;
        MOV     DPTR,#Test_Mark
        CLR     A
        MOVX    @DPTR,A
        SJMP    ??TransmitApp_ProcessZDOIncomingMsgs_2
//  767       }
//  768       
//  769       #endif
//  770     }
//  771     else
//  772     {
//  773       FrameUnPackage(inMsg->asdu,&RxFrame);//check Package
??TransmitApp_ProcessZDOIncomingMsgs_0:
        ; Setup parameters for call to function FrameUnPackage
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ??FrameUnPackage?relay
//  774       if(RxFrame.COMFIRM==FRAME_CHECK_RIGHT)
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_ProcessZDOIncomingMsgs_2
//  775       {
//  776         ReportData(&RxFrame);
        ; Setup parameters for call to function ReportData
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ReportData?relay
//  777         
//  778       }
//  779     } 
//  780     
//  781 }
??TransmitApp_ProcessZDOIncomingMsgs_2:
        MOV     A,#0x18
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOIncomingMsgs
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+0
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOIncomingMsgs
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+0
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+0
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOV     A,R6
        ADD     A,#0x10
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_19:
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOIncomingMsgs
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_15
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+0
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_16
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+0
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOV     A,R6
        ADD     A,#0x13
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOIncomingMsgs
          CFI Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_10
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+0
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_11
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+0
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+0
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_15
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+0
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_16
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+0
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        MOV     DPL,A
        MOV     A,R7
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function TransmitApp_ProcessZDOMsgs
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_7
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+0
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_8
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+0
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_9
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+0
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_10
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+0
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_11
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+0
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+0
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_15
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+0
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_16
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+0
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+0
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker40 Using cfiCommon1
          CFI (cfiPicker40) NoFunction
          CFI (cfiPicker40) Picker
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiPicker40
//  782 
//  783 /*********************************************************************
//  784  * @fn      TransmitApp_SendTheMessage
//  785  *
//  786  * @brief   Send "the" message.
//  787  *
//  788  * @param   none
//  789  *
//  790  * @return  none
//  791  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  792 void TransmitApp_SendTheMessage( void )
TransmitApp_SendTheMessage:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function TransmitApp_SendTheMessage
        CODE
//  793 {
        FUNCALL TransmitApp_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_SendTheMessage, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_SendTheMessage, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  794   uint16 len;
//  795   uint8 tmp;
//  796 
//  797   do {
//  798     // put the sequence number in the message
//  799     tmp = HI_UINT8( TransmitApp_TransID );
??TransmitApp_SendTheMessage_0:
        MOV     DPTR,#TransmitApp_TransID
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     R6,A
//  800     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
        CLR     C
        SUBB    A,#0xa
        JNC     ??TransmitApp_SendTheMessage_1
        MOV     R0,#0x30
        SJMP    ??TransmitApp_SendTheMessage_2
??TransmitApp_SendTheMessage_1:
        MOV     R0,#0x37
//  801     TransmitApp_Msg[2] = tmp;
??TransmitApp_SendTheMessage_2:
        MOV     A,R0
        ADD     A,R6
        MOV     DPTR,#TransmitApp_Msg + 2
        MOVX    @DPTR,A
//  802     tmp = LO_UINT8( TransmitApp_TransID );
        MOV     DPTR,#TransmitApp_TransID
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     R6,A
//  803     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
        CLR     C
        SUBB    A,#0xa
        JNC     ??TransmitApp_SendTheMessage_3
        MOV     R0,#0x30
        SJMP    ??TransmitApp_SendTheMessage_4
??TransmitApp_SendTheMessage_3:
        MOV     R0,#0x37
//  804     TransmitApp_Msg[3] = tmp;
??TransmitApp_SendTheMessage_4:
        MOV     A,R0
        ADD     A,R6
        MOV     DPTR,#TransmitApp_Msg + 3
        MOVX    @DPTR,A
//  805 
//  806     len = TransmitApp_MaxDataLength;
//  807 
//  808 #if defined ( TRANSMITAPP_RANDOM_LEN )
//  809     len = (uint8)(osal_rand() & 0x7F);
//  810     if( len > TransmitApp_MaxDataLength || len == 0 )
//  811       len = TransmitApp_MaxDataLength;
//  812     else if ( len < 4 )
//  813       len = 4;
//  814 #endif
//  815 	
//  816     tmp = AF_DataRequest( &TransmitApp_DstAddr, &TransmitApp_epDesc,
//  817                            TRANSMITAPP_CLUSTERID_TESTMSG,
//  818                            len, TransmitApp_Msg,
//  819                           &TransmitApp_TransID,
//  820                            TRANSMITAPP_TX_OPTIONS,
//  821                            AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
        MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#TransmitApp_Msg & 0xff
        MOV     ?V0 + 1,#(TransmitApp_Msg >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     DPTR,#TransmitApp_MaxDataLength
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#-0x5f
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#TransmitApp_epDesc & 0xff
        MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
        MOV     R2,#TransmitApp_DstAddr & 0xff
        MOV     R3,#(TransmitApp_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     R6,A
//  822     HalLedBlink ( HAL_LED_3, 1, 50, 200 );//Blink to indicate TX  microdjg
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x38
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ??HalLedBlink?relay
//  823 
//  824 #if defined ( TRANSMITAPP_RANDOM_LEN )
//  825     if ( tmp == afStatus_SUCCESS )
//  826     {
//  827       txAccum += len;
//  828     }
//  829 #endif
//  830 
//  831     if ( timesToSend )
        MOV     DPTR,#timesToSend
        MOVX    A,@DPTR
        JZ      ??TransmitApp_SendTheMessage_5
//  832     {
//  833       timesToSend--;
//  834     }
//  835   } while ( (timesToSend != 0) && (afStatus_SUCCESS == tmp) );
        DEC     A
        MOVX    @DPTR,A
        JZ      ??TransmitApp_SendTheMessage_5
        MOV     A,R6
        JNZ     $+5
        LJMP    ??TransmitApp_SendTheMessage_0 & 0xFFFF
//  836 
//  837   if ( afStatus_SUCCESS == tmp )
??TransmitApp_SendTheMessage_5:
        MOV     A,R6
        JNZ     ??TransmitApp_SendTheMessage_6
//  838   {
//  839     pktCounter++;
        MOV     DPTR,#pktCounter
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        SJMP    ??TransmitApp_SendTheMessage_7
//  840   }
//  841   else
//  842   {
//  843     // Error, so wait (10 mSec) and try again.
//  844     osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_SEND_ERR_EVT, 10 );
??TransmitApp_SendTheMessage_6:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  845   }
//  846 }
??TransmitApp_SendTheMessage_7:
        LJMP    ??Subroutine14_0 & 0xFFFF
          CFI EndBlock cfiBlock41
//  847 
//  848 /*********************************************************************
//  849  * @fn      TransmitApp_ChangeState
//  850  *
//  851  * @brief   Toggle the Sending/Waiting state flag
//  852  *
//  853  * @param   none
//  854  *
//  855  * @return  none
//  856  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  857 void TransmitApp_ChangeState( void )
TransmitApp_ChangeState:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function TransmitApp_ChangeState
        CODE
//  858 {
        FUNCALL TransmitApp_ChangeState, TransmitApp_SetSendEvt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  859   if ( TransmitApp_State == TRANSMITAPP_STATE_WAITING )
        MOV     DPTR,#TransmitApp_State
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_ChangeState_0
//  860   {
//  861     TransmitApp_State = TRANSMITAPP_STATE_SENDING;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  862     TransmitApp_SetSendEvt();
        ; Setup parameters for call to function TransmitApp_SetSendEvt
        LCALL   ??TransmitApp_SetSendEvt?relay
//  863     timesToSend = TRANSMITAPP_INITIAL_MSG_COUNT;
        MOV     DPTR,#timesToSend
        MOV     A,#0x2
        SJMP    ??TransmitApp_ChangeState_1
//  864   }
//  865   else
//  866   {
//  867     TransmitApp_State = TRANSMITAPP_STATE_WAITING;
??TransmitApp_ChangeState_0:
        CLR     A
??TransmitApp_ChangeState_1:
        MOVX    @DPTR,A
          CFI EndBlock cfiBlock42
//  868   }
//  869 }
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock43
//  870 
//  871 /*********************************************************************
//  872  * @fn      TransmitApp_SetSendEvt
//  873  *
//  874  * @brief   Set the event flag
//  875  *
//  876  * @param   none
//  877  *
//  878  * @return  none
//  879  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  880 void TransmitApp_SetSendEvt( void )
TransmitApp_SetSendEvt:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function TransmitApp_SetSendEvt
        CODE
//  881 {
        FUNCALL TransmitApp_SetSendEvt, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  882 #if defined( TRANSMITAPP_DELAY_SEND )
//  883   // Adds a delay to sending the data
//  884   osal_start_timerEx( TransmitApp_TaskID,
//  885                     TRANSMITAPP_SEND_MSG_EVT, TRANSMITAPP_SEND_DELAY );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x38
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  886 #else
//  887   // No Delay - just send the data
//  888   osal_set_event( TransmitApp_TaskID, TRANSMITAPP_SEND_MSG_EVT );
//  889 #endif
//  890 }
        SJMP    ?Subroutine3
          CFI EndBlock cfiBlock44
//  891 
//  892 /*********************************************************************
//  893  * @fn      TransmitApp_DisplayResults
//  894  *
//  895  * @brief   Display the results and clear the accumulators
//  896  *
//  897  * @param   none
//  898  *
//  899  * @return  none
//  900  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  901 void TransmitApp_DisplayResults( void )
TransmitApp_DisplayResults:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function TransmitApp_DisplayResults
        CODE
//  902 {
        FUNCALL TransmitApp_DisplayResults, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, debug_msg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  903 #ifdef LCD_SUPPORTED
//  904   #define LCD_W  16
//  905   uint32 rxShdw, txShdw, tmp;
//  906   byte lcd_buf[LCD_W+1];
//  907   byte idx;
//  908 #endif
//  909 
//  910   // The OSAL timers are not real-time, so calculate the actual time expired.
//  911   uint32 msecs = osal_GetSystemClock() - clkShdw;
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL   ??osal_GetSystemClock?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     DPTR,#clkShdw
        MOV     R0,#?V0 + 4
        LCALL   ?L_SUB_X
//  912   clkShdw = osal_GetSystemClock();
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL   ??osal_GetSystemClock?relay
        MOV     DPTR,#clkShdw
        LCALL   ?XSTORE_R2345
//  913 
//  914   rxTotal += rxAccum;
        MOV     DPTR,#rxAccum
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#rxTotal
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
//  915   txTotal += txAccum;
        MOV     DPTR,#txAccum
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#txTotal
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
//  916 
//  917 #if defined ( LCD_SUPPORTED )
//  918   rxShdw = (rxAccum * 1000 + msecs/2) / msecs;
//  919   txShdw = (txAccum * 1000 + msecs/2) / msecs;
//  920 
//  921   osal_memset( lcd_buf, ' ', LCD_W );
//  922   lcd_buf[LCD_W] = NULL;
//  923 
//  924   idx = 4;
//  925   tmp = (rxShdw >= 100000) ? 99999 : rxShdw;
//  926   do
//  927   {
//  928     lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
//  929     tmp /= 10;
//  930   } while ( tmp );
//  931 
//  932   idx = LCD_W-1;
//  933   tmp = rxTotal;
//  934   do
//  935   {
//  936     lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
//  937     tmp /= 10;
//  938   } while ( tmp );
//  939 
//  940   HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_1 );
//  941   osal_memset( lcd_buf, ' ', LCD_W );
//  942 
//  943   idx = 4;
//  944   tmp = (txShdw >= 100000) ? 99999 : txShdw;
//  945   do
//  946   {
//  947     lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
//  948     tmp /= 10;
//  949   } while ( tmp );
//  950 
//  951   idx = LCD_W-1;
//  952   tmp = txTotal;
//  953   do
//  954   {
//  955     lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
//  956     tmp /= 10;
//  957   } while ( tmp );
//  958 
//  959   HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
//  960 
//  961 #elif defined( MT_TASK )
//  962   DEBUG_INFO( COMPID_APP, SEVERITY_INFORMATION, 3,
//  963               rxAccum, (uint16)msecs, (uint16)rxTotal );
        ; Setup parameters for call to function debug_msg
        MOV     DPTR,#rxTotal
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     DPTR,#rxAccum
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R3,#0x3
        MOV     R2,#0x3
        MOV     R1,#0x7
        LCALL   ??debug_msg?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  964 #else
//  965   (void)msecs;  // Not used when no output
//  966 #endif
//  967 
//  968   if ( (rxAccum == 0) && (txAccum == 0) )
        MOV     DPTR,#rxAccum
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        ORL     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??TransmitApp_DisplayResults_0
        MOV     DPTR,#txAccum
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        ORL     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??TransmitApp_DisplayResults_0
//  969   {
//  970     osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  971     timerOn = FALSE;
        MOV     DPTR,#timerOn
        CLR     A
        MOVX    @DPTR,A
//  972   }
//  973 
//  974   rxAccum = txAccum = 0;
??TransmitApp_DisplayResults_0:
        MOV     DPTR,#txAccum
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#rxAccum
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  975 }
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock45
//  976 
//  977 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  978 void initUart(halUARTCBack_t pf)
initUart:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function initUart
        CODE
//  979 {
        FUNCALL initUart, HalUARTOpen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
//  980   halUARTCfg_t uartConfig;
//  981   
//  982   uartConfig.configured           = TRUE;              
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  983   uartConfig.baudRate             = HAL_UART_BR_9600;//HAL_UART_BR_38400;  //HAL_UART_BR_19200;
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  984   uartConfig.flowControl          = FALSE;              
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  985   uartConfig.flowControlThreshold = 48;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x30
        LCALL   ??Subroutine17_0 & 0xFFFF
//  986   uartConfig.rx.maxBufSize        = RX_BUF_LEN;
??CrossCallReturnLabel_26:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  987   uartConfig.tx.maxBufSize        = 128;
??CrossCallReturnLabel_27:
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  988   
//  989   uartConfig.idleTimeout          = 6;   
??CrossCallReturnLabel_28:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  990   uartConfig.intEnable            = TRUE;              
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  991   uartConfig.callBackFunc         = pf;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine5 & 0xFFFF
//  992   
//  993   HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
??CrossCallReturnLabel_1:
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  994 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function TransmitApp_Init
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function initUart
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond48) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond48) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond48) CFA_SP SP+-5
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function afDataReqMTU
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49
//  995 
//  996 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  997 void uartRxCB( uint8 port, uint8 event )
uartRxCB:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function uartRxCB
        CODE
//  998 {
        FUNCALL uartRxCB, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 140, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 140, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uartRxCB, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 149, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 149, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uartRxCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 140, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 140, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uartRxCB, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 149, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 149, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uartRxCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 140, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 140, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 128
        MOV     A,#-0x80
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 140)
//  999   uint8 pBuf[RX_BUF_LEN];
// 1000   uint16 len;
// 1001   static uint16 destAddr;
// 1002   ModBusFrame_t *pRxFrame;
// 1003   zAddrType_t dstAddr;
// 1004   #if defined (GTA_WHFRFID_R1) 
// 1005   RC623Frame_t *pRC623Frame;
// 1006   uint8 Frame[15];//ÁÙÊ±Éè¶¨µÄ´óÐ¡  
// 1007   uint8 data[10];//
// 1008   uint16 FrameLen;
// 1009   uint8 i;
// 1010   #endif
// 1011  
// 1012     len = HalUARTRead( HAL_UART_PORT_0, pBuf, RX_BUF_LEN );
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#-0x80
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 1013     if ( len>0 ) 
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??uartRxCB_0
// 1014     {
// 1015       //SentDataInBind(pBuf,len);
// 1016       if(!ZG_DEVICE_COORDINATOR_TYPE)//·ÇÐ­µ÷Æ÷
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        MOV     DPTR,#TestDirectSent_DstAddr + 8
        JZ      ??uartRxCB_1
// 1017       {
// 1018         #if defined (GTA_WHFRFID_R1) 
// 1019         UnPackRC623Data(pBuf,pRC623Frame);
// 1020         if(pRC623Frame->Comfirm==FRAME_CHECK_RIGHT)
// 1021         {
// 1022           switch(pRC623Frame->Cmd)
// 1023           {
// 1024               case RFID_CMD_SET_ISOTYPE:
// 1025 
// 1026                 break;
// 1027               case RFID_CMD_SELECT_CARD:
// 1028 
// 1029                 break;
// 1030               case RFID_CMD_GET_CARD_ID:
// 1031                 data[0]=7;
// 1032                 data[1]=MODBUS_RFID_CMD_GET_CARD_ID&0x00FF;
// 1033                 data[2]=(MODBUS_RFID_CMD_GET_CARD_ID>>8)&0x00FF;
// 1034                 data[3]=pRC623Frame->Data[1];
// 1035                 data[4]=pRC623Frame->Data[2];
// 1036                 data[5]=pRC623Frame->Data[3];
// 1037                 data[6]=pRC623Frame->Data[4];
// 1038                 //data[4]=pRC623Frame->Data[3];
// 1039                 FrameLen=FramePackage(Frame,NativeAddr,0x03,data,7);//´ò°ü
// 1040                 SendDataRequest(Frame,FrameLen);//·¢ËÍ
// 1041                 break;
// 1042               case RFID_CMD_FIND_ISO14443_CARD:
// 1043                 //for(i=0;i<RC623Frame.DataLen;i++)
// 1044                 //{
// 1045                 //  RC623Frame.Data
// 1046                 //}
// 1047                 data[0]=5;//2+1+2
// 1048                 data[1]=MODBUS_RFID_CMD_FIND_ISO14443_CARD&0x00FF;
// 1049                 data[2]=(MODBUS_RFID_CMD_FIND_ISO14443_CARD>>8)&0x00FF;
// 1050                 data[3]=pRC623Frame->Data[0];
// 1051                 data[4]=pRC623Frame->Data[1];
// 1052                 data[5]=pRC623Frame->Data[2];
// 1053                 data[6]=pRC623Frame->Data[3];
// 1054                 FrameLen=FramePackage(Frame,NativeAddr,0x03,data,6);//´ò°ü
// 1055                 SendDataRequest(Frame,FrameLen);//·¢ËÍ
// 1056 
// 1057                 break;
// 1058               case RFID_CMD_CONFIG_KEY:
// 1059 
// 1060                 break;
// 1061               case RFID_CMD_READ_VAL:
// 1062 
// 1063                 break;
// 1064               default:
// 1065                 break;
// 1066           }
// 1067         }
// 1068         #else
// 1069         TestDirectSent_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;//µØÖ·´«ËÍ
        MOV     A,#0x2
        LCALL   ??Subroutine17_0 & 0xFFFF
// 1070         TestDirectSent_DstAddr.endPoint = 0;
// 1071         TestDirectSent_DstAddr.addr.shortAddr = 0x0000;
??CrossCallReturnLabel_23:
        MOV     DPTR,#TestDirectSent_DstAddr
        SJMP    ??CrossCallReturnLabel_2
// 1072     
// 1073         AF_DataRequest( 
// 1074                       &TestDirectSent_DstAddr,               //µØÖ·
// 1075                       &TransmitApp_epDesc,                //ÃèÊö
// 1076                       TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
// 1077                         len,                                  //len
// 1078                         pBuf,//TransmitApp_Msg,             //DATA
// 1079                       &TransmitApp_TransID,               //
// 1080                       TRANSMITAPP_TX_OPTIONS,
// 1081                       AF_DEFAULT_RADIUS 
// 1082                       );
// 1083         HalLedBlink (HAL_LED_3, 1, 50, 200);
// 1084         #endif
// 1085       }
// 1086       else
// 1087       {
// 1088         //destAddr=BUILD_UINT16(pBuf[1],pBuf[0]);
// 1089         if(ZG_DEVICE_COORDINATOR_TYPE)
// 1090         {
// 1091           TestDirectSent_DstAddr.addrMode=(afAddrMode_t)AddrBroadcast;//Addr16Bit;//µØÖ·´«ËÍ
??uartRxCB_1:
        LCALL   ?Subroutine6 & 0xFFFF
// 1092           TestDirectSent_DstAddr.endPoint = 0;
// 1093           TestDirectSent_DstAddr.addr.shortAddr = 0xffff;//destAddr;
??CrossCallReturnLabel_2:
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1094           //TestDirectSent_DstAddr.addr.extAddr
// 1095           
// 1096           AF_DataRequest( 
// 1097                       &TestDirectSent_DstAddr,               //µØÖ·
// 1098                       &TransmitApp_epDesc,                //ÃèÊö
// 1099                       TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
// 1100                         len,                                  //len
// 1101                         pBuf,//TransmitApp_Msg,             //DATA
// 1102                       &TransmitApp_TransID,               //
// 1103                       TRANSMITAPP_TX_OPTIONS,
// 1104                       AF_DEFAULT_RADIUS 
// 1105                       );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 141)
        MOV     ?V0 + 2,#TransmitApp_TransID & 0xff
        MOV     ?V0 + 3,#(TransmitApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 143)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 145)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 147)
        MOV     ?V0 + 0,#-0x5f
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 149)
        MOV     R1,#0x20
        MOV     R4,#TransmitApp_epDesc & 0xff
        MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
        MOV     R2,#TestDirectSent_DstAddr & 0xff
        MOV     R3,#(TestDirectSent_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 140)
// 1106           HalLedBlink (HAL_LED_3, 1, 50, 200);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x38
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ??HalLedBlink?relay
// 1107         }
// 1108       }
// 1109     }
// 1110 
// 1111 }
??uartRxCB_0:
        MOV     A,#-0x80
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond51 Using cfiCommon0
          CFI Function initUart
          CFI Conditional ??CrossCallReturnLabel_27
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function initUart
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond52) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond52) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond52) CFA_SP SP+-5
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        MOV     A,#-0x80
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine17_0:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function TransmitApp_Init
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function TransmitApp_Init
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+0
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function initUart
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond56) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond56) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond56) CFA_SP SP+-5
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function uartRxCB
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+0
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 140)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function SendDataRequest
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+0
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function initUart
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond59) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond59) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond59) CFA_SP SP+-5
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function initUart
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond60) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond60) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond60) CFA_SP SP+-5
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61
// 1112 /*********************************************************************
// 1113 *********************************************************************/
// 1114 
// 1115 
// 1116 
// 1117 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1118 void FrameUnPackage(uint8 *pBuf,ModBusFrame_t *pFrame)
FrameUnPackage:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI Function FrameUnPackage
        CODE
// 1119 {
        FUNCALL FrameUnPackage, Crc16Code
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 1120    uint16 crc;
// 1121    uint8 datalen;
// 1122    uint8 cmd;
// 1123    uint8 i;
// 1124    
// 1125    if(pBuf[0]==FRAME_HEAD)
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0x7e
        JZ      $+5
        LJMP    ??FrameUnPackage_0 & 0xFFFF
// 1126    {
// 1127    	cmd=pBuf[2];
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
// 1128 	switch(cmd)
        DEC     A
        JZ      ??FrameUnPackage_1
        ADD     A,#-0x2
        JZ      ??FrameUnPackage_1
        ADD     A,#-0x2
        JZ      ??FrameUnPackage_1
        DEC     A
        JZ      ??FrameUnPackage_1
        ADD     A,#-0x9
        JZ      ??FrameUnPackage_2
        DEC     A
        JNZ     $+5
        LJMP    ??FrameUnPackage_3 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??FrameUnPackage_4 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??FrameUnPackage_5 & 0xFFFF
        LJMP    ??FrameUnPackage_6 & 0xFFFF
// 1129 		{
// 1130 		case FUN_CODE_READ_COIL_STATE:		
// 1131 		case FUN_CODE_READ_HOLDING_REGISTERS:
// 1132 			datalen =4;
// 1133 			break;
// 1134 		case 0x05:	
// 1135 		case 0x06:
// 1136 			datalen =4;
??FrameUnPackage_1:
        MOV     ?V0 + 4,#0x4
// 1137 			break;
// 1138 		case 0x0F:
// 1139 			datalen =5+((BUILD_UINT16(pBuf[6],pBuf[5])+7)/8);//2+2+1+(N+7)/8
// 1140 			break;
// 1141 		case 0x10:
// 1142 			datalen=5+((BUILD_UINT16(pBuf[6],pBuf[5])*2));//2+2+1+2N
// 1143 			break;
// 1144 		case 0x11:
// 1145                         datalen = 0;
// 1146                         break;
// 1147 		case 0x12:
// 1148 			datalen = 1;	//1+ 6;
// 1149 			break;
// 1150 		default:pFrame->COMFIRM=FRAME_CHECK_CMD_WRONG;
// 1151 			return ;
// 1152 		}
// 1153    	crc=BUILD_UINT16(pBuf[3+datalen],pBuf[3+datalen+1]);
??FrameUnPackage_7:
        MOV     ?V0 + 2,?V0 + 4
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     ?V0 + 2,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 3,A
// 1154      if(crc==Crc16Code(pBuf+1,datalen+2))//pBuf+1  ²»¼ÆHEAD  ³¤¶ÈÊÇ1+1+1-1
        ; Setup parameters for call to function Crc16Code
        MOV     A,#0x2
        ADD     A,?V0 + 4
        MOV     R1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??Crc16Code?relay
        MOV     A,R2
        XRL     A,?V0 + 2
        JNZ     ??FrameUnPackage_8
        MOV     A,R3
        XRL     A,?V0 + 3
??FrameUnPackage_8:
        JZ      $+5
        LJMP    ??FrameUnPackage_9 & 0xFFFF
// 1155      	{
// 1156      		pFrame->CMD=cmd;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     A,?V0 + 5
        LCALL   ?Subroutine8 & 0xFFFF
// 1157 		pFrame->DATALEN=datalen;
??CrossCallReturnLabel_6:
        INC     DPTR
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
// 1158 		pFrame->ADDR=pBuf[1];
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
// 1159 		for(i=0;i<datalen;i++)
        MOV     R2,#0x0
        SJMP    ??FrameUnPackage_10
??FrameUnPackage_2:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x7
        MOV     ?V0 + 2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     A,#0x3
        MOV     R0,#?V0 + 2
        LCALL   ?US_SHR
        MOV     A,?V0 + 2
??FrameUnPackage_11:
        ADD     A,#0x5
        MOV     ?V0 + 4,A
        LJMP    ??FrameUnPackage_7 & 0xFFFF
??FrameUnPackage_3:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        SJMP    ??FrameUnPackage_11
??FrameUnPackage_4:
        MOV     ?V0 + 4,#0x0
        LJMP    ??FrameUnPackage_7 & 0xFFFF
??FrameUnPackage_5:
        MOV     ?V0 + 4,#0x1
        LJMP    ??FrameUnPackage_7 & 0xFFFF
??FrameUnPackage_6:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     A,#0x3
        SJMP    ??FrameUnPackage_12
// 1160                     {
// 1161                     pFrame->pData[i]=pBuf[3+i];
??FrameUnPackage_13:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1162                     }
        INC     R2
??FrameUnPackage_10:
        MOV     A,R2
        CLR     C
        SUBB    A,?V0 + 4
        JC      ??FrameUnPackage_13
// 1163                 pFrame->COMFIRM=FRAME_CHECK_RIGHT;
        LCALL   ?Subroutine11 & 0xFFFF
// 1164                 return ;//ÍêÈ«ÕýÈ· ²¢°Ñ°ü·µ»Ø
// 1165      	}
// 1166 	 	
// 1167    }
??CrossCallReturnLabel_13:
        MOV     A,#0x1
        SJMP    ??FrameUnPackage_12
// 1168    else
// 1169    {
// 1170    	 pFrame->COMFIRM=FRAME_CHECK_HEAD_WRONG;
??FrameUnPackage_0:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     A,#0x2
??FrameUnPackage_12:
        MOVX    @DPTR,A
          CFI EndBlock cfiBlock62
// 1171 	 return ;
// 1172    }
??FrameUnPackage_9:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
// 1173      
// 1174 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock63 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock63

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond64 Using cfiCommon0
          CFI Function FrameUnPackage
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function FrameUnPackage
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+0
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function FrameUnPackage
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+0
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker67 Using cfiCommon1
          CFI (cfiPicker67) NoFunction
          CFI (cfiPicker67) Picker
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond68 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function TransmitApp_ProcessZDOMsgs
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+0
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function FrameUnPackage
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+0
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        RET
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71
// 1175 
// 1176 
// 1177 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1178 uint16 Crc16Code(uint8 *str, uint8 len)//Modbus Ckeck Code.//LO First
Crc16Code:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function Crc16Code
        CODE
// 1179 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R1
        MOV     R4,A
// 1180     uint16 code = 0xFFFF;
        MOV     R2,#-0x1
        MOV     R3,#-0x1
// 1181     uint16 Poly = 0xA001;
// 1182 // Dnp is 0x3D65 or A6BC
// 1183 
// 1184     int flag = 0;
        MOV     R6,#0x0
// 1185     int j = 0;
        MOV     R0,#0x0
        MOV     R1,#0x0
// 1186 
// 1187     for(j=0; j<len; j++)
        SJMP    ??Crc16Code_0
// 1188     {
// 1189 		code ^= (uint16) (*str);
??Crc16Code_1:
        MOVX    A,@DPTR
        XRL     A,R2
        MOV     R2,A
// 1190 		for(int i=0; i<8;i++)
        MOV     R5,#0x8
// 1191 		{
// 1192 			if ( code & 0x0001 ) flag = 1;
??Crc16Code_2:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??Crc16Code_3
        MOV     R6,#0x1
// 1193 			code = code>>1;
??Crc16Code_3:
        MOV     A,R3
        CLR     C
        RRC     A
        MOV     R3,A
        MOV     A,R2
        RRC     A
        MOV     R2,A
// 1194 			if ( flag )
        MOV     A,R6
        JZ      ??Crc16Code_4
// 1195 			{
// 1196 				code ^= Poly;
        MOV     A,#0x1
        XRL     A,R2
        MOV     R2,A
        MOV     A,#-0x60
        XRL     A,R3
        MOV     R3,A
// 1197 				flag = 0;
        MOV     R6,#0x0
// 1198 			}
// 1199 		}
??Crc16Code_4:
        DEC     R5
        MOV     A,R5
        JNZ     ??Crc16Code_2
// 1200 		str ++;
        INC     DPTR
// 1201     }
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??Crc16Code_0:
        MOV     ?V0 + 0,R4
        CLR     C
        MOV     A,R0
        SUBB    A,?V0 + 0
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??Crc16Code_1
// 1202     return code;
        LJMP    ??Subroutine14_0 & 0xFFFF
          CFI EndBlock cfiBlock72
// 1203 }
// 1204 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1205 void SentDataInBind(uint8 *pdata,uint16 len)
SentDataInBind:
          CFI Block cfiBlock73 Using cfiCommon0
          CFI Function SentDataInBind
        CODE
// 1206 {
        FUNCALL SentDataInBind, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SentDataInBind, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1207   //uint8 data[]="hello";
// 1208      AF_DataRequest( 
// 1209                     &TransmitApp_DstAddr,               //µØÖ·
// 1210                     &TransmitApp_epDesc,                //ÃèÊö
// 1211                     TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
// 1212                     len,                                  //len
// 1213                     pdata,//TransmitApp_Msg,             //DATA
// 1214                     &TransmitApp_TransID,               //
// 1215                     TRANSMITAPP_TX_OPTIONS,
// 1216                     AF_DEFAULT_RADIUS 
// 1217                     );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
        MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#-0x5f
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#TransmitApp_epDesc & 0xff
        MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
        MOV     R2,#TransmitApp_DstAddr & 0xff
        MOV     R3,#(TransmitApp_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1218      HalLedBlink (HAL_LED_3, 1, 50, 300);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x2c
        MOV     R5,#0x1
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock73
// 1219 }
// 1220 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1221 void SendBindRequest(void)
SendBindRequest:
          CFI Block cfiBlock74 Using cfiCommon0
          CFI Function SendBindRequest
        CODE
// 1222 {
        FUNCALL SendBindRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendBindRequest, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendBindRequest, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
// 1223     zAddrType_t dstAddr;
// 1224     dstAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1225     dstAddr.addr.shortAddr = 0x0000; // Coordinator
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1226     ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
// 1227                   TransmitApp_epDesc.endPoint,
// 1228                   TRANSMITAPP_PROFID,
// 1229                   TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
// 1230                   TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
// 1231                   FALSE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     ?V0 + 0,#TransmitApp_ClusterList & 0xff
        MOV     ?V0 + 1,#(TransmitApp_ClusterList >> 8) & 0xff
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0xf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     DPTR,#TransmitApp_epDesc
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
// 1232     HalLedBlink (HAL_LED_1, 1, 50, 300);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x2c
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
// 1233 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock74
// 1234 
// 1235 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1236 void ReportData(ModBusFrame_t *pRxFrame)
ReportData:
          CFI Block cfiBlock75 Using cfiCommon0
          CFI Function ReportData
        CODE
// 1237 {
        FUNCALL ReportData, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReportData, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReportData, FramePackage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReportData, SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReportData, FramePackage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReportData, SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1238  /* 
// 1239   #if defined ( GTA_WWSB_R1 ) //ÓêµÎ´«¸ÐÆ÷   
// 1240   uint8 Frame[10];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
// 1241   uint8 data[3];//GTA_WWSB_R1 Êý¾ÝÎª3
// 1242   #endif
// 1243   #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷   
// 1244   uint8 Frame[10];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
// 1245   uint8 data[5];//GTA_WWSB_R1 Êý¾ÝÎª3
// 1246   #endif
// 1247 */
// 1248 
// 1249   #if defined (GTA_WHFRFID_R1)
// 1250   RC623Frame_t pframe;
// 1251   uint16 cmd;
// 1252   #endif
// 1253 
// 1254   uint8 Frame[20];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
// 1255   uint8 data[10];//
// 1256   uint16 i=0,j=0;
// 1257   uint8 led=0;
// 1258 
// 1259   
// 1260   uint16 temp;
// 1261   uint16 FrameLen;
// 1262   switch(pRxFrame->CMD)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#-0x3
        JZ      ??ReportData_0
        ADD     A,#-0xe
        JNZ     $+5
        LJMP    ??ReportData_1 & 0xFFFF
        DEC     A
        JZ      ??ReportData_2
        LJMP    ??ReportData_3 & 0xFFFF
// 1263       {
// 1264       case FUN_CODE_READ_HOLDING_REGISTERS://¶Á¼Ä´æÆ÷Êý¾Ý
// 1265         {
// 1266           //temp=BUILD_UINT16(pRxFrame->pData[1],pRxFrame->pData[0]);
// 1267           //if(temp==NativeAddr)//1 2×Ö½ÚÊÇµØÖ·£¬ÊÇ·ñ±¾»úµØÖ·
// 1268           if(pRxFrame->ADDR==NativeAddr)//ÊÇ·ñ±¾»úµØÖ·
??ReportData_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#NativeAddr
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      $+5
        LJMP    ??ReportData_3 & 0xFFFF
// 1269           {
// 1270               #if defined ( GTA_WWSB_R1 )||(GTA_WFSB_R1) //´«¸ÐÆ÷   
// 1271               temp=ReadADC(4);//¶ÁÓêµÎµçÑ¹Öµ
// 1272               data[0]=1;
// 1273               if(temp>3000)
// 1274                 data[1]=0x01;
// 1275               else
// 1276                 data[1]=0x00;
// 1277               //data[1]=LO_UINT16(temp);
// 1278               //data[2]=HI_UINT16(temp);
// 1279               FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
// 1280               SendDataRequest(Frame,FrameLen);//·¢ËÍ
// 1281               #endif
// 1282               
// 1283               #if defined ( GTA_WUSB_R1 )
// 1284               IO_DIR_PORT_PIN(0, 6, IO_IN);
// 1285               data[0]=1;
// 1286               if(IO_SENSOR)
// 1287                 data[1]=0x01;
// 1288               else
// 1289                 data[1]=0x00;
// 1290               FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
// 1291               SendDataRequest(Frame,FrameLen);//·¢ËÍ
// 1292               #endif
// 1293 
// 1294               #if defined(GTA_WRCB_R1)
// 1295               IO_DIR_PORT_PIN(0, 6, IO_OUT);
        ORL     0xfd,#0x40
// 1296               IO_DIR_PORT_PIN(0, 0, IO_OUT);
        ORL     0xfd,#0x1
// 1297               if(pRxFrame->pData[0]==0x01)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ReportData_4
// 1298                 {
// 1299                   if(pRxFrame->pData[1]==0x00)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ReportData_5
// 1300                     IO_RELAY1=0;
        CLR     0x80.6
// 1301                   if(pRxFrame->pData[1]==0x01)
??ReportData_5:
        XRL     A,#0x1
        JNZ     ??ReportData_4
// 1302                     IO_RELAY1=1;
        SETB    0x80.6
// 1303                 }
// 1304               if(pRxFrame->pData[0]==0x02)
??ReportData_4:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??ReportData_3 & 0xFFFF
// 1305                 {
// 1306                   if(pRxFrame->pData[1]==0x00)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ReportData_6
// 1307                     IO_RELAY2=0;
        CLR     0x80.0
// 1308                   if(pRxFrame->pData[1]==0x01)
??ReportData_6:
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ReportData_3 & 0xFFFF
// 1309                     IO_RELAY2=1;
        SETB    0x80.0
        LJMP    ??ReportData_3 & 0xFFFF
// 1310                 }
// 1311               #endif
// 1312               
// 1313               
// 1314               #if defined (GTA_WVSB_R1)||(GTA_WIRSB_R1)
// 1315               temp=ReadADC(4);//¶ÁÓêµÎµçÑ¹Öµ
// 1316               data[0]=1;
// 1317               if(temp>3000)
// 1318                 data[1]=0x00;
// 1319               else
// 1320                 data[1]=0x01;
// 1321               FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
// 1322               SendDataRequest(Frame,FrameLen);//·¢ËÍ
// 1323               #endif
// 1324               
// 1325               #if defined (GTA_WISB_R1)
// 1326               temp=ReadADC(4);//
// 1327               data[0]=2;
// 1328               data[1]=LO_UINT16(temp);
// 1329               data[2]=HI_UINT16(temp);
// 1330               FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,data,3);//´ò°ü
// 1331               SendDataRequest(Frame,FrameLen);//·¢ËÍ
// 1332               #endif
// 1333               
// 1334               
// 1335               #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷  
// 1336               osal_int_disable( INTS_ALL );
// 1337               readTempHumi();
// 1338               osal_int_enable( INTS_ALL );
// 1339               data[0]=4;
// 1340               data[1]=humi_val[0];//L
// 1341               data[2]=humi_val[1];//H
// 1342               data[3]=temp_val[0];
// 1343               data[4]=temp_val[1];
// 1344               FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,data,5);//´ò°ü
// 1345               SendDataRequest(Frame,FrameLen);//·¢ËÍ
// 1346               #endif
// 1347               
// 1348               #if defined (GTA_WHFRFID_R1)
// 1349               cmd=BUILD_UINT16(pRxFrame->pData[0],pRxFrame->pData[1]);
// 1350                 switch(cmd)
// 1351                 {
// 1352                 case MODBUS_RFID_CMD_FIND_ISO14443_CARD://7E xx 03 01 0A 00 00 xx
// 1353                   FrameLen=PackUpRC623Data(RFID_CMD_FIND_ISO14443_CARD,&(pRxFrame->pData[2]),Frame);//´ò°ü
// 1354                    HalUARTWrite(HAL_UART_PORT_0,Frame,FrameLen);
// 1355                   //SendDataRequest(Frame,FrameLen);
// 1356                   break;
// 1357                 case MODBUS_RFID_CMD_GET_CARD_ID:
// 1358                   FrameLen=PackUpRC623Data(RFID_CMD_GET_CARD_ID,&(pRxFrame->pData[2]),Frame);//´ò°ü
// 1359                    HalUARTWrite(HAL_UART_PORT_0,Frame,FrameLen);
// 1360                   break;
// 1361                 case MODBUS_RFID_CMD_READ_VAL:
// 1362                   
// 1363                   break;
// 1364                 default:
// 1365                   break;
// 1366                 }
// 1367               
// 1368               #endif
// 1369                 
// 1370               #if defined(GTA_WMSCB_R1)
// 1371                /*
// 1372               ctrl_GTA_WMSCB('M',0x80);
// 1373               for(j=0;j<1000;j++)
// 1374               {
// 1375                
// 1376                ctrl_GTA_WMSCB('A',led);
// 1377                ctrl_GTA_WMSCB('B',led++);
// 1378               StepMotorRun(1,4096);
// 1379               StepMotorRun(0,4096);
// 1380               }
// 1381                 */
// 1382                 init_GTA_WMSCB();
// 1383                 ctrl_GTA_WMSCB('M',0x80);
// 1384                 if(pRxFrame->pData[0]==0x00)
// 1385                 {
// 1386                   //ctrl_GTA_WMSCB('M',0x80);
// 1387                   osal_int_disable( INTS_ALL );
// 1388                   StepMotorRun(pRxFrame->pData[1],BUILD_UINT16(pRxFrame->pData[2],pRxFrame->pData[3]));
// 1389                   osal_int_enable( INTS_ALL );
// 1390                 }
// 1391                 if(pRxFrame->pData[0]==0x01)
// 1392                 {
// 1393                   //ctrl_GTA_WMSCB('M',0x80);
// 1394                   ctrl_GTA_WMSCB('A',pRxFrame->pData[1]);
// 1395                 }
// 1396                 if(pRxFrame->pData[0]==0x02)
// 1397                 {
// 1398 
// 1399                   SegDisplay(pRxFrame->pData[1]);
// 1400                 }
// 1401               #endif
// 1402               
// 1403           }
// 1404         }
// 1405         break;
// 1406       case FUN_CODE_SET_ADDR://ÉèµØÖ·
// 1407         {
// 1408           if(pRxFrame->ADDR==NativeAddr)//ÊÇ·ñ±¾»úµØÖ·
??ReportData_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#NativeAddr
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      $+5
        LJMP    ??ReportData_3 & 0xFFFF
// 1409           {
// 1410           NativeAddr=pRxFrame->pData[0];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#NativeAddr
        MOVX    @DPTR,A
// 1411           osal_nv_item_init(ZCD_NV_NATIVE_ADDRESS,sizeof(NativeAddr),NULL);
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1412           osal_nv_write(ZCD_NV_NATIVE_ADDRESS,0,sizeof(NativeAddr),&NativeAddr);
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#NativeAddr & 0xff
        MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1413           FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,pRxFrame->pData,1);//´ò°ü
// 1414           SendDataRequest(Frame,FrameLen);//·¢ËÍ
        ; Setup parameters for call to function SendDataRequest
        ; Setup parameters for call to function FramePackage
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R6
        ADD     A,#0x3
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        SJMP    ??ReportData_7
          CFI CFA_XSP16 add(XSP16, 30)
// 1415           }
// 1416         }
// 1417         break;
// 1418       case FUN_CODE_READ_ADDR://¶ÁµØÖ·
// 1419         {
// 1420           FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,&NativeAddr,1);//´ò°ü
// 1421           SendDataRequest(Frame,FrameLen);//·¢ËÍ
??ReportData_1:
        ; Setup parameters for call to function SendDataRequest
        ; Setup parameters for call to function FramePackage
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 0,#NativeAddr & 0xff
        MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x11
??ReportData_7:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??FramePackage?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SendDataRequest?relay
// 1422           
// 1423         }
// 1424         break;
// 1425       }
// 1426   
// 1427   
// 1428 
// 1429 }
??ReportData_3:
        MOV     A,#0x14
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock75
        REQUIRE P0DIR
        REQUIRE _A_P0
// 1430 #if defined(GTA_WMSCB_R1)
// 1431 void StepMotorRun(uint8 Dir,uint16 StepNum)
// 1432 {
// 1433   uint8 ForwardStep[4]={0x03,0x09,0x0C,0x06};
// 1434   uint8 BackStep[4]={0x03,0x06,0x0C,0x09};
// 1435   uint16 i=0,j=0,k=0;
// 1436   uint8 index=0,l=0;
// 1437   for(i=0;i<StepNum;i++)
// 1438   {
// 1439     if(Dir)
// 1440       ctrl_GTA_WMSCB('C',ForwardStep[index]);
// 1441     else
// 1442       ctrl_GTA_WMSCB('C',BackStep[index]);
// 1443     if(i==(k*255-1)||i==0)
// 1444     {
// 1445       SegDisplay(l);
// 1446       if(l++>8)l=0;
// 1447       k++;
// 1448     }
// 1449     ctrl_GTA_WMSCB('A',i);
// 1450     
// 1451     if(++index>=4)index=0;
// 1452     
// 1453     for(j=0;j<3000;j++)
// 1454     {
// 1455       asm("nop");            
// 1456     }
// 1457     //ctrl_GTA_WMSCB('A',StepNum);
// 1458   }
// 1459 }
// 1460 
// 1461 void SegDisplay(uint8 num)
// 1462 {
// 1463   uint8 DispNum[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
// 1464   //ctrl_GTA_WMSCB('M',0x80);
// 1465   if(num<0x10)
// 1466     ctrl_GTA_WMSCB('B',DispNum[num]);
// 1467 }
// 1468 #endif

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1469 uint16 FramePackage(uint8 *pFrame,uint8 addr,uint8 cmd,uint8 *data,uint16 datalen)
FramePackage:
          CFI Block cfiBlock76 Using cfiCommon0
          CFI Function FramePackage
        CODE
// 1470 {
        FUNCALL FramePackage, Crc16Code
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
// 1471   uint16 i;
// 1472   uint16 crc;
// 1473   uint8 *p;
// 1474     p=pFrame;
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1475   *p++=FRAME_HEAD;//²»Ã÷bug ÔÙ¼ÓÒ»¸ö×Ö½Ú
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x7e
        MOVX    @DPTR,A
        INC     DPTR
// 1476   *p++=FRAME_HEAD;
        MOVX    @DPTR,A
        INC     DPTR
// 1477   *p++=addr;
        MOV     A,R1
        MOVX    @DPTR,A
        INC     DPTR
// 1478   *p++=cmd;
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1479   for(i=0;i<datalen;i++)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        SJMP    ??FramePackage_0
// 1480   {
// 1481     *p++=*data++;
??FramePackage_1:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1482   }
        MOV     A,R4
        ADD     A,#0x1
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
??FramePackage_0:
        CLR     C
        MOV     A,R4
        SUBB    A,?V0 + 0
        MOV     A,R5
        SUBB    A,?V0 + 1
        JC      ??FramePackage_1
// 1483   //crc=Crc16Code(pFrame+1,datalen+2);//FRAME_HEAD²»¼Æ
// 1484    crc=Crc16Code(pFrame+2,datalen+2);//FRAME_HEAD²»¼Æ
        ; Setup parameters for call to function Crc16Code
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??Crc16Code?relay
// 1485   *p++=LO_UINT16(crc);
        MOV     A,R2
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        INC     DPTR
// 1486   *p=HI_UINT16(crc);
        MOV     A,R3
        MOVX    @DPTR,A
// 1487   //return datalen+5;
// 1488   return datalen+6;//¶à¼ÓÒ»¸öFRAME_HEAD
        MOV     A,?V0 + 0
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock76
// 1489 }
// 1490 
// 1491   /*********************************************************************
// 1492  * º¯ÊýÃû³Æ£ºReadADC
// 1493  * ¹¦    ÄÜ£º¶ÁÈ¡ADCÖµ
// 1494  * Èë¿Ú²ÎÊý£ºÍ¨µÀ
// 1495  * ³ö¿Ú²ÎÊý£ºÎÞ
// 1496  * ·µ »Ø Öµ£ºADÊý¾Ý()
// 1497  ********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1498 uint16 ReadADC( uint8 channel )
ReadADC:
          CFI Block cfiBlock77 Using cfiCommon0
          CFI Function ReadADC
        CODE
// 1499 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
// 1500   volatile unsigned char tmp,n;
// 1501   signed short adcvalue;
// 1502   float voltagevalue_X;
// 1503 
// 1504   /* XÖá¼ÓËÙ¶È²É¼¯ */
// 1505   /* ÉèÖÃ»ù×¼µçÑ¹¡¢³éÈ¡ÂÊºÍµ¥¶ËÊäÈëÍ¨µÀ */
// 1506   ADCCON3 = ((0x02 << 6) |  // ²ÉÓÃAVDD5Òý½ÅÉÏµÄµçÑ¹Îª»ù×¼µçÑ¹
// 1507              (0x03 << 4) |  // ³éÈ¡ÂÊÎª512£¬ÏàÓ¦µÄÓÐÐ§Î»Îª12Î»(×î¸ßÎ»Îª·ûºÅÎ»)
// 1508              channel);
        MOV     A,#-0x50
        ORL     A,R4
        MOV     0xb6,A
// 1509 
// 1510   /* µÈ´ýÍ¨µÀ×ª»»Íê³É */
// 1511   while ((ADCCON1 & 0x80) != 0x80);
??ReadADC_0:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JNC     ??ReadADC_0
// 1512 
// 1513   /* ´ÓADCL£¬ADCH¶ÁÈ¡×ª»»Öµ£¬´Ë²Ù×÷»¹ÇåÁãADCCON1.EOC */
// 1514   adcvalue = (signed short)ADCL;
        MOV     A,0xba
        MOV     ?V0 + 0,A
// 1515   adcvalue |= (signed short)(ADCH << 8); 
        MOV     A,0xbb
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     ?V0 + 1,A
// 1516 
// 1517   /* ÈôadcvalueÐ¡ÓÚ0£¬¾ÍÈÏÎªËüÎª0 */
// 1518   if(adcvalue < 0) adcvalue = 0;
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??ReadADC_1
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R0
// 1519     
// 1520   adcvalue >>= 4;  // È¡³ö12Î»ÓÐÐ§Î»
// 1521     
// 1522   /* ½«×ª»»Öµ»»ËãÎªÊµ¼ÊµçÑ¹Öµ */
// 1523   voltagevalue_X = (adcvalue * 3.3) / 2047;  // 2047ÊÇÄ£ÄâÊäÈë´ïµ½VREFÊ±µÄÂúÁ¿³ÌÖµ
// 1524                                              // ÓÉÓÚÓÐÐ§Î»ÊÇ12Î»(×î¸ßÎ»Îª·ûºÅÎ»)£¬
// 1525                                              // ËùÒÔÕýµÄÂúÁ¿³ÌÖµÎª2047
// 1526                                              // ´Ë´¦£¬VREF = 3.3V
// 1527   return ((uint16)(voltagevalue_X * 1000));  // µçÑ¹·Å´ó100±¶±ãÓÚ´«Êä¼°ÉÏÎ»»ú´¦Àí
??ReadADC_1:
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     A,?V0 + 1
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_40533333
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_44ffe000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock77
        REQUIRE ADCCON3
        REQUIRE ADCCON1
        REQUIRE ADCL
        REQUIRE ADCH
// 1528 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1529 void SendDataRequest(uint8 *pBuf,uint16 len)
SendDataRequest:
          CFI Block cfiBlock78 Using cfiCommon0
          CFI Function SendDataRequest
        CODE
// 1530 {
        FUNCALL SendDataRequest, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendDataRequest, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1531     if(!ZG_DEVICE_COORDINATOR_TYPE)//·ÇÐ­µ÷Æ÷
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        MOV     DPTR,#TestDirectSent_DstAddr + 8
        JZ      ??SendDataRequest_0
// 1532       {
// 1533         TestDirectSent_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;//µØÖ·´«ËÍ
        MOV     A,#0x2
        LCALL   ??Subroutine17_0 & 0xFFFF
// 1534         TestDirectSent_DstAddr.endPoint = 0;
// 1535         TestDirectSent_DstAddr.addr.shortAddr = 0x0000;
??CrossCallReturnLabel_24:
        MOV     DPTR,#TestDirectSent_DstAddr
        SJMP    ??CrossCallReturnLabel_3
// 1536       }
// 1537       else
// 1538       {
// 1539         if(ZG_DEVICE_COORDINATOR_TYPE)
// 1540         {
// 1541           TestDirectSent_DstAddr.addrMode=(afAddrMode_t)AddrBroadcast;//Addr16Bit;//µØÖ·´«ËÍ
??SendDataRequest_0:
        LCALL   ?Subroutine6 & 0xFFFF
// 1542           TestDirectSent_DstAddr.endPoint = 0;
// 1543           TestDirectSent_DstAddr.addr.shortAddr = 0xffff;//destAddr;
// 1544           //TestDirectSent_DstAddr.addr.extAddr
// 1545         }
// 1546       }
??CrossCallReturnLabel_3:
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1547      AF_DataRequest(    
// 1548               &TestDirectSent_DstAddr,               //µØÖ·
// 1549               &TransmitApp_epDesc,                //ÃèÊö
// 1550               TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
// 1551                 len,                                  //len
// 1552                 pBuf,//TransmitApp_Msg,             //DATA
// 1553               &TransmitApp_TransID,               //
// 1554               TRANSMITAPP_TX_OPTIONS,
// 1555               AF_DEFAULT_RADIUS 
// 1556               );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
        MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#-0x5f
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#TransmitApp_epDesc & 0xff
        MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
        MOV     R2,#TestDirectSent_DstAddr & 0xff
        MOV     R3,#(TestDirectSent_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1557      HalLedBlink (HAL_LED_3, 1, 50, 200);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x38
        MOV     R5,#0x0
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock78
// 1558 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond79 Using cfiCommon0
          CFI Function uartRxCB
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 140)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function SendDataRequest
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+0
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker81 Using cfiCommon1
          CFI (cfiPicker81) NoFunction
          CFI (cfiPicker81) Picker
        MOV     A,#0xf
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#TestDirectSent_DstAddr
        MOV     A,#-0x1
        RET
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiPicker81

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for NativeAddr>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_ProcessEvent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_ProcessZDOMsgs?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_HandleKeys?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_MessageMSGCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_ProcessZDOIncomingMsgs?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_ProcessZDOIncomingMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_SendTheMessage?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_SendTheMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_ChangeState?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_ChangeState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_SetSendEvt?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_SetSendEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_DisplayResults?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_DisplayResults

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initUart?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    initUart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??uartRxCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uartRxCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??FrameUnPackage?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    FrameUnPackage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Crc16Code?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Crc16Code

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SentDataInBind?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SentDataInBind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendBindRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SendBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReportData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ReportData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??FramePackage?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    FramePackage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReadADC?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ReadADC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendDataRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SendDataRequest

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GTA Zigbee">`:
        DB "GTA Zigbee"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40533333:
        DD 40533333H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_44ffe000:
        DD 44FFE000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_447a0000:
        DD 447A0000H

        END
// 1559 
// 1560 #if defined(GTA_WTHSB_R1)
// 1561 uint8 readTempHumi(void)
// 1562 {
// 1563  float f_humi=0,f_temp=0; 
// 1564  
// 1565   uint8 checksum;
// 1566  
// 1567   /* ¿ØÖÆSHT11½øÐÐÎÂÊª¶È²âÁ¿ */
// 1568   
// 1569   
// 1570   s_measure(temp_val,&checksum,TEMP); // ²âÁ¿ÎÂ¶È
// 1571   s_measure(humi_val,&checksum,HUMI); // ²âÁ¿Ïà¶ÔÊª¶È
// 1572   f_humi=BUILD_UINT16(humi_val[0],humi_val[1]);
// 1573   f_temp=BUILD_UINT16(temp_val[0],temp_val[1]);
// 1574   calc_sth11(&f_humi,&f_temp);
// 1575   humi_val[0]=f_humi;//&(uint8)f_humi;
// 1576   humi_val[1]=(f_humi-humi_val[0])*100;  
// 1577   temp_val[0]=f_temp; 
// 1578   temp_val[1]=(f_temp-temp_val[0])*100;  
// 1579   return TRUE;
// 1580 }
// 1581 #endif
// 1582 
// 1583 #if defined(GTA_WMSCB_R1)
// 1584 void init_GTA_WMSCB(void)
// 1585 {
// 1586   P0SEL=P0SEL&0x8C;//10001100
// 1587   P1SEL=P1SEL&0xF0;
// 1588   P2SEL=P2SEL&0xFA;
// 1589   //HAL_CONFIG_IO_OUTPUT(0, HAL_LCD_CS_PIN, 1);
// 1590   IO_DIR_PORT_PIN(0, 0, IO_OUT);
// 1591   IO_DIR_PORT_PIN(0, 1, IO_OUT);
// 1592   IO_DIR_PORT_PIN(0, 4, IO_OUT);
// 1593   IO_DIR_PORT_PIN(0, 5, IO_OUT);
// 1594   IO_DIR_PORT_PIN(0, 6, IO_OUT);
// 1595   IO_DIR_PORT_PIN(1, 0, IO_OUT);
// 1596   IO_DIR_PORT_PIN(1, 1, IO_OUT);
// 1597   IO_DIR_PORT_PIN(1, 2, IO_OUT);
// 1598   IO_DIR_PORT_PIN(1, 3, IO_OUT);
// 1599   IO_DIR_PORT_PIN(2, 0, IO_OUT);
// 1600   IO_DIR_PORT_PIN(2, 2, IO_OUT);
// 1601 }
// 1602 
// 1603 void ctrl_GTA_WMSCB(uint8 port,uint8 data)
// 1604 {
// 1605   //uint8 i=0;
// 1606   //init_GTA_WMSCB();
// 1607   asm("nop"); 
// 1608   asm("nop"); 
// 1609 
// 1610   T82C55A_WR=1;
// 1611   asm("nop"); 
// 1612   asm("nop"); 
// 1613 
// 1614   switch(port)
// 1615   {
// 1616   case        'A':
// 1617     T82C55A_ADDR0=0;
// 1618     T82C55A_ADDR1=0;
// 1619     break;
// 1620   case        'B':
// 1621     T82C55A_ADDR0=1;
// 1622     T82C55A_ADDR1=0;
// 1623     break;  
// 1624   case        'C':
// 1625     T82C55A_ADDR0=0;
// 1626     T82C55A_ADDR1=1;
// 1627     break;
// 1628   case        'M':
// 1629     T82C55A_ADDR0=1;
// 1630     T82C55A_ADDR1=1;
// 1631     break;
// 1632   default:break;
// 1633   }
// 1634   asm("nop"); 
// 1635   asm("nop"); 
// 1636 
// 1637   T82C55A_WR=0;
// 1638   asm("nop"); 
// 1639   asm("nop"); 
// 1640 
// 1641   if(data&0x01)
// 1642     T82C55A_D0=1;
// 1643   else
// 1644     T82C55A_D0=0;
// 1645   
// 1646   if(data&0x02)
// 1647     T82C55A_D1=1;
// 1648   else
// 1649     T82C55A_D1=0;
// 1650   
// 1651   if(data&0x04)
// 1652     T82C55A_D2=1;
// 1653   else
// 1654     T82C55A_D2=0;
// 1655   
// 1656   if(data&0x08)
// 1657     T82C55A_D3=1;
// 1658   else
// 1659     T82C55A_D3=0;
// 1660   
// 1661   if(data&0x10)
// 1662     T82C55A_D4=1;
// 1663   else
// 1664     T82C55A_D4=0;
// 1665   
// 1666   if(data&0x20)
// 1667     T82C55A_D5=1;
// 1668   else
// 1669     T82C55A_D5=0;
// 1670   
// 1671   if(data&0x40)
// 1672     T82C55A_D6=1;
// 1673   else
// 1674     T82C55A_D6=0;
// 1675   
// 1676   if(data&0x80)
// 1677     T82C55A_D7=1;
// 1678   else
// 1679     T82C55A_D7=0;
// 1680   asm("nop"); 
// 1681   asm("nop"); 
// 1682 
// 1683   T82C55A_WR=1;
// 1684   asm("nop"); 
// 1685   asm("nop"); 
// 1686 
// 1687   T82C55A_WR=0;
// 1688   
// 1689 }
// 1690 
// 1691 #endif
// 
// 3 134 bytes in segment BANKED_CODE
//   120 bytes in segment BANK_RELAYS
//     6 bytes in segment SFR_AN
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//    37 bytes in segment XDATA_ROM_C
//   179 bytes in segment XDATA_Z
// 
// 3 255 bytes of CODE  memory
//    25 bytes of CONST memory (+ 12 bytes shared)
//     0 bytes of DATA  memory (+  6 bytes shared)
//   180 bytes of XDATA memory
//
//Errors: none
//Warnings: 18
