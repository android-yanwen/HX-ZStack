///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            17/Aug/2016  10:58:21 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\Source\TransmitApp.c           /
//    Command line       =  -f E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zsta /
//                          ck\Utilities\Transmit\CC2530DB\..\..\..\Tools\CC2 /
//                          530DB\f8wCoord.cfg (-DCPU32MHZ                    /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zsta /
//                          ck\Utilities\Transmit\CC2530DB\..\..\..\Tools\CC2 /
//                          530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0       /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00001000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1178                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=3           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=2   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\ZSTACK-GTAMODBUS-v1.0£¨ /
//                          Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\Source\ /
//                          TransmitApp.c -D MT_TASK -D ZTOOL_P1 -D           /
//                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D GTA_DEBUG -D      /
//                          ZIGBEEPRO -D xLCD_SUPPORTED -D                    /
//                          ZDNWKMGR_MIN_TRANSMISSIONS=0 -lC                  /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\CoordinatorEB\List\   /
//                          -lA E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst /
//                          ack\Utilities\Transmit\CC2530DB\CoordinatorEB\Lis /
//                          t\ --diag_suppress Pe001,Pa010 -o                 /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\CoordinatorEB\Obj\    /
//                          -e --no_code_motion --debug --core=plain          /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\ -I                   /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\Source\ -I         /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\ZMain\TI2530 /
//                          DB\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\ /
//                          zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\include\ -I                       /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\hal\target\CC2530EB\ -I                      /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\include\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ /
//                          ÎÄ£©\Projects\zstack\Utilities\Transmit\CC2530DB\ /
//                          ..\..\..\..\..\Components\mac\high_level\ -I      /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\low_level\srf04\ -I                      /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\low_level\srf04\single_chip\ -I          /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mt\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Proj /
//                          ects\zstack\Utilities\Transmit\CC2530DB\..\..\..\ /
//                          ..\..\Components\osal\include\ -I                 /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\services\saddr\ -I                           /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\services\sdata\ -I                           /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\af\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£ /
//                          ©\Projects\zstack\Utilities\Transmit\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\nwk\ -I              /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sapi\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³Î /
//                          Ä£©\Projects\zstack\Utilities\Transmit\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\sec\ -I            /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sys\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ /
//                          £©\Projects\zstack\Utilities\Transmit\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\zdo\ -I             /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Pr /
//                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\. /
//                          .\..\..\Components\zmac\f8w\ -Ohz                 /
//                          --require_prototypes                              /
//    List file          =  E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\CoordinatorEB\List\Tr /
//                          ansmitApp.s51                                     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME TransmitApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_DIV
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SUB_X
        EXTERN ?L_TO_FLT
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SS_SHR
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Crc16Code?relay
        FUNCTION ??Crc16Code?relay,0203H
        PUBLIC ??FramePackage?relay
        FUNCTION ??FramePackage?relay,0203H
        PUBLIC ??FrameUnPackage?relay
        FUNCTION ??FrameUnPackage?relay,0203H
        PUBLIC ??ReadADC?relay
        FUNCTION ??ReadADC?relay,0203H
        PUBLIC ??ReportData?relay
        FUNCTION ??ReportData?relay,0203H
        PUBLIC ??SendBindRequest?relay
        FUNCTION ??SendBindRequest?relay,0203H
        PUBLIC ??SendDataRequest?relay
        FUNCTION ??SendDataRequest?relay,0203H
        PUBLIC ??SentDataInBind?relay
        FUNCTION ??SentDataInBind?relay,0203H
        PUBLIC ??TransmitApp_ChangeState?relay
        FUNCTION ??TransmitApp_ChangeState?relay,0203H
        PUBLIC ??TransmitApp_DisplayResults?relay
        FUNCTION ??TransmitApp_DisplayResults?relay,0203H
        PUBLIC ??TransmitApp_HandleKeys?relay
        FUNCTION ??TransmitApp_HandleKeys?relay,0203H
        PUBLIC ??TransmitApp_Init?relay
        FUNCTION ??TransmitApp_Init?relay,0203H
        PUBLIC ??TransmitApp_MessageMSGCB?relay
        FUNCTION ??TransmitApp_MessageMSGCB?relay,0203H
        PUBLIC ??TransmitApp_ProcessEvent?relay
        FUNCTION ??TransmitApp_ProcessEvent?relay,0203H
        PUBLIC ??TransmitApp_ProcessZDOIncomingMsgs?relay
        FUNCTION ??TransmitApp_ProcessZDOIncomingMsgs?relay,0203H
        PUBLIC ??TransmitApp_ProcessZDOMsgs?relay
        FUNCTION ??TransmitApp_ProcessZDOMsgs?relay,0203H
        PUBLIC ??TransmitApp_SendTheMessage?relay
        FUNCTION ??TransmitApp_SendTheMessage?relay,0203H
        PUBLIC ??TransmitApp_SetSendEvt?relay
        FUNCTION ??TransmitApp_SetSendEvt?relay,0203H
        PUBLIC ??initUart?relay
        FUNCTION ??initUart?relay,0203H
        PUBLIC ??uartRxCB?relay
        FUNCTION ??uartRxCB?relay,0203H
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBLIC Crc16Code
        FUNCTION Crc16Code,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC Flag_ReportData
        PUBLIC FramePackage
        FUNCTION FramePackage,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC FrameUnPackage
        FUNCTION FrameUnPackage,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC NativeAddr
        PUBLIC ReadADC
        FUNCTION ReadADC,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ReportData
        FUNCTION ReportData,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC SendBindRequest
        FUNCTION SendBindRequest,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 29, STACK
        PUBLIC SendDataRequest
        FUNCTION SendDataRequest,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SentDataInBind
        FUNCTION SentDataInBind,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC TestDirectSent_DstAddr
        PUBLIC Test_Buf
        PUBLIC Test_Mark
        PUBLIC TransmitApp_ChangeState
        FUNCTION TransmitApp_ChangeState,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC TransmitApp_ClusterList
        PUBLIC TransmitApp_DisplayResults
        FUNCTION TransmitApp_DisplayResults,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC TransmitApp_DstAddr
        PUBLIC TransmitApp_HandleKeys
        FUNCTION TransmitApp_HandleKeys,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC TransmitApp_Init
        FUNCTION TransmitApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC TransmitApp_MaxDataLength
        PUBLIC TransmitApp_MessageMSGCB
        FUNCTION TransmitApp_MessageMSGCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC TransmitApp_Msg
        PUBLIC TransmitApp_NwkState
        PUBLIC TransmitApp_ProcessEvent
        FUNCTION TransmitApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC TransmitApp_ProcessZDOIncomingMsgs
        FUNCTION TransmitApp_ProcessZDOIncomingMsgs,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC TransmitApp_ProcessZDOMsgs
        FUNCTION TransmitApp_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC TransmitApp_SendTheMessage
        FUNCTION TransmitApp_SendTheMessage,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC TransmitApp_SetSendEvt
        FUNCTION TransmitApp_SetSendEvt,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC TransmitApp_SimpleDesc
        PUBLIC TransmitApp_State
        PUBLIC TransmitApp_TaskID
        PUBLIC TransmitApp_epDesc
        PUBWEAK __Constant_40533333
        PUBWEAK __Constant_447a0000
        PUBWEAK __Constant_44ffe000
        PUBLIC initUart
        FUNCTION initUart,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC pktCounter
        PUBLIC uartRxCB
        FUNCTION uartRxCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 149, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
HalLcdWriteString   SYMBOL "HalLcdWriteString"
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
HalLedBlink         SYMBOL "HalLedBlink"
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
HalUARTOpen         SYMBOL "HalUARTOpen"
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
RegisterForKeys     SYMBOL "RegisterForKeys"
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
afDataReqMTU        SYMBOL "afDataReqMTU"
??afDataReqMTU?relay SYMBOL "?relay", afDataReqMTU
afRegister          SYMBOL "afRegister"
??afRegister?relay  SYMBOL "?relay", afRegister
debug_msg           SYMBOL "debug_msg"
??debug_msg?relay   SYMBOL "?relay", debug_msg
osal_GetSystemClock SYMBOL "osal_GetSystemClock"
??osal_GetSystemClock?relay SYMBOL "?relay", osal_GetSystemClock
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_nv_item_init   SYMBOL "osal_nv_item_init"
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
osal_set_event      SYMBOL "osal_set_event"
??osal_set_event?relay SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
Crc16Code           SYMBOL "Crc16Code"
??Crc16Code?relay   SYMBOL "?relay", Crc16Code
FramePackage        SYMBOL "FramePackage"
??FramePackage?relay SYMBOL "?relay", FramePackage
FrameUnPackage      SYMBOL "FrameUnPackage"
??FrameUnPackage?relay SYMBOL "?relay", FrameUnPackage
ReadADC             SYMBOL "ReadADC"
??ReadADC?relay     SYMBOL "?relay", ReadADC
ReportData          SYMBOL "ReportData"
??ReportData?relay  SYMBOL "?relay", ReportData
SendBindRequest     SYMBOL "SendBindRequest"
??SendBindRequest?relay SYMBOL "?relay", SendBindRequest
SendDataRequest     SYMBOL "SendDataRequest"
??SendDataRequest?relay SYMBOL "?relay", SendDataRequest
SentDataInBind      SYMBOL "SentDataInBind"
??SentDataInBind?relay SYMBOL "?relay", SentDataInBind
TransmitApp_ChangeState SYMBOL "TransmitApp_ChangeState"
??TransmitApp_ChangeState?relay SYMBOL "?relay", TransmitApp_ChangeState
TransmitApp_DisplayResults SYMBOL "TransmitApp_DisplayResults"
??TransmitApp_DisplayResults?relay SYMBOL "?relay", TransmitApp_DisplayResults
TransmitApp_HandleKeys SYMBOL "TransmitApp_HandleKeys"
??TransmitApp_HandleKeys?relay SYMBOL "?relay", TransmitApp_HandleKeys
TransmitApp_Init    SYMBOL "TransmitApp_Init"
??TransmitApp_Init?relay SYMBOL "?relay", TransmitApp_Init
TransmitApp_MessageMSGCB SYMBOL "TransmitApp_MessageMSGCB"
??TransmitApp_MessageMSGCB?relay SYMBOL "?relay", TransmitApp_MessageMSGCB
TransmitApp_ProcessEvent SYMBOL "TransmitApp_ProcessEvent"
??TransmitApp_ProcessEvent?relay SYMBOL "?relay", TransmitApp_ProcessEvent
TransmitApp_ProcessZDOIncomingMsgs SYMBOL "TransmitApp_ProcessZDOIncomingMsgs"
??TransmitApp_ProcessZDOIncomingMsgs?relay SYMBOL "?relay", TransmitApp_ProcessZDOIncomingMsgs
TransmitApp_ProcessZDOMsgs SYMBOL "TransmitApp_ProcessZDOMsgs"
??TransmitApp_ProcessZDOMsgs?relay SYMBOL "?relay", TransmitApp_ProcessZDOMsgs
TransmitApp_SendTheMessage SYMBOL "TransmitApp_SendTheMessage"
??TransmitApp_SendTheMessage?relay SYMBOL "?relay", TransmitApp_SendTheMessage
TransmitApp_SetSendEvt SYMBOL "TransmitApp_SetSendEvt"
??TransmitApp_SetSendEvt?relay SYMBOL "?relay", TransmitApp_SetSendEvt
initUart            SYMBOL "initUart"
??initUart?relay    SYMBOL "?relay", initUart
uartRxCB            SYMBOL "uartRxCB"
??uartRxCB?relay    SYMBOL "?relay", uartRxCB

        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??afDataReqMTU?relay
        FUNCTION ??afDataReqMTU?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??debug_msg?relay
        FUNCTION ??debug_msg?relay,00H
        EXTERN ??osal_GetSystemClock?relay
        FUNCTION ??osal_GetSystemClock?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 149, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 140, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 140, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afDataReqMTU
        FUNCTION afDataReqMTU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN debug_msg
        FUNCTION debug_msg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_GetSystemClock
        FUNCTION osal_GetSystemClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c
//    1 /**************************************************************************************************
//    2   Filename:       TransmitApp.c
//    3   Revised:        $Date: 2012-03-05 09:54:49 -0800 (Mon, 05 Mar 2012) $
//    4   Revision:       $Revision: 29619 $
//    5 
//    6   Description:    Transmit Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application will send a data packet to another
//   42   tranmitApp device as fast as it can.  The receiving
//   43   transmitApp device will calculate the following transmit
//   44   rate statistics:
//   45     - Number bytes in the last second
//   46     - Number of seconds running
//   47     - Average number of bytes per second
//   48     - Number of packets received.
//   49 
//   50   The application will send one message and as soon as it
//   51   receives the confirmation for that message it will send
//   52   the next message.
//   53 
//   54   If you would like a delay between messages
//   55   define TRANSMITAPP_DELAY_SEND and set the delay amount
//   56   in TRANSMITAPP_SEND_DELAY.
//   57 
//   58   TransmitApp_MaxDataLength defines the message size
//   59 
//   60   Set TRANSMITAPP_TX_OPTIONS to AF_MSG_ACK_REQUEST to send
//   61   the message expecting an APS ACK, this will decrease your
//   62   throughput.  Set TRANSMITAPP_TX_OPTIONS to 0 for no
//   63   APS ACK.
//   64 
//   65   This applications doesn't have a profile, so it handles
//   66   everything directly - itself.
//   67 
//   68   Key control:
//   69     SW1:  Starts and stops the transmitting
//   70     SW2:  initiates end device binding
//   71     SW3:  Resets the display totals
//   72     SW4:  initiates a match description request
//   73 
//   74   Notes:
//   75 
//   76     This application was intended to be used to test the maximum
//   77     throughput between 2 devices in a network - between routers
//   78     coordinators.
//   79 
//   80     Although not recommended, it can be used between
//   81     an end device and a router (or coordinator), but you must
//   82     enable the delay feature (TRANSMITAPP_DELAY_SEND and
//   83     TRANSMITAPP_SEND_DELAY).  If you don't include the delay, the
//   84     end device can't receive messages because it will stop polling.
//   85     Also, the delay must be greater than RESPONSE_POLL_RATE (default 100 MSec).
//   86 *********************************************************************/
//   87 
//   88 /*********************************************************************
//   89  * INCLUDES
//   90  */
//   91 #include "OSAL.h"
//   92 #include "AF.h"
//   93 #include "ZDObject.h"
//   94 #include "ZDProfile.h"
//   95 
//   96 #include "TransmitApp.h"

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1
//   97 #include "OnBoard.h"
//   98 
//   99 #include "DebugTrace.h"
//  100 
//  101 /* HAL */
//  102 #include "hal_lcd.h"
//  103 #include "hal_led.h"
//  104 #include "hal_key.h"
//  105 #include "hal_uart.h"
//  106 
//  107 #include "OSAL_NV.h"
//  108 
//  109 #include "ZComDef.h"
//  110 #include "sapi.h"//
//  111 
//  112 #include "hal_types.h"
//  113 
//  114 #if defined(GTA_WTHSB_R1)
//  115 #include "hal_sht11.h"
//  116 #endif
//  117 
//  118 #if defined(GTA_WHFRFID_R1)
//  119 #include "WHFRFID.h"
//  120 #endif
//  121 #include <string.h>
//  122 /*********************************************************************
//  123  * MACROS
//  124  */
//  125 
//  126 /*********************************************************************
//  127  * CONSTANTS
//  128  */
//  129 //#define TRANSMITAPP_RANDOM_LEN
//  130 
//  131 #define TRANSMITAPP_STATE_WAITING 0
//  132 #define TRANSMITAPP_STATE_SENDING 1
//  133 
//  134 #if !defined ( RTR_NWK )
//  135   // Use these 2 lines to add a delay between each packet sent
//  136   //  - default for end devices
//  137   #define TRANSMITAPP_DELAY_SEND
//  138   #define TRANSMITAPP_SEND_DELAY    (RESPONSE_POLL_RATE * 2)  // in MSecs
//  139 #endif
//  140 
//  141 // Send with or without APS ACKs
//  142 //#define TRANSMITAPP_TX_OPTIONS    (AF_DISCV_ROUTE | AF_ACK_REQUEST)
//  143 #define TRANSMITAPP_TX_OPTIONS    AF_DISCV_ROUTE
//  144 
//  145 #define TRANSMITAPP_INITIAL_MSG_COUNT  2
//  146 
//  147 #define TRANSMITAPP_TRANSMIT_TIME   4  // 4 MS
//  148 #define TRANSMITAPP_DISPLAY_TIMER   (2 * 1000)
//  149 
//  150 #if defined ( TRANSMITAPP_FRAGMENTED )
//  151 #define TRANSMITAPP_MAX_DATA_LEN    225
//  152 #else
//  153 #define TRANSMITAPP_MAX_DATA_LEN    102
//  154 #endif
//  155 
//  156 /*********************************************************************
//  157  * TYPEDEFS
//  158  */
//  159 
//  160 /*********************************************************************
//  161  * GLOBAL VARIABLES
//  162  */
//  163 
//  164 
//  165 // This is the buffer that is sent out as data.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  166 byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ];
TransmitApp_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z
//  167 
//  168 // This is the Cluster ID List and should be filled with Application
//  169 // specific cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  170 const cId_t TransmitApp_ClusterList[TRANSMITAPP_MAX_CLUSTERS] =
TransmitApp_ClusterList:
        DW 161
//  171 {
//  172   TRANSMITAPP_CLUSTERID_TESTMSG  // MSG Cluster ID
//  173 };
//  174 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  175 const SimpleDescriptionFormat_t TransmitApp_SimpleDesc =
TransmitApp_SimpleDesc:
        DB 1
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW TransmitApp_ClusterList
        DATA8
        DB 1
        DATA16
        DW TransmitApp_ClusterList
//  176 {
//  177   TRANSMITAPP_ENDPOINT,              //  int    Endpoint;
//  178   TRANSMITAPP_PROFID,                //  uint16 AppProfId[2];
//  179   TRANSMITAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  180   TRANSMITAPP_DEVICE_VERSION,        //  int    AppDevVer:4;
//  181   TRANSMITAPP_FLAGS,                 //  int    AppFlags:4;
//  182   TRANSMITAPP_MAX_CLUSTERS,          //  byte   AppNumInClusters;
//  183   (cId_t *)TransmitApp_ClusterList,  //  byte   *pAppInClusterList;
//  184   TRANSMITAPP_MAX_CLUSTERS,          //  byte   AppNumInClusters;
//  185   (cId_t *)TransmitApp_ClusterList   //  byte   *pAppInClusterList;
//  186 };
//  187 
//  188 // This is the Endpoint/Interface description.  It is defined here, but
//  189 // filled-in in TransmitApp_Init().  Another way to go would be to fill
//  190 // in the structure here and make it a "const" (in code space).  The
//  191 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  192 endPointDesc_t TransmitApp_epDesc;
TransmitApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  193 
//  194 /*********************************************************************
//  195  * EXTERNAL VARIABLES
//  196  */
//  197 
//  198 /*********************************************************************
//  199  * EXTERNAL FUNCTIONS
//  200  */
//  201 
//  202 /*********************************************************************
//  203  * LOCAL VARIABLES
//  204  */
//  205 
//  206 // Task ID for event processing - received when TransmitApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  207 byte TransmitApp_TaskID;
TransmitApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  208 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  209 devStates_t TransmitApp_NwkState;
TransmitApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  210 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  211 static byte TransmitApp_TransID;  // This is the unique message ID (counter)
TransmitApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  212 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  213 afAddrType_t TransmitApp_DstAddr;
TransmitApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  214 afAddrType_t TestDirectSent_DstAddr;
TestDirectSent_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  215 byte TransmitApp_State;
TransmitApp_State:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  216 
//  217 // Shadow of the OSAL system clock used for calculating actual time expired.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  218 static uint32 clkShdw;
clkShdw:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  219 // Running total count of test messages recv/sent since beginning current run.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  220 static uint32 rxTotal, txTotal;
rxTotal:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
txTotal:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  221 // Running count of test messages recv/sent since last display / update - 1 Hz.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  222 static uint32 rxAccum, txAccum;
rxAccum:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
txAccum:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  223 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  224 static byte timerOn;
timerOn:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  225 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  226 static byte timesToSend;
timesToSend:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  227 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  228 uint16 pktCounter;
pktCounter:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  229 
//  230 // Max Data Request Length

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  231 uint16 TransmitApp_MaxDataLength;
TransmitApp_MaxDataLength:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  232 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  233 uint8   NativeAddr=0x01;
NativeAddr:
        DATA8
        DS 1
        REQUIRE `?<Initializer for NativeAddr>`
        REQUIRE __INIT_XDATA_I
//  234 
//  235 #if defined(GTA_DEBUG)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  236 uint8 Test_Mark=0;
Test_Mark:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  237 uint8 Test_Buf[15];
Test_Buf:
        DS 15
        REQUIRE __INIT_XDATA_Z
//  238 #endif
//  239 
//  240 #if defined(GTA_WTHSB_R1)
//  241 
//  242 char temp_val[2];
//  243 char humi_val[2];
//  244 static uint8 readTempHumi(void);
//  245 #endif
//  246 
//  247 #if defined(GTA_WMSCB_R1)
//  248 
//  249 #endif
//  250 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  251 uint8 Flag_ReportData=0;
Flag_ReportData:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  252 
//  253 /*********************************************************************
//  254  * LOCAL FUNCTIONS
//  255  */
//  256 void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  257 void TransmitApp_HandleKeys( byte shift, byte keys );
//  258 void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  259 void TransmitApp_ProcessZDOIncomingMsgs( zdoIncomingMsg_t *inMsg );//microdjg
//  260 void TransmitApp_SendTheMessage( void );
//  261 void TransmitApp_ChangeState( void );
//  262 
//  263 void ReportData(ModBusFrame_t *pRxFrame);
//  264 uint16 FramePackage(uint8 *pFrame,uint8 addr,uint8 cmd,uint8 *data,uint16 datalen);
//  265 uint16 ReadADC(uint8 channel);
//  266 void SendDataRequest(uint8 *pBuf,uint16 len);
//  267 
//  268 /*********************************************************************
//  269  * NETWORK LAYER CALLBACKS
//  270  */
//  271 
//  272 /*********************************************************************
//  273  * PUBLIC FUNCTIONS
//  274  */
//  275 void TransmitApp_DisplayResults( void );
//  276 
//  277 /*********************************************************************
//  278  * @fn      TransmitApp_Init
//  279  *
//  280  * @brief   Initialization function for the Generic App Task.
//  281  *          This is called during initialization and should contain
//  282  *          any application specific initialization (ie. hardware
//  283  *          initialization/setup, table initialization, power up
//  284  *          notificaiton ... ).
//  285  *
//  286  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  287  *                    used to send messages and set timers.
//  288  *
//  289  * @return  none
//  290  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  291 void TransmitApp_Init( byte task_id )
TransmitApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function TransmitApp_Init
        CODE
//  292 {
        FUNCALL TransmitApp_Init, initUart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, afDataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        MOV     R6,A
//  293 #if !defined ( TRANSMITAPP_FRAGMENTED )
//  294   afDataReqMTU_t mtu;
//  295 #endif
//  296   uint16 i;
//  297   
//  298   #if defined(GTA_WTHSB_R1)
//  299   Hal_SHT11_Init();
//  300   s_connectionreset();
//  301   #endif
//  302 /*#if defined (HX_18B20_R1)
//  303   P0SEL &= 0x00;
//  304 #endif*/
//  305   
//  306   
//  307   initUart(uartRxCB);//microdjg
        ; Setup parameters for call to function initUart
        MOV     R2,#??uartRxCB?relay & 0xff
        MOV     R3,#(??uartRxCB?relay >> 8) & 0xff
        LCALL   ??initUart?relay
//  308   osal_nv_item_init(ZCD_NV_NATIVE_ADDRESS,sizeof(NativeAddr),NULL);
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  309   osal_nv_read(ZCD_NV_NATIVE_ADDRESS,0,sizeof(NativeAddr),&NativeAddr);
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,#NativeAddr & 0xff
        MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  310   
//  311   TransmitApp_TaskID = task_id;
        MOV     A,R6
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    @DPTR,A
//  312   TransmitApp_NwkState = DEV_INIT;
        MOV     DPTR,#TransmitApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  313   TransmitApp_TransID = 0;
        MOV     DPTR,#TransmitApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  314 
//  315   pktCounter = 0;
        MOV     DPTR,#pktCounter
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  316 
//  317   TransmitApp_State = TRANSMITAPP_STATE_WAITING;
        MOV     DPTR,#TransmitApp_State
        MOVX    @DPTR,A
//  318 
//  319   // Device hardware initialization can be added here or in main() (Zmain.c).
//  320   // If the hardware is application specific - add it here.
//  321   // If the hardware is other parts of the device add it in main().
//  322 
//  323   TransmitApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;//°ó¶¨·¢
        MOV     DPTR,#TransmitApp_DstAddr + 8
        MOVX    @DPTR,A
//  324   TransmitApp_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  325   TransmitApp_DstAddr.addr.shortAddr = 0;//ÎÞËùÎ½
        MOV     DPTR,#TransmitApp_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  326 
//  327   // Fill out the endpoint description.
//  328   TransmitApp_epDesc.endPoint = TRANSMITAPP_ENDPOINT;
        MOV     DPTR,#TransmitApp_epDesc
        INC     A
        MOVX    @DPTR,A
//  329   TransmitApp_epDesc.task_id = &TransmitApp_TaskID;
        INC     DPTR
        MOV     A,#TransmitApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(TransmitApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  330   TransmitApp_epDesc.simpleDesc
//  331             = (SimpleDescriptionFormat_t *)&TransmitApp_SimpleDesc;
        INC     DPTR
        MOV     A,#TransmitApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(TransmitApp_SimpleDesc >> 8) & 0xff
        LCALL   ??Subroutine16_0 & 0xFFFF
//  332   TransmitApp_epDesc.latencyReq = noLatencyReqs;
//  333   
//  334   
//  335   
//  336   //if(ZG_DEVICE_COORDINATOR_TYPE)
//  337   //{
//  338     //HalLcdInit();
//  339     //HalLcd_HW_WriteLine(HAL_LCD_LINE_1,"GTA Zigbee Test");
//  340     HalLcdWriteString( "GTA Zigbee", HAL_LCD_LINE_1 );
??CrossCallReturnLabel_21:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "GTA Zigbee">` & 0xff
        MOV     R3,#(`?<Constant "GTA Zigbee">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  341   //}
//  342 
//  343 
//  344   // Register the endpoint/interface description with the AF
//  345   afRegister( &TransmitApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#TransmitApp_epDesc & 0xff
        MOV     R3,#(TransmitApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  346 
//  347   // Register for all key events - This app will handle all key events
//  348   RegisterForKeys( TransmitApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  349 
//  350   // Update the display
//  351 #if defined ( LCD_SUPPORTED )
//  352   HalLcdWriteString( "TransmitApp", HAL_LCD_LINE_2 );
//  353 #endif
//  354 
//  355   // Set the data length
//  356 #if defined ( TRANSMITAPP_FRAGMENTED )
//  357   TransmitApp_MaxDataLength = TRANSMITAPP_MAX_DATA_LEN;
//  358 #else
//  359   mtu.kvp        = FALSE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  360   mtu.aps.secure = FALSE;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine6 & 0xFFFF
//  361   TransmitApp_MaxDataLength = afDataReqMTU( &mtu );
??CrossCallReturnLabel_2:
        LCALL   ??afDataReqMTU?relay
        MOV     A,R1
        MOV     DPTR,#TransmitApp_MaxDataLength
        LCALL   ??Subroutine16_0 & 0xFFFF
//  362 #endif
//  363 
//  364   // Generate the data
//  365   for (i=0; i<TransmitApp_MaxDataLength; i++)
??CrossCallReturnLabel_23:
        MOV     R0,A
        SJMP    ??TransmitApp_Init_0
//  366   {
//  367     TransmitApp_Msg[i] = (uint8) i;
??TransmitApp_Init_1:
        MOV     A,#TransmitApp_Msg & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(TransmitApp_Msg >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
//  368   }
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
??TransmitApp_Init_0:
        MOV     R1,A
        MOV     DPTR,#TransmitApp_MaxDataLength
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??TransmitApp_Init_1
//  369 
//  370   ZDO_RegisterForZDOMsg( TransmitApp_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  371   ZDO_RegisterForZDOMsg( TransmitApp_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  372   ZDO_RegisterForZDOMsg( TransmitApp_TaskID,TRANSMITAPP_CLUSTERID_TESTMSG);
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#-0x5f
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  373   
//  374 #if defined (HX_18B20_R1)
//  375   osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 1000);
//  376   Flag_ReportData = true;
//  377 #endif
//  378 
//  379 }
        MOV     A,#0x2
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        LJMP    ??Subroutine14_0 & 0xFFFF
          CFI EndBlock cfiBlock1
//  380 
//  381 /*********************************************************************
//  382  * @fn      TransmitApp_ProcessEvent
//  383  *
//  384  * @brief   Generic Application Task event processor.  This function
//  385  *          is called to process all events for the task.  Events
//  386  *          include timers, messages and any other user defined events.
//  387  *
//  388  * @param   task_id  - The OSAL assigned task ID.
//  389  * @param   events - events to process.  This is a bit map and can
//  390  *                   contain more than one event.
//  391  *
//  392  * @return  none
//  393  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  394 UINT16 TransmitApp_ProcessEvent( byte task_id, UINT16 events )
TransmitApp_ProcessEvent:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function TransmitApp_ProcessEvent
        CODE
//  395 {
        FUNCALL TransmitApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_SetSendEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_SetSendEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, TransmitApp_DisplayResults
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, SendBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessEvent, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  396   afIncomingMSGPacket_t *MSGpkt;
//  397   afDataConfirm_t *afDataConfirm;
//  398   (void)task_id;  // Intentionally unreferenced parameter
//  399 
//  400   // Data Confirmation message fields
//  401   ZStatus_t sentStatus;
//  402   byte sentEP;
//  403   
//  404 
//  405   
//  406   uint8 Frame[20];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
//  407   uint8 data[10];//
//  408   uint16 i=0,j=0;
//  409   uint8 led=0;
//  410   uint16 temp;
//  411   uint16 FrameLen;
//  412   
//  413 
//  414   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??TransmitApp_ProcessEvent_0 & 0xFFFF
//  415   {
//  416     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??TransmitApp_ProcessEvent_1
//  417     while ( MSGpkt )
//  418     {
//  419       switch ( MSGpkt->hdr.event )
//  420       {
//  421         case ZDO_CB_MSG:
//  422           TransmitApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  423           break;
//  424 
//  425         case KEY_CHANGE:
//  426           TransmitApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  427           break;
//  428 
//  429         case AF_DATA_CONFIRM_CMD:
//  430           // This message is received as a confirmation of a data packet sent.
//  431           // The status is of ZStatus_t type [defined in ZComDef.h]
//  432           // The message fields are defined in AF.h
//  433           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  434           sentEP = afDataConfirm->endpoint;
//  435           sentStatus = afDataConfirm->hdr.status;
//  436 
//  437           if ( (ZSuccess == sentStatus) &&
//  438                (TransmitApp_epDesc.endPoint == sentEP) )
//  439           {
//  440 #if !defined ( TRANSMITAPP_RANDOM_LEN )
//  441             txAccum += TransmitApp_MaxDataLength;
//  442 #endif
//  443             if ( !timerOn )
//  444             {
//  445               osal_start_timerEx( TransmitApp_TaskID,TRANSMITAPP_RCVTIMER_EVT,
//  446                                                      TRANSMITAPP_DISPLAY_TIMER);
//  447               clkShdw = osal_GetSystemClock();
//  448               timerOn = TRUE;
//  449             }
//  450           }
//  451 
//  452           // Action taken when confirmation is received: Send the next message.
//  453           TransmitApp_SetSendEvt();
//  454           break;
//  455 
//  456         case AF_INCOMING_MSG_CMD:
//  457           TransmitApp_MessageMSGCB( MSGpkt );
//  458           
//  459           break;
//  460 
//  461         case ZDO_STATE_CHANGE:
//  462           TransmitApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??TransmitApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#TransmitApp_NwkState
        MOVX    @DPTR,A
//  463 
//  464           break;
//  465 
//  466         default:
//  467           break;
//  468       }
//  469 
//  470       // Release the memory
//  471       osal_msg_deallocate( (uint8 *)MSGpkt );
??TransmitApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  472 
//  473       // Next
//  474       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??TransmitApp_ProcessEvent_1:
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??TransmitApp_ProcessEvent_4 & 0xFFFF
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#0x40
        JZ      ??TransmitApp_ProcessEvent_5
        ADD     A,#-0x11
        JZ      ??TransmitApp_ProcessEvent_2
        ADD     A,#-0x2
        JZ      ??TransmitApp_ProcessEvent_6
        ADD     A,#-0x2a
        JZ      ??TransmitApp_ProcessEvent_7
        SJMP    ??TransmitApp_ProcessEvent_3
??TransmitApp_ProcessEvent_6:
        ; Setup parameters for call to function TransmitApp_ProcessZDOMsgs
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??TransmitApp_ProcessZDOMsgs?relay
        SJMP    ??TransmitApp_ProcessEvent_3
??TransmitApp_ProcessEvent_5:
        ; Setup parameters for call to function TransmitApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??TransmitApp_HandleKeys?relay
        SJMP    ??TransmitApp_ProcessEvent_3
??TransmitApp_ProcessEvent_7:
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_ProcessEvent_8
        MOV     DPTR,#TransmitApp_epDesc
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??TransmitApp_ProcessEvent_8
        MOV     DPTR,#TransmitApp_MaxDataLength
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     DPTR,#txAccum
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_TO_X
        MOV     DPTR,#timerOn
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_ProcessEvent_8
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL   ??osal_GetSystemClock?relay
        MOV     DPTR,#clkShdw
        LCALL   ?XSTORE_R2345
        MOV     DPTR,#timerOn
        MOV     A,#0x1
        MOVX    @DPTR,A
??TransmitApp_ProcessEvent_8:
        ; Setup parameters for call to function TransmitApp_SetSendEvt
        LCALL   ??TransmitApp_SetSendEvt?relay
        LJMP    ??TransmitApp_ProcessEvent_3 & 0xFFFF
//  475     }
//  476 
//  477     // Squash compiler warnings until values are used.
//  478     (void)sentStatus;
//  479     (void)sentEP;
//  480 
//  481     // Return unprocessed events
//  482     return (events ^ SYS_EVENT_MSG);
??TransmitApp_ProcessEvent_4:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??TransmitApp_ProcessEvent_9
//  483   }
//  484 
//  485   // Send a message out
//  486   if ( events & TRANSMITAPP_SEND_MSG_EVT )
??TransmitApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??TransmitApp_ProcessEvent_10
//  487   {
//  488     if ( TransmitApp_State == TRANSMITAPP_STATE_SENDING )
        MOV     DPTR,#TransmitApp_State
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_ProcessEvent_11
//  489     {
//  490       TransmitApp_SendTheMessage();
        ; Setup parameters for call to function TransmitApp_SendTheMessage
        LCALL   ??TransmitApp_SendTheMessage?relay
//  491     }
//  492 
//  493     // Return unprocessed events
//  494     return (events ^ TRANSMITAPP_SEND_MSG_EVT);
??TransmitApp_ProcessEvent_11:
        MOV     A,R6
        XRL     A,#0x1
        SJMP    ??TransmitApp_ProcessEvent_12
//  495   }
//  496 
//  497   // Timed wait from error
//  498   if ( events & TRANSMITAPP_SEND_ERR_EVT )
??TransmitApp_ProcessEvent_10:
        ANL     A,#0x4
        JZ      ??TransmitApp_ProcessEvent_13
//  499   {
//  500     TransmitApp_SetSendEvt();
        ; Setup parameters for call to function TransmitApp_SetSendEvt
        LCALL   ??TransmitApp_SetSendEvt?relay
//  501 
//  502     // Return unprocessed events
//  503     return (events ^ TRANSMITAPP_SEND_ERR_EVT);
        MOV     A,R6
        XRL     A,#0x4
        SJMP    ??TransmitApp_ProcessEvent_12
//  504   }
//  505 
//  506   // Receive timer
//  507   if ( events & TRANSMITAPP_RCVTIMER_EVT )
??TransmitApp_ProcessEvent_13:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??TransmitApp_ProcessEvent_14
//  508   {
//  509     // Setup to display the next result
//  510     osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT,
//  511                                             TRANSMITAPP_DISPLAY_TIMER );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  512     TransmitApp_DisplayResults();
        ; Setup parameters for call to function TransmitApp_DisplayResults
        LCALL   ??TransmitApp_DisplayResults?relay
//  513 
//  514     return (events ^ TRANSMITAPP_RCVTIMER_EVT);
        MOV     A,R6
        XRL     A,#0x2
        SJMP    ??TransmitApp_ProcessEvent_12
//  515   }
//  516   if ( events & TRANSMITAPP_BIND_REQUEST_EVT)//microdjg
??TransmitApp_ProcessEvent_14:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??TransmitApp_ProcessEvent_15
//  517   {
//  518     SendBindRequest();//×Ô¶¯¿ªÊ¼°ó¶¨ microdjg
        ; Setup parameters for call to function SendBindRequest
        LCALL   ??SendBindRequest?relay
//  519     //osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT,3000 );
//  520     return (events ^ TRANSMITAPP_BIND_REQUEST_EVT);
        MOV     A,R6
        XRL     A,#0x8
        SJMP    ??TransmitApp_ProcessEvent_12
//  521   }
//  522   
//  523   
//  524   if ( events & TRANSMITAPP_START_REPORT_EVT )
??TransmitApp_ProcessEvent_15:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??TransmitApp_ProcessEvent_16
//  525   {
//  526     if(Flag_ReportData)
        MOV     DPTR,#Flag_ReportData
        MOVX    A,@DPTR
        JZ      ??TransmitApp_ProcessEvent_17
//  527       {
//  528         osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  529       }
//  530     HalLedBlink(HAL_LED_1,1,50,300);
??TransmitApp_ProcessEvent_17:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x2c
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  531     
//  532     
//  533     
//  534     
//  535     #if defined ( GTA_WWSB_R1 )||(GTA_WFSB_R1) //´«¸ÐÆ÷   
//  536     temp=ReadADC(4);//¶ÁµçÑ¹Öµ
//  537     data[0]=1;
//  538     if(temp>3000)
//  539       data[1]=0x01;
//  540     else
//  541       data[1]=0x00;
//  542     //data[1]=LO_UINT16(temp);
//  543     //data[2]=HI_UINT16(temp);
//  544 #if defined GTA_WWSB_R1
//  545     NativeAddr = 0x11;//ÓêµÎ´«¸ÐÆ÷µØÖ·
//  546 #elif defined GTA_WFSB_R1
//  547     NativeAddr = 0x16;//»ðÑæ´«¸ÐÆ÷µØÖ·
//  548 #endif
//  549     FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
//  550     SendDataRequest(Frame,FrameLen);//·¢ËÍ
//  551     #endif
//  552     
//  553     
//  554     #if defined (GTA_WVSB_R1)||(GTA_WIRSB_R1)
//  555     temp=ReadADC(4);
//  556     data[0]=1;
//  557     if(temp>3000)
//  558       data[1]=0x00;
//  559     else
//  560       data[1]=0x01;
//  561 #if defined GTA_WVSB_R1
//  562     NativeAddr = 0x13;//Çã½Ç´«¸ÐÆ÷µØÖ·
//  563 #elif defined GTA_WIRSB_R1
//  564     NativeAddr = 0x15;//ºìÍâ´«¸ÐÆ÷µØÖ·
//  565 #endif
//  566     FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
//  567     SendDataRequest(Frame,FrameLen);//·¢ËÍ
//  568     #endif
//  569     
//  570     #if defined ( GTA_WUSB_R1 )
//  571     IO_DIR_PORT_PIN(0, 6, IO_IN);
//  572     data[0]=1;
//  573     if(IO_SENSOR)
//  574       data[1]=0x01;
//  575     else
//  576       data[1]=0x00;
//  577     FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
//  578     SendDataRequest(Frame,FrameLen);//·¢ËÍ
//  579     #endif
//  580     
//  581     #if defined (GTA_WISB_R1)
//  582     temp=ReadADC(4);//
//  583     data[0]=2;
//  584     data[1]=LO_UINT16(temp);
//  585     data[2]=HI_UINT16(temp);
//  586     NativeAddr = 0x14;//¹âÕÕ´«¸ÐÆ÷µØÖ·
//  587     FrameLen=FramePackage(Frame,NativeAddr,0x03,data,3);//´ò°ü
//  588     SendDataRequest(Frame,FrameLen);//·¢ËÍ
//  589     #endif
//  590     
//  591     
//  592     #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷  
//  593     
//  594     readTempHumi();
//  595     data[0]=4;
//  596     data[1]=humi_val[0];//L
//  597     data[2]=humi_val[1];//H
//  598     data[3]=temp_val[0];
//  599     data[4]=temp_val[1];
//  600     NativeAddr = 0x12;//ÎÂÊª¶È´«¸ÐÆ÷µØÖ·
//  601     FrameLen=FramePackage(Frame,NativeAddr,0x03,data,5);//´ò°ü
//  602     SendDataRequest(Frame,FrameLen);//·¢ËÍ
//  603     HalUARTWrite(HAL_UART_PORT_0, Frame, FrameLen);
//  604     
//  605     #endif
//  606     
//  607     //¿ÉÈ¼ÆøÌåCombustible gas¡¢¾Æ¾«Alcohol¡¢ÑÌÎíSmoke
//  608 #if defined ( HX_WCGSB_R1 ) || (HX_ALCOHOL_SENSOR) || (HX_SMOKE_SENSOR)
//  609     IO_DIR_PORT_PIN(0, 1, IO_IN);
//  610     data[0]=1;
//  611     if(IO_COMBUSTIBLE_GAS_PORT)
//  612       data[1] = 1;
//  613     else
//  614       data[1] = 0;
//  615 #if defined HX_SMOKE_SENSOR
//  616     NativeAddr = 0x21;//ÑÌÎí´«¸ÐÆ÷µØÖ·
//  617 #elif defined HX_ALCOHOL_SENSOR
//  618     NativeAddr = 0x20;//¾Æ¾«´«¸ÐÆ÷µØÖ·
//  619 #elif defined HX_WCGSB_R1
//  620     NativeAddr = 0x18;//¿ÉÈ¼ÆøÌå´«¸ÐÆ÷µØÖ·
//  621 #endif
//  622     FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
//  623     SendDataRequest(Frame,FrameLen);//·¢ËÍ
//  624 #endif
//  625     
//  626 #if defined ( HX_18B20_R1 )
//  627     uint8* pTempData;
//  628     read_data();
//  629     pTempData = DataChange();
//  630     data[0]=4;
//  631     data[1]=*pTempData++;//temperature H
//  632     data[2]=*pTempData;//temperature L
//  633     NativeAddr = 0x19;//ÉèÖÃ18b20µÄZigBeeµØÖ·Îª19h
//  634     FrameLen=FramePackage(Frame,NativeAddr,0x03,data,3);//´ò°ü
//  635     SendDataRequest(Frame,FrameLen);//·¢ËÍ
//  636     HalUARTWrite(HAL_UART_PORT_0, Frame, FrameLen);
//  637 #endif
//  638     
//  639     
//  640     return (events ^ TRANSMITAPP_START_REPORT_EVT);
        MOV     A,R6
        XRL     A,#0x10
??TransmitApp_ProcessEvent_12:
        MOV     R2,A
        MOV     A,R7
??TransmitApp_ProcessEvent_9:
        MOV     R3,A
        SJMP    ??TransmitApp_ProcessEvent_18
//  641   }
//  642   
//  643   
//  644 
//  645   // Discard unknown events
//  646   return 0;
??TransmitApp_ProcessEvent_16:
        MOV     R2,#0x0
        MOV     R3,#0x0
??TransmitApp_ProcessEvent_18:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock2
//  647 }
//  648 
//  649 /*********************************************************************
//  650  * Event Generation Functions
//  651  */
//  652 /*********************************************************************
//  653  * @fn      TransmitApp_ProcessZDOMsgs()
//  654  *
//  655  * @brief   Process response messages
//  656  *
//  657  * @param   none
//  658  *
//  659  * @return  none
//  660  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  661 void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
TransmitApp_ProcessZDOMsgs:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOMsgs
        CODE
//  662 {
        FUNCALL TransmitApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, TransmitApp_ProcessZDOIncomingMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOMsgs, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  663   switch ( inMsg->clusterID )
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for TransmitApp_ProcessZDOMsgs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        161
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_ProcessZDOMsgs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_ProcessZDOMsgs_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_ProcessZDOMsgs_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TransmitApp_ProcessZDOMsgs_3
        CODE
//  664   {
//  665     case End_Device_Bind_rsp:
//  666       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
??TransmitApp_ProcessZDOMsgs_2:
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,R3
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        JNZ     ??TransmitApp_ProcessZDOMsgs_4
//  667       {
//  668         // Light LED
//  669         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  670         osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        SJMP    ??TransmitApp_ProcessZDOMsgs_3
//  671 
//  672       }
//  673 #if defined(BLINK_LEDS)
//  674       else
//  675       {
//  676         // Flash LED to show failure
//  677         //HalLedSet ( HAL_LED_2, HAL_LED_MODE_FLASH );//4
//  678         HalLedBlink(HAL_LED_2,1,50,1000);//Ö¸Ê¾°ó¶¨ÓÐÎó
??TransmitApp_ProcessZDOMsgs_4:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x2
        SJMP    ??TransmitApp_ProcessZDOMsgs_5
//  679       }
//  680 #endif
//  681       break;
//  682 
//  683     case Match_Desc_rsp:
//  684       {
//  685         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
??TransmitApp_ProcessZDOMsgs_1:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  686         if ( pRsp )
        MOV     A,R6
        ORL     A,R7
        JZ      ??TransmitApp_ProcessZDOMsgs_3
//  687         {
//  688           if ( pRsp->status == ZSuccess && pRsp->cnt )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_ProcessZDOMsgs_6
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??TransmitApp_ProcessZDOMsgs_6
//  689           {
//  690             TransmitApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#TransmitApp_DstAddr + 8
        MOV     A,#0x2
        LCALL   ?Subroutine7 & 0xFFFF
//  691             TransmitApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
??CrossCallReturnLabel_4:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#TransmitApp_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine7 & 0xFFFF
//  692             // Take the first endpoint, Can be changed to search through endpoints
//  693             TransmitApp_DstAddr.endPoint = pRsp->epList[0];
??CrossCallReturnLabel_5:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#TransmitApp_DstAddr + 9
        MOVX    @DPTR,A
//  694 
//  695             // Light LED
//  696             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  697           }
//  698           osal_mem_free( pRsp );
??TransmitApp_ProcessZDOMsgs_6:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
        SJMP    ??TransmitApp_ProcessZDOMsgs_3
//  699         }
//  700       }
//  701       break;
//  702       
//  703   case TRANSMITAPP_CLUSTERID_TESTMSG://microdjg
//  704     {  
//  705       //osal_set_event( TransmitApp_TaskID, AF_INCOMING_MSG_CMD );///
//  706       TransmitApp_ProcessZDOIncomingMsgs(inMsg);
??TransmitApp_ProcessZDOMsgs_0:
        ; Setup parameters for call to function TransmitApp_ProcessZDOIncomingMsgs
        LCALL   ??TransmitApp_ProcessZDOIncomingMsgs?relay
//  707       HalLedBlink(HAL_LED_4,1,50,500);///
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x8
??TransmitApp_ProcessZDOMsgs_5:
        LCALL   ??HalLedBlink?relay
//  708     }
//  709   }
//  710 }
??TransmitApp_ProcessZDOMsgs_3:
        SJMP    ??Subroutine14_0
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ??HalLedBlink?relay
          CFI EndBlock cfiBlock4
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  711 
//  712 /*********************************************************************
//  713  * @fn      TransmitApp_HandleKeys
//  714  *
//  715  * @brief   Handles all key events for this device.
//  716  *
//  717  * @param   shift - true if in shift/alt.
//  718  * @param   keys - bit field for key events. Valid entries:
//  719  *                 EVAL_SW4
//  720  *                 EVAL_SW3
//  721  *                 EVAL_SW2
//  722  *                 EVAL_SW1
//  723  *
//  724  * @return  none
//  725  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  726 void TransmitApp_HandleKeys( byte shift, byte keys )
TransmitApp_HandleKeys:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function TransmitApp_HandleKeys
        CODE
//  727 {
        FUNCALL TransmitApp_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_HandleKeys, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_HandleKeys, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  728   //zAddrType_t dstAddr;
//  729       
//  730     if ( keys == HAL_KEY_INT_1)
        MOV     A,#-0x1f
        XRL     A,R6
        JNZ     ??TransmitApp_HandleKeys_0
//  731     {
//  732       #if defined(GTA_DEBUG)
//  733       Test_Mark=0x01;
        MOV     DPTR,#Test_Mark
        MOV     A,#0x1
        MOVX    @DPTR,A
//  734       Test_Buf[0] = 0x99;
        MOV     DPTR,#Test_Buf
        MOV     A,#-0x67
        MOVX    @DPTR,A
//  735       Test_Buf[1] = 0x88;
        INC     DPTR
        MOV     A,#-0x78
        MOVX    @DPTR,A
//  736       Test_Buf[2] = 0x77;
        INC     DPTR
        MOV     A,#0x77
        MOVX    @DPTR,A
//  737       Test_Buf[3] = 0x66;
        INC     DPTR
        MOV     A,#0x66
        MOVX    @DPTR,A
//  738       HalUARTWrite(HAL_UART_PORT_0,Test_Buf,15);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xf
        MOV     R5,#0x0
        MOV     R2,#Test_Buf & 0xff
        MOV     R3,#(Test_Buf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  739       #endif
//  740       Flag_ReportData=!Flag_ReportData;
        MOV     DPTR,#Flag_ReportData
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_HandleKeys_1
        MOV     A,#0x1
        SJMP    ??TransmitApp_HandleKeys_2
??TransmitApp_HandleKeys_1:
        CLR     A
??TransmitApp_HandleKeys_2:
        MOVX    @DPTR,A
//  741       HalLedBlink (HAL_LED_1, 1, 50, 100);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  742       if(Flag_ReportData)
        MOV     DPTR,#Flag_ReportData
        MOVX    A,@DPTR
        JZ      ??TransmitApp_HandleKeys_0
//  743       {
//  744         //osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 2000);
//  745         osal_set_event( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
          CFI EndBlock cfiBlock6
//  746       }
//  747     }
//  748  //}
//  749 }
??TransmitApp_HandleKeys_0:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock7
//  750 
//  751 /*********************************************************************
//  752  * LOCAL FUNCTIONS
//  753  */
//  754 
//  755 /*********************************************************************
//  756  * @fn      TransmitApp_MessageMSGCB
//  757  *
//  758  * @brief   Data message processor callback.  This function processes
//  759  *          any incoming data - probably from other devices.  So, based
//  760  *          on cluster ID, perform the intended action.
//  761  *
//  762  * @param   none
//  763  *
//  764  * @return  none
//  765  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  766 void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
TransmitApp_MessageMSGCB:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function TransmitApp_MessageMSGCB
        CODE
//  767 {
        ; Saved register size: 0
        ; Auto size: 0
//  768   uint16 i;
//  769   uint8 error = FALSE;
//  770 //HalLedBlink (HAL_LED_2, 1, 50, 300);
//  771 //HalUARTWrite(HAL_UART_PORT_0,pkt->cmd.Data,pkt->cmd.DataLength);//microdjg
//  772   switch ( pkt->clusterId )
//  773   {
//  774     case TRANSMITAPP_CLUSTERID_TESTMSG:
//  775       
//  776       //HalUARTWrite(HAL_UART_PORT_0,pkt->cmd.Data,pkt->cmd.DataLength);//microdjg
//  777       //HalLedBlink ( HAL_LED_2, 1, 50, 300 );//Blink to indicate RX
//  778       break;
//  779   default:break;
//  780   }
//  781 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock8
//  782 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  783 void TransmitApp_ProcessZDOIncomingMsgs( zdoIncomingMsg_t *inMsg )
TransmitApp_ProcessZDOIncomingMsgs:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOIncomingMsgs
        CODE
//  784 {
        FUNCALL TransmitApp_ProcessZDOIncomingMsgs, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_ProcessZDOIncomingMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  785     ModBusFrame_t RxFrame;
//  786     uint16 temp;
//  787     //uint8 recdatabuf[20];
//  788     HalLedBlink (HAL_LED_2, 1, 50, 300);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x2c
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedBlink?relay
//  789     uint8 i;
//  790     //#if defined(GTA_DEBUG)
//  791     //  uint8 i;
//  792     //#endif
//  793     
//  794     //HalUARTWrite(HAL_UART_PORT_0,inMsg->asdu,inMsg->asduLen);//²âÊÔ
//  795     
//  796     if(ZG_DEVICE_COORDINATOR_TYPE)
//  797     {
//  798       
//  799       if(inMsg->asduLen!=0&&inMsg->asdu[0]!=0)
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_9:
        JZ      ??TransmitApp_ProcessZDOIncomingMsgs_0
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,R7
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_8:
        JZ      ??TransmitApp_ProcessZDOIncomingMsgs_0
//  800       {/*
//  801         for(i=0;i<inMsg->asduLen;i++)
//  802         {
//  803           recdatabuf[i]=inMsg->asdu[i];
//  804         } 
//  805         HalUARTWrite(HAL_UART_PORT_0,recdatabuf,inMsg->asduLen);
//  806         */
//  807         HalUARTWrite(HAL_UART_PORT_0,inMsg->asdu,inMsg->asduLen);
        ; Setup parameters for call to function HalUARTWrite
        LCALL   ?Subroutine9 & 0xFFFF
//  808       }
??CrossCallReturnLabel_10:
        MOV     R4,A
        MOV     R5,#0x0
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  809       
//  810       //HalUARTWrite(HAL_UART_PORT_0,recdatabuf,inMsg->asduLen);
//  811       #if defined(GTA_DEBUG)
//  812       if(Test_Mark==0x01)
??TransmitApp_ProcessZDOIncomingMsgs_0:
        MOV     DPTR,#Test_Mark
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TransmitApp_ProcessZDOIncomingMsgs_1
//  813       {
//  814         for(i=0;i<15;i++)
//  815         {
//  816           Test_Buf[i]=0;
        CLR     A
        MOV     DPTR,#Test_Buf
        MOV     R0,#0xf
??TransmitApp_ProcessZDOIncomingMsgs_2:
        MOVX    @DPTR,A
        INC     DPTR
        DJNZ    R0,??TransmitApp_ProcessZDOIncomingMsgs_2
//  817         }
//  818         for(i=0;i<inMsg->asduLen;i++)
        MOV     R3,A
        SJMP    ??TransmitApp_ProcessZDOIncomingMsgs_3
//  819         {
//  820           Test_Buf[i]=inMsg->asdu[i];
??TransmitApp_ProcessZDOIncomingMsgs_4:
        MOV     DPL,R3
        MOV     R0,DPL
        LCALL   ?Subroutine11 & 0xFFFF
//  821         }
??CrossCallReturnLabel_16:
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R2
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#Test_Buf & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(Test_Buf >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R3
??TransmitApp_ProcessZDOIncomingMsgs_3:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     R0,A
        MOV     A,R3
        CLR     C
        SUBB    A,R0
        JC      ??TransmitApp_ProcessZDOIncomingMsgs_4
//  822         Test_Mark=0;
        MOV     DPTR,#Test_Mark
        CLR     A
        MOVX    @DPTR,A
//  823       }
//  824       
//  825       #endif
//  826     }
//  827     else
//  828     {
//  829       FrameUnPackage(inMsg->asdu,&RxFrame);//check Package
//  830       if(RxFrame.COMFIRM==FRAME_CHECK_RIGHT)
//  831       {
//  832         ReportData(&RxFrame);
//  833         
//  834       }
//  835     } 
//  836     
//  837 }
??TransmitApp_ProcessZDOIncomingMsgs_1:
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOIncomingMsgs
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+0
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV     A,R6
        ADD     A,#0x13
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_20:
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOIncomingMsgs
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+0
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+0
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOV     A,R6
        ADD     A,#0x10
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_19:
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOIncomingMsgs
          CFI Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_16
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+0
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_9
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+0
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_10
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+0
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_11
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+0
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOV     DPL,A
        MOV     A,R7
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function TransmitApp_ProcessZDOMsgs
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_7
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+0
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_8
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+0
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_15
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+0
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_16
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+0
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_9
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+0
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_10
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+0
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_11
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+0
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function TransmitApp_ProcessZDOIncomingMsgs
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+0
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34
//  838 
//  839 /*********************************************************************
//  840  * @fn      TransmitApp_SendTheMessage
//  841  *
//  842  * @brief   Send "the" message.
//  843  *
//  844  * @param   none
//  845  *
//  846  * @return  none
//  847  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  848 void TransmitApp_SendTheMessage( void )
TransmitApp_SendTheMessage:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function TransmitApp_SendTheMessage
        CODE
//  849 {
        FUNCALL TransmitApp_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_SendTheMessage, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_SendTheMessage, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  850   uint16 len;
//  851   uint8 tmp;
//  852 
//  853   do {
//  854     // put the sequence number in the message
//  855     tmp = HI_UINT8( TransmitApp_TransID );
??TransmitApp_SendTheMessage_0:
        MOV     DPTR,#TransmitApp_TransID
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     R6,A
//  856     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
        CLR     C
        SUBB    A,#0xa
        JNC     ??TransmitApp_SendTheMessage_1
        MOV     R0,#0x30
        SJMP    ??TransmitApp_SendTheMessage_2
??TransmitApp_SendTheMessage_1:
        MOV     R0,#0x37
//  857     TransmitApp_Msg[2] = tmp;
??TransmitApp_SendTheMessage_2:
        MOV     A,R0
        ADD     A,R6
        MOV     DPTR,#TransmitApp_Msg + 2
        MOVX    @DPTR,A
//  858     tmp = LO_UINT8( TransmitApp_TransID );
        MOV     DPTR,#TransmitApp_TransID
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     R6,A
//  859     tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
        CLR     C
        SUBB    A,#0xa
        JNC     ??TransmitApp_SendTheMessage_3
        MOV     R0,#0x30
        SJMP    ??TransmitApp_SendTheMessage_4
??TransmitApp_SendTheMessage_3:
        MOV     R0,#0x37
//  860     TransmitApp_Msg[3] = tmp;
??TransmitApp_SendTheMessage_4:
        MOV     A,R0
        ADD     A,R6
        MOV     DPTR,#TransmitApp_Msg + 3
        MOVX    @DPTR,A
//  861 
//  862     len = TransmitApp_MaxDataLength;
//  863 
//  864 #if defined ( TRANSMITAPP_RANDOM_LEN )
//  865     len = (uint8)(osal_rand() & 0x7F);
//  866     if( len > TransmitApp_MaxDataLength || len == 0 )
//  867       len = TransmitApp_MaxDataLength;
//  868     else if ( len < 4 )
//  869       len = 4;
//  870 #endif
//  871 	
//  872     tmp = AF_DataRequest( &TransmitApp_DstAddr, &TransmitApp_epDesc,
//  873                            TRANSMITAPP_CLUSTERID_TESTMSG,
//  874                            len, TransmitApp_Msg,
//  875                           &TransmitApp_TransID,
//  876                            TRANSMITAPP_TX_OPTIONS,
//  877                            AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
        MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#TransmitApp_Msg & 0xff
        MOV     ?V0 + 1,#(TransmitApp_Msg >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     DPTR,#TransmitApp_MaxDataLength
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#-0x5f
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#TransmitApp_epDesc & 0xff
        MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
        MOV     R2,#TransmitApp_DstAddr & 0xff
        MOV     R3,#(TransmitApp_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     R6,A
//  878     HalLedBlink ( HAL_LED_3, 1, 50, 200 );//Blink to indicate TX  microdjg
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x38
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ??HalLedBlink?relay
//  879 
//  880 #if defined ( TRANSMITAPP_RANDOM_LEN )
//  881     if ( tmp == afStatus_SUCCESS )
//  882     {
//  883       txAccum += len;
//  884     }
//  885 #endif
//  886 
//  887     if ( timesToSend )
        MOV     DPTR,#timesToSend
        MOVX    A,@DPTR
        JZ      ??TransmitApp_SendTheMessage_5
//  888     {
//  889       timesToSend--;
//  890     }
//  891   } while ( (timesToSend != 0) && (afStatus_SUCCESS == tmp) );
        DEC     A
        MOVX    @DPTR,A
        JZ      ??TransmitApp_SendTheMessage_5
        MOV     A,R6
        JNZ     $+5
        LJMP    ??TransmitApp_SendTheMessage_0 & 0xFFFF
//  892 
//  893   if ( afStatus_SUCCESS == tmp )
??TransmitApp_SendTheMessage_5:
        MOV     A,R6
        JNZ     ??TransmitApp_SendTheMessage_6
//  894   {
//  895     pktCounter++;
        MOV     DPTR,#pktCounter
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        SJMP    ??TransmitApp_SendTheMessage_7
//  896   }
//  897   else
//  898   {
//  899     // Error, so wait (10 mSec) and try again.
//  900     osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_SEND_ERR_EVT, 10 );
??TransmitApp_SendTheMessage_6:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  901   }
//  902 }
??TransmitApp_SendTheMessage_7:
        LJMP    ??Subroutine14_0 & 0xFFFF
          CFI EndBlock cfiBlock35
//  903 
//  904 /*********************************************************************
//  905  * @fn      TransmitApp_ChangeState
//  906  *
//  907  * @brief   Toggle the Sending/Waiting state flag
//  908  *
//  909  * @param   none
//  910  *
//  911  * @return  none
//  912  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  913 void TransmitApp_ChangeState( void )
TransmitApp_ChangeState:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function TransmitApp_ChangeState
        CODE
//  914 {
        FUNCALL TransmitApp_ChangeState, TransmitApp_SetSendEvt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  915   if ( TransmitApp_State == TRANSMITAPP_STATE_WAITING )
        MOV     DPTR,#TransmitApp_State
        MOVX    A,@DPTR
        JNZ     ??TransmitApp_ChangeState_0
//  916   {
//  917     TransmitApp_State = TRANSMITAPP_STATE_SENDING;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  918     TransmitApp_SetSendEvt();
        ; Setup parameters for call to function TransmitApp_SetSendEvt
        LCALL   ??TransmitApp_SetSendEvt?relay
//  919     timesToSend = TRANSMITAPP_INITIAL_MSG_COUNT;
        MOV     DPTR,#timesToSend
        MOV     A,#0x2
        SJMP    ??TransmitApp_ChangeState_1
//  920   }
//  921   else
//  922   {
//  923     TransmitApp_State = TRANSMITAPP_STATE_WAITING;
??TransmitApp_ChangeState_0:
        CLR     A
??TransmitApp_ChangeState_1:
        MOVX    @DPTR,A
          CFI EndBlock cfiBlock36
//  924   }
//  925 }
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock37
//  926 
//  927 /*********************************************************************
//  928  * @fn      TransmitApp_SetSendEvt
//  929  *
//  930  * @brief   Set the event flag
//  931  *
//  932  * @param   none
//  933  *
//  934  * @return  none
//  935  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  936 void TransmitApp_SetSendEvt( void )
TransmitApp_SetSendEvt:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function TransmitApp_SetSendEvt
        CODE
//  937 {
        FUNCALL TransmitApp_SetSendEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  938 #if defined( TRANSMITAPP_DELAY_SEND )
//  939   // Adds a delay to sending the data
//  940   osal_start_timerEx( TransmitApp_TaskID,
//  941                     TRANSMITAPP_SEND_MSG_EVT, TRANSMITAPP_SEND_DELAY );
//  942 #else
//  943   // No Delay - just send the data
//  944   osal_set_event( TransmitApp_TaskID, TRANSMITAPP_SEND_MSG_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  945 #endif
//  946 }
        SJMP    ?Subroutine3
          CFI EndBlock cfiBlock38
//  947 
//  948 /*********************************************************************
//  949  * @fn      TransmitApp_DisplayResults
//  950  *
//  951  * @brief   Display the results and clear the accumulators
//  952  *
//  953  * @param   none
//  954  *
//  955  * @return  none
//  956  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  957 void TransmitApp_DisplayResults( void )
TransmitApp_DisplayResults:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function TransmitApp_DisplayResults
        CODE
//  958 {
        FUNCALL TransmitApp_DisplayResults, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, debug_msg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TransmitApp_DisplayResults, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  959 #ifdef LCD_SUPPORTED
//  960   #define LCD_W  16
//  961   uint32 rxShdw, txShdw, tmp;
//  962   byte lcd_buf[LCD_W+1];
//  963   byte idx;
//  964 #endif
//  965 
//  966   // The OSAL timers are not real-time, so calculate the actual time expired.
//  967   uint32 msecs = osal_GetSystemClock() - clkShdw;
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL   ??osal_GetSystemClock?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     DPTR,#clkShdw
        MOV     R0,#?V0 + 4
        LCALL   ?L_SUB_X
//  968   clkShdw = osal_GetSystemClock();
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL   ??osal_GetSystemClock?relay
        MOV     DPTR,#clkShdw
        LCALL   ?XSTORE_R2345
//  969 
//  970   rxTotal += rxAccum;
        MOV     DPTR,#rxAccum
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#rxTotal
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
//  971   txTotal += txAccum;
        MOV     DPTR,#txAccum
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#txTotal
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
//  972 
//  973 #if defined ( LCD_SUPPORTED )
//  974   rxShdw = (rxAccum * 1000 + msecs/2) / msecs;
//  975   txShdw = (txAccum * 1000 + msecs/2) / msecs;
//  976 
//  977   osal_memset( lcd_buf, ' ', LCD_W );
//  978   lcd_buf[LCD_W] = NULL;
//  979 
//  980   idx = 4;
//  981   tmp = (rxShdw >= 100000) ? 99999 : rxShdw;
//  982   do
//  983   {
//  984     lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
//  985     tmp /= 10;
//  986   } while ( tmp );
//  987 
//  988   idx = LCD_W-1;
//  989   tmp = rxTotal;
//  990   do
//  991   {
//  992     lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
//  993     tmp /= 10;
//  994   } while ( tmp );
//  995 
//  996   HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_1 );
//  997   osal_memset( lcd_buf, ' ', LCD_W );
//  998 
//  999   idx = 4;
// 1000   tmp = (txShdw >= 100000) ? 99999 : txShdw;
// 1001   do
// 1002   {
// 1003     lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
// 1004     tmp /= 10;
// 1005   } while ( tmp );
// 1006 
// 1007   idx = LCD_W-1;
// 1008   tmp = txTotal;
// 1009   do
// 1010   {
// 1011     lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
// 1012     tmp /= 10;
// 1013   } while ( tmp );
// 1014 
// 1015   HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
// 1016 
// 1017 #elif defined( MT_TASK )
// 1018   DEBUG_INFO( COMPID_APP, SEVERITY_INFORMATION, 3,
// 1019               rxAccum, (uint16)msecs, (uint16)rxTotal );
        ; Setup parameters for call to function debug_msg
        MOV     DPTR,#rxTotal
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     DPTR,#rxAccum
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R3,#0x3
        MOV     R2,#0x3
        MOV     R1,#0x7
        LCALL   ??debug_msg?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1020 #else
// 1021   (void)msecs;  // Not used when no output
// 1022 #endif
// 1023 
// 1024   if ( (rxAccum == 0) && (txAccum == 0) )
        MOV     DPTR,#rxAccum
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        ORL     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??TransmitApp_DisplayResults_0
        MOV     DPTR,#txAccum
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        ORL     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??TransmitApp_DisplayResults_0
// 1025   {
// 1026     osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#TransmitApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
// 1027     timerOn = FALSE;
        MOV     DPTR,#timerOn
        CLR     A
        MOVX    @DPTR,A
// 1028   }
// 1029 
// 1030   rxAccum = txAccum = 0;
??TransmitApp_DisplayResults_0:
        MOV     DPTR,#txAccum
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#rxAccum
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1031 }
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock39
// 1032 
// 1033 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1034 void initUart(halUARTCBack_t pf)
initUart:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function initUart
        CODE
// 1035 {
        FUNCALL initUart, HalUARTOpen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
// 1036   halUARTCfg_t uartConfig;
// 1037   
// 1038   uartConfig.configured           = TRUE;              
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1039   uartConfig.baudRate             = HAL_UART_BR_9600;//HAL_UART_BR_38400;  //HAL_UART_BR_19200;
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1040   uartConfig.flowControl          = FALSE;              
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1041   uartConfig.flowControlThreshold = 48;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x30
        LCALL   ??Subroutine16_0 & 0xFFFF
// 1042   uartConfig.rx.maxBufSize        = RX_BUF_LEN;
??CrossCallReturnLabel_24:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
// 1043   uartConfig.tx.maxBufSize        = 128;
??CrossCallReturnLabel_25:
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
// 1044   
// 1045   uartConfig.idleTimeout          = 6;   
??CrossCallReturnLabel_26:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
// 1046   uartConfig.intEnable            = TRUE;              
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1047   uartConfig.callBackFunc         = pf;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine6 & 0xFFFF
// 1048   
// 1049   HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
??CrossCallReturnLabel_3:
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
// 1050 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond41 Using cfiCommon0
          CFI Function initUart
          CFI Conditional ??CrossCallReturnLabel_25
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function initUart
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond42) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond42) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond42) CFA_SP SP+-5
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker43 Using cfiCommon1
          CFI (cfiPicker43) NoFunction
          CFI (cfiPicker43) Picker
        MOV     A,#-0x80
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiPicker43
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function TransmitApp_Init
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function TransmitApp_Init
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+0
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function initUart
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond46) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond46) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond46) CFA_SP SP+-5
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function uartRxCB
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_0
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+0
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 140)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function SendDataRequest
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_1
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+0
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function initUart
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond49) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond49) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond49) CFA_SP SP+-5
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function initUart
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond50) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond50) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond50) CFA_SP SP+-5
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function TransmitApp_Init
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function initUart
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond53) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond53) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond53) CFA_SP SP+-5
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function afDataReqMTU
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        RET
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54
// 1051 
// 1052 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1053 void uartRxCB( uint8 port, uint8 event )
uartRxCB:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function uartRxCB
        CODE
// 1054 {
        FUNCALL uartRxCB, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 140, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 140, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uartRxCB, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 149, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 149, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uartRxCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 140, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 140, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 128
        MOV     A,#-0x80
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 140)
// 1055   uint8 pBuf[RX_BUF_LEN];
// 1056   uint16 len;
// 1057   static uint16 destAddr;
// 1058   ModBusFrame_t *pRxFrame;
// 1059   zAddrType_t dstAddr;
// 1060   #if defined (GTA_WHFRFID_R1) 
// 1061   RC623Frame_t *pRC623Frame;
// 1062   uint8 Frame[15];//ÁÙÊ±Éè¶¨µÄ´óÐ¡  
// 1063   uint8 data[10];//
// 1064   uint16 FrameLen;
// 1065   uint8 i;
// 1066   #endif
// 1067  
// 1068     len = HalUARTRead( HAL_UART_PORT_0, pBuf, RX_BUF_LEN );
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#-0x80
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
// 1069     if ( len>0 ) 
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??uartRxCB_0
// 1070     {
// 1071        // HalUARTWrite(HAL_UART_PORT_0, pBuf, len);
// 1072       //SentDataInBind(pBuf,len);
// 1073       if(!ZG_DEVICE_COORDINATOR_TYPE)//·ÇÐ­µ÷Æ÷
// 1074       {
// 1075         #if defined (GTA_WHFRFID_R1) 
// 1076         UnPackRC623Data(pBuf,pRC623Frame);
// 1077         if(pRC623Frame->Comfirm==FRAME_CHECK_RIGHT)
// 1078         {
// 1079           switch(pRC623Frame->Cmd)
// 1080           {
// 1081               case RFID_CMD_SET_ISOTYPE:
// 1082 
// 1083                 break;
// 1084               case RFID_CMD_SELECT_CARD:
// 1085 
// 1086                 break;
// 1087               case RFID_CMD_GET_CARD_ID:
// 1088                 data[0]=7;
// 1089                 data[1]=MODBUS_RFID_CMD_GET_CARD_ID&0x00FF;
// 1090                 data[2]=(MODBUS_RFID_CMD_GET_CARD_ID>>8)&0x00FF;
// 1091                 data[3]=pRC623Frame->Data[1];
// 1092                 data[4]=pRC623Frame->Data[2];
// 1093                 data[5]=pRC623Frame->Data[3];
// 1094                 data[6]=pRC623Frame->Data[4];
// 1095                 //data[4]=pRC623Frame->Data[3];
// 1096                 FrameLen=FramePackage(Frame,NativeAddr,0x03,data,7);//´ò°ü
// 1097                 SendDataRequest(Frame,FrameLen);//·¢ËÍ
// 1098                 break;
// 1099               case RFID_CMD_FIND_ISO14443_CARD:
// 1100                 //for(i=0;i<RC623Frame.DataLen;i++)
// 1101                 //{
// 1102                 //  RC623Frame.Data
// 1103                 //}
// 1104                 data[0]=5;//2+1+2
// 1105                 data[1]=MODBUS_RFID_CMD_FIND_ISO14443_CARD&0x00FF;
// 1106                 data[2]=(MODBUS_RFID_CMD_FIND_ISO14443_CARD>>8)&0x00FF;
// 1107                 data[3]=pRC623Frame->Data[0];
// 1108                 data[4]=pRC623Frame->Data[1];
// 1109                 data[5]=pRC623Frame->Data[2];
// 1110                 data[6]=pRC623Frame->Data[3];
// 1111                 FrameLen=FramePackage(Frame,NativeAddr,0x03,data,6);//´ò°ü
// 1112                 SendDataRequest(Frame,FrameLen);//·¢ËÍ
// 1113 
// 1114                 break;
// 1115               case RFID_CMD_CONFIG_KEY:
// 1116 
// 1117                 break;
// 1118               case RFID_CMD_READ_VAL:
// 1119 
// 1120                 break;
// 1121               default:
// 1122                 break;
// 1123           }
// 1124         }
// 1125         #else
// 1126         TestDirectSent_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;//µØÖ·´«ËÍ
// 1127         TestDirectSent_DstAddr.endPoint = 0;
// 1128         TestDirectSent_DstAddr.addr.shortAddr = 0x0000;
// 1129     
// 1130         AF_DataRequest( 
// 1131                       &TestDirectSent_DstAddr,               //µØÖ·
// 1132                       &TransmitApp_epDesc,                //ÃèÊö
// 1133                       TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
// 1134                         len,                                  //len
// 1135                         pBuf,//TransmitApp_Msg,             //DATA
// 1136                       &TransmitApp_TransID,               //
// 1137                       TRANSMITAPP_TX_OPTIONS,
// 1138                       AF_DEFAULT_RADIUS 
// 1139                       );
// 1140         HalLedBlink (HAL_LED_3, 1, 50, 200);
// 1141         #endif
// 1142       }
// 1143       else
// 1144       {
// 1145         //destAddr=BUILD_UINT16(pBuf[1],pBuf[0]);
// 1146         if(ZG_DEVICE_COORDINATOR_TYPE)
// 1147         {
// 1148           TestDirectSent_DstAddr.addrMode=(afAddrMode_t)AddrBroadcast;//Addr16Bit;//µØÖ·´«ËÍ
        LCALL   ?Subroutine5 & 0xFFFF
// 1149           TestDirectSent_DstAddr.endPoint = 0;
// 1150           TestDirectSent_DstAddr.addr.shortAddr = 0xffff;//destAddr;
// 1151           //TestDirectSent_DstAddr.addr.extAddr
// 1152           
// 1153           AF_DataRequest( 
// 1154                       &TestDirectSent_DstAddr,               //µØÖ·
// 1155                       &TransmitApp_epDesc,                //ÃèÊö
// 1156                       TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
// 1157                         len,                                  //len
// 1158                         pBuf,//TransmitApp_Msg,             //DATA
// 1159                       &TransmitApp_TransID,               //
// 1160                       TRANSMITAPP_TX_OPTIONS,
// 1161                       AF_DEFAULT_RADIUS 
// 1162                       );
??CrossCallReturnLabel_0:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 141)
        MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
        MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 143)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 145)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 147)
        MOV     ?V0 + 0,#-0x5f
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 149)
        MOV     R1,#0x20
        MOV     R4,#TransmitApp_epDesc & 0xff
        MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
        MOV     R2,#TestDirectSent_DstAddr & 0xff
        MOV     R3,#(TestDirectSent_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 140)
// 1163           HalLedBlink (HAL_LED_3, 1, 50, 200);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x38
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ??HalLedBlink?relay
// 1164         }
// 1165       }
// 1166     }
// 1167 
// 1168 }
??uartRxCB_0:
        MOV     A,#-0x80
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock55
// 1169 /*********************************************************************
// 1170 *********************************************************************/
// 1171 
// 1172 
// 1173 
// 1174 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1175 void FrameUnPackage(uint8 *pBuf,ModBusFrame_t *pFrame)
FrameUnPackage:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI Function FrameUnPackage
        CODE
// 1176 {
        FUNCALL FrameUnPackage, Crc16Code
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 1177    uint16 crc;
// 1178    uint8 datalen;
// 1179    uint8 cmd;
// 1180    uint8 i;
// 1181    
// 1182    if(pBuf[0]==FRAME_HEAD)
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0x7e
        JZ      $+5
        LJMP    ??FrameUnPackage_0 & 0xFFFF
// 1183    {
// 1184    	cmd=pBuf[2];
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
// 1185 	switch(cmd)
        DEC     A
        JZ      ??FrameUnPackage_1
        ADD     A,#-0x2
        JZ      ??FrameUnPackage_1
        ADD     A,#-0x2
        JZ      ??FrameUnPackage_1
        DEC     A
        JZ      ??FrameUnPackage_1
        ADD     A,#-0x9
        JZ      ??FrameUnPackage_2
        DEC     A
        JNZ     $+5
        LJMP    ??FrameUnPackage_3 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??FrameUnPackage_4 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??FrameUnPackage_5 & 0xFFFF
        LJMP    ??FrameUnPackage_6 & 0xFFFF
// 1186 		{
// 1187 		case FUN_CODE_READ_COIL_STATE:		
// 1188 		case FUN_CODE_READ_HOLDING_REGISTERS:
// 1189 			datalen =4;
// 1190 			break;
// 1191 		case 0x05:	
// 1192 		case 0x06:
// 1193 			datalen =4;
??FrameUnPackage_1:
        MOV     ?V0 + 4,#0x4
// 1194 			break;
// 1195 		case 0x0F:
// 1196 			datalen =5+((BUILD_UINT16(pBuf[6],pBuf[5])+7)/8);//2+2+1+(N+7)/8
// 1197 			break;
// 1198 		case 0x10:
// 1199 			datalen=5+((BUILD_UINT16(pBuf[6],pBuf[5])*2));//2+2+1+2N
// 1200 			break;
// 1201 		case 0x11:
// 1202                         datalen = 0;
// 1203                         break;
// 1204 		case 0x12:
// 1205 			datalen = 1;	//1+ 6;
// 1206 			break;
// 1207 		default:pFrame->COMFIRM=FRAME_CHECK_CMD_WRONG;
// 1208 			return ;
// 1209 		}
// 1210    	crc=BUILD_UINT16(pBuf[3+datalen],pBuf[3+datalen+1]);
??FrameUnPackage_7:
        MOV     ?V0 + 2,?V0 + 4
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     ?V0 + 2,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 3,A
// 1211      if(crc==Crc16Code(pBuf+1,datalen+2))//pBuf+1  ²»¼ÆHEAD  ³¤¶ÈÊÇ1+1+1-1
        ; Setup parameters for call to function Crc16Code
        MOV     A,#0x2
        ADD     A,?V0 + 4
        MOV     R1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??Crc16Code?relay
        MOV     A,R2
        XRL     A,?V0 + 2
        JNZ     ??FrameUnPackage_8
        MOV     A,R3
        XRL     A,?V0 + 3
??FrameUnPackage_8:
        JZ      $+5
        LJMP    ??FrameUnPackage_9 & 0xFFFF
// 1212      	{
// 1213      		pFrame->CMD=cmd;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     A,?V0 + 5
        LCALL   ?Subroutine7 & 0xFFFF
// 1214 		pFrame->DATALEN=datalen;
??CrossCallReturnLabel_6:
        INC     DPTR
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
// 1215 		pFrame->ADDR=pBuf[1];
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
// 1216 		for(i=0;i<datalen;i++)
        MOV     R2,#0x0
        SJMP    ??FrameUnPackage_10
??FrameUnPackage_2:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x7
        MOV     ?V0 + 2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     A,#0x3
        MOV     R0,#?V0 + 2
        LCALL   ?US_SHR
        MOV     A,?V0 + 2
??FrameUnPackage_11:
        ADD     A,#0x5
        MOV     ?V0 + 4,A
        LJMP    ??FrameUnPackage_7 & 0xFFFF
??FrameUnPackage_3:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        SJMP    ??FrameUnPackage_11
??FrameUnPackage_4:
        MOV     ?V0 + 4,#0x0
        LJMP    ??FrameUnPackage_7 & 0xFFFF
??FrameUnPackage_5:
        MOV     ?V0 + 4,#0x1
        LJMP    ??FrameUnPackage_7 & 0xFFFF
??FrameUnPackage_6:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     A,#0x3
        SJMP    ??FrameUnPackage_12
// 1217                     {
// 1218                     pFrame->pData[i]=pBuf[3+i];
??FrameUnPackage_13:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1219                     }
        INC     R2
??FrameUnPackage_10:
        MOV     A,R2
        CLR     C
        SUBB    A,?V0 + 4
        JC      ??FrameUnPackage_13
// 1220                 pFrame->COMFIRM=FRAME_CHECK_RIGHT;
        LCALL   ?Subroutine10 & 0xFFFF
// 1221                 return ;//ÍêÈ«ÕýÈ· ²¢°Ñ°ü·µ»Ø
// 1222      	}
// 1223 	 	
// 1224    }
??CrossCallReturnLabel_13:
        MOV     A,#0x1
        SJMP    ??FrameUnPackage_12
// 1225    else
// 1226    {
// 1227    	 pFrame->COMFIRM=FRAME_CHECK_HEAD_WRONG;
??FrameUnPackage_0:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     A,#0x2
??FrameUnPackage_12:
        MOVX    @DPTR,A
          CFI EndBlock cfiBlock56
// 1228 	 return ;
// 1229    }
??FrameUnPackage_9:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
// 1230      
// 1231 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock57 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock57

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond58 Using cfiCommon0
          CFI Function FrameUnPackage
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function FrameUnPackage
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+0
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function FrameUnPackage
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+0
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function TransmitApp_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function TransmitApp_ProcessZDOMsgs
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+0
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function FrameUnPackage
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+0
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker65 Using cfiCommon1
          CFI (cfiPicker65) NoFunction
          CFI (cfiPicker65) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiPicker65
// 1232 
// 1233 
// 1234 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1235 uint16 Crc16Code(uint8 *str, uint8 len)//Modbus Ckeck Code.//LO First
Crc16Code:
          CFI Block cfiBlock66 Using cfiCommon0
          CFI Function Crc16Code
        CODE
// 1236 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R1
        MOV     R4,A
// 1237     uint16 code = 0xFFFF;
        MOV     R2,#-0x1
        MOV     R3,#-0x1
// 1238     uint16 Poly = 0xA001;
// 1239 // Dnp is 0x3D65 or A6BC
// 1240 
// 1241     int flag = 0;
        MOV     R6,#0x0
// 1242     int j = 0;
        MOV     R0,#0x0
        MOV     R1,#0x0
// 1243 
// 1244     for(j=0; j<len; j++)
        SJMP    ??Crc16Code_0
// 1245     {
// 1246 		code ^= (uint16) (*str);
??Crc16Code_1:
        MOVX    A,@DPTR
        XRL     A,R2
        MOV     R2,A
// 1247 		for(int i=0; i<8;i++)
        MOV     R5,#0x8
// 1248 		{
// 1249 			if ( code & 0x0001 ) flag = 1;
??Crc16Code_2:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??Crc16Code_3
        MOV     R6,#0x1
// 1250 			code = code>>1;
??Crc16Code_3:
        MOV     A,R3
        CLR     C
        RRC     A
        MOV     R3,A
        MOV     A,R2
        RRC     A
        MOV     R2,A
// 1251 			if ( flag )
        MOV     A,R6
        JZ      ??Crc16Code_4
// 1252 			{
// 1253 				code ^= Poly;
        MOV     A,#0x1
        XRL     A,R2
        MOV     R2,A
        MOV     A,#-0x60
        XRL     A,R3
        MOV     R3,A
// 1254 				flag = 0;
        MOV     R6,#0x0
// 1255 			}
// 1256 		}
??Crc16Code_4:
        DEC     R5
        MOV     A,R5
        JNZ     ??Crc16Code_2
// 1257 		str ++;
        INC     DPTR
// 1258     }
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??Crc16Code_0:
        MOV     ?V0 + 0,R4
        CLR     C
        MOV     A,R0
        SUBB    A,?V0 + 0
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??Crc16Code_1
// 1259     return code;
        LJMP    ??Subroutine14_0 & 0xFFFF
          CFI EndBlock cfiBlock66
// 1260 }
// 1261 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1262 void SentDataInBind(uint8 *pdata,uint16 len)
SentDataInBind:
          CFI Block cfiBlock67 Using cfiCommon0
          CFI Function SentDataInBind
        CODE
// 1263 {
        FUNCALL SentDataInBind, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SentDataInBind, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1264   //uint8 data[]="hello";
// 1265      AF_DataRequest( 
// 1266                     &TransmitApp_DstAddr,               //µØÖ·
// 1267                     &TransmitApp_epDesc,                //ÃèÊö
// 1268                     TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
// 1269                     len,                                  //len
// 1270                     pdata,//TransmitApp_Msg,             //DATA
// 1271                     &TransmitApp_TransID,               //
// 1272                     TRANSMITAPP_TX_OPTIONS,
// 1273                     AF_DEFAULT_RADIUS 
// 1274                     );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
        MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#-0x5f
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#TransmitApp_epDesc & 0xff
        MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
        MOV     R2,#TransmitApp_DstAddr & 0xff
        MOV     R3,#(TransmitApp_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1275      HalLedBlink (HAL_LED_3, 1, 50, 300);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x2c
        MOV     R5,#0x1
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock67
// 1276 }
// 1277 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1278 void SendBindRequest(void)
SendBindRequest:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI Function SendBindRequest
        CODE
// 1279 {
        FUNCALL SendBindRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendBindRequest, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendBindRequest, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
// 1280     zAddrType_t dstAddr;
// 1281     dstAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1282     dstAddr.addr.shortAddr = 0x0000; // Coordinator
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1283     ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
// 1284                   TransmitApp_epDesc.endPoint,
// 1285                   TRANSMITAPP_PROFID,
// 1286                   TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
// 1287                   TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
// 1288                   FALSE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     ?V0 + 0,#TransmitApp_ClusterList & 0xff
        MOV     ?V0 + 1,#(TransmitApp_ClusterList >> 8) & 0xff
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0xf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     DPTR,#TransmitApp_epDesc
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
// 1289     HalLedBlink (HAL_LED_1, 1, 50, 300);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x2c
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
// 1290 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock68
// 1291 
// 1292 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1293 void ReportData(ModBusFrame_t *pRxFrame)
ReportData:
          CFI Block cfiBlock69 Using cfiCommon0
          CFI Function ReportData
        CODE
// 1294 {
        FUNCALL ReportData, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReportData, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReportData, FramePackage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReportData, SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReportData, FramePackage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReportData, SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1295  /* 
// 1296   #if defined ( GTA_WWSB_R1 ) //ÓêµÎ´«¸ÐÆ÷   
// 1297   uint8 Frame[10];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
// 1298   uint8 data[3];//GTA_WWSB_R1 Êý¾ÝÎª3
// 1299   #endif
// 1300   #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷   
// 1301   uint8 Frame[10];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
// 1302   uint8 data[5];//GTA_WWSB_R1 Êý¾ÝÎª3
// 1303   #endif
// 1304 */
// 1305 
// 1306   #if defined (GTA_WHFRFID_R1)
// 1307   RC623Frame_t pframe;
// 1308   uint16 cmd;
// 1309   #endif
// 1310 
// 1311   uint8 Frame[20];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
// 1312   uint8 data[10];//
// 1313   uint16 i=0,j=0;
// 1314   uint8 led=0;
// 1315 
// 1316   
// 1317   uint16 temp;
// 1318   uint16 FrameLen;
// 1319   switch(pRxFrame->CMD)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#-0x11
        JZ      ??ReportData_0
        DEC     A
        JZ      $+5
        LJMP    ??ReportData_1 & 0xFFFF
// 1320       {
// 1321       case FUN_CODE_READ_HOLDING_REGISTERS://¶Á¼Ä´æÆ÷Êý¾Ý
// 1322         {
// 1323           //temp=BUILD_UINT16(pRxFrame->pData[1],pRxFrame->pData[0]);
// 1324           //if(temp==NativeAddr)//1 2×Ö½ÚÊÇµØÖ·£¬ÊÇ·ñ±¾»úµØÖ·
// 1325           if(pRxFrame->ADDR==NativeAddr)//ÊÇ·ñ±¾»úµØÖ·
// 1326           {
// 1327               #if defined ( GTA_WWSB_R1 )||(GTA_WFSB_R1) //´«¸ÐÆ÷   
// 1328               temp=ReadADC(4);//¶ÁÓêµÎµçÑ¹Öµ,»ðÑæ´«¸ÐÆ÷
// 1329               data[0]=1;
// 1330               if(temp>3000)
// 1331                 data[1]=0x01;
// 1332               else
// 1333                 data[1]=0x00;
// 1334               //data[1]=LO_UINT16(temp);
// 1335               //data[2]=HI_UINT16(temp);
// 1336               FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
// 1337               SendDataRequest(Frame,FrameLen);//·¢ËÍ
// 1338               #endif
// 1339               
// 1340               #if defined ( GTA_WUSB_R1 )
// 1341               IO_DIR_PORT_PIN(0, 6, IO_IN);
// 1342               data[0]=1;
// 1343               if(IO_SENSOR)
// 1344                 data[1]=0x01;
// 1345               else
// 1346                 data[1]=0x00;
// 1347               FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
// 1348               SendDataRequest(Frame,FrameLen);//·¢ËÍ
// 1349               #endif
// 1350 
// 1351               #if defined(GTA_WRCB_R1)
// 1352               IO_DIR_PORT_PIN(0, 6, IO_OUT);
// 1353               IO_DIR_PORT_PIN(0, 0, IO_OUT);
// 1354               if(pRxFrame->pData[0]==0x01)
// 1355                 {
// 1356                   if(pRxFrame->pData[1]==0x00)
// 1357                     IO_RELAY1=0;
// 1358                   if(pRxFrame->pData[1]==0x01)
// 1359                     IO_RELAY1=1;
// 1360                 }
// 1361               if(pRxFrame->pData[0]==0x02)
// 1362                 {
// 1363                   if(pRxFrame->pData[1]==0x00)
// 1364                     IO_RELAY2=0;
// 1365                   if(pRxFrame->pData[1]==0x01)
// 1366                     IO_RELAY2=1;
// 1367                 }
// 1368               #endif
// 1369               
// 1370               
// 1371               #if defined (GTA_WVSB_R1)||(GTA_WIRSB_R1)
// 1372               temp=ReadADC(4);//ºìÍâ´«¸ÐÆ÷
// 1373               data[0]=1;
// 1374               if(temp>3000)
// 1375                 data[1]=0x00;
// 1376               else
// 1377                 data[1]=0x01;
// 1378               FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
// 1379               SendDataRequest(Frame,FrameLen);//·¢ËÍ
// 1380               #endif
// 1381               
// 1382               #if defined (GTA_WISB_R1)
// 1383               temp=ReadADC(4);//
// 1384               data[0]=2;
// 1385               data[1]=LO_UINT16(temp);
// 1386               data[2]=HI_UINT16(temp);
// 1387               FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,data,3);//´ò°ü
// 1388               SendDataRequest(Frame,FrameLen);//·¢ËÍ
// 1389               #endif
// 1390               
// 1391               
// 1392               #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷  
// 1393               osal_int_disable( INTS_ALL );
// 1394               readTempHumi();
// 1395               osal_int_enable( INTS_ALL );
// 1396               data[0]=4;
// 1397               data[1]=humi_val[0];//L
// 1398               data[2]=humi_val[1];//H
// 1399               data[3]=temp_val[0];
// 1400               data[4]=temp_val[1];
// 1401               FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,data,5);//´ò°ü
// 1402               SendDataRequest(Frame,FrameLen);//·¢ËÍ
// 1403               #endif
// 1404               
// 1405               #if defined (GTA_WHFRFID_R1)
// 1406               cmd=BUILD_UINT16(pRxFrame->pData[0],pRxFrame->pData[1]);
// 1407                 switch(cmd)
// 1408                 {
// 1409                 case MODBUS_RFID_CMD_FIND_ISO14443_CARD://7E xx 03 01 0A 00 00 xx
// 1410                   FrameLen=PackUpRC623Data(RFID_CMD_FIND_ISO14443_CARD,&(pRxFrame->pData[2]),Frame);//´ò°ü
// 1411                    HalUARTWrite(HAL_UART_PORT_0,Frame,FrameLen);
// 1412                   //SendDataRequest(Frame,FrameLen);
// 1413                   break;
// 1414                 case MODBUS_RFID_CMD_GET_CARD_ID:
// 1415                   FrameLen=PackUpRC623Data(RFID_CMD_GET_CARD_ID,&(pRxFrame->pData[2]),Frame);//´ò°ü
// 1416                    HalUARTWrite(HAL_UART_PORT_0,Frame,FrameLen);
// 1417                   break;
// 1418                 case MODBUS_RFID_CMD_READ_VAL:
// 1419                   
// 1420                   break;
// 1421                 default:
// 1422                   break;
// 1423                 }
// 1424               
// 1425               #endif
// 1426                 
// 1427               #if defined(GTA_WMSCB_R1)
// 1428                /*
// 1429               ctrl_GTA_WMSCB('M',0x80);
// 1430               for(j=0;j<1000;j++)
// 1431               {
// 1432                
// 1433                ctrl_GTA_WMSCB('A',led);
// 1434                ctrl_GTA_WMSCB('B',led++);
// 1435               StepMotorRun(1,4096);
// 1436               StepMotorRun(0,4096);
// 1437               }
// 1438                 */
// 1439                 /*init_GTA_WMSCB();
// 1440                 ctrl_GTA_WMSCB('M',0x80);
// 1441                 if(pRxFrame->pData[0]==0x00)
// 1442                 {
// 1443                   //ctrl_GTA_WMSCB('M',0x80);
// 1444                   osal_int_disable( INTS_ALL );
// 1445                   StepMotorRun(pRxFrame->pData[1],BUILD_UINT16(pRxFrame->pData[2],pRxFrame->pData[3]));
// 1446                   osal_int_enable( INTS_ALL );
// 1447                 }
// 1448                 if(pRxFrame->pData[0]==0x01)
// 1449                 {
// 1450                   //ctrl_GTA_WMSCB('M',0x80);
// 1451                   ctrl_GTA_WMSCB('A',pRxFrame->pData[1]);
// 1452                 }
// 1453                 if(pRxFrame->pData[0]==0x02)
// 1454                 {
// 1455 
// 1456                   SegDisplay(pRxFrame->pData[1]);
// 1457                 }*/
// 1458                 
// 1459               #endif
// 1460               
// 1461           }
// 1462         }
// 1463         break;
// 1464       case FUN_CODE_SET_ADDR://ÉèµØÖ·
// 1465         {
// 1466           if(pRxFrame->ADDR==NativeAddr)//ÊÇ·ñ±¾»úµØÖ·
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#NativeAddr
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      $+5
        LJMP    ??ReportData_1 & 0xFFFF
// 1467           {
// 1468           NativeAddr=pRxFrame->pData[0];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#NativeAddr
        MOVX    @DPTR,A
// 1469           osal_nv_item_init(ZCD_NV_NATIVE_ADDRESS,sizeof(NativeAddr),NULL);
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1470           osal_nv_write(ZCD_NV_NATIVE_ADDRESS,0,sizeof(NativeAddr),&NativeAddr);
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#NativeAddr & 0xff
        MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1471           FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,pRxFrame->pData,1);//´ò°ü
// 1472           SendDataRequest(Frame,FrameLen);//·¢ËÍ
        ; Setup parameters for call to function SendDataRequest
        ; Setup parameters for call to function FramePackage
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R6
        ADD     A,#0x3
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        SJMP    ??ReportData_2
          CFI CFA_XSP16 add(XSP16, 30)
// 1473           }
// 1474         }
// 1475         break;
// 1476       case FUN_CODE_READ_ADDR://¶ÁµØÖ·
// 1477         {
// 1478           FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,&NativeAddr,1);//´ò°ü
// 1479           SendDataRequest(Frame,FrameLen);//·¢ËÍ
??ReportData_0:
        ; Setup parameters for call to function SendDataRequest
        ; Setup parameters for call to function FramePackage
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 0,#NativeAddr & 0xff
        MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x11
??ReportData_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??FramePackage?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SendDataRequest?relay
// 1480           
// 1481         }
// 1482         break;
// 1483       }
// 1484   
// 1485   
// 1486 
// 1487 }
??ReportData_1:
        MOV     A,#0x14
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock69
// 1488 #if defined(GTA_WMSCB_R1)
// 1489 void StepMotorRun(uint8 Dir,uint16 StepNum)
// 1490 {
// 1491   uint8 ForwardStep[4]={0x03,0x09,0x0C,0x06};
// 1492   uint8 BackStep[4]={0x03,0x06,0x0C,0x09};
// 1493   uint16 i=0,j=0,k=0;
// 1494   uint8 index=0,l=0;
// 1495   for(i=0;i<StepNum;i++)
// 1496   {
// 1497     if(Dir)
// 1498       ctrl_GTA_WMSCB('C',ForwardStep[index]);
// 1499     else
// 1500       ctrl_GTA_WMSCB('C',BackStep[index]);
// 1501     if(i==(k*255-1)||i==0)
// 1502     {
// 1503       SegDisplay(l);
// 1504       if(l++>8)l=0;
// 1505       k++;
// 1506     }
// 1507     ctrl_GTA_WMSCB('A',i);
// 1508     
// 1509     if(++index>=4)index=0;
// 1510     
// 1511     for(j=0;j<3000;j++)
// 1512     {
// 1513       asm("nop");            
// 1514     }
// 1515     //ctrl_GTA_WMSCB('A',StepNum);
// 1516   }
// 1517 }
// 1518 
// 1519 void SegDisplay(uint8 num)
// 1520 {
// 1521   uint8 DispNum[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
// 1522   //ctrl_GTA_WMSCB('M',0x80);
// 1523   if(num<0x10)
// 1524     ctrl_GTA_WMSCB('B',DispNum[num]);
// 1525 }
// 1526 #endif

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1527 uint16 FramePackage(uint8 *pFrame,uint8 addr,uint8 cmd,uint8 *data,uint16 datalen)
FramePackage:
          CFI Block cfiBlock70 Using cfiCommon0
          CFI Function FramePackage
        CODE
// 1528 {
        FUNCALL FramePackage, Crc16Code
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
// 1529   uint16 i;
// 1530   uint16 crc;
// 1531   uint8 *p;
// 1532     p=pFrame;
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1533   *p++=FRAME_HEAD;//²»Ã÷bug ÔÙ¼ÓÒ»¸ö×Ö½Ú
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x7e
        MOVX    @DPTR,A
        INC     DPTR
// 1534   *p++=FRAME_HEAD;
        MOVX    @DPTR,A
        INC     DPTR
// 1535   *p++=addr;
        MOV     A,R1
        MOVX    @DPTR,A
        INC     DPTR
// 1536   *p++=cmd;
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1537   for(i=0;i<datalen;i++)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        SJMP    ??FramePackage_0
// 1538   {
// 1539     *p++=*data++;
??FramePackage_1:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1540   }
        MOV     A,R4
        ADD     A,#0x1
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
??FramePackage_0:
        CLR     C
        MOV     A,R4
        SUBB    A,?V0 + 0
        MOV     A,R5
        SUBB    A,?V0 + 1
        JC      ??FramePackage_1
// 1541   //crc=Crc16Code(pFrame+1,datalen+2);//FRAME_HEAD²»¼Æ
// 1542    crc=Crc16Code(pFrame+2,datalen+2);//FRAME_HEAD²»¼Æ
        ; Setup parameters for call to function Crc16Code
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??Crc16Code?relay
// 1543   *p++=LO_UINT16(crc);
        MOV     A,R2
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        INC     DPTR
// 1544   *p=HI_UINT16(crc);
        MOV     A,R3
        MOVX    @DPTR,A
// 1545   //return datalen+5;
// 1546   return datalen+6;//¶à¼ÓÒ»¸öFRAME_HEAD
        MOV     A,?V0 + 0
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock70
// 1547 }
// 1548 
// 1549   /*********************************************************************
// 1550  * º¯ÊýÃû³Æ£ºReadADC
// 1551  * ¹¦    ÄÜ£º¶ÁÈ¡ADCÖµ
// 1552  * Èë¿Ú²ÎÊý£ºÍ¨µÀ
// 1553  * ³ö¿Ú²ÎÊý£ºÎÞ
// 1554  * ·µ »Ø Öµ£ºADÊý¾Ý()
// 1555  ********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1556 uint16 ReadADC( uint8 channel )
ReadADC:
          CFI Block cfiBlock71 Using cfiCommon0
          CFI Function ReadADC
        CODE
// 1557 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
// 1558   volatile unsigned char tmp,n;
// 1559   signed short adcvalue;
// 1560   float voltagevalue_X;
// 1561 
// 1562   /* XÖá¼ÓËÙ¶È²É¼¯ */
// 1563   /* ÉèÖÃ»ù×¼µçÑ¹¡¢³éÈ¡ÂÊºÍµ¥¶ËÊäÈëÍ¨µÀ */
// 1564   ADCCON3 = ((0x02 << 6) |  // ²ÉÓÃAVDD5Òý½ÅÉÏµÄµçÑ¹Îª»ù×¼µçÑ¹
// 1565              (0x03 << 4) |  // ³éÈ¡ÂÊÎª512£¬ÏàÓ¦µÄÓÐÐ§Î»Îª12Î»(×î¸ßÎ»Îª·ûºÅÎ»)
// 1566              channel);
        MOV     A,#-0x50
        ORL     A,R4
        MOV     0xb6,A
// 1567 
// 1568   /* µÈ´ýÍ¨µÀ×ª»»Íê³É */
// 1569   while ((ADCCON1 & 0x80) != 0x80);
??ReadADC_0:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JNC     ??ReadADC_0
// 1570 
// 1571   /* ´ÓADCL£¬ADCH¶ÁÈ¡×ª»»Öµ£¬´Ë²Ù×÷»¹ÇåÁãADCCON1.EOC */
// 1572   adcvalue = (signed short)ADCL;
        MOV     A,0xba
        MOV     ?V0 + 0,A
// 1573   adcvalue |= (signed short)(ADCH << 8); 
        MOV     A,0xbb
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     ?V0 + 1,A
// 1574 
// 1575   /* ÈôadcvalueÐ¡ÓÚ0£¬¾ÍÈÏÎªËüÎª0 */
// 1576   if(adcvalue < 0) adcvalue = 0;
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??ReadADC_1
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R0
// 1577     
// 1578   adcvalue >>= 4;  // È¡³ö12Î»ÓÐÐ§Î»
// 1579     
// 1580   /* ½«×ª»»Öµ»»ËãÎªÊµ¼ÊµçÑ¹Öµ */
// 1581   voltagevalue_X = (adcvalue * 3.3) / 2047;  // 2047ÊÇÄ£ÄâÊäÈë´ïµ½VREFÊ±µÄÂúÁ¿³ÌÖµ
// 1582                                              // ÓÉÓÚÓÐÐ§Î»ÊÇ12Î»(×î¸ßÎ»Îª·ûºÅÎ»)£¬
// 1583                                              // ËùÒÔÕýµÄÂúÁ¿³ÌÖµÎª2047
// 1584                                              // ´Ë´¦£¬VREF = 3.3V
// 1585   return ((uint16)(voltagevalue_X * 1000));  // µçÑ¹·Å´ó100±¶±ãÓÚ´«Êä¼°ÉÏÎ»»ú´¦Àí
??ReadADC_1:
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     A,?V0 + 1
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_40533333
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_44ffe000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock71
        REQUIRE ADCCON3
        REQUIRE ADCCON1
        REQUIRE ADCL
        REQUIRE ADCH
// 1586 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1587 void SendDataRequest(uint8 *pBuf,uint16 len)
SendDataRequest:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function SendDataRequest
        CODE
// 1588 {
        FUNCALL SendDataRequest, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendDataRequest, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1589     if(!ZG_DEVICE_COORDINATOR_TYPE)//·ÇÐ­µ÷Æ÷
// 1590       {
// 1591         TestDirectSent_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;//µØÖ·´«ËÍ
// 1592         TestDirectSent_DstAddr.endPoint = 0;
// 1593         TestDirectSent_DstAddr.addr.shortAddr = 0x0000;
// 1594       }
// 1595       else
// 1596       {
// 1597         if(ZG_DEVICE_COORDINATOR_TYPE)
// 1598         {
// 1599           TestDirectSent_DstAddr.addrMode=(afAddrMode_t)AddrBroadcast;//Addr16Bit;//µØÖ·´«ËÍ
        LCALL   ?Subroutine5 & 0xFFFF
// 1600           TestDirectSent_DstAddr.endPoint = 0;
// 1601           TestDirectSent_DstAddr.addr.shortAddr = 0xffff;//destAddr;
// 1602           //TestDirectSent_DstAddr.addr.extAddr
// 1603         }
// 1604       }
// 1605      AF_DataRequest(    
// 1606               &TestDirectSent_DstAddr,               //µØÖ·
// 1607               &TransmitApp_epDesc,                //ÃèÊö
// 1608               TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
// 1609                 len,                                  //len
// 1610                 pBuf,//TransmitApp_Msg,             //DATA
// 1611               &TransmitApp_TransID,               //
// 1612               TRANSMITAPP_TX_OPTIONS,
// 1613               AF_DEFAULT_RADIUS 
// 1614               );
??CrossCallReturnLabel_1:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
        MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#-0x5f
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#TransmitApp_epDesc & 0xff
        MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
        MOV     R2,#TestDirectSent_DstAddr & 0xff
        MOV     R3,#(TestDirectSent_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1615      HalLedBlink (HAL_LED_3, 1, 50, 200);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x38
        MOV     R5,#0x0
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock72
// 1616 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond73 Using cfiCommon0
          CFI Function uartRxCB
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 140)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function SendDataRequest
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+0
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        MOV     DPTR,#TestDirectSent_DstAddr + 8
        MOV     A,#0xf
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     DPTR,#TestDirectSent_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        RET
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for NativeAddr>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_ProcessEvent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_ProcessZDOMsgs?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_HandleKeys?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_MessageMSGCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_ProcessZDOIncomingMsgs?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_ProcessZDOIncomingMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_SendTheMessage?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_SendTheMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_ChangeState?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_ChangeState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_SetSendEvt?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_SetSendEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TransmitApp_DisplayResults?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TransmitApp_DisplayResults

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initUart?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    initUart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??uartRxCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uartRxCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??FrameUnPackage?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    FrameUnPackage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Crc16Code?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Crc16Code

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SentDataInBind?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SentDataInBind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendBindRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SendBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReportData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ReportData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??FramePackage?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    FramePackage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReadADC?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ReadADC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendDataRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SendDataRequest

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GTA Zigbee">`:
        DB "GTA Zigbee"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40533333:
        DD 40533333H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_44ffe000:
        DD 44FFE000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_447a0000:
        DD 447A0000H

        END
// 1617 
// 1618 #if defined(GTA_WTHSB_R1)
// 1619 uint8 readTempHumi(void)
// 1620 {
// 1621  float f_humi=0,f_temp=0; 
// 1622  
// 1623   uint8 checksum;
// 1624  
// 1625   /* ¿ØÖÆSHT11½øÐÐÎÂÊª¶È²âÁ¿ */
// 1626   
// 1627   
// 1628   s_measure(temp_val,&checksum,TEMP); // ²âÁ¿ÎÂ¶È
// 1629   s_measure(humi_val,&checksum,HUMI); // ²âÁ¿Ïà¶ÔÊª¶È
// 1630   f_humi=BUILD_UINT16(humi_val[0],humi_val[1]);
// 1631   f_temp=BUILD_UINT16(temp_val[0],temp_val[1]);
// 1632   calc_sth11(&f_humi,&f_temp);
// 1633   humi_val[0]=f_humi;//&(uint8)f_humi;
// 1634   humi_val[1]=(f_humi-humi_val[0])*100;  
// 1635   temp_val[0]=f_temp; 
// 1636   temp_val[1]=(f_temp-temp_val[0])*100;  
// 1637   return TRUE;
// 1638 }
// 1639 #endif
// 1640 
// 1641 #if defined(GTA_WMSCB_R1)
// 1642 void init_GTA_WMSCB(void)
// 1643 {
// 1644   P0SEL=P0SEL&0x8C;//10001100
// 1645   P1SEL=P1SEL&0xF0;
// 1646   P2SEL=P2SEL&0xFA;
// 1647   //HAL_CONFIG_IO_OUTPUT(0, HAL_LCD_CS_PIN, 1);
// 1648   IO_DIR_PORT_PIN(0, 0, IO_OUT);
// 1649   IO_DIR_PORT_PIN(0, 1, IO_OUT);
// 1650   IO_DIR_PORT_PIN(0, 4, IO_OUT);
// 1651   IO_DIR_PORT_PIN(0, 5, IO_OUT);
// 1652   IO_DIR_PORT_PIN(0, 6, IO_OUT);
// 1653   IO_DIR_PORT_PIN(1, 0, IO_OUT);
// 1654   IO_DIR_PORT_PIN(1, 1, IO_OUT);
// 1655   IO_DIR_PORT_PIN(1, 2, IO_OUT);
// 1656   IO_DIR_PORT_PIN(1, 3, IO_OUT);
// 1657   IO_DIR_PORT_PIN(2, 0, IO_OUT);
// 1658   IO_DIR_PORT_PIN(2, 2, IO_OUT);
// 1659 }
// 1660 
// 1661 void ctrl_GTA_WMSCB(uint8 port,uint8 data)
// 1662 {
// 1663   //uint8 i=0;
// 1664   //init_GTA_WMSCB();
// 1665   asm("nop"); 
// 1666   asm("nop"); 
// 1667 
// 1668   T82C55A_WR=1;
// 1669   asm("nop"); 
// 1670   asm("nop"); 
// 1671 
// 1672   switch(port)
// 1673   {
// 1674   case        'A':
// 1675     T82C55A_ADDR0=0;
// 1676     T82C55A_ADDR1=0;
// 1677     break;
// 1678   case        'B':
// 1679     T82C55A_ADDR0=1;
// 1680     T82C55A_ADDR1=0;
// 1681     break;  
// 1682   case        'C':
// 1683     T82C55A_ADDR0=0;
// 1684     T82C55A_ADDR1=1;
// 1685     break;
// 1686   case        'M':
// 1687     T82C55A_ADDR0=1;
// 1688     T82C55A_ADDR1=1;
// 1689     break;
// 1690   default:break;
// 1691   }
// 1692   asm("nop"); 
// 1693   asm("nop"); 
// 1694 
// 1695   T82C55A_WR=0;
// 1696   asm("nop"); 
// 1697   asm("nop"); 
// 1698 
// 1699   if(data&0x01)
// 1700     T82C55A_D0=1;
// 1701   else
// 1702     T82C55A_D0=0;
// 1703   
// 1704   if(data&0x02)
// 1705     T82C55A_D1=1;
// 1706   else
// 1707     T82C55A_D1=0;
// 1708   
// 1709   if(data&0x04)
// 1710     T82C55A_D2=1;
// 1711   else
// 1712     T82C55A_D2=0;
// 1713   
// 1714   if(data&0x08)
// 1715     T82C55A_D3=1;
// 1716   else
// 1717     T82C55A_D3=0;
// 1718   
// 1719   if(data&0x10)
// 1720     T82C55A_D4=1;
// 1721   else
// 1722     T82C55A_D4=0;
// 1723   
// 1724   if(data&0x20)
// 1725     T82C55A_D5=1;
// 1726   else
// 1727     T82C55A_D5=0;
// 1728   
// 1729   if(data&0x40)
// 1730     T82C55A_D6=1;
// 1731   else
// 1732     T82C55A_D6=0;
// 1733   
// 1734   if(data&0x80)
// 1735     T82C55A_D7=1;
// 1736   else
// 1737     T82C55A_D7=0;
// 1738   asm("nop"); 
// 1739   asm("nop"); 
// 1740 
// 1741   T82C55A_WR=1;
// 1742   asm("nop"); 
// 1743   asm("nop"); 
// 1744 
// 1745   T82C55A_WR=0;
// 1746   
// 1747 }
// 1748 
// 1749 #endif
// 
// 2 947 bytes in segment BANKED_CODE
//   120 bytes in segment BANK_RELAYS
//     4 bytes in segment SFR_AN
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//    37 bytes in segment XDATA_ROM_C
//   179 bytes in segment XDATA_Z
// 
// 3 068 bytes of CODE  memory
//    25 bytes of CONST memory (+ 12 bytes shared)
//     0 bytes of DATA  memory (+  4 bytes shared)
//   180 bytes of XDATA memory
//
//Errors: none
//Warnings: 18
