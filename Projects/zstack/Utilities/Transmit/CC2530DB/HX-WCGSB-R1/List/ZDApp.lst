###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             15/Aug/2016  21:11:14 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Co #
#                          mponents\stack\zdo\ZDApp.c                         #
#    Command line       =  -f D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£© #
#                          \Projects\zstack\Utilities\Transmit\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO         #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00001000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1178                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=3             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=2    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\work\ZSTACK-GTAMODBUS-Ö÷ #
#                          ¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Components\stack\zdo\ZDApp.c  #
#                          -D NWK_AUTO_POLL -D MT_TASK -D ZTOOL_P1 -D         #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                      #
#                          ZDNWKMGR_MIN_TRANSMISSIONS=0 -D GTA_DEBUG -D       #
#                          ZIGBEEPRO -D HX_WCGSB_R1 -lC                       #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\HX-WCGSB #
#                          -R1\List\ -lA D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140 #
#                          707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC2 #
#                          530DB\HX-WCGSB-R1\List\ --diag_suppress            #
#                          Pe001,Pa010 -o D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«14 #
#                          0707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC #
#                          2530DB\HX-WCGSB-R1\Obj\ -e --no_code_motion        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£© #
#                          \Projects\zstack\Utilities\Transmit\CC2530DB\ -I   #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\Sourc #
#                          e\ -I D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³Î #
#                          Ä£©\Projects\zstack\Utilities\Transmit\CC2530DB\.. #
#                          \..\..\ZMain\TI2530DB\ -I                          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\hal\include\ -I                  #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\hal\target\CC2530EB\ -I          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\include\ -I                  #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf04\ -I          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf04\single_chip\ #
#                           -I D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£ #
#                          ©\Projects\zstack\Utilities\Transmit\CC2530DB\..\. #
#                          .\..\..\..\Components\mt\ -I                       #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\osal\include\ -I                 #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\services\saddr\ -I               #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\services\sdata\ -I               #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\af\ -I                     #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\nwk\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sapi\ -I                   #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sec\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sys\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\zdo\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\zmac\ -I                         #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\zmac\f8w\ -Ohz                   #
#                          --require_prototypes                               #
#    List file          =  D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\HX-WCGSB #
#                          -R1\List\ZDApp.lst                                 #
#    Object file        =  D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\HX-WCGSB #
#                          -R1\Obj\ZDApp.r51                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2012-02-16 16:04:32 -0800 (Thu, 16 Feb 2012) $
      4            Revision:       $Revision: 29348 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMac.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          #if !defined( LEAVE_RESET_DELAY )
     87            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     88          #endif
     89          
     90          // Init ZDO, but hold and wait for application to start the joining or
     91          // forming network
     92          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     93          
     94          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     95            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     96          #endif
     97          
     98          #if !defined( BEACON_REQUEST_DELAY )
     99            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    100          #endif
    101          
    102          #if !defined( BEACON_REQ_DELAY_MASK )
    103            #define BEACON_REQ_DELAY_MASK       0x007F
    104          #endif
    105          
    106          #define MAX_RESUME_RETRY            3
    107          
    108          #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
    109          
    110          // Beacon Order Settings (see NLMEDE.h)
    111          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    112          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    113          
    114          #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
    115            // The number of times the frame counter can change before
    116            // saving to NV
    117            #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
    118          #endif
    119          
    120          // Leave control bits
    121          #define ZDAPP_LEAVE_CTRL_INIT 0
    122          #define ZDAPP_LEAVE_CTRL_SET  1
    123          #define ZDAPP_LEAVE_CTRL_RA   2
    124          
    125          // Address Manager Stub Implementation
    126          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    127          
    128          
    129          #if !defined ZDO_NV_SAVE_RFDs
    130          #define ZDO_NV_SAVE_RFDs  TRUE
    131          #endif
    132          
    133          // Delay time before updating NWK NV data to force fewer writes during high activity.
    134          #if ZDO_NV_SAVE_RFDs
    135          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    136          #else
    137          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    138          #endif
    139          
    140          /*********************************************************************
    141           * GLOBAL VARIABLES
    142           */
    143             
    144             #include "TransmitApp.h"//microdjg
    145          extern byte TransmitApp_TaskID;//microdjg
    146          
    147          
    148          #if defined( LCD_SUPPORTED )
    149            uint8 MatchRsps = 0;
    150          #endif
    151             
    152             
    153          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    154          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    155          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    157          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    163          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          uint16 nwkFrameCounterChanges = 0;
   \                     nwkFrameCounterChanges:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    165          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    166          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    168          
    169          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    171          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 14
   \   00000E                REQUIRE __INIT_XDATA_Z
    173          
    174          /*********************************************************************
    175           * EXTERNAL VARIABLES
    176           */
    177          
    178          /*********************************************************************
    179           * EXTERNAL FUNCTIONS
    180           */
    181          
    182          /*********************************************************************
    183           * LOCAL FUNCTIONS
    184           */
    185          
    186          void ZDApp_NetworkStartEvt( void );
    187          void ZDApp_DeviceAuthEvt( void );
    188          void ZDApp_SaveNetworkStateEvt( void );
    189          
    190          uint8 ZDApp_ReadNetworkRestoreState( void );
    191          uint8 ZDApp_RestoreNetworkState( void );
    192          void ZDAppDetermineDeviceType( void );
    193          void ZDApp_InitUserDesc( void );
    194          void ZDAppCheckForHoldKey( void );
    195          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    196          void ZDApp_ProcessNetworkJoin( void );
    197          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    198          uint8 ZDApp_RestoreNwkKey( void );
    199          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    200          
    201          void ZDApp_SecInit( uint8 state );
    202          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    203          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    204          
    205          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    206          
    207          void ZDApp_ResetTimerStart( uint16 delay );
    208          void ZDApp_ResetTimerCancel( void );
    209          void ZDApp_LeaveCtrlInit( void );
    210          void ZDApp_LeaveCtrlSet( uint8 ra );
    211          uint8 ZDApp_LeaveCtrlBypass( void );
    212          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    213          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    214                                  uint8 removeChildren );
    215          void ZDApp_NodeProfileSync( uint8 stackProfile );
    216          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    217          void ZDApp_RegisterCBs( void );
    218          void ZDApp_InitZdoCBFunc(void);
    219          
    220          /*********************************************************************
    221           * LOCAL VARIABLES
    222           */
    223          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    224          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    225          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    226          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    227          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    228          
    229          #if defined( HOLD_AUTO_START )
    230            devStates_t devState = DEV_HOLD;
    231          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    232            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    233          #endif
    234          
    235          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    236            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    237            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    238                                  // to parent. Set to make the device do an Orphan scan.
    239          #else
    240            // Set the default to coodinator
    241            devStartModes_t devStartMode = MODE_HARD;
    242          #endif
    243          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    244          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    245          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    246          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    247          {
    248            ZDO_EP,
    249            &ZDAppTaskID,
    250            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    251            (afNetworkLatencyReq_t)0            // No Network Latency req
    252          };
    253          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    254          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    255          
    256          /*********************************************************************
    257           * @fn      ZDApp_Init
    258           *
    259           * @brief   ZDApp Initialization function.
    260           *
    261           * @param   task_id - ZDApp Task ID
    262           *
    263           * @return  None
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    266          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    267            // Save the task ID
    268            ZDAppTaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDAppTaskID
   \   000009   F0           MOVX    @DPTR,A
    269          
    270            // Initialize the ZDO global device short address storage
    271            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    272            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV     A,#-0x2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   04           INC     A
   \   000018   F0           MOVX    @DPTR,A
    273            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   ??NLME_GetExtAddr?relay
    274          
    275            // Check for manual "Hold Auto Start"
    276            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL   ??ZDAppCheckForHoldKey?relay
    277          
    278            // Initialize ZDO items and setup the device - type of device to create.
    279            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL   ??ZDO_Init?relay
    280          
    281            // Register the endpoint description with the AF
    282            // This task doesn't have a Simple description, but we still need
    283            // to register the endpoint.
    284            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000024   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000026   12....       LCALL   ??afRegister?relay
    285          
    286          #if defined( ZDO_USERDESC_RESPONSE )
    287            ZDApp_InitUserDesc();
   \   000029                ; Setup parameters for call to function ZDApp_InitUserDesc
   \   000029   12....       LCALL   ??ZDApp_InitUserDesc?relay
    288          #endif // ZDO_USERDESC_RESPONSE
    289          
    290            // Start the device?
    291            if ( devState != DEV_HOLD )
   \   00002C   90....       MOV     DPTR,#devState
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6009         JZ      ??ZDApp_Init_0
    292            {
    293              ZDOInitDevice( 0 );
   \   000032                ; Setup parameters for call to function ZDOInitDevice
   \   000032   7A00         MOV     R2,#0x0
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??ZDOInitDevice?relay
   \   000039   8014         SJMP    ??ZDApp_Init_1
    294            }
    295            else
    296            {
    297              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   00003B                ; Setup parameters for call to function ZDOInitDevice
   \   00003B   7AFF         MOV     R2,#-0x1
   \   00003D   7BFF         MOV     R3,#-0x1
   \   00003F   12....       LCALL   ??ZDOInitDevice?relay
    298              // Blink LED to indicate HOLD_START
    299              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \   000042                ; Setup parameters for call to function HalLedBlink
   \   000042   7CF4         MOV     R4,#-0xc
   \   000044   7D01         MOV     R5,#0x1
   \   000046   7B32         MOV     R3,#0x32
   \   000048   7A00         MOV     R2,#0x0
   \   00004A   7908         MOV     R1,#0x8
   \   00004C   12....       LCALL   ??HalLedBlink?relay
    300            }
    301          
    302            // Initialize the ZDO callback function pointers zdoCBFunc[]
    303            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_1:
   \   00004F                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00004F   12....       LCALL   ??ZDApp_InitZdoCBFunc?relay
    304          
    305            ZDApp_RegisterCBs();
   \   000052                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000052   12....       LCALL   ??ZDApp_RegisterCBs?relay
    306          } /* ZDApp_Init() */
   \   000055   02....       LJMP    ??Subroutine38_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    307          
    308          /*********************************************************************
    309           * @fn          ZDApp_SecInit
    310           *
    311           * @brief       ZDApp initialize security.
    312           *
    313           * @param       state - device initialization state
    314           *
    315           * @return      none
    316           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    317          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    318          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    319            uint8 zgPreConfigKey[SEC_KEY_LEN];
    320          
    321            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    322            {
    323              // Set the Trust Center bit
    324              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    325            }
    326          
    327            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
    328            {
    329              ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
    330            }
    331          
    332            // Initialize ZigBee Device Security Manager
    333            ZDSecMgrInit(state);
   \   000005                ; Setup parameters for call to function ZDSecMgrInit
   \   000005   12....       LCALL   ??ZDSecMgrInit?relay
    334          
    335            if ( ZG_SECURE_ENABLED )
    336            {
    337              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
    338              {
    339                nwkFrameCounter = 0;
    340          
    341                if( _NIB.nwkKeyLoaded == FALSE )
    342                {
    343                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    344                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    345                  {
    346                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
    347                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
    348                      SSP_SwitchNwkKey( 0 );
    349          
    350                      // clear local copy of key
    351                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    352                  }
    353                }
    354              }
    355            }
    356          }
   \   000008   02....       LJMP    ??Subroutine38_0 & 0xFFFF
    357          
    358          /*********************************************************************
    359           * @fn      ZDApp_event_loop()
    360           *
    361           * @brief   Main event loop for Zigbee device objects task. This function
    362           *          should be called at periodic intervals.
    363           *
    364           * @param   task_id - Task ID
    365           * @param   events  - Bitmap of events
    366           *
    367           * @return  none
    368           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    370          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    371            uint8 *msg_ptr;
    372          
    373            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7032         JNZ     ??ZDApp_event_loop_0
    374            {
    375              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    376              {
    377                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    378          
    379                // Release the memory
    380                osal_msg_deallocate( msg_ptr );
    381              }
    382          
    383              // Return unprocessed events
    384              return (events ^ SYS_EVENT_MSG);
    385            }
    386          
    387            if ( events & ZDO_NETWORK_INIT )
   \   00000D   EE           MOV     A,R6
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   5045         JNC     ??ZDApp_event_loop_1
    388            {
    389              // Initialize apps and start the network
    390              devState = DEV_INIT;
   \   000012   90....       MOV     DPTR,#devState
   \   000015   7401         MOV     A,#0x1
   \   000017   12....       LCALL   ??Subroutine32_0 & 0xFFFF
    391              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_34:
   \   00001A   12....       LCALL   ??osal_set_event?relay
    392          
    393              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    394                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   00001D                ; Setup parameters for call to function ZDO_StartDevice
   \   00001D   7C0F         MOV     R4,#0xf
   \   00001F   7B0F         MOV     R3,#0xf
   \   000021   90....       MOV     DPTR,#devStartMode
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FA           MOV     R2,A
   \   000026   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   5407         ANL     A,#0x7
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??ZDO_StartDevice?relay
    395          
    396              // Return unprocessed events
    397              return (events ^ ZDO_NETWORK_INIT);
   \   000030   EE           MOV     A,R6
   \   000031   6401         XRL     A,#0x1
   \   000033   8049         SJMP    ??ZDApp_event_loop_2
    398            }
   \                     ??ZDApp_event_loop_3:
   \   000035                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000035   12....       LCALL   ??ZDApp_ProcessOSALMsg?relay
   \   000038                ; Setup parameters for call to function osal_msg_deallocate
   \   000038   AA..         MOV     R2,?V0 + 0
   \   00003A   AB..         MOV     R3,?V0 + 1
   \   00003C   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??ZDApp_event_loop_0:
   \   00003F                ; Setup parameters for call to function osal_msg_receive
   \   00003F   90....       MOV     DPTR,#ZDAppTaskID
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   12....       LCALL   ??osal_msg_receive?relay
   \   000047   8A..         MOV     ?V0 + 0,R2
   \   000049   8B..         MOV     ?V0 + 1,R3
   \   00004B   EA           MOV     A,R2
   \   00004C   45..         ORL     A,?V0 + 1
   \   00004E   70E5         JNZ     ??ZDApp_event_loop_3
   \   000050   EE           MOV     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   EF           MOV     A,R7
   \   000053   6480         XRL     A,#0x80
   \   000055   803E         SJMP    ??ZDApp_event_loop_4
    399          
    400            if ( ZSTACK_ROUTER_BUILD )
    401            {
    402              if ( events & ZDO_NETWORK_START )
    403              {
    404                ZDApp_NetworkStartEvt();
    405          
    406                // Return unprocessed events
    407                return (events ^ ZDO_NETWORK_START);
    408              }
    409          
    410              if ( events & ZDO_ROUTER_START )
    411              {
    412                if ( nwkStatus == ZSuccess )
    413                {
    414                  if ( devState == DEV_END_DEVICE )
    415                    devState = DEV_ROUTER;
    416          
    417                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
    418                }
    419                else
    420                {
    421                  // remain as end device!!
    422                }
    423                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    424          
    425                // Return unprocessed events
    426                return (events ^ ZDO_ROUTER_START);
    427              }
    428            }
    429          
    430            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_1:
   \   000057   5410         ANL     A,#0x10
   \   000059   6027         JZ      ??ZDApp_event_loop_5
    431            {
    432              ZDO_UpdateNwkStatus( devState );
   \   00005B                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   00005B   90....       MOV     DPTR,#devState
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   12....       LCALL   ??ZDO_UpdateNwkStatus?relay
    433          
    434              // At start up, do one MTO route discovery if the device is a concentrator
    435              if ( zgConcentratorEnable == TRUE )
   \   000063   90....       MOV     DPTR,#zgConcentratorEnable
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6401         XRL     A,#0x1
   \   000069   7010         JNZ     ??ZDApp_event_loop_6
    436              {
    437                // Start next event
    438                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   00006B                ; Setup parameters for call to function osal_start_timerEx
   \   00006B   7C64         MOV     R4,#0x64
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   7A00         MOV     R2,#0x0
   \   000071   7B08         MOV     R3,#0x8
   \   000073   90....       MOV     DPTR,#NWK_TaskID
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078   12....       LCALL   ??osal_start_timerEx?relay
    439              }
    440          
    441              // Return unprocessed events
    442              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_6:
   \   00007B   EE           MOV     A,R6
   \   00007C   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   00007E   FA           MOV     R2,A
   \   00007F   EF           MOV     A,R7
   \   000080   8013         SJMP    ??ZDApp_event_loop_4
    443            }
    444          
    445            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_5:
   \   000082   EE           MOV     A,R6
   \   000083   5408         ANL     A,#0x8
   \   000085   6006         JZ      ??ZDApp_event_loop_7
    446            {
    447              // User defined logic
    448          
    449              // Return unprocessed events
    450              return (events ^ ZDO_COMMAND_CNF);
   \   000087   EE           MOV     A,R6
   \   000088   6408         XRL     A,#0x8
   \   00008A   FA           MOV     R2,A
   \   00008B   801E         SJMP    ??ZDApp_event_loop_8
    451            }
    452          
    453            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_7:
   \   00008D   EF           MOV     A,R7
   \   00008E   5402         ANL     A,#0x2
   \   000090   6006         JZ      ??ZDApp_event_loop_9
    454            {
    455              ZDApp_SaveNetworkStateEvt();
    456          
    457              // Return unprocessed events
    458              return (events ^ ZDO_NWK_UPDATE_NV);
   \   000092   EF           MOV     A,R7
   \   000093   6402         XRL     A,#0x2
   \                     ??ZDApp_event_loop_4:
   \   000095   FB           MOV     R3,A
   \   000096   8013         SJMP    ??ZDApp_event_loop_8
    459            }
    460          
    461            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_9:
   \   000098   EE           MOV     A,R6
   \   000099   5404         ANL     A,#0x4
   \   00009B   600A         JZ      ??ZDApp_event_loop_10
    462            {
    463          #ifdef ZBA_FALLBACK_NWKKEY
    464              if ( devState == DEV_END_DEVICE_UNAUTH )
    465              {
    466                ZDSecMgrFallbackNwkKey();
    467              }
    468              else
    469          #endif
    470              {
    471                // Set the NV startup option to force a "new" join.
    472                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00009D                ; Setup parameters for call to function zgWriteStartupOptions
   \   00009D   7A02         MOV     R2,#0x2
   \   00009F   79FF         MOV     R1,#-0x1
   \   0000A1   12....       LCALL   ??zgWriteStartupOptions?relay
    473          
    474                // The device has been in the UNAUTH state, so reset
    475                // Note: there will be no return from this call
    476                SystemResetSoft();
   \   0000A4                ; Setup parameters for call to function Onboard_soft_reset
   \   0000A4   12....       LCALL   Onboard_soft_reset & 0xFFFF
    477              }
    478            }
    479          
    480            if ( ZG_SECURE_ENABLED )
    481            {
    482              return ( ZDApp_ProcessSecEvent( task_id, events ) );
    483            }
    484            else
    485            {
    486              // Discard or make more handlers
    487              return 0;
   \                     ??ZDApp_event_loop_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
    488            }
   \                     ??ZDApp_event_loop_8:
   \   0000AB   80..         SJMP    ??Subroutine31_0
    489          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001   7A10         MOV     R2,#0x10
   \   000003   7B00         MOV     R3,#0x0
   \   000005   90....       MOV     DPTR,#ZDAppTaskID
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET
    490          
    491          /*********************************************************************
    492           * @fn      ZDApp_ProcessSecEvent()
    493           *
    494           * @brief   Process incoming security events.
    495           *
    496           * @param   task_id - Task ID
    497           * @param   events  - Bitmap of events
    498           *
    499           * @return  none
    500           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    501          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    502          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    503            (void)task_id;  // Intentionally unreferenced parameter
    504          
    505            if ( ZSTACK_ROUTER_BUILD )
    506            {
    507              if ( events & ZDO_NEW_DEVICE )
    508              {
    509                // process the new device event
    510                if ( ZDSecMgrNewDeviceEvent() == TRUE )
    511                {
    512                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
    513                }
    514          
    515                // Return unprocessed events
    516                return (events ^ ZDO_NEW_DEVICE);
    517              }
    518            }
    519          
    520            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
    521                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
    522            {
    523              if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    524              {
    525                if ( events & ZDO_SECMGR_EVENT )
    526                {
    527                  ZDSecMgrEvent();
    528          
    529                  // Return unprocessed events
    530                  return (events ^ ZDO_SECMGR_EVENT);
    531                }
    532              }
    533            }
    534          
    535            if ( events & ZDO_DEVICE_AUTH )
   \   000009   EE           MOV     A,R6
   \   00000A   5480         ANL     A,#0x80
   \   00000C   600A         JZ      ??ZDApp_ProcessSecEvent_0
    536            {
    537              ZDApp_DeviceAuthEvt();
   \   00000E                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   00000E   12....       LCALL   ??ZDApp_DeviceAuthEvt?relay
    538          
    539              // Return unprocessed events
    540              return (events ^ ZDO_DEVICE_AUTH);
   \   000011   EE           MOV     A,R6
   \   000012   6480         XRL     A,#0x80
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   8043         SJMP    ??ZDApp_ProcessSecEvent_1
    541            }
    542          
    543            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000018   EF           MOV     A,R7
   \   000019   5404         ANL     A,#0x4
   \   00001B   6027         JZ      ??ZDApp_ProcessSecEvent_2
    544            {
    545              if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
   \   00001D   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000020   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000023   E8           MOV     A,R0
   \   000024   2401         ADD     A,#0x1
   \   000026   FA           MOV     R2,A
   \   000027   E9           MOV     A,R1
   \   000028   3400         ADDC    A,#0x0
   \   00002A   FB           MOV     R3,A
   \   00002B   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00002E   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000031   C3           CLR     C
   \   000032   E8           MOV     A,R0
   \   000033   94E9         SUBB    A,#-0x17
   \   000035   E9           MOV     A,R1
   \   000036   9403         SUBB    A,#0x3
   \   000038   4003         JC      ??ZDApp_ProcessSecEvent_3
    546              {
    547                ZDApp_SaveNwkKey();
   \   00003A                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00003A   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    548              }
    549          
    550              // Return unprocessed events
    551              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDApp_ProcessSecEvent_3:
   \   00003D   EE           MOV     A,R6
   \   00003E   FA           MOV     R2,A
   \   00003F   EF           MOV     A,R7
   \   000040   6404         XRL     A,#0x4
   \   000042   8017         SJMP    ??ZDApp_ProcessSecEvent_1
    552            }
    553          
    554            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000044   EF           MOV     A,R7
   \   000045   5410         ANL     A,#0x10
   \   000047   6005         JZ      ??ZDApp_ProcessSecEvent_4
    555            {
    556          #if defined (NV_RESTORE)
    557              ZDSecMgrSaveApsLinkKey();
    558          #endif // (NV_RESTORE)
    559          
    560              // Return unprocessed events
    561              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   000049   EF           MOV     A,R7
   \   00004A   6410         XRL     A,#0x10
   \   00004C   800D         SJMP    ??ZDApp_ProcessSecEvent_1
    562            }
    563          
    564            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_4:
   \   00004E   EF           MOV     A,R7
   \   00004F   5408         ANL     A,#0x8
   \   000051   600B         JZ      ??ZDApp_ProcessSecEvent_5
    565            {
    566              ZDSecMgrSaveTCLinkKey();
   \   000053                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   000053   12....       LCALL   ??ZDSecMgrSaveTCLinkKey?relay
    567          
    568              // Return unprocessed events
    569              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   EF           MOV     A,R7
   \   000059   6408         XRL     A,#0x8
   \                     ??ZDApp_ProcessSecEvent_1:
   \   00005B   FB           MOV     R3,A
   \   00005C   8004         SJMP    ??ZDApp_ProcessSecEvent_6
    570            }
    571          
    572            // Discard or make more handlers
    573            return 0;
   \                     ??ZDApp_ProcessSecEvent_5:
   \   00005E   7A00         MOV     R2,#0x0
   \   000060   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_6:
   \   000062   02....       LJMP    ??Subroutine38_0 & 0xFFFF
    574          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    575          
    576          /*********************************************************************
    577           * Application Functions
    578           */
    579          
    580          /*********************************************************************
    581           * @fn      ZDOInitDevice
    582           *
    583           * @brief   Start the device in the network.  This function will read
    584           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    585           *   restore the network state of the device.
    586           *
    587           * @param   startDelay - timeDelay to start device (in milliseconds).
    588           *                       There is a jitter added to this delay:
    589           *                       ((NWK_START_DELAY + startDelay)
    590           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    591           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    592           *                       this function will hold the network init. Application
    593           *                       can start the device.
    594           *
    595           * NOTE:    If the application would like to force a "new" join, the
    596           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    597           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    598           *          this function. "new" join means to not restore the network
    599           *          state of the device. Use zgWriteStartupOptions() to set these
    600           *          options.
    601           *
    602           * @return
    603           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    604           *          restored.
    605           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    606           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    607           *          it could mean that there was no network state to restore.
    608           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    609           *          with the rejoin option set to TRUE.  So, the device was not
    610           *          started in the network (one time only).  The next time this
    611           *          function is called it will start.
    612           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    613          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    614          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine13 & 0xFFFF
    615            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    616            uint16 extendedDelay = 0;
    617          
    618            if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_90:
   \   00000D   90....       MOV     DPTR,#devState
   \   000010   E0           MOVX    A,@DPTR
   \   000011   7005         JNZ     ??ZDOInitDevice_0
    619            {
    620              // Initialize the RAM items table, in case an NV item has been updated.
    621              zgInitItems( FALSE );
   \   000013                ; Setup parameters for call to function zgInitItems
   \   000013   7900         MOV     R1,#0x0
   \   000015   12....       LCALL   ??zgInitItems?relay
    622            }
    623          
    624            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000018                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000018   12....       LCALL   ??ZDConfig_InitDescriptors?relay
    625            //devtag.071807.todo - fix this temporary solution
    626            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00001B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   90....       MOV     DPTR,#_NIB + 14
   \   000022   F0           MOVX    @DPTR,A
    627          
    628          #if defined ( NV_RESTORE )
    629            // Get Keypad directly to see if a reset nv is needed.
    630            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    631            // while booting to skip past NV Restore.
    632            if ( HalKeyRead() == SW_BYPASS_NV )
    633              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    634            else
    635            {
    636              // Determine if NV should be restored
    637              networkStateNV = ZDApp_ReadNetworkRestoreState();
    638            }
    639          
    640            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    641            {
    642              networkStateNV = ZDApp_RestoreNetworkState();
    643            }
    644            else
    645            {
    646              // Wipe out the network state in NV
    647              NLME_InitNV();
    648              NLME_SetDefaultNV();
    649              // clear NWK key values
    650              ZDSecMgrClearNVKeyValues();
    651            }
    652          #endif
    653          
    654            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
    655            {
    656              ZDAppDetermineDeviceType();
   \   000023                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000023   12....       LCALL   ??ZDAppDetermineDeviceType?relay
    657          
    658              // Only delay if joining network - not restoring network state
    659              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    660                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000026                ; Setup parameters for call to function osal_rand
   \   000026   12....       LCALL   ??osal_rand?relay
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   EA           MOV     A,R2
   \   000030   547F         ANL     A,#0x7f
   \   000032   F8           MOV     R0,A
   \   000033   E0           MOVX    A,@DPTR
   \   000034   28           ADD     A,R0
   \   000035   F8           MOV     R0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   3400         ADDC    A,#0x0
   \   00003A   F9           MOV     R1,A
   \   00003B   E8           MOV     A,R0
   \   00003C   2464         ADD     A,#0x64
   \   00003E   FE           MOV     R6,A
   \   00003F   E9           MOV     A,R1
   \   000040   3400         ADDC    A,#0x0
   \   000042   FF           MOV     R7,A
    661            }
    662          
    663            // Initialize the security for type of device
    664            ZDApp_SecInit( networkStateNV );
   \   000043                ; Setup parameters for call to function ZDSecMgrInit
   \   000043   7901         MOV     R1,#0x1
   \   000045   12....       LCALL   ??ZDSecMgrInit?relay
    665          
    666            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F4           CPL     A
   \   000050   7003         JNZ     ??ZDOInitDevice_1
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F4           CPL     A
   \                     ??ZDOInitDevice_1:
   \   000055   603E         JZ      ??ZDOInitDevice_2
    667            {
    668              devState = DEV_INIT;    // Remove the Hold state
   \   000057   90....       MOV     DPTR,#devState
   \   00005A   7401         MOV     A,#0x1
   \   00005C   F0           MOVX    @DPTR,A
    669          
    670              // Initialize leave control logic
    671              ZDApp_LeaveCtrlInit();
   \   00005D                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00005D   12....       LCALL   ??ZDApp_LeaveCtrlInit?relay
    672          
    673              // Check leave control reset settings
    674              ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   000060                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   AC82         MOV     R4,DPL
   \   000068   AD83         MOV     R5,DPH
   \   00006A   7A..         MOV     R2,#devState & 0xff
   \   00006C   7B..         MOV     R3,#(devState >> 8) & 0xff
   \   00006E   12....       LCALL   ??ZDApp_LeaveCtrlStartup?relay
    675          
    676              // Leave may make the hold state come back
    677              if ( devState == DEV_HOLD )
   \   000071   90....       MOV     DPTR,#devState
   \   000074   E0           MOVX    A,@DPTR
   \   000075   7017         JNZ     ??ZDOInitDevice_3
    678              {
    679                // Set the NV startup option to force a "new" join.
    680                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000077                ; Setup parameters for call to function zgWriteStartupOptions
   \   000077   7A02         MOV     R2,#0x2
   \   000079   79FF         MOV     R1,#-0x1
   \   00007B   12....       LCALL   ??zgWriteStartupOptions?relay
    681          
    682                // Notify the applications
    683                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00007E                ; Setup parameters for call to function osal_set_event
   \   00007E   7A10         MOV     R2,#0x10
   \   000080   7B00         MOV     R3,#0x0
   \   000082   90....       MOV     DPTR,#ZDAppTaskID
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   12....       LCALL   ??osal_set_event?relay
    684          
    685                return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \   00008A   7902         MOV     R1,#0x2
   \   00008C   8011         SJMP    ??ZDOInitDevice_4
    686              }
    687          
    688              // Trigger the network start
    689              ZDApp_NetworkInit( extendedDelay );
   \                     ??ZDOInitDevice_3:
   \   00008E                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00008E   EE           MOV     A,R6
   \   00008F   FA           MOV     R2,A
   \   000090   EF           MOV     A,R7
   \   000091   FB           MOV     R3,A
   \   000092   12....       LCALL   ??ZDApp_NetworkInit?relay
    690            }
    691          
    692            // set broadcast address mask to support broadcast filtering
    693            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_2:
   \   000095                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000095   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F9           MOV     R1,A
   \   00009A   12....       LCALL   ??NLME_SetBroadcastFilter?relay
    694          
    695            return ( networkStateNV );
   \   00009D   7901         MOV     R1,#0x1
   \                     ??ZDOInitDevice_4:
   \   00009F                REQUIRE ?Subroutine7
   \   00009F                ; // Fall through to label ?Subroutine7
    696          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7402         MOV     A,#0x2
   \   000002   02....       LJMP    ??Subroutine36_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine37_0
   \   000003                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine48_0
   \   000006                ; // Fall through to label ??Subroutine48_0
    697          
    698          /*********************************************************************
    699           * @fn      ZDApp_ReadNetworkRestoreState
    700           *
    701           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    702           *          or not to restore the network state.
    703           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    704           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    705           *
    706           * @param   none
    707           *
    708           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    709           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    710           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    711           *          ZCD_NV_STARTUP_OPTION
    712           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    713          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    714          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    715            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    716          
    717            // Look for the New Network State option.
    718            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay
   \   00000A   E9           MOV     A,R1
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   5001         JNC     ??ZDApp_ReadNetworkRestoreState_0
    719            {
    720              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   00000F   0E           INC     R6
    721            }
    722          
    723            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000010   EE           MOV     A,R6
   \   000011   F9           MOV     R1,A
   \   000012   02....       LJMP    ??Subroutine38_0 & 0xFFFF
    724          }
    725          
    726          /*********************************************************************
    727           * @fn      ZDAppDetermineDeviceType()
    728           *
    729           * @brief   Determines the type of device to start.
    730           *
    731           *          Looks at zgDeviceLogicalType and determines what type of
    732           *          device to start.  The types are:
    733           *            ZG_DEVICETYPE_COORDINATOR
    734           *            ZG_DEVICETYPE_ROUTER
    735           *            ZG_DEVICETYPE_ENDDEVICE
    736           *
    737           * @param   none
    738           *
    739           * @return  none
    740           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    741          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    742          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    743            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    744            {
    745              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    746              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   802E         SJMP    ??ZDAppDetermineDeviceType_1
    747            }
    748            else
    749            {
    750              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700A         JNZ     ??ZDAppDetermineDeviceType_2
    751                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   4401         ORL     A,#0x1
   \   000024   800D         SJMP    ??ZDAppDetermineDeviceType_3
    752              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6402         XRL     A,#0x2
   \   000029   7009         JNZ     ??ZDAppDetermineDeviceType_4
    753                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   54F8         ANL     A,#0xf8
   \   000031   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000033   F0           MOVX    @DPTR,A
    754          
    755              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    756              // The device shall do rejoin the network. Otherwise, do normal join
    757              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000034                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000034   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000036   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   000038   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   00003B   E9           MOV     A,R1
   \   00003C   90....       MOV     DPTR,#devStartMode
   \   00003F   7003         JNZ     ??ZDAppDetermineDeviceType_5
    758              {
    759                devStartMode = MODE_JOIN;     // Assume joining
   \   000041   E4           CLR     A
   \   000042   8002         SJMP    ??ZDAppDetermineDeviceType_1
    760              }
    761              else
    762              {
    763                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000044   7403         MOV     A,#0x3
   \                     ??ZDAppDetermineDeviceType_1:
   \   000046   F0           MOVX    @DPTR,A
    764              }
    765            }
    766          }
   \   000047   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    767          
    768          /*********************************************************************
    769           * @fn      ZDApp_NetworkStartEvt()
    770           *
    771           * @brief   Process the Network Start Event
    772           *
    773           * @param   none
    774           *
    775           * @return  none
    776           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    777          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    778          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    779            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??ZDApp_NetworkStartEvt_0
    780            {
    781              // Successfully started a ZigBee network
    782              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7003         JNZ     ??ZDApp_NetworkStartEvt_1
    783              {
    784                devState = DEV_ZB_COORD;
   \   000012   7409         MOV     A,#0x9
   \   000014   F0           MOVX    @DPTR,A
    785              }
    786          
    787              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   ??osal_pwrmgr_device?relay
    788              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802B         SJMP    ??ZDApp_NetworkStartEvt_2
    789            }
    790            else
    791            {
    792              // Try again with a higher energy threshold !!
    793              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   00001F   E9           MOV     A,R1
   \   000020   2410         ADD     A,#0x10
   \   000022   F8           MOV     R0,A
   \   000023   E4           CLR     A
   \   000024   3400         ADDC    A,#0x0
   \   000026   F9           MOV     R1,A
   \   000027   E8           MOV     A,R0
   \   000028   94FF         SUBB    A,#-0x1
   \   00002A   E9           MOV     A,R1
   \   00002B   9400         SUBB    A,#0x0
   \   00002D   C3           CLR     C
   \   00002E   65D0         XRL     A,PSW
   \   000030   33           RLC     A
   \   000031   500E         JNC     ??ZDApp_NetworkStartEvt_3
    794              {
    795                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000033                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000033                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000033   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   000036   E9           MOV     A,R1
   \   000037   2410         ADD     A,#0x10
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??NLME_SetEnergyThreshold?relay
    796                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00003D                ; Setup parameters for call to function osal_set_event
   \   00003D   7A01         MOV     R2,#0x1
   \   00003F   8008         SJMP    ??ZDApp_NetworkStartEvt_4
    797              }
    798              else
    799              {
    800                // Failed to start network. Enter a dormant state (until user intervenes)
    801                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000041   90....       MOV     DPTR,#devState
   \   000044   7401         MOV     A,#0x1
   \   000046   F0           MOVX    @DPTR,A
    802                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000047                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000047   7A10         MOV     R2,#0x10
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   90....       MOV     DPTR,#ZDAppTaskID
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   ??osal_set_event?relay
    803              }
    804            }
    805          }
   \   000053   02....       LJMP    ?Subroutine3 & 0xFFFF
    806          
    807          /*********************************************************************
    808           * @fn      ZDApp_DeviceAuthEvt()
    809           *
    810           * @brief   Process the Device Authentic Event
    811           *
    812           * @param   none
    813           *
    814           * @return  none
    815           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    816          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    817          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    818            // received authentication from trust center
    819            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   7020         JNZ     ??ZDApp_DeviceAuthEvt_0
    820            {
    821              // Stop the reset timer so it doesn't reset
    822              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerCancel?relay
    823          
    824              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL   ?Subroutine9 & 0xFFFF
    825              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_32:
   \   000012   12....       LCALL   ??osal_set_event?relay
    826          
    827              // Set the Power Manager Device
    828          #if defined ( POWER_SAVING )
    829              osal_pwrmgr_device( PWRMGR_BATTERY );
    830          #endif
    831          
    832              if ( ZSTACK_ROUTER_BUILD )
    833              {
    834                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
    835                {
    836                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    837                  NLME_StartRouterRequest( 0, 0, false );
    838                }
    839              }
    840          
    841              // Notify to save info into NV
    842              ZDApp_NVUpdate();
    843          
    844              // Save off the security
    845              ZDApp_SaveNwkKey();
   \   000015                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000015   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    846          
    847              ZDApp_AnnounceNewAddress();
   \   000018                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000018   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
    848          
    849              if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   \   00001B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   A2E3         MOV     C,0xE0 /* A   */.3
   \   000021   4009         JC      ??ZDApp_DeviceAuthEvt_0
    850              {
    851                NLME_SetPollRate( ZDApp_SavedPollRate );
   \   000023                ; Setup parameters for call to function NLME_SetPollRate
   \   000023   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000026   12....       LCALL   ??Subroutine35_0 & 0xFFFF
    852              }
    853            }
   \                     ??CrossCallReturnLabel_46:
   \   000029   12....       LCALL   ??NLME_SetPollRate?relay
    854            else
    855            {
    856              ZDApp_NVUpdate();
    857            }
    858          }
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   00002C   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#devState
   \   000003   7406         MOV     A,#0x6
   \   000005                REQUIRE ??Subroutine32_0
   \   000005                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    859          
    860          /*********************************************************************
    861           * @fn      ZDApp_SaveNetworkStateEvt()
    862           *
    863           * @brief   Process the Save the Network State Event
    864           *
    865           * @param   none
    866           *
    867           * @return  none
    868           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    869          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    870          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    871          #if defined ( NV_RESTORE )
    872           #if defined ( NV_TURN_OFF_RADIO )
    873            // Turn off the radio's receiver during an NV update
    874            uint8 RxOnIdle;
    875            uint8 x = false;
    876            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    877            ZMacSetReq( ZMacRxOnIdle, &x );
    878           #endif
    879          
    880            // Update the Network State in NV
    881            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    882                           NWK_NV_DEVICELIST_ENABLE |
    883                           NWK_NV_BINDING_ENABLE    |
    884                           NWK_NV_ADDRMGR_ENABLE );
    885          
    886            // Reset the NV startup option to resume from NV by
    887            // clearing the "New" join option.
    888            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    889          
    890           #if defined ( NV_TURN_OFF_RADIO )
    891            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    892           #endif
    893          #endif  // NV_RESTORE
    894          }
   \   000000   02....       LJMP    ?BRET
    895          
    896          /*********************************************************************
    897           * @fn      ZDApp_RestoreNetworkState()
    898           *
    899           * @brief   This function will restore the network state of the
    900           *          device if the network state is stored in NV.
    901           *
    902           * @param   none
    903           *
    904           * @return
    905           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    906           *          restored.
    907           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    908           *          This could mean that zgStartupOption said to not restore, or
    909           *          it could mean that there was no network state to restore.
    910           *
    911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    912          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    913          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    914            uint8 nvStat;
    915          
    916            // Initialize NWK NV items
    917            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   ??NLME_InitNV?relay
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    918          
    919            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   6030         JZ      ??ZDApp_RestoreNetworkState_0
    920            {
    921              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   ??NLME_RestoreFromNV?relay
   \   000012   E9           MOV     A,R1
   \   000013   602A         JZ      ??ZDApp_RestoreNetworkState_0
    922              {
    923                // Are we a coordinator
    924                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL   ??Subroutine48_0 & 0xFFFF
    925                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_86:
   \   00001E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000021   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000024   7007         JNZ     ??ZDApp_RestoreNetworkState_1
    926                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000026   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   54F8         ANL     A,#0xf8
   \   00002C   F0           MOVX    @DPTR,A
    927                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   00002D   90....       MOV     DPTR,#devStartMode
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?Subroutine14 & 0xFFFF
    928                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
    929              }
    930              else
    931                nvStat = NV_ITEM_UNINIT;
    932          
    933              if ( ZG_SECURE_ENABLED )
    934              {
    935                nwkFrameCounterChanges = 0;
    936          
    937                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    938                {
    939                  ZDApp_RestoreNwkKey();
    940                }
    941              }
    942          
    943              // The default for RxOnWhenIdle is true for Routers and false for end devices
    944              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
    945              // other than default.
    946            }
   \                     ??CrossCallReturnLabel_6:
   \   000035   12....       LCALL   ??sAddrExtCpy?relay
    947          
    948            if ( nvStat == ZSUCCESS )
   \   000038   EE           MOV     A,R6
   \   000039   7004         JNZ     ??ZDApp_RestoreNetworkState_0
    949              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   8002         SJMP    ??ZDApp_RestoreNetworkState_2
    950            else
    951              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   00003F   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_2:
   \   000041   02....       LJMP    ??Subroutine38_0 & 0xFFFF
    952          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET
    953          
    954          /*********************************************************************
    955           * @fn      ZDApp_InitUserDesc()
    956           *
    957           * @brief   Initialize the User Descriptor, the descriptor is read from NV
    958           *          when needed.  If you want to initialize the User descriptor to
    959           *          something other than all zero, do it here.
    960           *
    961           * @param   none
    962           *
    963           * @return  none
    964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    965          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
    966          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    967            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
    968          
    969            // Initialize the User Descriptor, the descriptor is read from NV
    970            // when needed.  If you want to initialize the User descriptor to something
    971            // other than all zero, do it here.
    972            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
   \   00001A   12....       LCALL   ??osal_memset?relay
    973            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
    974                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   00001D                ; Setup parameters for call to function osal_nv_item_init
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   8582..       MOV     ?V0 + 0,DPL
   \   000026   8583..       MOV     ?V0 + 1,DPH
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C11         MOV     R4,#0x11
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A81         MOV     R2,#-0x7f
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??osal_nv_item_init?relay
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003E   E9           MOV     A,R1
   \   00003F   7033         JNZ     ??ZDApp_InitUserDesc_0
    975            {
    976              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
    977                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000041                ; Setup parameters for call to function osal_nv_read
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..11       MOV     ?V0 + 0,#0x11
   \   000049   75..00       MOV     ?V0 + 1,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7C00         MOV     R4,#0x0
   \   000053   7D00         MOV     R5,#0x0
   \   000055   7A81         MOV     R2,#-0x7f
   \   000057   7B00         MOV     R3,#0x0
   \   000059   12....       LCALL   ??osal_nv_read?relay
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   E9           MOV     A,R1
   \   000062   7010         JNZ     ??ZDApp_InitUserDesc_0
    978              {
    979                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6007         JZ      ??ZDApp_InitUserDesc_0
    980                {
    981                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   00006D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000070   E0           MOVX    A,@DPTR
   \   000071   D2E4         SETB    0xE0 /* A   */.4
   \   000073   F0           MOVX    @DPTR,A
    982                }
    983              }
    984            }
    985          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000074   7411         MOV     A,#0x11
   \   000076   02....       LJMP    ??Subroutine36_0 & 0xFFFF
    986          
    987          /*********************************************************************
    988           * @fn      ZDAppCheckForHoldKey()
    989           *
    990           * @brief   Check for key to set the device into Hold Auto Start
    991           *
    992           * @param   none
    993           *
    994           * @return  none
    995           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    996          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
    997          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    998          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    999            // Get Keypad directly to see if a HOLD_START is needed.
   1000            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1001            // while booting to avoid starting up the device.
   1002            if ( HalKeyRead () == SW_BYPASS_START)
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay
   \   000007   E9           MOV     A,R1
   \   000008   6401         XRL     A,#0x1
   \   00000A   7005         JNZ     ??ZDAppCheckForHoldKey_0
   1003            {
   1004              // Change the device state to HOLD on start up
   1005              devState = DEV_HOLD;
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   1006            }
   1007          #endif // HAL_KEY
   1008          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000011   02....       LJMP    ?Subroutine3 & 0xFFFF
   1009          
   1010          /*********************************************************************
   1011           * @fn      ZDApp_ProcessOSALMsg()
   1012           *
   1013           * @brief   Process the incoming task message.
   1014           *
   1015           * @param   msgPtr - message to process
   1016           *
   1017           * @return  none
   1018           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1019          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1020          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1021            // Data Confirmation message fields
   1022            uint8 sentEP;       // This should always be 0
   1023            uint8 sentStatus;
   1024            afDataConfirm_t *afDataConfirm;
   1025            uint8 tmp;
   1026          
   1027            switch ( msgPtr->event )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   14           DEC     A
   \   000010   6023         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000012   14           DEC     A
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   00001E   24E9         ADD     A,#-0x17
   \   000020   6007         JZ      ??ZDApp_ProcessOSALMsg_3
   \   000022   2447         ADD     A,#0x47
   \   000024   6009         JZ      ??ZDApp_ProcessOSALMsg_4
   \   000026   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1028            {
   1029              // Incoming ZDO Message
   1030              case AF_INCOMING_MSG_CMD:
   1031                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000029                ; Setup parameters for call to function ZDP_IncomingData
   \   000029   12....       LCALL   ??ZDP_IncomingData?relay
   1032                break;
   \   00002C   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1033          
   1034              case ZDO_CB_MSG:
   1035                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   00002F                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   00002F   12....       LCALL   ??ZDApp_ProcessMsgCBs?relay
   1036                break;
   \   000032   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1037          
   1038              case AF_DATA_CONFIRM_CMD:
   1039                // This message is received as a confirmation of a data packet sent.
   1040                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1041                // The message fields are defined in AF.h
   1042                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1043                sentEP = afDataConfirm->endpoint;
   1044                sentStatus = afDataConfirm->hdr.status;
   1045          
   1046                // Action taken when confirmation is received.
   1047          #if defined ( ZIGBEE_FREQ_AGILITY )
   1048                if ( pZDNwkMgr_ProcessDataConfirm )
   1049                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   1050          #endif
   1051                (void)sentEP;
   1052                (void)sentStatus;
   1053                break;
   1054          
   1055              case ZDO_NWK_DISC_CNF:
   1056                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000035   90....       MOV     DPTR,#devState
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6402         XRL     A,#0x2
   \   00003B   6003         JZ      $+5
   \   00003D   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1057                  break;
   1058          
   1059                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000040   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6401         XRL     A,#0x1
   \   000046   6008         JZ      ??ZDApp_ProcessOSALMsg_6
   \   000048   E0           MOVX    A,@DPTR
   \   000049   6402         XRL     A,#0x2
   \   00004B   6003         JZ      $+5
   \   00004D   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1060                {
   1061                  // Process the network discovery scan results and choose a parent
   1062                  // device to join/rejoin itself
   1063                  networkDesc_t *pChosenNwk;
   1064                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   000050                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   000050   12....       LCALL   ??ZDApp_NwkDescListProcessing?relay
   \   000053   8A..         MOV     ?V0 + 0,R2
   \   000055   8B..         MOV     ?V0 + 1,R3
   \   000057   AE..         MOV     R6,?V0 + 0
   \   000059   AF..         MOV     R7,?V0 + 1
   \   00005B   EE           MOV     A,R6
   \   00005C   4F           ORL     A,R7
   \   00005D   7003         JNZ     $+5
   \   00005F   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   \   000062   90....       MOV     DPTR,#zdoDiscCounter
   \   000065   E0           MOVX    A,@DPTR
   \   000066   C3           CLR     C
   \   000067   9403         SUBB    A,#0x3
   \   000069   5003         JNC     $+5
   \   00006B   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1065                  {
   1066                    if ( devStartMode == MODE_JOIN )
   \   00006E   90....       MOV     DPTR,#devStartMode
   \   000071   E0           MOVX    A,@DPTR
   \   000072   7059         JNZ     ??ZDApp_ProcessOSALMsg_8
   1067                    {
   1068                      devState = DEV_NWK_JOINING;
   \   000074   90....       MOV     DPTR,#devState
   \   000077   7403         MOV     A,#0x3
   \   000079   12....       LCALL   ?Subroutine10 & 0xFFFF
   1069          
   1070                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \                     ??CrossCallReturnLabel_0:
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   ??ZDApp_NodeProfileSync?relay
   1071          
   1072                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1073                                            pChosenNwk->logicalChannel,
   1074                                            ZDO_Config_Node_Descriptor.CapabilityFlags,
   1075                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   000081                ; Setup parameters for call to function NLME_JoinRequest
   \   000081   8E82         MOV     DPL,R6
   \   000083   8F83         MOV     DPH,R7
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F5..         MOV     ?V0 + 0,A
   \   000092   78..         MOV     R0,#?V0 + 0
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000097   8E82         MOV     DPL,R6
   \   000099   8F83         MOV     DPH,R7
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000A5   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F5..         MOV     ?V0 + 0,A
   \   0000AB   78..         MOV     R0,#?V0 + 0
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B0   8E82         MOV     DPL,R6
   \   0000B2   8F83         MOV     DPH,R7
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F9           MOV     R1,A
   \   0000B8   8E82         MOV     DPL,R6
   \   0000BA   8F83         MOV     DPH,R7
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   FC           MOV     R4,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   12....       LCALL   ?Subroutine26 & 0xFFFF
   1076                      {
   1077                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1078                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1079                      }
   1080                    } // if ( devStartMode == MODE_JOIN )
   \                     ??CrossCallReturnLabel_36:
   \   0000C3   12....       LCALL   ??NLME_JoinRequest?relay
   \   0000C6   7404         MOV     A,#0x4
   \   0000C8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CB   806B         SJMP    ??ZDApp_ProcessOSALMsg_9
   1081                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   0000CD   6403         XRL     A,#0x3
   \   0000CF   7078         JNZ     ??ZDApp_ProcessOSALMsg_10
   1082                    {
   1083                      devState = DEV_NWK_REJOIN;
   \   0000D1   90....       MOV     DPTR,#devState
   \   0000D4   7404         MOV     A,#0x4
   \   0000D6   F0           MOVX    @DPTR,A
   1084          
   1085                      // Before trying to do rejoin, check if the device has a valid short address
   1086                      // If not, generate a random short address for itself
   1087                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   0000D7   90....       MOV     DPTR,#_NIB + 20
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   64FE         XRL     A,#0xfe
   \   0000DD   7003         JNZ     ??ZDApp_ProcessOSALMsg_11
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0000E2   7012         JNZ     ??ZDApp_ProcessOSALMsg_12
   1088                      {
   1089                        _NIB.nwkDevAddress = osal_rand();
   \   0000E4                ; Setup parameters for call to function osal_rand
   \   0000E4   12....       LCALL   ??osal_rand?relay
   \   0000E7   90....       MOV     DPTR,#_NIB + 20
   \   0000EA   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   1090                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \                     ??CrossCallReturnLabel_87:
   \   0000ED                ; Setup parameters for call to function ZMacSetReq
   \   0000ED   7A..         MOV     R2,#(_NIB + 20) & 0xff
   \   0000EF   7B..         MOV     R3,#((_NIB + 20) >> 8) & 0xff
   \   0000F1   7953         MOV     R1,#0x53
   \   0000F3   12....       LCALL   ??ZMacSetReq?relay
   1091                      }
   1092          
   1093                      if ( ZG_SECURE_ENABLED )
   1094                      {
   1095                        ZDApp_RestoreNwkKey();
   1096                      }
   1097          
   1098                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1099                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   0000F6   90....       MOV     DPTR,#_NIB + 33
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   64FE         XRL     A,#0xfe
   \   0000FC   7003         JNZ     ??ZDApp_ProcessOSALMsg_13
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   000101   7014         JNZ     ??ZDApp_ProcessOSALMsg_14
   1100                      {
   1101                        _NIB.nwkPanId = pChosenNwk->panId;
   \   000103   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000106   90....       MOV     DPTR,#_NIB + 33
   \   000109   E8           MOV     A,R0
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   A3           INC     DPTR
   \   00010C   E9           MOV     A,R1
   \   00010D   F0           MOVX    @DPTR,A
   1102                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \   00010E                ; Setup parameters for call to function ZMacSetReq
   \   00010E   7A..         MOV     R2,#(_NIB + 33) & 0xff
   \   000110   7B..         MOV     R3,#((_NIB + 33) >> 8) & 0xff
   \   000112   7950         MOV     R1,#0x50
   \   000114   12....       LCALL   ??ZMacSetReq?relay
   1103                      }
   1104          
   1105                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   000117   85..82       MOV     DPL,?XSP + 0
   \   00011A   85..83       MOV     DPH,?XSP + 1
   \   00011D   7401         MOV     A,#0x1
   \   00011F   F0           MOVX    @DPTR,A
   1106                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   000120                ; Setup parameters for call to function ZMacSetReq
   \   000120   AA82         MOV     R2,DPL
   \   000122   AB83         MOV     R3,DPH
   \   000124   7952         MOV     R1,#0x52
   \   000126   12....       LCALL   ??ZMacSetReq?relay
   1107                      if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel) != ZSuccess )
   \   000129                ; Setup parameters for call to function NLME_ReJoinRequest
   \   000129   8E82         MOV     DPL,R6
   \   00012B   8F83         MOV     DPH,R7
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F9           MOV     R1,A
   \   000131   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000133   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000135   12....       LCALL   ??NLME_ReJoinRequest?relay
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   000138   E9           MOV     A,R1
   \   000139   600E         JZ      ??ZDApp_ProcessOSALMsg_10
   1108                      {
   1109                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1110                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   00013B                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00013B                ; Setup parameters for call to function osal_rand
   \   00013B   12....       LCALL   ??osal_rand?relay
   \   00013E   EA           MOV     A,R2
   \   00013F   547F         ANL     A,#0x7f
   \   000141   2464         ADD     A,#0x64
   \   000143   FA           MOV     R2,A
   \   000144   7B00         MOV     R3,#0x0
   \   000146   12....       LCALL   ??ZDApp_NetworkInit?relay
   1111                      }
   1112                    } // else if ( devStartMode == MODE_REJOIN )
   1113          
   1114                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   000149   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   A2E3         MOV     C,0xE0 /* A   */.3
   \   00014F   506F         JNC     ??ZDApp_ProcessOSALMsg_5
   1115                    {
   1116                      // The receiver is on, turn network layer polling off.
   1117                      NLME_SetPollRate( 0 );
   \   000151                ; Setup parameters for call to function NLME_SetPollRate
   \   000151   7A00         MOV     R2,#0x0
   \   000153   7B00         MOV     R3,#0x0
   \   000155   12....       LCALL   ??NLME_SetPollRate?relay
   1118                      NLME_SetQueuedPollRate( 0 );
   \   000158                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000158   7A00         MOV     R2,#0x0
   \   00015A   7B00         MOV     R3,#0x0
   \   00015C   12....       LCALL   ??NLME_SetQueuedPollRate?relay
   1119                      NLME_SetResponseRate( 0 );
   \   00015F                ; Setup parameters for call to function NLME_SetResponseRate
   \   00015F   7A00         MOV     R2,#0x0
   \   000161   7B00         MOV     R3,#0x0
   \   000163   12....       LCALL   ??NLME_SetResponseRate?relay
   \   000166   8058         SJMP    ??ZDApp_ProcessOSALMsg_5
   1120                    }
   1121                    else
   1122                    {
   1123                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1124                      {
   1125                        ZDApp_SavedPollRate = zgPollRate;
   1126                        NLME_SetPollRate( zgRejoinPollRate );
   1127                      }
   1128                    }
   1129                  }
   1130                  else
   1131                  {
   1132                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   000168   90....       MOV     DPTR,#continueJoining
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   6052         JZ      ??ZDApp_ProcessOSALMsg_5
   1133                    {
   1134              #if defined ( MANAGED_SCAN )
   1135                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1136              #else
   1137                      zdoDiscCounter++;
   \   00016E   90....       MOV     DPTR,#zdoDiscCounter
   \   000171   E0           MOVX    A,@DPTR
   \   000172   04           INC     A
   \   000173   F0           MOVX    @DPTR,A
   1138                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1139                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   000174                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000174                ; Setup parameters for call to function osal_rand
   \   000174   12....       LCALL   ??osal_rand?relay
   \   000177   EA           MOV     A,R2
   \   000178   2464         ADD     A,#0x64
   \   00017A   FA           MOV     R2,A
   \   00017B   E4           CLR     A
   \   00017C   3400         ADDC    A,#0x0
   \   00017E   FB           MOV     R3,A
   \   00017F   803C         SJMP    ??ZDApp_ProcessOSALMsg_15
   1140              #endif
   1141                    }
   1142                  }
   1143                }
   1144                break;
   1145          
   1146              case ZDO_NWK_JOIN_IND:
   1147                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000181   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000184   E0           MOVX    A,@DPTR
   \   000185   6401         XRL     A,#0x1
   \   000187   6005         JZ      ??ZDApp_ProcessOSALMsg_16
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   6402         XRL     A,#0x2
   \   00018C   7032         JNZ     ??ZDApp_ProcessOSALMsg_5
   1148                {
   1149                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   00018E                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   00018E   12....       LCALL   ??ZDApp_ProcessNetworkJoin?relay
   \   000191   802D         SJMP    ??ZDApp_ProcessOSALMsg_5
   1150                }
   1151                break;
   1152          
   1153              case ZDO_NWK_JOIN_REQ:
   1154                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000193   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000196   E0           MOVX    A,@DPTR
   \   000197   6401         XRL     A,#0x1
   \   000199   6005         JZ      ??ZDApp_ProcessOSALMsg_17
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   6402         XRL     A,#0x2
   \   00019E   7020         JNZ     ??ZDApp_ProcessOSALMsg_5
   1155                {
   1156                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   0001A0   90....       MOV     DPTR,#retryCnt
   \   0001A3   E4           CLR     A
   \   0001A4   F0           MOVX    @DPTR,A
   1157                  devStartMode = MODE_RESUME;
   \   0001A5   90....       MOV     DPTR,#devStartMode
   \   0001A8   04           INC     A
   \   0001A9   F0           MOVX    @DPTR,A
   1158                  _tmpRejoinState = true;
   \   0001AA   90....       MOV     DPTR,#_tmpRejoinState
   \   0001AD   12....       LCALL   ?Subroutine14 & 0xFFFF
   1159                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \                     ??CrossCallReturnLabel_7:
   \   0001B0   12....       LCALL   ??sAddrExtCpy?relay
   1160                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \   0001B3   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   0001B6   7402         MOV     A,#0x2
   \   0001B8   F0           MOVX    @DPTR,A
   1161                  ZDApp_NetworkInit( 0 );
   \   0001B9                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001B9   7A00         MOV     R2,#0x0
   \   0001BB   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   0001BD   12....       LCALL   ??ZDApp_NetworkInit?relay
   1162                }
   1163                break;
   1164          
   1165              default:
   1166                if ( ZG_SECURE_ENABLED )
   1167                  ZDApp_ProcessSecMsg( msgPtr );
   1168                break;
   1169            }
   1170          
   1171          }
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   0001C0   7401         MOV     A,#0x1
   \   0001C2   02....       LJMP    ??Subroutine36_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   FD           MOV     R5,A
   \   000001                REQUIRE ??Subroutine33_0
   \   000001                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine34_0
   \   000004                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET
   1172          
   1173          /*********************************************************************
   1174           * @fn      ZDApp_ProcessMsgCBs()
   1175           *
   1176           * @brief   Process response messages
   1177           *
   1178           * @param   none
   1179           *
   1180           * @return  none
   1181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1182          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1183          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1184            switch ( inMsg->clusterID )
   \   00000E   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000018   0200         DW        2
   \   00001A   2100         DW        33
   \   00001C   2200         DW        34
   \   00001E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000020   0080         DW        32768
   \   000022   0180         DW        32769
   \   000024   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000026   0000         DW        0
   \   000028   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1185            {
   1186          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1187              case NWK_addr_rsp:
   1188              case IEEE_addr_rsp:
   1189                {
   1190                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1191                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00002A                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00002A   12....       LCALL   ??ZDO_ParseAddrRsp?relay
   \   00002D   8A..         MOV     ?V0 + 0,R2
   \   00002F   8B..         MOV     ?V0 + 1,R3
   \   000031   AE..         MOV     R6,?V0 + 0
   \   000033   AF..         MOV     R7,?V0 + 1
   1192                  if ( pAddrRsp )
   \   000035   EE           MOV     A,R6
   \   000036   4F           ORL     A,R7
   \   000037   603C         JZ      ??ZDApp_ProcessMsgCBs_2
   1193                  {
   1194                    if ( pAddrRsp->status == ZSuccess )
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   700E         JNZ     ??ZDApp_ProcessMsgCBs_3
   1195                    {
   1196                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000040                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000040   EE           MOV     A,R6
   \   000041   2403         ADD     A,#0x3
   \   000043   FC           MOV     R4,A
   \   000044   EF           MOV     A,R7
   \   000045   3400         ADDC    A,#0x0
   \   000047   FD           MOV     R5,A
   \   000048   12....       LCALL   ?Subroutine21 & 0xFFFF
   1197                    }
   \                     ??CrossCallReturnLabel_48:
   \   00004B   12....       LCALL   ??ZDO_UpdateAddrManager?relay
   1198                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   00004E                ; Setup parameters for call to function osal_mem_free
   \   00004E   EE           MOV     A,R6
   \   00004F   FA           MOV     R2,A
   \   000050   EF           MOV     A,R7
   \   000051   FB           MOV     R3,A
   \   000052   12....       LCALL   ??osal_mem_free?relay
   \   000055   801E         SJMP    ??ZDApp_ProcessMsgCBs_2
   1199                  }
   1200                }
   1201                break;
   1202          #endif
   1203          
   1204          #if defined ( REFLECTOR )
   1205              case Bind_req:
   1206              case Unbind_req:
   1207                {
   1208                  ZDO_BindUnbindReq_t bindReq;
   1209                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000057                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000057   85..82       MOV     DPL,?XSP + 0
   \   00005A   85..83       MOV     DPH,?XSP + 1
   \   00005D   AC82         MOV     R4,DPL
   \   00005F   AD83         MOV     R5,DPH
   \   000061   12....       LCALL   ??ZDO_ParseBindUnbindReq?relay
   1210                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000064                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   AC82         MOV     R4,DPL
   \   00006C   AD83         MOV     R5,DPH
   \   00006E   EE           MOV     A,R6
   \   00006F   FA           MOV     R2,A
   \   000070   EF           MOV     A,R7
   \   000071   FB           MOV     R3,A
   \   000072   12....       LCALL   ??ZDO_ProcessBindUnbindReq?relay
   1211                }
   1212                break;
   1213          #endif
   1214          
   1215          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1216              case Bind_rsp:
   1217              case Unbind_rsp:
   1218                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1219                {
   1220                  ZDMatchSendState(
   1221                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1222                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1223                }
   1224                break;
   1225          
   1226              case End_Device_Bind_req:
   1227                if (ZG_DEVICE_COORDINATOR_TYPE)
   1228                {
   1229                  ZDEndDeviceBind_t bindReq;
   1230                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1231                  ZDO_MatchEndDeviceBind( &bindReq );
   1232          
   1233                  // Freeing the cluster lists - if allocated.
   1234                  if ( bindReq.numInClusters )
   1235                    osal_mem_free( bindReq.inClusters );
   1236                  if ( bindReq.numOutClusters )
   1237                    osal_mem_free( bindReq.outClusters );
   1238                }
   1239                break;
   1240          #endif
   1241            }
   1242          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   000075                REQUIRE ?Subroutine8
   \   000075                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7415         MOV     A,#0x15
   \   000002   02....       LJMP    ??Subroutine36_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine35_0
   \   000001                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   EE           MOV     A,R6
   \   000001   240C         ADD     A,#0xc
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine47_0
   \   000003                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
   1243          
   1244          /*********************************************************************
   1245           * @fn      ZDApp_RegisterCBs()
   1246           *
   1247           * @brief   Process response messages
   1248           *
   1249           * @param   none
   1250           *
   1251           * @return  none
   1252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1253          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1254          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1255          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1256            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B80         MOV     R3,#-0x80
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   1257          #endif
   1258          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1259            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   7A00         MOV     R2,#0x0
   \   000012   7B80         MOV     R3,#-0x80
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   1260          #endif
   1261          #if ZG_BUILD_COORDINATOR_TYPE
   1262            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1263            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1264            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1265          #endif
   1266          #if defined ( REFLECTOR )
   1267            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   00001C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001C   7A21         MOV     R2,#0x21
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   90....       MOV     DPTR,#ZDAppTaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   1268            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000028   7A22         MOV     R2,#0x22
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   90....       MOV     DPTR,#ZDAppTaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   1269          #endif
   1270          }
   \   000034   02....       LJMP    ?Subroutine3 & 0xFFFF
   1271          
   1272          /*********************************************************************
   1273           * @fn      ZDApp_ProcessSecMsg()
   1274           *
   1275           * @brief   Process the incoming security message.
   1276           *
   1277           * @param   msgPtr - message to process
   1278           *
   1279           * @return  none
   1280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1281          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1282          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1283            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   24FA         ADD     A,#-0x6
   \   00000B   6006         JZ      ??ZDApp_ProcessSecMsg_0
   \   00000D   24FC         ADD     A,#-0x4
   \   00000F   6014         JZ      ??ZDApp_ProcessSecMsg_1
   \   000011   8022         SJMP    ??ZDApp_ProcessSecMsg_2
   1284            {
   1285              case ZDO_ESTABLISH_KEY_CFM:
   1286                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1287                {
   1288                  ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
   1289                }
   1290                break;
   1291          
   1292              case ZDO_ESTABLISH_KEY_IND:
   1293                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1294                {
   1295                  if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1296                  {
   1297                    ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
   1298                  }
   1299                }
   1300                break;
   1301          
   1302              case ZDO_TRANSPORT_KEY_IND:
   1303                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000013   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6401         XRL     A,#0x1
   \   000019   6005         JZ      ??ZDApp_ProcessSecMsg_3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6402         XRL     A,#0x2
   \   00001E   7015         JNZ     ??ZDApp_ProcessSecMsg_2
   1304                {
   1305                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000020                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000020   12....       LCALL   ??ZDSecMgrTransportKeyInd?relay
   \   000023   8010         SJMP    ??ZDApp_ProcessSecMsg_2
   1306                }
   1307                break;
   1308          
   1309              case ZDO_UPDATE_DEVICE_IND:
   1310                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1311                {
   1312                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1313                }
   1314                break;
   1315          
   1316              case ZDO_REMOVE_DEVICE_IND:
   1317                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1318                {
   1319                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1320                }
   1321                break;
   1322          
   1323              case ZDO_REQUEST_KEY_IND:
   1324                if (( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH ) ||
   1325                    ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ))
   1326                {
   1327                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1328                  {
   1329                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1330                  }
   1331                }
   1332                break;
   1333          
   1334              case ZDO_SWITCH_KEY_IND:
   1335                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000025   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6401         XRL     A,#0x1
   \   00002B   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6402         XRL     A,#0x2
   \   000030   7003         JNZ     ??ZDApp_ProcessSecMsg_2
   1336                {
   1337                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000032                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000032   12....       LCALL   ??ZDSecMgrSwitchKeyInd?relay
   1338                }
   1339                break;
   1340          
   1341              case ZDO_AUTHENTICATE_IND:
   1342                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1343                {
   1344                  ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
   1345                }
   1346                break;
   1347          
   1348              case ZDO_AUTHENTICATE_CFM:
   1349                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1350                {
   1351                  ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
   1352                }
   1353                break;
   1354          
   1355              default:
   1356                // Unsupported messages
   1357                break;
   1358            }
   1359          }
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000035   02....       LJMP    ?Subroutine3 & 0xFFFF
   1360          
   1361          /*********************************************************************
   1362           * @fn      ZDApp_ProcessNetworkJoin()
   1363           *
   1364           * @brief
   1365           *
   1366           *   Save off the Network key information.
   1367           *
   1368           * @param   none
   1369           *
   1370           * @return  none
   1371           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1372          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1373          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1374            if ( (devState == DEV_NWK_JOINING) ||
   1375                ((devState == DEV_NWK_ORPHAN)  &&
   1376                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1377            {
   1378              // Result of a Join attempt by this device.
   1379              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7020         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1380              {
   1381                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   7A10         MOV     R2,#0x10
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   ??osal_set_event?relay
   1382          
   1383          #if defined ( POWER_SAVING )
   1384                osal_pwrmgr_device( PWRMGR_BATTERY );
   1385          #endif
   1386          
   1387                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1388                {
   1389                  // wait for auth from trust center!!
   1390                  devState = DEV_END_DEVICE_UNAUTH;
   1391          
   1392                  // Start the reset timer for MAX UNAUTH time
   1393                  ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
   1394                }
   1395                else
   1396                {
   1397                  if ( ZSTACK_ROUTER_BUILD )
   1398                  {
   1399                    if ( devState == DEV_NWK_ORPHAN
   1400                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1401                    {
   1402                      // Change NIB state to router for restore
   1403                      _NIB.nwkState = NWK_ROUTER;
   1404                    }
   1405                  }
   1406          
   1407                  if ( devState == DEV_NWK_JOINING )
   \   000039   90....       MOV     DPTR,#devState
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   6403         XRL     A,#0x3
   \   00003F   7003         JNZ     ??ZDApp_ProcessNetworkJoin_4
   1408                  {
   1409                    ZDApp_AnnounceNewAddress();
   \   000041                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000041   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1410                  }
   1411          
   1412                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000044   90....       MOV     DPTR,#devState
   \   000047   7406         MOV     A,#0x6
   \   000049   F0           MOVX    @DPTR,A
   1413                  if ( ZSTACK_ROUTER_BUILD )
   \   00004A   02....       LJMP    ??ZDApp_ProcessNetworkJoin_5 & 0xFFFF
   1414                  {
   1415                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1416                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1417                    {
   1418                      NLME_StartRouterRequest( 0, 0, false );
   1419                    }
   1420                  }
   1421                }
   1422              }
   1423              else
   1424              {
   1425                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   00004D   90....       MOV     DPTR,#devStartMode
   \   000050   E0           MOVX    A,@DPTR
   \   000051   6401         XRL     A,#0x1
   \   000053   7036         JNZ     ??ZDApp_ProcessNetworkJoin_6
   \   000055   90....       MOV     DPTR,#retryCnt
   \   000058   E0           MOVX    A,@DPTR
   \   000059   04           INC     A
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   C3           CLR     C
   \   00005C   9403         SUBB    A,#0x3
   \   00005E   402B         JC      ??ZDApp_ProcessNetworkJoin_6
   1426                {
   1427                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000060   90....       MOV     DPTR,#_NIB + 33
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F4           CPL     A
   \   000065   7003         JNZ     ??ZDApp_ProcessNetworkJoin_7
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   00006A   600D         JZ      ??ZDApp_ProcessNetworkJoin_8
   \   00006C   90....       MOV     DPTR,#_NIB + 33
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   64FE         XRL     A,#0xfe
   \   000072   7003         JNZ     ??ZDApp_ProcessNetworkJoin_9
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000077   7006         JNZ     ??ZDApp_ProcessNetworkJoin_10
   1428                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000079   90....       MOV     DPTR,#devStartMode
   \   00007C   E4           CLR     A
   \   00007D   800B         SJMP    ??ZDApp_ProcessNetworkJoin_11
   1429                  else
   1430                  {
   1431                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   00007F   90....       MOV     DPTR,#devStartMode
   \   000082   7403         MOV     A,#0x3
   \   000084   F0           MOVX    @DPTR,A
   1432                    _tmpRejoinState = true;
   \   000085   90....       MOV     DPTR,#_tmpRejoinState
   \   000088   7401         MOV     A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   00008A   F0           MOVX    @DPTR,A
   1433                  }
   1434                }
   1435          
   1436                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1437                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00008B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00008B   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00008E   8A..         MOV     ?V0 + 0,R2
   \   000090   8B..         MOV     ?V0 + 1,R3
   \   000092   74FE         MOV     A,#-0x2
   \   000094   65..         XRL     A,?V0 + 0
   \   000096   7004         JNZ     ??ZDApp_ProcessNetworkJoin_12
   \   000098   74FF         MOV     A,#-0x1
   \   00009A   65..         XRL     A,?V0 + 1
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   00009C   700D         JNZ     ??ZDApp_ProcessNetworkJoin_13
   \   00009E   90....       MOV     DPTR,#_NIB + 20
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   64FE         XRL     A,#0xfe
   \   0000A4   7003         JNZ     ??ZDApp_ProcessNetworkJoin_14
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000A9   601B         JZ      ??ZDApp_ProcessNetworkJoin_15
   1438                {
   1439                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000AB   85..82       MOV     DPL,?XSP + 0
   \   0000AE   85..83       MOV     DPH,?XSP + 1
   \   0000B1   74FE         MOV     A,#-0x2
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   04           INC     A
   \   0000B6   F0           MOVX    @DPTR,A
   1440                  // Invalidate nwk addr so end device does not use in its data reqs.
   1441                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000B7   90....       MOV     DPTR,#_NIB + 20
   \   0000BA   14           DEC     A
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   04           INC     A
   \   0000BE   12....       LCALL   ?Subroutine11 & 0xFFFF
   1442                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   1443                }
   \                     ??CrossCallReturnLabel_2:
   \   0000C1   7953         MOV     R1,#0x53
   \   0000C3   12....       LCALL   ??ZMacSetReq?relay
   1444          
   1445                // Clear the neighbor Table and network discovery tables.
   1446                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000C6                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000C6   12....       LCALL   ??nwkNeighborInitTable?relay
   1447                NLME_NwkDiscTerm();
   \   0000C9                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000C9   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1448          
   1449                zdoDiscCounter = 1;
   \   0000CC   90....       MOV     DPTR,#zdoDiscCounter
   \   0000CF   7401         MOV     A,#0x1
   \   0000D1   F0           MOVX    @DPTR,A
   1450          
   1451          //      ZDApp_NetworkInit( (uint16)
   1452          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1453          //                          (NWK_START_DELAY * 5)) );
   1454                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1455                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000D2                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000D2                ; Setup parameters for call to function osal_rand
   \   0000D2   02....       LJMP    ??ZDApp_ProcessNetworkJoin_16 & 0xFFFF
   1456              }
   1457            }
   1458            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   6404         XRL     A,#0x4
   \   0000D8   6003         JZ      $+5
   \   0000DA   02....       LJMP    ??ZDApp_ProcessNetworkJoin_17 & 0xFFFF
   1459            {
   1460              // results of an orphaning attempt by this device
   1461              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   0000DD   90....       MOV     DPTR,#nwkStatus
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   7028         JNZ     ??ZDApp_ProcessNetworkJoin_18
   1462              {
   1463                if ( ZG_SECURE_ENABLED )
   1464                {
   1465                  ZDApp_RestoreNwkKey();
   1466                }
   1467          
   1468                devState = DEV_END_DEVICE;
   \   0000E3   12....       LCALL   ?Subroutine9 & 0xFFFF
   1469                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_33:
   \   0000E6   12....       LCALL   ??osal_set_event?relay
   1470                // setup Power Manager Device
   1471          #if defined ( POWER_SAVING )
   1472                osal_pwrmgr_device( PWRMGR_BATTERY );
   1473          #endif
   1474          
   1475                if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   0000E9   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000EF   5015         JNC     ??ZDApp_ProcessNetworkJoin_19
   1476                {
   1477                  // The receiver is on, turn network layer polling off.
   1478                  NLME_SetPollRate( 0 );
   \   0000F1                ; Setup parameters for call to function NLME_SetPollRate
   \   0000F1   7A00         MOV     R2,#0x0
   \   0000F3   7B00         MOV     R3,#0x0
   \   0000F5   12....       LCALL   ??NLME_SetPollRate?relay
   1479                  NLME_SetQueuedPollRate( 0 );
   \   0000F8                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0000F8   7A00         MOV     R2,#0x0
   \   0000FA   7B00         MOV     R3,#0x0
   \   0000FC   12....       LCALL   ??NLME_SetQueuedPollRate?relay
   1480                  NLME_SetResponseRate( 0 );
   \   0000FF                ; Setup parameters for call to function NLME_SetResponseRate
   \   0000FF   7A00         MOV     R2,#0x0
   \   000101   7B00         MOV     R3,#0x0
   \   000103   12....       LCALL   ??NLME_SetResponseRate?relay
   1481                }
   1482          
   1483                if ( ZSTACK_ROUTER_BUILD )
   1484                {
   1485                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1486                  if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1487                  {
   1488                    NLME_StartRouterRequest( 0, 0, false );
   1489                  }
   1490                }
   1491          
   1492                ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   000106                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000106   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   \   000109   8073         SJMP    ??ZDApp_ProcessNetworkJoin_5
   1493              }
   1494              else
   1495              {
   1496                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   00010B   90....       MOV     DPTR,#devStartMode
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   6401         XRL     A,#0x1
   \   000111   703E         JNZ     ??ZDApp_ProcessNetworkJoin_20
   1497                {
   1498                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000113   90....       MOV     DPTR,#retryCnt
   \   000116   E0           MOVX    A,@DPTR
   \   000117   04           INC     A
   \   000118   F0           MOVX    @DPTR,A
   \   000119   C3           CLR     C
   \   00011A   9404         SUBB    A,#0x4
   \   00011C   5026         JNC     ??ZDApp_ProcessNetworkJoin_21
   1499                  {
   1500                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   00011E   90....       MOV     DPTR,#_NIB + 33
   \   000121   E0           MOVX    A,@DPTR
   \   000122   F4           CPL     A
   \   000123   7003         JNZ     ??ZDApp_ProcessNetworkJoin_22
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   000128   6022         JZ      ??ZDApp_ProcessNetworkJoin_23
   \   00012A   90....       MOV     DPTR,#_NIB + 33
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   64FE         XRL     A,#0xfe
   \   000130   7003         JNZ     ??ZDApp_ProcessNetworkJoin_24
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   000135   6015         JZ      ??ZDApp_ProcessNetworkJoin_23
   1501                      devStartMode = MODE_JOIN;
   1502                    else
   1503                    {
   1504                      devStartMode = MODE_REJOIN;
   \   000137   90....       MOV     DPTR,#devStartMode
   \   00013A   7403         MOV     A,#0x3
   \   00013C   F0           MOVX    @DPTR,A
   1505                      _tmpRejoinState = true;
   \   00013D   90....       MOV     DPTR,#_tmpRejoinState
   \   000140   7401         MOV     A,#0x1
   \   000142   800C         SJMP    ??ZDApp_ProcessNetworkJoin_25
   1506                    }
   1507                  }
   1508                  // Do a normal join to the network after certain times of rejoin retries
   1509                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   000144   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   000147   E0           MOVX    A,@DPTR
   \   000148   6401         XRL     A,#0x1
   \   00014A   7005         JNZ     ??ZDApp_ProcessNetworkJoin_20
   1510                  {
   1511                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   00014C   90....       MOV     DPTR,#devStartMode
   \   00014F   E4           CLR     A
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   000150   F0           MOVX    @DPTR,A
   1512                  }
   1513                }
   1514          
   1515                // Clear the neighbor Table and network discovery tables.
   1516                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   000151                ; Setup parameters for call to function nwkNeighborInitTable
   \   000151   12....       LCALL   ??nwkNeighborInitTable?relay
   1517                NLME_NwkDiscTerm();
   \   000154                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000154   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1518          
   1519                // setup a retry for later...
   1520                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1521                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   000157                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000157                ; Setup parameters for call to function osal_rand
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   000157   12....       LCALL   ??osal_rand?relay
   \   00015A   EA           MOV     A,R2
   \   00015B   547F         ANL     A,#0x7f
   \   00015D   2464         ADD     A,#0x64
   \   00015F   FA           MOV     R2,A
   \   000160   7B00         MOV     R3,#0x0
   \   000162   12....       LCALL   ??ZDApp_NetworkInit?relay
   \   000165   8017         SJMP    ??ZDApp_ProcessNetworkJoin_5
   1522              }
   1523            }
   1524          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1525            else
   1526            {
   1527              // Assume from address conflict
   1528              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   000167   90....       MOV     DPTR,#_NIB + 96
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   6402         XRL     A,#0x2
   \   00016D   700F         JNZ     ??ZDApp_ProcessNetworkJoin_5
   1529              {
   1530                // Notify the network
   1531                ZDApp_AnnounceNewAddress();
   \   00016F                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00016F   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1532          
   1533                // Notify apps
   1534                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000172                ; Setup parameters for call to function osal_set_event
   \   000172   7A10         MOV     R2,#0x10
   \   000174   7B00         MOV     R3,#0x0
   \   000176   90....       MOV     DPTR,#ZDAppTaskID
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   F9           MOV     R1,A
   \   00017B   12....       LCALL   ??osal_set_event?relay
   1535              }
   1536            }
   1537          #endif
   1538          }
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   00017E   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for indirect call
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET
   1539          
   1540          /*********************************************************************
   1541           * @fn      ZDApp_SaveNwkKey()
   1542           *
   1543           * @brief   Save off the Network key information.
   1544           *
   1545           * @param   none
   1546           *
   1547           * @return  none
   1548           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7415         MOV     A,#0x15
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine31_0
   \   000005                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1549          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1550          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1551            nwkActiveKeyItems keyItems;
   1552          
   1553            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AA82         MOV     R2,DPL
   \   000012   AB83         MOV     R3,DPH
   \   000014   12....       LCALL   ??SSP_ReadNwkActiveKey?relay
   1554            keyItems.frameCounter++;
   \   000017   90....       MOV     DPTR,#__Constant_1
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?L_MOV_X
   \   00001F   7411         MOV     A,#0x11
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_ADD_TO_X
   1555          
   1556            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1557                          (void *)&keyItems );
   \   000029                ; Setup parameters for call to function osal_nv_write
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   8582..       MOV     ?V0 + 0,DPL
   \   000032   8583..       MOV     ?V0 + 1,DPH
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..15       MOV     ?V0 + 0,#0x15
   \   00003D   75..00       MOV     ?V0 + 1,#0x0
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   7C00         MOV     R4,#0x0
   \   000047   7D00         MOV     R5,#0x0
   \   000049   7A82         MOV     R2,#-0x7e
   \   00004B   7B00         MOV     R3,#0x0
   \   00004D   12....       LCALL   ??osal_nv_write?relay
   \   000050   7404         MOV     A,#0x4
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   1558          
   1559            nwkFrameCounterChanges = 0;
   \   000055   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000058   E4           CLR     A
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   F0           MOVX    @DPTR,A
   1560          
   1561            // Clear copy in RAM before return.
   1562            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   00005C                ; Setup parameters for call to function osal_memset
   \   00005C   7C15         MOV     R4,#0x15
   \   00005E   FD           MOV     R5,A
   \   00005F   F9           MOV     R1,A
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   12....       LCALL   ??osal_memset?relay
   1563          
   1564          }
   \   00006D   02....       LJMP    ?Subroutine1 & 0xFFFF
   1565          
   1566          /*********************************************************************
   1567           * @fn      ZDApp_ResetNwkKey()
   1568           *
   1569           * @brief   Reset the Network key information in NV.
   1570           *
   1571           * @param   none
   1572           *
   1573           * @return  none
   1574           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1575          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1576          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1577            nwkActiveKeyItems keyItems;
   1578          
   1579            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
   \   00001A   12....       LCALL   ??osal_memset?relay
   1580            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1581                          (void *)&keyItems );
   \   00001D                ; Setup parameters for call to function osal_nv_write
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   8582..       MOV     ?V0 + 0,DPL
   \   000026   8583..       MOV     ?V0 + 1,DPH
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..15       MOV     ?V0 + 0,#0x15
   \   000031   75..00       MOV     ?V0 + 1,#0x0
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7C00         MOV     R4,#0x0
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   7A82         MOV     R2,#-0x7e
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   12....       LCALL   ??osal_nv_write?relay
   \   000044   7404         MOV     A,#0x4
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
   1582          }
   \   000049   02....       LJMP    ?Subroutine8 & 0xFFFF
   1583          
   1584          /*********************************************************************
   1585           * @fn      ZDApp_RestoreNwkKey()
   1586           *
   1587           * @brief
   1588           *
   1589           *   Save off the Network key information.
   1590           *
   1591           * @param   none
   1592           *
   1593           * @return  true if restored from NV, false if not
   1594           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1595          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1596          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1597            nwkActiveKeyItems keyItems;
   1598            uint8 ret = false;
   \   00000A   7E00         MOV     R6,#0x0
   1599          
   1600            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1601                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   8582..       MOV     ?V0 + 0,DPL
   \   000015   8583..       MOV     ?V0 + 1,DPH
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   75..15       MOV     ?V0 + 0,#0x15
   \   000020   8E..         MOV     ?V0 + 1,R6
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A82         MOV     R2,#-0x7e
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   ??osal_nv_read?relay
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   E9           MOV     A,R1
   \   000038   703F         JNZ     ??ZDApp_RestoreNwkKey_0
   1602            {
   1603              if ( keyItems.frameCounter > 0 )
   \   00003A   7411         MOV     A,#0x11
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?L_MOV_X
   \   000044   E5..         MOV     A,?V0 + 0
   \   000046   45..         ORL     A,?V0 + 1
   \   000048   45..         ORL     A,?V0 + 2
   \   00004A   45..         ORL     A,?V0 + 3
   \   00004C   6021         JZ      ??ZDApp_RestoreNwkKey_1
   1604              {
   1605                // Restore the key information
   1606                keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
   \   00004E   90....       MOV     DPTR,#__Constant_3e8
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?L_MOV_X
   \   000056   7411         MOV     A,#0x11
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   78..         MOV     R0,#?V0 + 0
   \   00005D   12....       LCALL   ?L_ADD_TO_X
   1607                nwkFrameCounter = keyItems.frameCounter;
   \   000060   7411         MOV     A,#0x11
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   12....       LCALL   ?XLOAD_R2345
   \   000068   90....       MOV     DPTR,#nwkFrameCounter
   \   00006B   12....       LCALL   ?XSTORE_R2345
   1608                ret = true;
   \   00006E   0E           INC     R6
   1609              }
   1610          
   1611              // Force a save for the first frame counter increment
   1612              nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   00006F   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000072   74E9         MOV     A,#-0x17
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   7403         MOV     A,#0x3
   \   000078   F0           MOVX    @DPTR,A
   1613            }
   1614            // Clear copy in RAM before return.
   1615            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000079                ; Setup parameters for call to function osal_memset
   \   000079   7C15         MOV     R4,#0x15
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   85..82       MOV     DPL,?XSP + 0
   \   000082   85..83       MOV     DPH,?XSP + 1
   \   000085   AA82         MOV     R2,DPL
   \   000087   AB83         MOV     R3,DPH
   \   000089   12....       LCALL   ??osal_memset?relay
   1616          
   1617            return ( ret );
   \   00008C   EE           MOV     A,R6
   \   00008D   F9           MOV     R1,A
   \   00008E   02....       LJMP    ?Subroutine1 & 0xFFFF
   1618          }
   1619          
   1620          /*********************************************************************
   1621           * @fn      ZDApp_ResetTimerStart
   1622           *
   1623           * @brief   Start the reset timer.
   1624           *
   1625           * @param   delay - delay time(ms) before reset
   1626           *
   1627           * @return  none
   1628           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1629          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1630          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1631            // Start the rest timer
   1632            osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007   FD           MOV     R5,A
   \   000008   7A04         MOV     R2,#0x4
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   90....       MOV     DPTR,#ZDAppTaskID
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??osal_start_timerEx?relay
   1633          }
   \   000014   02....       LJMP    ?Subroutine3 & 0xFFFF
   1634          
   1635          /*********************************************************************
   1636           * @fn      ZDApp_ResetTimerCancel
   1637           *
   1638           * @brief   Cancel the reset timer.
   1639           *
   1640           * @param   none
   1641           *
   1642           * @return  none
   1643           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1644          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1645          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1646            // Cancel the reset timer
   1647            osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_stop_timerEx?relay
   1648          }
   \   000010   02....       LJMP    ?Subroutine3 & 0xFFFF
   1649          
   1650          /*********************************************************************
   1651           * @fn      ZDApp_LeaveCtrlInit
   1652           *
   1653           * @brief   Initialize the leave control logic.
   1654           *
   1655           * @param   none
   1656           *
   1657           * @return  none
   1658           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1659          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1660          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1661            uint8 status;
   1662          
   1663          
   1664            // Initialize control state
   1665            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1666          
   1667            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1668                                        sizeof(ZDApp_LeaveCtrl),
   1669                                        &ZDApp_LeaveCtrl );
   1670          
   1671            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV     ?V0 + 0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV     ?V0 + 1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV     R0,#?V0 + 0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV     R4,#0x1
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7A85         MOV     R2,#-0x7b
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   ??osal_nv_item_init?relay
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   E9           MOV     A,R1
   \   000026   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1672            {
   1673              // Read saved control
   1674              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1675                            0,
   1676                            sizeof( uint8 ),
   1677                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV     ?V0 + 0,#0x1
   \   000030   75..00       MOV     ?V0 + 1,#0x0
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A85         MOV     R2,#-0x7b
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??osal_nv_read?relay
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1678            }
   1679          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000048   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   1680          
   1681          /*********************************************************************
   1682           * @fn      ZDApp_LeaveCtrlSet
   1683           *
   1684           * @brief   Set the leave control logic.
   1685           *
   1686           * @param   ra - reassociate flag
   1687           *
   1688           * @return  none
   1689           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75....       MOV     ?V0 + 0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV     ?V0 + 1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV     ?V0 + 0,#0x1
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   \   000011   78..         MOV     R0,#?V0 + 0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV     R4,#0x0
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   ??osal_nv_write?relay
   \   000021   7404         MOV     A,#0x4
   \   000023                REQUIRE ??Subroutine36_0
   \   000023                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1690          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1691          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1692            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1693          
   1694            if ( ra == TRUE )
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1695            {
   1696              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   1697            }
   1698          
   1699            // Write the leave control
   1700            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1701                           0,
   1702                           sizeof( uint8 ),
   1703                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP    ?Subroutine2 & 0xFFFF
   1704          }
   1705          
   1706          /*********************************************************************
   1707           * @fn      ZDApp_LeaveCtrlReset
   1708           *
   1709           * @brief   Re-initialize the leave control logic.
   1710           *
   1711           * @param   none
   1712           *
   1713           * @return  none
   1714           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1715          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1716          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1717            // Set leave control to initialized state
   1718            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1719          
   1720            // Write initialized control
   1721            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1722                          0,
   1723                          sizeof( uint8 ),
   1724                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP    ?Subroutine2 & 0xFFFF
   1725          }
   1726          
   1727          /*********************************************************************
   1728           * @fn      ZDApp_LeaveCtrlBypass
   1729           *
   1730           * @brief   Check if NV restore should be skipped during a leave reset.
   1731           *
   1732           * @param   none
   1733           *
   1734           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1735           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1736          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1737          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1738            uint8 bypass;
   1739          
   1740            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1741            {
   1742              bypass = TRUE;
   1743            }
   1744            else
   1745            {
   1746              bypass = FALSE;
   1747            }
   1748          
   1749            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D   80..         SJMP    ?Subroutine3
   1750          }
   1751          
   1752          /*********************************************************************
   1753           * @fn      ZDApp_LeaveCtrlStartup
   1754           *
   1755           * @brief   Check for startup conditions during a leave reset.
   1756           *
   1757           * @param   state      - devState_t determined by leave control logic
   1758           * @param   startDelay - startup delay
   1759           *
   1760           * @return  none
   1761           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1762          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1763          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1764            *startDelay = 0;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   1765          
   1766            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5019         JNC     ??ZDApp_LeaveCtrlStartup_0
   1767            {
   1768              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV     C,0xE0 /* A   */.1
   \   000016   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   1769              {
   1770                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   7488         MOV     A,#-0x78
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7413         MOV     A,#0x13
   \   000022   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1771              }
   1772              else
   1773              {
   1774                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E4           CLR     A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX    @DPTR,A
   1775              }
   1776          
   1777              // Reset leave control logic
   1778              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL   ??ZDApp_LeaveCtrlReset?relay
   1779            }
   1780          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D                REQUIRE ?Subroutine3
   \   00002D                ; // Fall through to label ?Subroutine3
   1781          
   1782          /*********************************************************************
   1783           * @fn      ZDApp_LeaveReset
   1784           *
   1785           * @brief   Setup a device reset due to a leave indication/confirm.
   1786           *
   1787           * @param   ra - reassociate flag
   1788           *
   1789           * @return  none
   1790           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1791          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1792          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1793            ZDApp_LeaveCtrlSet( ra );
   \   000005                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000005   12....       LCALL   ??ZDApp_LeaveCtrlSet?relay
   1794          
   1795            ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \   000008                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000008   7A88         MOV     R2,#-0x78
   \   00000A   7B13         MOV     R3,#0x13
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerStart?relay
   1796          }
   \   00000F   80..         SJMP    ??Subroutine38_0
   1797          
   1798          /*********************************************************************
   1799           * @fn      ZDApp_LeaveUpdate
   1800           *
   1801           * @brief   Update local device data related to leaving device.
   1802           *
   1803           * @param   nwkAddr        - NWK address of leaving device
   1804           * @param   extAddr        - EXT address of leaving device
   1805           * @param   removeChildren - remove children of leaving device
   1806           *
   1807           * @return  none
   1808           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1809          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1810                                  uint8 removeChildren )
   1811          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1812            // Remove Apps Key for leaving device
   1813            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000012                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   ??ZDSecMgrDeviceRemoveByExtAddr?relay
   1814          
   1815            // Clear SECURITY bit from Address Manager
   1816            ZDSecMgrAddrClear( extAddr );
   \   000019                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   ??ZDSecMgrAddrClear?relay
   1817          
   1818            if ( pbindRemoveDev )
   \   000020   90....       MOV     DPTR,#pbindRemoveDev
   \   000023   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000026   603C         JZ      ??ZDApp_LeaveUpdate_0
   1819            {
   1820              zAddrType_t devAddr;
   1821          
   1822              // Remove bind entry and all related data
   1823              devAddr.addrMode = Addr64Bit;
   \   000028   7408         MOV     A,#0x8
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   7403         MOV     A,#0x3
   \   00002F   F0           MOVX    @DPTR,A
   1824              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000030                ; Setup parameters for call to function osal_memcpy
   \   000030   8E..         MOV     ?V0 + 4,R6
   \   000032   8F..         MOV     ?V0 + 5,R7
   \   000034   75..00       MOV     ?V0 + 6,#0x0
   \   000037   78..         MOV     R0,#?V0 + 4
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003C   7C08         MOV     R4,#0x8
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   AA82         MOV     R2,DPL
   \   000047   AB83         MOV     R3,DPH
   \   000049   12....       LCALL   ??osal_memcpy?relay
   \   00004C   7403         MOV     A,#0x3
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1825          
   1826              pbindRemoveDev(&devAddr);
   \   000051                ; Setup parameters for indirect call
   \   000051   85..82       MOV     DPL,?XSP + 0
   \   000054   85..83       MOV     DPH,?XSP + 1
   \   000057   AA82         MOV     R2,DPL
   \   000059   AB83         MOV     R3,DPH
   \   00005B   90....       MOV     DPTR,#pbindRemoveDev
   \   00005E   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   1827            }
   \                     ??CrossCallReturnLabel_61:
   \   000061   12....       LCALL   ?CALL_IND
   1828          
   1829            // Remove if child
   1830            if ( ZSTACK_ROUTER_BUILD )
   1831            {
   1832              NLME_RemoveChild( extAddr, removeChildren );
   1833            }
   1834          
   1835            // Remove Routing table related entry
   1836            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_0:
   \   000064                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   000064   7900         MOV     R1,#0x0
   \   000066   AA..         MOV     R2,?V0 + 0
   \   000068   AB..         MOV     R3,?V0 + 1
   \   00006A   12....       LCALL   ??RTG_RemoveRtgEntry?relay
   1837          
   1838            // Remove entry from neighborTable
   1839            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   00006D                ; Setup parameters for call to function nwkNeighborRemove
   \   00006D   90....       MOV     DPTR,#_NIB + 33
   \   000070   E0           MOVX    A,@DPTR
   \   000071   FC           MOV     R4,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   FD           MOV     R5,A
   \   000075   AA..         MOV     R2,?V0 + 0
   \   000077   AB..         MOV     R3,?V0 + 1
   \   000079   12....       LCALL   ??nwkNeighborRemove?relay
   1840          
   1841            // Schedule to save data to NV
   1842            ZDApp_NwkWriteNVRequest();
   1843          }
   \   00007C   7409         MOV     A,#0x9
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000081   7F07         MOV     R7,#0x7
   \   000083   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET
   1844          
   1845          /*********************************************************************
   1846           * @fn      ZDApp_NetworkDiscoveryReq
   1847           *
   1848           * @brief   Request a network discovery.
   1849           *
   1850           * @param  scanChannels -
   1851           * @param  scanDuration -
   1852           *
   1853           * @return  ZStatus_t
   1854           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1855          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   1856          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1857            // Setup optional filters - tbd
   1858          
   1859            // Request NLME network discovery
   1860            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL   ??NLME_NetworkDiscoveryRequest?relay
   \   000008   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   1861          }
   1862          
   1863          /*********************************************************************
   1864           * @fn      ZDApp_JoinReq
   1865           *
   1866           * @brief   Request the device to join a parent in a network.
   1867           *
   1868           * @param   channel -
   1869           * @param   panID -
   1870           *
   1871           * @return  ZStatus_t
   1872           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1873          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   1874                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   1875          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   740E         MOV     A,#0xe
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 2,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 3,A
   \   00001B   7410         MOV     A,#0x10
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 5,A
   \   000023   7411         MOV     A,#0x11
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   1876            // Sync up the node with the stack profile (In the case where a pro device
   1877            // joins a non-pro network, or verse versa)
   1878            ZDApp_NodeProfileSync( stackProfile);
   \   00002A                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00002A   12....       LCALL   ??ZDApp_NodeProfileSync?relay
   1879          
   1880            // Request NLME Join Request
   1881            return NLME_JoinRequest(extendedPanID, panID,channel,
   1882                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   1883                                    chosenParent, parentDepth);
   \   00002D                ; Setup parameters for call to function NLME_JoinRequest
   \   00002D   78..         MOV     R0,#?V0 + 5
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000032   78..         MOV     R0,#?V0 + 2
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V0 + 2,A
   \   00003D   78..         MOV     R0,#?V0 + 2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000042   A9..         MOV     R1,?V0 + 4
   \   000044   AC..         MOV     R4,?V0 + 0
   \   000046   AD..         MOV     R5,?V0 + 1
   \   000048   EE           MOV     A,R6
   \   000049   FA           MOV     R2,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FB           MOV     R3,A
   \   00004C   12....       LCALL   ??NLME_JoinRequest?relay
   \   00004F   7404         MOV     A,#0x4
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054                REQUIRE ?Subroutine5
   \   000054                ; // Fall through to label ?Subroutine5
   1884          
   1885          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1886          
   1887          /*********************************************************************
   1888           * @fn      ZDApp_DeviceConfigured
   1889           *
   1890           * @brief   Check to see if the local device is configured (i.e., part
   1891           *          of a network).
   1892           *
   1893           * @param   none
   1894           *
   1895           * @return  TRUE if configured. FALSE, otherwise.
   1896           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1897          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   1898          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1899            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
   1900          
   1901            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   1902                          sizeof( uint16), &nwkAddr );
   \   000016                ; Setup parameters for call to function osal_nv_read
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   8582..       MOV     ?V0 + 0,DPL
   \   00001F   8583..       MOV     ?V0 + 1,DPH
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   75..02       MOV     ?V0 + 0,#0x2
   \   00002A   75..00       MOV     ?V0 + 1,#0x0
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7C14         MOV     R4,#0x14
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A21         MOV     R2,#0x21
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   ??osal_nv_read?relay
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   1903          
   1904            // Does the NIB have anything more than default?
   1905            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   E0           MOVX    A,@DPTR
   \   000049   64FE         XRL     A,#0xfe
   \   00004B   7003         JNZ     ??ZDApp_DeviceConfigured_0
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F4           CPL     A
   \                     ??ZDApp_DeviceConfigured_0:
   \   000050   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   000052   7900         MOV     R1,#0x0
   \   000054   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000056   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000058   02....       LJMP    ?Subroutine7 & 0xFFFF
   1906          }
   1907          
   1908          /*********************************************************************
   1909           * CALLBACK FUNCTIONS
   1910           */
   1911          
   1912          
   1913          /*********************************************************************
   1914           * @fn      ZDApp_SendEventMsg()
   1915           *
   1916           * @brief
   1917           *
   1918           *   Sends a Network Join message
   1919           *
   1920           * @param  cmd - command ID
   1921           * @param  len - length (in bytes) of the buf field
   1922           * @param  buf - buffer for the rest of the message.
   1923           *
   1924           * @return  none
   1925           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1926          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   1927          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   1928            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV     R3,A
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   90....       MOV     DPTR,#ZDAppTaskID
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   ??ZDApp_SendMsg?relay
   1929          }
   \   000013   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   1930          
   1931          /*********************************************************************
   1932           * @fn      ZDApp_SendMsg()
   1933           *
   1934           * @brief   Sends a OSAL message
   1935           *
   1936           * @param  taskID - Where to send the message
   1937           * @param  cmd - command ID
   1938           * @param  len - length (in bytes) of the buf field
   1939           * @param  buf - buffer for the rest of the message.
   1940           *
   1941           * @return  none
   1942           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1943          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   1944          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 3,R1
   \   000007   8A..         MOV     ?V0 + 4,R2
   \   000009   8B..         MOV     ?V0 + 5,R3
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   1945            osal_event_hdr_t *msgPtr;
   1946          
   1947            // Send the address to the task
   1948            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   8B..         MOV     ?V0 + 6,R3
   \   000011   AA..         MOV     R2,?V0 + 6
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   ??osal_msg_allocate?relay
   \   000018   8A..         MOV     ?V0 + 6,R2
   \   00001A   8B..         MOV     ?V0 + 7,R3
   \   00001C   AE..         MOV     R6,?V0 + 6
   \   00001E   AF..         MOV     R7,?V0 + 7
   1949            if ( msgPtr )
   \   000020   EE           MOV     A,R6
   \   000021   4F           ORL     A,R7
   \   000022   6031         JZ      ??ZDApp_SendMsg_0
   1950            {
   1951              if ( (len > 0) && (buf != NULL) )
   \   000024   E5..         MOV     A,?V0 + 5
   \   000026   601D         JZ      ??ZDApp_SendMsg_1
   \   000028   E5..         MOV     A,?V0 + 0
   \   00002A   45..         ORL     A,?V0 + 1
   \   00002C   6017         JZ      ??ZDApp_SendMsg_1
   1952                osal_memcpy( msgPtr, buf, len );
   \   00002E                ; Setup parameters for call to function osal_memcpy
   \   00002E   75..00       MOV     ?V0 + 2,#0x0
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000036   85....       MOV     ?V0 + 0,?V0 + 5
   \   000039   AC..         MOV     R4,?V0 + 0
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   12....       LCALL   ??osal_memcpy?relay
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   1953          
   1954              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   E5..         MOV     A,?V0 + 4
   \   00004B   F0           MOVX    @DPTR,A
   1955              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00004C                ; Setup parameters for call to function osal_msg_send
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   A9..         MOV     R1,?V0 + 3
   \   000052   12....       LCALL   ??osal_msg_send?relay
   1956            }
   1957          }
   \                     ??ZDApp_SendMsg_0:
   \   000055   7F08         MOV     R7,#0x8
   \   000057   02....       LJMP    ?BANKED_LEAVE_XDATA
   1958          
   1959          /*********************************************************************
   1960           * Call Back Functions from NWK  - API
   1961           */
   1962          
   1963          /*********************************************************************
   1964           * @fn          ZDO_NetworkDiscoveryConfirmCB
   1965           *
   1966           * @brief       This function returns a choice of PAN to join.
   1967           *
   1968           * @param       status - return status of the nwk discovery confirm
   1969           *
   1970           * @return      ZStatus_t
   1971           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1972          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   1973          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   1974            osal_event_hdr_t msg;
   1975          
   1976            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   1977            // Send ZDO_MGMT_NWK_DISC_RSP back
   1978          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1979            if ( zdappMgmtNwkDiscReqInProgress )
   1980            {
   1981              zdappMgmtNwkDiscReqInProgress = false;
   1982              ZDO_FinishProcessingMgmtNwkDiscReq();
   1983            }
   1984            else
   1985          #endif
   1986            {
   1987              // Pass the confirm to another task if it registers the callback
   1988              // Otherwise, pass the confirm to ZDApp.
   1989              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000017   6015         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   1990              {
   1991                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   90....       MOV     DPTR,#zdoCBFunc + 5
   \   000026   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   1992              }
   \                     ??CrossCallReturnLabel_55:
   \   000029   12....       LCALL   ?CALL_IND
   \   00002C   801B         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   1993              else
   1994              {
   1995                // Otherwise, send scan confirm to ZDApp task to proceed
   1996                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
   1997                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000035                ; Setup parameters for call to function ZDApp_SendMsg
   \   000035   04           INC     A
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   AC82         MOV     R4,DPL
   \   00003B   AD83         MOV     R5,DPH
   \   00003D   7B02         MOV     R3,#0x2
   \   00003F   7A01         MOV     R2,#0x1
   \   000041   90....       MOV     DPTR,#ZDAppTaskID
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   ??ZDApp_SendMsg?relay
   1998              }
   1999            }
   2000            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   000049   7900         MOV     R1,#0x0
   \   00004B   7403         MOV     A,#0x3
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000050   02....       LJMP    ?Subroutine3 & 0xFFFF
   2001          }  // ZDO_NetworkDiscoveryConfirmCB
   2002          
   2003          /*********************************************************************
   2004           * @fn          ZDApp_NwkDescListProcessing
   2005           *
   2006           * @brief       This function process the network discovery result and select
   2007           *              a parent device to join itself.
   2008           *
   2009           * @param       none
   2010           *
   2011           * @return      ZStatus_t
   2012           */
   2013          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2014          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2015          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2016            networkDesc_t *pNwkDesc;
   2017            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   2018            uint8 stackProfile;
   2019            uint8 stackProfilePro;
   2020            uint8 selected;
   2021          
   2022            // Count the number of nwk descriptors in the list
   2023            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   ??nwk_getNwkDescList?relay
   \   00000B   8A..         MOV     ?V0 + 2,R2
   \   00000D   8B..         MOV     ?V0 + 3,R3
   \   00000F   AE..         MOV     R6,?V0 + 2
   \   000011   AF..         MOV     R7,?V0 + 3
   \   000013   8005         SJMP    ??CrossCallReturnLabel_52
   2024            while (pNwkDesc)
   2025            {
   2026              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC     ?V0 + 0
   2027              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL   ?Subroutine19 & 0xFFFF
   2028            }
   \                     ??CrossCallReturnLabel_52:
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   70F7         JNZ     ??ZDApp_NwkDescListProcessing_0
   2029          
   2030            // process discovery results
   2031            stackProfilePro = FALSE;
   \   00001E   75..00       MOV     ?V0 + 3,#0x0
   2032            selected = FALSE;
   2033          
   2034          
   2035            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV     ?V0 + 1,#0x0
   2036            {
   2037              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL   ??nwk_getNwkDescList?relay
   \   000027   8A..         MOV     ?V0 + 4,R2
   \   000029   8B..         MOV     ?V0 + 5,R3
   \   00002B   AE..         MOV     R6,?V0 + 4
   \   00002D   AF..         MOV     R7,?V0 + 5
   2038              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV     ?V0 + 2,#0x0
   \   000032   8023         SJMP    ??CrossCallReturnLabel_53
   2039              {
   2040                if ( zgConfigPANID != 0xFFFF )
   2041                {
   2042                  // PAN Id is preconfigured. check if it matches
   2043                  if ( pNwkDesc->panId != zgConfigPANID )
   2044                    continue;
   2045                }
   2046          
   2047                if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true )
   2048                {
   2049                  // If the extended Pan ID is commissioned to a non zero value
   2050                  // Only join the Pan that has match EPID
   2051                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2052                    continue;
   2053          
   2054                }
   2055          
   2056                // check that network is allowing joining
   2057                if ( ZSTACK_ROUTER_BUILD )
   2058                {
   2059                  if ( stackProfilePro == FALSE )
   2060                  {
   2061                    if ( !pNwkDesc->routerCapacity )
   2062                    {
   2063                      continue;
   2064                    }
   2065                  }
   2066                  else
   2067                  {
   2068                    if ( !pNwkDesc->deviceCapacity )
   2069                    {
   2070                      continue;
   2071                    }
   2072                  }
   2073                }
   2074                else if ( ZSTACK_END_DEVICE_BUILD )
   2075                {
   2076                  if ( !pNwkDesc->deviceCapacity )
   2077                  {
   2078                    continue;
   2079                  }
   2080                }
   2081          
   2082                // check version of zigbee protocol
   2083                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2084                  continue;
   2085          
   2086                // check version of stack profile
   2087                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2088                {
   2089                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2090                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   7012         JNZ     ??ZDApp_NwkDescListProcessing_3
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6401         XRL     A,#0x1
   \   000046   7003         JNZ     ??ZDApp_NwkDescListProcessing_3
   2091                  {
   2092                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   000048   75..01       MOV     ?V0 + 3,#0x1
   2093                  }
   2094          
   2095                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   00004B   E5..         MOV     A,?V0 + 1
   \   00004D   6003         JZ      $+5
   \   00004F   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000052   05..         INC     ?V0 + 2
   \   000054   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000057   E5..         MOV     A,?V0 + 2
   \   000059   C3           CLR     C
   \   00005A   95..         SUBB    A,?V0 + 0
   \   00005C   4003         JC      $+5
   \   00005E   02....       LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000061   90....       MOV     DPTR,#zgConfigPANID
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F4           CPL     A
   \   000066   7003         JNZ     ??ZDApp_NwkDescListProcessing_8
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F4           CPL     A
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   00006B   600F         JZ      ??ZDApp_NwkDescListProcessing_9
   \   00006D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000070   90....       MOV     DPTR,#zgConfigPANID
   \   000073   E0           MOVX    A,@DPTR
   \   000074   68           XRL     A,R0
   \   000075   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   00007A   70D6         JNZ     ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   00007C                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   00007C   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00007E   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000080   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   000083   E9           MOV     A,R1
   \   000084   6401         XRL     A,#0x1
   \   000086   7012         JNZ     ??ZDApp_NwkDescListProcessing_11
   \   000088                ; Setup parameters for call to function sAddrExtCmp
   \   000088   EE           MOV     A,R6
   \   000089   240B         ADD     A,#0xb
   \   00008B   FC           MOV     R4,A
   \   00008C   EF           MOV     A,R7
   \   00008D   3400         ADDC    A,#0x0
   \   00008F   FD           MOV     R5,A
   \   000090   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000092   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000094   12....       LCALL   ??sAddrExtCmp?relay
   \   000097   E9           MOV     A,R1
   \   000098   60B8         JZ      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   60AD         JZ      ??ZDApp_NwkDescListProcessing_6
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F8           MOV     R0,A
   \   0000B0   90....       MOV     DPTR,#_NIB + 17
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   68           XRL     A,R0
   \   0000B5   709B         JNZ     ??ZDApp_NwkDescListProcessing_6
   \   0000B7   8E82         MOV     DPL,R6
   \   0000B9   8F83         MOV     DPH,R7
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F8           MOV     R0,A
   \   0000C3   90....       MOV     DPTR,#zgStackProfile
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   68           XRL     A,R0
   \   0000C8   6039         JZ      ??ZDApp_NwkDescListProcessing_5
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   6401         XRL     A,#0x1
   \   0000CD   6003         JZ      $+5
   \   0000CF   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000D2   8E82         MOV     DPL,R6
   \   0000D4   8F83         MOV     DPH,R7
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   6402         XRL     A,#0x2
   \   0000DF   6003         JZ      $+5
   \   0000E1   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000E4   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2096                  {
   2097                    continue;
   2098                  }
   2099                }
   2100          
   2101                break;
   2102              }
   2103          
   2104              if (i < ResultCount)
   2105              {
   2106               selected = TRUE;
   2107                break;
   2108              }
   2109          
   2110              // break if selected or stack profile pro wasn't found
   2111              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000E7   E5..         MOV     A,?V0 + 3
   \   0000E9   600C         JZ      ??ZDApp_NwkDescListProcessing_12
   2112              {
   2113                break;
   2114              }
   2115            }
   \   0000EB   05..         INC     ?V0 + 1
   \   0000ED   E5..         MOV     A,?V0 + 1
   \   0000EF   C3           CLR     C
   \   0000F0   9402         SUBB    A,#0x2
   \   0000F2   5003         JNC     $+5
   \   0000F4   02....       LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2116          
   2117            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000F7   E5..         MOV     A,?V0 + 0
   \   0000F9   65..         XRL     A,?V0 + 2
   \   0000FB   7006         JNZ     ??ZDApp_NwkDescListProcessing_5
   2118            {
   2119              return (NULL);   // couldn't find appropriate PAN to join !
   \   0000FD   7A00         MOV     R2,#0x0
   \   0000FF   7B00         MOV     R3,#0x0
   \   000101   8004         SJMP    ??ZDApp_NwkDescListProcessing_13
   2120            }
   2121            else
   2122            {
   2123              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   000103   EE           MOV     A,R6
   \   000104   FA           MOV     R2,A
   \   000105   EF           MOV     A,R7
   \   000106   FB           MOV     R3,A
   2124            }
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   000107   02....       LJMP    ?Subroutine5 & 0xFFFF
   2125          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000006                REQUIRE ??Subroutine39_0
   \   000006                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
   2126          
   2127          /*********************************************************************
   2128           * @fn          ZDO_NetworkFormationConfirmCB
   2129           *
   2130           * @brief       This function reports the results of the request to
   2131           *              initialize a coordinator in a network.
   2132           *
   2133           * @param       Status - Result of NLME_NetworkFormationRequest()
   2134           *
   2135           * @return      none
   2136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_set_event?relay
   \   00000A                REQUIRE ??Subroutine38_0
   \   00000A                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2137          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2138          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2139            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2140          
   2141            if ( Status == ZSUCCESS )
   \   00000A   7019         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2142            {
   2143              // LED on shows Coordinator started
   2144              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   ??HalLedSet?relay
   2145          
   2146              // LED off forgets HOLD_AUTO_START
   2147              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   ??HalLedSet?relay
   2148              //SendBindRequest();//×Ô¶¯¿ªÊ¼°ó¶¨ microdjg
   2149              ///////osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT,3000 );//×Ô¶¯¿ªÊ¼°ó¶¨ microdjg
   2150              
   2151          
   2152          #if defined ( ZBIT )
   2153              SIM_SetColor(0xd0ffd0);
   2154          #endif
   2155          
   2156              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   700C         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   2157              {
   2158                // Began with HOLD_AUTO_START
   2159                devState = DEV_COORD_STARTING;
   \   000020   7408         MOV     A,#0x8
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8007         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   2160              }
   2161            }
   2162          #if defined(BLINK_LEDS)
   2163            else
   2164            {
   2165              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000025                ; Setup parameters for call to function HalLedSet
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7904         MOV     R1,#0x4
   \   000029   12....       LCALL   ??HalLedSet?relay
   2166            }
   2167          #endif
   2168          
   2169            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00002C                ; Setup parameters for call to function osal_set_event
   \   00002C   7A02         MOV     R2,#0x2
   \   00002E   02....       LJMP    ?Subroutine0 & 0xFFFF
   2170          }
   2171          
   2172          /****************************************************************************
   2173           * @fn          ZDApp_beaconIndProcessing
   2174           *
   2175           * @brief       This function processes the incoming beacon indication.
   2176           *
   2177           *              When another task (MT or App) is registered to process
   2178           *              beacon indication themselves, this function will parse the
   2179           *              beacon payload and pass the beacon descriptor to that task
   2180           *              If no other tasks registered, this function will process
   2181           *              the beacon payload and generate the network descriptor link
   2182           *              list.
   2183           *
   2184           * @param
   2185           *
   2186           * @return      none
   2187           *
   2188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2189          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2190          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   2191            // Pass the beacon Indication to another task if it registers the callback
   2192            // Otherwise, process the beacon notification here.
   2193            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00000F   6009         JZ      ??ZDO_beaconNotifyIndCB_0
   2194            {
   2195              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   2196            }
   \                     ??CrossCallReturnLabel_56:
   \   000014   12....       LCALL   ?CALL_IND
   \   000017   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2197            else
   2198            {
   2199              networkDesc_t *pNwkDesc;
   2200              networkDesc_t *pLastNwkDesc;
   2201              uint8 found = false;
   2202          
   2203              // Add the network to the Network Descriptor List
   2204              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   00001A   90....       MOV     DPTR,#NwkDescList
   \   00001D   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   2205              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_50:
   \   000020   90....       MOV     DPTR,#NwkDescList
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 3,A
   \   00002A   802D         SJMP    ??CrossCallReturnLabel_54
   2206              while (pNwkDesc)
   2207              {
   2208                if ((pNwkDesc->panId == pBeacon->panID) &&
   2209                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00002C   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   68           XRL     A,R0
   \   000037   7003         JNZ     ??ZDO_beaconNotifyIndCB_3
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00003C   7014         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   68           XRL     A,R0
   \   000050   605F         JZ      ??ZDO_beaconNotifyIndCB_5
   2210                {
   2211                  found = true;
   2212                  break;
   2213                }
   2214                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000052   8E..         MOV     ?V0 + 2,R6
   \   000054   8F..         MOV     ?V0 + 3,R7
   2215                pNwkDesc = pNwkDesc->nextDesc;
   \   000056   12....       LCALL   ?Subroutine19 & 0xFFFF
   2216              }
   \                     ??CrossCallReturnLabel_54:
   \   000059   EE           MOV     A,R6
   \   00005A   4F           ORL     A,R7
   \   00005B   70CF         JNZ     ??ZDO_beaconNotifyIndCB_2
   2217          
   2218              // If no existing descriptor found, make a new one and add to the list
   2219              if (found == false)
   2220              {
   2221                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00005D                ; Setup parameters for call to function osal_mem_alloc
   \   00005D   7A16         MOV     R2,#0x16
   \   00005F   7B00         MOV     R3,#0x0
   \   000061   12....       LCALL   ??osal_mem_alloc?relay
   \   000064   8A..         MOV     ?V0 + 4,R2
   \   000066   8B..         MOV     ?V0 + 5,R3
   \   000068   AE..         MOV     R6,?V0 + 4
   \   00006A   AF..         MOV     R7,?V0 + 5
   2222                if ( !pNwkDesc )
   \   00006C   EE           MOV     A,R6
   \   00006D   4F           ORL     A,R7
   \   00006E   7003         JNZ     $+5
   \   000070   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2223                {
   2224                  // Memory alloc failed, discard this beacon
   2225                  return;
   2226                }
   2227          
   2228                // Clear the network descriptor
   2229                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000073                ; Setup parameters for call to function osal_memset
   \   000073   7C16         MOV     R4,#0x16
   \   000075   7D00         MOV     R5,#0x0
   \   000077   7900         MOV     R1,#0x0
   \   000079   12....       LCALL   ??osal_memset?relay
   2230          
   2231                // Initialize the descriptor
   2232                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   74FE         MOV     A,#-0x2
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   04           INC     A
   \   00008C   12....       LCALL   ?Subroutine10 & 0xFFFF
   2233                pNwkDesc->chosenRouterDepth = 0xFF;
   \                     ??CrossCallReturnLabel_1:
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   F0           MOVX    @DPTR,A
   2234          
   2235                // Save new entry into the descriptor list
   2236                if ( !NwkDescList )
   \   000094   90....       MOV     DPTR,#NwkDescList
   \   000097   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00009A   7005         JNZ     ??ZDO_beaconNotifyIndCB_6
   2237                {
   2238                  NwkDescList = pNwkDesc;
   \   00009C   90....       MOV     DPTR,#NwkDescList
   \   00009F   800B         SJMP    ??CrossCallReturnLabel_77
   2239                }
   2240                else
   2241                {
   2242                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000A1   E5..         MOV     A,?V0 + 2
   \   0000A3   2414         ADD     A,#0x14
   \   0000A5   F582         MOV     DPL,A
   \   0000A7   E5..         MOV     A,?V0 + 3
   \   0000A9   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   2243                }
   2244              }
   \                     ??CrossCallReturnLabel_77:
   \   0000AC   EE           MOV     A,R6
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   EF           MOV     A,R7
   \   0000B0   F0           MOVX    @DPTR,A
   2245          
   2246              // Update the descriptor with the incoming beacon
   2247              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000B1   85..82       MOV     DPL,?V0 + 0
   \   0000B4   85..83       MOV     DPH,?V0 + 1
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000C3   A3           INC     DPTR
   \   0000C4   F0           MOVX    @DPTR,A
   2248              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000C5   E5..         MOV     A,?V0 + 0
   \   0000C7   2408         ADD     A,#0x8
   \   0000C9   F8           MOV     R0,A
   \   0000CA   E5..         MOV     A,?V0 + 1
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   F9           MOV     R1,A
   \   0000CF   8882         MOV     DPL,R0
   \   0000D1   8983         MOV     DPH,R1
   \   0000D3   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000D6   12....       LCALL   ?Subroutine12 & 0xFFFF
   2249              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_4:
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   8E82         MOV     DPL,R6
   \   0000DC   8F83         MOV     DPH,R7
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   12....       LCALL   ?Subroutine27 & 0xFFFF
   2250              pNwkDesc->panId          = pBeacon->panID;
   \                     ??CrossCallReturnLabel_26:
   \   0000E3   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000E6   8E82         MOV     DPL,R6
   \   0000E8   8F83         MOV     DPH,R7
   \   0000EA   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   2251              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_88:
   \   0000ED   E5..         MOV     A,?V0 + 0
   \   0000EF   240C         ADD     A,#0xc
   \   0000F1   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000F4   C0E0         PUSH    A
   \   0000F6   EE           MOV     A,R6
   \   0000F7   2413         ADD     A,#0x13
   \   0000F9   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0000FC   D0E0         POP     A
   \   0000FE   F0           MOVX    @DPTR,A
   2252          
   2253              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2254              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   0000FF   8882         MOV     DPL,R0
   \   000101   8983         MOV     DPH,R1
   \   000103   E0           MOVX    A,@DPTR
   \   000104   6401         XRL     A,#0x1
   \   000106   6011         JZ      ??ZDO_beaconNotifyIndCB_7
   2255              {
   2256                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000108                ; Setup parameters for call to function sAddrExtCpy
   \   000108   E5..         MOV     A,?V0 + 0
   \   00010A   240D         ADD     A,#0xd
   \   00010C   FC           MOV     R4,A
   \   00010D   E5..         MOV     A,?V0 + 1
   \   00010F   3400         ADDC    A,#0x0
   \   000111   12....       LCALL   ?Subroutine26 & 0xFFFF
   2257              }
   \                     ??CrossCallReturnLabel_37:
   \   000114   12....       LCALL   ??sAddrExtCpy?relay
   \   000117   800C         SJMP    ??ZDO_beaconNotifyIndCB_8
   2258              else
   2259              {
   2260                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   000119                ; Setup parameters for call to function osal_memset
   \   000119   7C08         MOV     R4,#0x8
   \   00011B   7D00         MOV     R5,#0x0
   \   00011D   79FF         MOV     R1,#-0x1
   \   00011F   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   2261              }
   \                     ??CrossCallReturnLabel_35:
   \   000122   12....       LCALL   ??osal_memset?relay
   2262          
   2263              // check if this device is a better choice to join...
   2264              // ...dont bother checking assocPermit flag is doing a rejoin
   2265              if ( ( pBeacon->LQI > gMIN_TREE_LINK_COST ) &&
   2266                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000125   85..82       MOV     DPL,?V0 + 0
   \   000128   85..83       MOV     DPH,?V0 + 1
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   F8           MOV     R0,A
   \   000137   90....       MOV     DPTR,#gMIN_TREE_LINK_COST
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   C3           CLR     C
   \   00013C   98           SUBB    A,R0
   \   00013D   4003         JC      $+5
   \   00013F   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000142   85..82       MOV     DPL,?V0 + 0
   \   000145   85..83       MOV     DPH,?V0 + 1
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   6401         XRL     A,#0x1
   \   000150   6009         JZ      ??ZDO_beaconNotifyIndCB_9
   \   000152   90....       MOV     DPTR,#_tmpRejoinState
   \   000155   E0           MOVX    A,@DPTR
   \   000156   7003         JNZ     $+5
   \   000158   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2267              {
   2268                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   00015B   7900         MOV     R1,#0x0
   2269                uint8 capacity = FALSE;
   2270          
   2271                if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \   00015D   90....       MOV     DPTR,#_NIB + 96
   \   000160   E0           MOVX    A,@DPTR
   \   000161   6402         XRL     A,#0x2
   \   000163   702D         JNZ     ??ZDO_beaconNotifyIndCB_10
   2272                {
   2273                  if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2274                        (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2275                      ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2276                       (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   000165   8E82         MOV     DPL,R6
   \   000167   8F83         MOV     DPH,R7
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   E0           MOVX    A,@DPTR
   \   000173   C3           CLR     C
   \   000174   98           SUBB    A,R0
   \   000175   500A         JNC     ??ZDO_beaconNotifyIndCB_11
   \   000177   12....       LCALL   ?Subroutine24 & 0xFFFF
   2277                  {
   2278                    selected = TRUE;
   2279                  }
   2280                }
   \                     ??CrossCallReturnLabel_71:
   \   00017A   C3           CLR     C
   \   00017B   9414         SUBB    A,#0x14
   \   00017D   402A         JC      ??ZDO_beaconNotifyIndCB_12
   \   00017F   8029         SJMP    ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   000181   8E82         MOV     DPL,R6
   \   000183   8F83         MOV     DPH,R7
   \   000185   A3           INC     DPTR
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   A3           INC     DPTR
   \   000189   A3           INC     DPTR
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   68           XRL     A,R0
   \   000190   7062         JNZ     ??ZDO_beaconNotifyIndCB_14
   2281                else
   2282                {
   2283                  if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000192   8E82         MOV     DPL,R6
   \   000194   8F83         MOV     DPH,R7
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   F8           MOV     R0,A
   \   0001A2   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0001A5   C3           CLR     C
   \   0001A6   98           SUBB    A,R0
   \   0001A7   504B         JNC     ??ZDO_beaconNotifyIndCB_14
   2284                  {
   2285                    selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001A9   09           INC     R1
   2286                  }
   2287                }
   2288          
   2289                if ( ZSTACK_ROUTER_BUILD )
   2290                {
   2291                  capacity = pBeacon->routerCapacity;
   2292                }
   2293                else if ( ZSTACK_END_DEVICE_BUILD )
   2294                {
   2295                  capacity = pBeacon->deviceCapacity;
   2296                }
   2297          
   2298                if ( (capacity) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001AA   85..82       MOV     DPL,?V0 + 0
   \   0001AD   85..83       MOV     DPH,?V0 + 1
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   6055         JZ      ??ZDO_beaconNotifyIndCB_15
   \   0001BA   E9           MOV     A,R1
   \   0001BB   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001BD   5045         JNC     ??ZDO_beaconNotifyIndCB_16
   2299                {
   2300                  // this is the new chosen router for joining...
   2301                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   0001BF   85..82       MOV     DPL,?V0 + 0
   \   0001C2   85..83       MOV     DPH,?V0 + 1
   \   0001C5   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0001C8   8E82         MOV     DPL,R6
   \   0001CA   8F83         MOV     DPH,R7
   \   0001CC   A3           INC     DPTR
   \   0001CD   A3           INC     DPTR
   \   0001CE   A3           INC     DPTR
   \   0001CF   A3           INC     DPTR
   \   0001D0   A3           INC     DPTR
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   E8           MOV     A,R0
   \   0001D4   F0           MOVX    @DPTR,A
   \   0001D5   A3           INC     DPTR
   \   0001D6   E9           MOV     A,R1
   \   0001D7   12....       LCALL   ?Subroutine12 & 0xFFFF
   2302                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_5:
   \   0001DA   A3           INC     DPTR
   \   0001DB   A3           INC     DPTR
   \   0001DC   A3           INC     DPTR
   \   0001DD   A3           INC     DPTR
   \   0001DE   A3           INC     DPTR
   \   0001DF   A3           INC     DPTR
   \   0001E0   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0001E3   F0           MOVX    @DPTR,A
   2303                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   0001E4   E5..         MOV     A,?V0 + 0
   \   0001E6   240B         ADD     A,#0xb
   \   0001E8   F582         MOV     DPL,A
   \   0001EA   E5..         MOV     A,?V0 + 1
   \   0001EC   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   2304                }
   \                     ??CrossCallReturnLabel_78:
   \   0001EF   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0001F2   A3           INC     DPTR
   \   0001F3   F0           MOVX    @DPTR,A
   2305          
   2306                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   0001F4   85..82       MOV     DPL,?V0 + 0
   \   0001F7   85..83       MOV     DPH,?V0 + 1
   \   0001FA   A3           INC     DPTR
   \   0001FB   A3           INC     DPTR
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   E0           MOVX    A,@DPTR
   \   000202   600B         JZ      ??ZDO_beaconNotifyIndCB_15
   2307                  pNwkDesc->deviceCapacity = 1;
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   000204   8E82         MOV     DPL,R6
   \   000206   8F83         MOV     DPH,R7
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   A3           INC     DPTR
   \   00020B   A3           INC     DPTR
   \   00020C   7401         MOV     A,#0x1
   \   00020E   F0           MOVX    @DPTR,A
   2308          
   2309                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   00020F   85..82       MOV     DPL,?V0 + 0
   \   000212   85..83       MOV     DPH,?V0 + 1
   \   000215   A3           INC     DPTR
   \   000216   A3           INC     DPTR
   \   000217   A3           INC     DPTR
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   E0           MOVX    A,@DPTR
   \   00021C   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2310                  pNwkDesc->routerCapacity = 1;
   \   00021E   8E82         MOV     DPL,R6
   \   000220   8F83         MOV     DPH,R7
   \   000222   A3           INC     DPTR
   \   000223   A3           INC     DPTR
   \   000224   A3           INC     DPTR
   \   000225   7401         MOV     A,#0x1
   \   000227   F0           MOVX    @DPTR,A
   2311              }
   2312            }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   000228   02....       LJMP    ?Subroutine5 & 0xFFFF
   2313          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   240B         ADD     A,#0xb
   \   000004                REQUIRE ??Subroutine43_0
   \   000004                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine44_0
   \   000004                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
   2314          
   2315          /*********************************************************************
   2316           * @fn          ZDO_StartRouterConfirmCB
   2317           *
   2318           * @brief       This function reports the results of the request to
   2319           *              start functioning as a router in a network.
   2320           *
   2321           * @param       Status - Result of NLME_StartRouterRequest()
   2322           *
   2323           * @return      none
   2324           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2325          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2326          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2327            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2328          
   2329            if ( Status == ZSUCCESS )
   \   00000A   7019         JNZ     ??ZDO_StartRouterConfirmCB_0
   2330            {
   2331              // LED on shows Router started
   2332              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   ??HalLedSet?relay
   2333              // LED off forgets HOLD_AUTO_START
   2334              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   ??HalLedSet?relay
   2335              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   700C         JNZ     ??ZDO_StartRouterConfirmCB_1
   2336              {
   2337                // Began with HOLD_AUTO_START
   2338                devState = DEV_END_DEVICE;
   \   000020   7406         MOV     A,#0x6
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8007         SJMP    ??ZDO_StartRouterConfirmCB_1
   2339              }
   2340              //SendBindRequest();//×Ô¶¯¿ªÊ¼°ó¶¨ microdjg
   2341              //osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT,3000 );
   2342            }
   2343          #if defined(BLINK_LEDS)
   2344            else
   2345            {
   2346              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000025                ; Setup parameters for call to function HalLedSet
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7904         MOV     R1,#0x4
   \   000029   12....       LCALL   ??HalLedSet?relay
   2347            }
   2348          #endif
   2349          
   2350            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00002C                ; Setup parameters for call to function osal_set_event
   \   00002C   7A20         MOV     R2,#0x20
   \   00002E   02....       LJMP    ?Subroutine0 & 0xFFFF
   2351          }
   2352          
   2353          /*********************************************************************
   2354           * @fn          ZDO_JoinConfirmCB
   2355           *
   2356           * @brief       This function allows the next hight layer to be notified
   2357           *              of the results of its request to join itself or another
   2358           *              device to a network.
   2359           *
   2360           * @param       Status - Result of NLME_JoinRequest()
   2361           *
   2362           * @return      none
   2363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2364          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2365          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   2366            (void)PanId;  // remove if this parameter is used.
   2367          
   2368            nwkStatus = (byte)Status;
   \   00000C   90....       MOV     DPTR,#nwkStatus
   \   00000F   F0           MOVX    @DPTR,A
   2369          
   2370            if ( Status == ZSUCCESS )
   \   000010   7019         JNZ     ??ZDO_JoinConfirmCB_0
   2371            {
   2372              // LED on shows device joined
   2373              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   000012                ; Setup parameters for call to function HalLedSet
   \   000012   7A01         MOV     R2,#0x1
   \   000014   7904         MOV     R1,#0x4
   \   000016   12....       LCALL   ??HalLedSet?relay
   2374              // LED off forgets HOLD_AUTO_START
   2375              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000019                ; Setup parameters for call to function HalLedSet
   \   000019   7A00         MOV     R2,#0x0
   \   00001B   7908         MOV     R1,#0x8
   \   00001D   12....       LCALL   ??HalLedSet?relay
   2376              if ( (devState == DEV_HOLD) )
   \   000020   90....       MOV     DPTR,#devState
   \   000023   E0           MOVX    A,@DPTR
   \   000024   700C         JNZ     ??ZDO_JoinConfirmCB_1
   2377              {
   2378                // Began with HOLD_AUTO_START
   2379                devState = DEV_NWK_JOINING;
   \   000026   7403         MOV     A,#0x3
   \   000028   F0           MOVX    @DPTR,A
   \   000029   8007         SJMP    ??ZDO_JoinConfirmCB_1
   2380              }
   2381          
   2382              if ( !ZG_SECURE_ENABLED )
   2383              {
   2384                // Notify to save info into NV
   2385                ZDApp_NVUpdate();
   2386              }
   2387              
   2388              //SendBindRequest();//×Ô¶¯¿ªÊ¼°ó¶¨ microdjg
   2389             ////////osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT,3000 );//×Ô¶¯¿ªÊ¼°ó¶¨ microdjg
   2390            }
   2391            else
   2392            {
   2393          #if defined(BLINK_LEDS)
   2394              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   00002B                ; Setup parameters for call to function HalLedSet
   \   00002B   7A04         MOV     R2,#0x4
   \   00002D   7904         MOV     R1,#0x4
   \   00002F   12....       LCALL   ??HalLedSet?relay
   2395          #endif
   2396            }
   2397          
   2398            // Pass the join confirm to higher layer if callback registered
   2399            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_1:
   \   000032   90....       MOV     DPTR,#zdoCBFunc + 8
   \   000035   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000038   6033         JZ      ??ZDO_JoinConfirmCB_2
   2400            {
   2401              zdoJoinCnf_t joinCnf;
   2402          
   2403              joinCnf.status = Status;
   \   00003A   EE           MOV     A,R6
   \   00003B   85..82       MOV     DPL,?XSP + 0
   \   00003E   85..83       MOV     DPH,?XSP + 1
   \   000041   F0           MOVX    @DPTR,A
   2404              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   000042   90....       MOV     DPTR,#_NIB + 20
   \   000045   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E8           MOV     A,R0
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   E9           MOV     A,R1
   \   000051   F0           MOVX    @DPTR,A
   2405              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \   000052   90....       MOV     DPTR,#_NIB + 23
   \   000055   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   2406          
   2407              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   2408            }
   \                     ??CrossCallReturnLabel_41:
   \   000058   7403         MOV     A,#0x3
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E8           MOV     A,R0
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   E9           MOV     A,R1
   \   000061   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000064   90....       MOV     DPTR,#zdoCBFunc + 8
   \   000067   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00006A   12....       LCALL   ?CALL_IND
   2409          
   2410            // Notify ZDApp
   2411            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_2:
   \   00006D                ; Setup parameters for call to function ZDApp_SendMsg
   \   00006D   7C00         MOV     R4,#0x0
   \   00006F   7D00         MOV     R5,#0x0
   \   000071   7B02         MOV     R3,#0x2
   \   000073   7A02         MOV     R2,#0x2
   \   000075   90....       MOV     DPTR,#ZDAppTaskID
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F9           MOV     R1,A
   \   00007A   12....       LCALL   ??ZDApp_SendMsg?relay
   2412          
   2413          }
   \   00007D                REQUIRE ?Subroutine6
   \   00007D                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7405         MOV     A,#0x5
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   2414          
   2415          /*********************************************************************
   2416           * @fn          ZDO_AddrChangeIndicationCB
   2417           *
   2418           * @brief       This function notifies the application that this
   2419           *              device's address has changed.  Could happen in
   2420           *              a network with stochastic addressing (PRO).
   2421           *
   2422           * @param       newAddr - the new address
   2423           *
   2424           * @return      none
   2425           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2426          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2427          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   2428            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2429            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   2430          
   2431            // Notify to save info into NV
   2432            ZDApp_NVUpdate();
   2433          
   2434            // Notify the applications
   2435            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_51:
   \   00000F                ; Setup parameters for call to function osal_set_event
   \   00000F   7A10         MOV     R2,#0x10
   \   000011   7B00         MOV     R3,#0x0
   \   000013   90....       MOV     DPTR,#ZDAppTaskID
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   ??osal_set_event?relay
   \   00001B   8033         SJMP    ??ZDO_AddrChangeIndicationCB_0
   2436          
   2437            while (pItem != NULL)
   2438            {
   2439              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   00001D   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6026         JZ      ??ZDO_AddrChangeIndicationCB_2
   2440              {
   2441                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   000023                ; Setup parameters for call to function osal_msg_allocate
   \   000023   7A04         MOV     R2,#0x4
   \   000025   7B00         MOV     R3,#0x0
   \   000027   12....       LCALL   ??osal_msg_allocate?relay
   2442                if (pZDOAddrChangeMsg != NULL)
   \   00002A   EA           MOV     A,R2
   \   00002B   4B           ORL     A,R3
   \   00002C   601B         JZ      ??ZDO_AddrChangeIndicationCB_2
   2443                {
   2444                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   74D6         MOV     A,#-0x2a
   \   000034   F0           MOVX    @DPTR,A
   2445                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E5..         MOV     A,?V0 + 0
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   E5..         MOV     A,?V0 + 1
   \   00003D   F0           MOVX    @DPTR,A
   2446                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   \   00003E                ; Setup parameters for call to function osal_msg_send
   \   00003E   12....       LCALL   ?Subroutine16 & 0xFFFF
   2447                }
   2448              }
   \                     ??CrossCallReturnLabel_65:
   \   000041   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   ??osal_msg_send?relay
   2449              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_2:
   \   000049   12....       LCALL   ?Subroutine17 & 0xFFFF
   2450            }
   \                     ??CrossCallReturnLabel_45:
   \   00004C   E8           MOV     A,R0
   \   00004D   FE           MOV     R6,A
   \   00004E   E9           MOV     A,R1
   \   00004F   FF           MOV     R7,A
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000050   EE           MOV     A,R6
   \   000051   4F           ORL     A,R7
   \   000052   70C9         JNZ     ??ZDO_AddrChangeIndicationCB_1
   2451          
   2452            // Send out a device announce
   2453            ZDApp_AnnounceNewAddress();
   \   000054                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000054   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   2454          }
   \   000057   02....       LJMP    ??Subroutine31_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine40_0
   \   000005                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine41_0
   \   000001                ; // Fall through to label ??Subroutine41_0
   2455          
   2456          /*********************************************************************
   2457           * @fn          ZDO_JoinIndicationCB
   2458           *
   2459           * @brief       This function allows the next higher layer of a
   2460           *              coordinator to be notified of a remote join request.
   2461           *
   2462           * @param       ShortAddress - 16-bit address
   2463           * @param       ExtendedAddress - IEEE (64-bit) address
   2464           * @param       CapabilityFlags - Association Capability Flags
   2465           * @param       type - of joining -
   2466           *                          NWK_ASSOC_JOIN
   2467           *                          NWK_ASSOC_REJOIN_UNSECURE
   2468           *                          NWK_ASSOC_REJOIN_SECURE
   2469           *
   2470           * @return      ZStatus_t
   2471           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2472          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2473                                          uint8 CapabilityFlags, uint8 type)
   2474          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2475            (void)ShortAddress;
   2476            (void)ExtendedAddress;
   2477          #if ZDO_NV_SAVE_RFDs
   2478            (void)CapabilityFlags;
   2479          
   2480          #else  // if !ZDO_NV_SAVE_RFDs
   2481            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2482          #endif
   2483            {
   2484              ZDApp_NVUpdate();  // Notify to save info into NV.
   2485            }
   2486          
   2487            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2488            {
   2489              if (type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE)
   2490              {
   2491                osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
   2492              }
   2493            }
   2494          
   2495            return ZSuccess;
   \   000000                REQUIRE ?Subroutine4
   \   000000                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   2496          }
   2497          
   2498          /*********************************************************************
   2499           * @fn          ZDO_ConcentratorIndicationCB
   2500           *
   2501           * @brief       This function allows the next higher layer of a
   2502           *              device to be notified of existence of the concentrator.
   2503           *
   2504           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2505           * @param       extAddr - pointer to extended Address
   2506           *                        NULL if not available
   2507           * @param       pktCost - PktCost from RREQ
   2508           *
   2509           * @return      void
   2510           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2511          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2512          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2513            zdoConcentratorInd_t conInd;
   2514          
   2515            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL   ?Subroutine13 & 0xFFFF
   2516            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_91:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
   2517            conInd.pktCost = pktCost;
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
   2518          
   2519            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000024   6013         JZ      ??ZDO_ConcentratorIndicationCB_0
   2520            {
   2521              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   AA82         MOV     R2,DPL
   \   00002E   AB83         MOV     R3,DPH
   \   000030   90....       MOV     DPTR,#zdoCBFunc + 3
   \   000033   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   2522            }
   \                     ??CrossCallReturnLabel_57:
   \   000036   12....       LCALL   ?CALL_IND
   2523          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   000039   02....       LJMP    ?Subroutine6 & 0xFFFF
   2524          
   2525          /*********************************************************************
   2526           * @fn          ZDO_LeaveCnf
   2527           *
   2528           * @brief       This function allows the next higher layer to be
   2529           *              notified of the results of its request for this or
   2530           *              a child device to leave the network.
   2531           *
   2532           * @param       cnf - NLME_LeaveCnf_t
   2533           *
   2534           * @return      none
   2535           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2536          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2537          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2538            // Check for this device
   2539            if ( osal_ExtAddrEqual( cnf->extAddr,
   2540                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function sAddrExtCmp
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00000C   EA           MOV     A,R2
   \   00000D   FC           MOV     R4,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FD           MOV     R5,A
   \   000010   EE           MOV     A,R6
   \   000011   2402         ADD     A,#0x2
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   3400         ADDC    A,#0x0
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   ??sAddrExtCmp?relay
   \   00001B   E9           MOV     A,R1
   \   00001C   6401         XRL     A,#0x1
   \   00001E   701F         JNZ     ??ZDO_LeaveCnf_0
   2541            {
   2542              // Pass the leave confirm to higher layer if callback registered
   2543              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2544                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   000020   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000023   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000026   6011         JZ      ??ZDO_LeaveCnf_1
   \   000028                ; Setup parameters for indirect call
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   EF           MOV     A,R7
   \   00002B   FB           MOV     R3,A
   \   00002C   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00002F   12....       LCALL   ?CALL_IND
   \   000032   8B..         MOV     ?V0 + 1,R3
   \   000034   EA           MOV     A,R2
   \   000035   45..         ORL     A,?V0 + 1
   \   000037   7006         JNZ     ??ZDO_LeaveCnf_0
   2545              {
   2546                // Prepare to leave with reset
   2547                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   000039                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000039   12....       LCALL   ?Subroutine22 & 0xFFFF
   2548              }
   2549            }
   \                     ??CrossCallReturnLabel_75:
   \   00003C   12....       LCALL   ??ZDApp_LeaveReset?relay
   2550            else if ( ZSTACK_ROUTER_BUILD )
   2551            {
   2552              // Remove device address(optionally descendents) from data
   2553              ZDApp_LeaveUpdate( cnf->dstAddr,
   2554                                 cnf->extAddr,
   2555                                 cnf->removeChildren );
   2556            }
   2557          }
   \                     ??ZDO_LeaveCnf_0:
   \   00003F   02....       LJMP    ??Subroutine37_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
   2558          
   2559          /*********************************************************************
   2560           * @fn          ZDO_LeaveInd
   2561           *
   2562           * @brief       This function allows the next higher layer of a
   2563           *              device to be notified of a remote leave request or
   2564           *              indication.
   2565           *
   2566           * @param       ind - NLME_LeaveInd_t
   2567           *
   2568           * @return      none
   2569           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2570          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2571          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2572            uint8 leave;
   2573          
   2574          
   2575            // Parent is requesting the leave - NWK layer filters out illegal
   2576            // requests
   2577            if ( ind->request == TRUE )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6401         XRL     A,#0x1
   \   00001A   602F         JZ      ??ZDO_LeaveInd_0
   2578            {
   2579              // Notify network of leave
   2580              if ( ZSTACK_ROUTER_BUILD )
   2581              {
   2582                NLME_LeaveRsp_t rsp;
   2583                rsp.rejoin         = ind->rejoin;
   2584                rsp.removeChildren = ind->removeChildren;
   2585                NLME_LeaveRsp( &rsp );
   2586              }
   2587          
   2588              // Prepare to leave with reset
   2589              ZDApp_LeaveReset( ind->rejoin );
   2590            }
   2591            else
   2592            {
   2593              leave = FALSE;
   2594          
   2595              // Check if this device needs to leave as a child or descendent
   2596              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \   00001C                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00001C   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   00001F   8A..         MOV     ?V0 + 0,R2
   \   000021   8B..         MOV     ?V0 + 1,R3
   \   000023   A8..         MOV     R0,?V0 + 0
   \   000025   A9..         MOV     R1,?V0 + 1
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   68           XRL     A,R0
   \   00002D   7003         JNZ     ??ZDO_LeaveInd_1
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   69           XRL     A,R1
   \                     ??ZDO_LeaveInd_1:
   \   000032   7022         JNZ     ??ZDO_LeaveInd_2
   2597              {
   2598                if ( ( ind->removeChildren == TRUE               ) ||
   2599                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2600                       NODETYPE_DEVICE                           )    )
   \   000034   EE           MOV     A,R6
   \   000035   240B         ADD     A,#0xb
   \   000037   F582         MOV     DPL,A
   \   000039   EF           MOV     A,R7
   \   00003A   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   2601                {
   2602                  leave = TRUE;
   2603                }
   2604              }
   \                     ??CrossCallReturnLabel_66:
   \   00003D   6401         XRL     A,#0x1
   \   00003F   600A         JZ      ??ZDO_LeaveInd_0
   \   000041   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000044   E0           MOVX    A,@DPTR
   \   000045   5407         ANL     A,#0x7
   \   000047   6402         XRL     A,#0x2
   \   000049   700B         JNZ     ??ZDO_LeaveInd_2
   2605              else if ( ind->removeChildren == TRUE )
   2606              {
   2607                // Check NWK address allocation algorithm
   2608                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2609              }
   2610          
   2611              if ( leave == TRUE )
   2612              {
   2613                // Prepare to leave with reset
   2614                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_0:
   \   00004B                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00004B   EE           MOV     A,R6
   \   00004C   240C         ADD     A,#0xc
   \   00004E   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   2615              }
   \                     ??CrossCallReturnLabel_73:
   \   000051   12....       LCALL   ??ZDApp_LeaveReset?relay
   \   000054   8015         SJMP    ??ZDO_LeaveInd_3
   2616              else
   2617              {
   2618                // Remove device address(optionally descendents) from data
   2619                ZDApp_LeaveUpdate( ind->srcAddr,
   2620                                   ind->extAddr,
   2621                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_2:
   \   000056                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000056   12....       LCALL   ?Subroutine22 & 0xFFFF
   2622              }
   2623            }
   \                     ??CrossCallReturnLabel_76:
   \   000059   EE           MOV     A,R6
   \   00005A   2402         ADD     A,#0x2
   \   00005C   FC           MOV     R4,A
   \   00005D   EF           MOV     A,R7
   \   00005E   3400         ADDC    A,#0x0
   \   000060   FD           MOV     R5,A
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000068   12....       LCALL   ??ZDApp_LeaveUpdate?relay
   2624          
   2625            // Pass the leave indication to higher layer if callback registered.
   2626            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_3:
   \   00006B   90....       MOV     DPTR,#zdoCBFunc + 12
   \   00006E   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000071   600A         JZ      ??ZDO_LeaveInd_4
   2627            {
   2628              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   000073                ; Setup parameters for indirect call
   \   000073   EE           MOV     A,R6
   \   000074   FA           MOV     R2,A
   \   000075   EF           MOV     A,R7
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   2629            }
   \                     ??CrossCallReturnLabel_59:
   \   00007A   12....       LCALL   ?CALL_IND
   2630          }
   \                     ??ZDO_LeaveInd_4:
   \   00007D   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   2631          
   2632          /*********************************************************************
   2633           * @fn          ZDO_SyncIndicationCB
   2634           *
   2635           * @brief       This function allows the next higher layer of a
   2636           *              coordinator to be notified of a loss of synchronization
   2637           *                          with the parent/child device.
   2638           *
   2639           * @param       type: 0 - child; 1 - parent
   2640           *
   2641           *
   2642           * @return      none
   2643           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2644          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2645          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2646            (void)shortAddr;  // Remove this line if this parameter is used.
   2647          
   2648            if ( ZSTACK_END_DEVICE_BUILD
   2649              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2650            {
   2651              if ( type == 1 )
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   7013         JNZ     ??ZDO_SyncIndicationCB_0
   2652              {
   2653                // We lost contact with our parent.  Clear the neighbor Table.
   2654                nwkNeighborInitTable();
   \   00000C                ; Setup parameters for call to function nwkNeighborInitTable
   \   00000C   12....       LCALL   ??nwkNeighborInitTable?relay
   2655          
   2656                // Start the rejoin process.
   2657                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   00000F                ; Setup parameters for call to function ZDApp_SendMsg
   \   00000F   7C00         MOV     R4,#0x0
   \   000011   7D00         MOV     R5,#0x0
   \   000013   7B02         MOV     R3,#0x2
   \   000015   7A03         MOV     R2,#0x3
   \   000017   90....       MOV     DPTR,#ZDAppTaskID
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   ??ZDApp_SendMsg?relay
   2658              }
   2659            }
   2660          }
   \                     ??ZDO_SyncIndicationCB_0:
   \   00001F   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   2661          
   2662          /*********************************************************************
   2663           * @fn          ZDO_ManytoOneFailureIndicationCB
   2664           *
   2665           * @brief       This function allows the next higher layer of a
   2666           *              concentrator to be notified of a many-to-one route
   2667           *              failure.
   2668           *
   2669           * @param       none
   2670           *
   2671           *
   2672           * @return      none
   2673           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2674          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2675          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2676            // By default, the concentrator automatically redo many-to-one route
   2677            // discovery to update all many-to-one routes in the network
   2678            // If you want anything processing other than the default,
   2679            // please replace the following code.
   2680          
   2681            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   ??RTG_MTORouteReq?relay
   2682          }
   \   000007   02....       LJMP    ?Subroutine3 & 0xFFFF
   2683          
   2684          /*********************************************************************
   2685           * @fn          ZDO_PollConfirmCB
   2686           *
   2687           * @brief       This function allows the next higher layer to be
   2688           *              notified of a Poll Confirm.
   2689           *
   2690           * @param       none
   2691           *
   2692           * @return      none
   2693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2694          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2695          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2696            (void)status;  // Remove this line if this parameter is used.
   2697            return;
   \   000000   02....       LJMP    ?BRET
   2698          }
   2699          
   2700          /******************************************************************************
   2701           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2702           *
   2703           * @brief       Stub routine implemented by NHLE. NHLE should call
   2704           *              <AddrMgrWriteNV> when appropriate.
   2705           *
   2706           * @param       none
   2707           *
   2708           * @return      none
   2709           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2710          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   2711          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2712          #if defined ( NV_RESTORE )
   2713            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   2714            {
   2715              // Trigger to save info into NV
   2716              ZDApp_NVUpdate();
   2717            }
   2718          #endif
   2719          }
   \   000000   02....       LJMP    ?BRET
   2720          
   2721          /*********************************************************************
   2722           * Call Back Functions from Security  - API
   2723           */
   2724          
   2725           /*********************************************************************
   2726           * @fn          ZDO_UpdateDeviceIndication
   2727           *
   2728           * @brief       This function notifies the "Trust Center" of a
   2729           *              network when a device joins or leaves the network.
   2730           *
   2731           * @param       extAddr - pointer to 64 bit address of new device
   2732           * @param       status  - 0 if a new device joined securely
   2733           *                      - 1 if a new device joined un-securely
   2734           *                      - 2 if a device left the network
   2735           *
   2736           * @return      true if newly joined device should be allowed to
   2737           *                                              remain on network
   2738           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2739          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   2740          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2741            // can implement a network access policy based on the
   2742            // IEEE address of newly joining devices...
   2743            (void)extAddr;
   2744            (void)status;
   2745          
   2746            return ZSuccess;
   \   000000   02....       LJMP    ?Subroutine4 & 0xFFFF
   2747          }
   2748          
   2749          /*********************************************************************
   2750           * @fn          ZDApp_InMsgCB
   2751           *
   2752           * @brief       This function is called to pass up any message that is
   2753           *              not yet supported.  This allows for the developer to
   2754           *              support features themselves..
   2755           *
   2756           * @return      none
   2757           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2758          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   2759          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2760            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   5480         ANL     A,#0x80
   \   000010   7054         JNZ     ??ZDApp_InMsgCB_0
   2761            {
   2762              // Handle the response message
   2763            }
   2764            else
   2765            {
   2766              // Handle the request message by sending a generic "not supported".
   2767              // Device Announce doesn't have a response.
   2768              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000012   EE           MOV     A,R6
   \   000013   240B         ADD     A,#0xb
   \   000015   F582         MOV     DPL,A
   \   000017   EF           MOV     A,R7
   \   000018   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00001B   7049         JNZ     ??ZDApp_InMsgCB_0
   \   00001D   EE           MOV     A,R6
   \   00001E   240C         ADD     A,#0xc
   \   000020   F582         MOV     DPL,A
   \   000022   EF           MOV     A,R7
   \   000023   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000026   6413         XRL     A,#0x13
   \   000028   7002         JNZ     ??ZDApp_InMsgCB_1
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \                     ??ZDApp_InMsgCB_1:
   \   00002C   6038         JZ      ??ZDApp_InMsgCB_0
   2769              {
   2770                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   2771                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   00002E                ; Setup parameters for call to function ZDP_GenericRsp
   \   00002E   12....       LCALL   ?Subroutine23 & 0xFFFF
   2772              }
   2773            }
   \                     ??CrossCallReturnLabel_23:
   \   000031   4480         ORL     A,#0x80
   \   000033   F5..         MOV     ?V0 + 1,A
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   E4           CLR     A
   \   00003B   F5..         MOV     ?V0 + 0,A
   \   00003D   F5..         MOV     ?V0 + 1,A
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   EE           MOV     A,R6
   \   000045   240E         ADD     A,#0xe
   \   000047   F582         MOV     DPL,A
   \   000049   EF           MOV     A,R7
   \   00004A   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00004D   FD           MOV     R5,A
   \   00004E   7C84         MOV     R4,#-0x7c
   \   000050   EE           MOV     A,R6
   \   000051   2402         ADD     A,#0x2
   \   000053   FA           MOV     R2,A
   \   000054   EF           MOV     A,R7
   \   000055   3400         ADDC    A,#0x0
   \   000057   FB           MOV     R3,A
   \   000058   EE           MOV     A,R6
   \   000059   240F         ADD     A,#0xf
   \   00005B   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00005E   12....       LCALL   ??ZDP_GenericRsp?relay
   \   000061   7404         MOV     A,#0x4
   \   000063   12....       LCALL   ?DEALLOC_XSTACK8
   2774          }
   \                     ??ZDApp_InMsgCB_0:
   \   000066   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   2775          
   2776          
   2777          /*********************************************************************
   2778           * @fn      ZDApp_ChangeMatchDescRespPermission()
   2779           *
   2780           * @brief   Changes the Match Descriptor Response permission.
   2781           *
   2782           * @param   endpoint - endpoint to allow responses
   2783           * @param   action - true to allow responses, false to not
   2784           *
   2785           * @return  none
   2786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2787          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   2788          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2789            // Store the action
   2790            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL   ??afSetMatch?relay
   2791          }
   \   000008   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   2792          
   2793          /*********************************************************************
   2794           * @fn      ZDApp_NetworkInit()
   2795           *
   2796           * @brief   Used to start the network joining process
   2797           *
   2798           * @param   delay - mSec delay to wait before starting
   2799           *
   2800           * @return  none
   2801           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2802          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   2803          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2804            if ( delay )
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6012         JZ      ??ZDApp_NetworkInit_0
   2805            {
   2806              // Wait awhile before starting the device
   2807              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV     A,R2
   \   000009   FC           MOV     R4,A
   \   00000A   EB           MOV     A,R3
   \   00000B   FD           MOV     R5,A
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   90....       MOV     DPTR,#ZDAppTaskID
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   ??osal_start_timerEx?relay
   \   000018   800C         SJMP    ??ZDApp_NetworkInit_1
   2808            }
   2809            else
   2810            {
   2811              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   7A01         MOV     R2,#0x1
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   90....       MOV     DPTR,#ZDAppTaskID
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F9           MOV     R1,A
   \   000023   12....       LCALL   ??osal_set_event?relay
   2812            }
   2813          }
   \                     ??ZDApp_NetworkInit_1:
   \   000026   02....       LJMP    ?Subroutine3 & 0xFFFF
   2814          
   2815          /*********************************************************************
   2816           * @fn      ZDApp_NwkStateUpdateCB()
   2817           *
   2818           * @brief   This function notifies that this device's network
   2819           *          state info has been changed.
   2820           *
   2821           * @param   none
   2822           *
   2823           * @return  none
   2824           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2825          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   2826          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2827            // Notify to save info into NV
   2828            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B02         MOV     R3,#0x2
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_get_timeoutEx?relay
   2829            {
   2830              // Trigger to save info into NV
   2831              ZDApp_NVUpdate();
   2832            }
   2833          }
   \   000010   02....       LJMP    ?Subroutine3 & 0xFFFF
   2834          
   2835          /*********************************************************************
   2836           * @fn      ZDApp_NodeProfileSync()
   2837           *
   2838           * @brief   Sync node with stack profile.
   2839           *
   2840           * @param   stackProfile - stack profile of the network to join
   2841           *
   2842           * @return  none
   2843           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2844          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   2845          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2846            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   501A         JNC     ??ZDApp_NodeProfileSync_0
   2847            {
   2848              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   6013         JZ      ??ZDApp_NodeProfileSync_0
   2849              {
   2850                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   4402         ORL     A,#0x2
   \   00001E   F0           MOVX    @DPTR,A
   2851                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00001F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   740C         MOV     A,#0xc
   \   000024   F0           MOVX    @DPTR,A
   2852                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000025                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   ??NLME_SetBroadcastFilter?relay
   2853              }
   2854            }
   2855          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000029   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   2856          
   2857          /*********************************************************************
   2858           * @fn      ZDApp_StartJoiningCycle()
   2859           *
   2860           * @brief   Starts the joining cycle of a device.  This will only
   2861           *          continue an already started (or stopped) joining cycle.
   2862           *
   2863           * @param   none
   2864           *
   2865           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2866           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2867          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   2868          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2869            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   2870            {
   2871              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   2872              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??ZDApp_NetworkInit?relay
   2873          
   2874              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   2875            }
   2876            else
   2877              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ?Subroutine3 & 0xFFFF
   2878          }
   2879          
   2880          /*********************************************************************
   2881           * @fn      ZDApp_StopJoiningCycle()
   2882           *
   2883           * @brief   Stops the joining or rejoining process of a device.
   2884           *
   2885           * @param   none
   2886           *
   2887           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2888           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2889          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   2890          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2891            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   2892            {
   2893              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   2894              return ( TRUE );
   \   000016   7901         MOV     R1,#0x1
   \   000018   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   2895            }
   2896            else
   2897              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP    ?Subroutine3 & 0xFFFF
   2898          }
   2899          
   2900          /*********************************************************************
   2901           * @fn      ZDApp_AnnounceNewAddress()
   2902           *
   2903           * @brief   Send Device Announce and hold all transmissions for
   2904           *          new address timeout.
   2905           *
   2906           * @param   none
   2907           *
   2908           * @return  none
   2909           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2910          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   2911          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2912          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2913            // Turn off data request hold
   2914            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   ??APSME_HoldDataRequests?relay
   2915          #endif
   2916          
   2917            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   2918                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00000F   8A..         MOV     ?V0 + 0,R2
   \   000011   8B..         MOV     ?V0 + 1,R3
   \   000013   AE..         MOV     R6,?V0 + 0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV     ?V0 + 0,#0x0
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   EE           MOV     A,R6
   \   000026   FC           MOV     R4,A
   \   000027   AD..         MOV     R5,?V0 + 1
   \   000029   12....       LCALL   ??ZDP_DeviceAnnce?relay
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   2919          
   2920          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2921            // Setup the timeout
   2922            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000031                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000031   7A00         MOV     R2,#0x0
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   ??APSME_HoldDataRequests?relay
   2923          #endif
   2924          }
   \   000038   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   2925          
   2926          /*********************************************************************
   2927           * @fn          ZDApp_NVUpdate
   2928           *
   2929           * @brief       Set the NV Update Timer.
   2930           *
   2931           * @param       none
   2932           *
   2933           * @return      none
   2934           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2935          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   2936          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2937          #if defined ( NV_RESTORE )
   2938            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   2939          #endif
   2940          }
   \   000000   02....       LJMP    ?BRET
   2941          
   2942          /*********************************************************************
   2943           * @fn      ZDApp_CoordStartPANIDConflictCB()
   2944           *
   2945           * @brief   Returns a PAN ID for the network layer to use during
   2946           *          a coordinator start and there is another network with
   2947           *          the intended PANID.
   2948           *
   2949           * @param   panid - the intended PAN ID
   2950           *
   2951           * @return  PANID to try
   2952           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2953          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   2954          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2955            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   02....       LJMP    ?BRET
   2956          }
   2957          
   2958          /*********************************************************************
   2959           * @fn          ZDO_SrcRtgIndCB
   2960           *
   2961           * @brief       This function notifies the ZDO available src route record received.
   2962           *
   2963           * @param       srcAddr - source address of the source route
   2964           * @param       relayCnt - number of devices in the relay list
   2965           * @param       relayList - relay list of the source route
   2966           *
   2967           * @return      none
   2968           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2969          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   2970          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2971            zdoSrcRtg_t srcRtg;
   2972          
   2973            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL   ?Subroutine13 & 0xFFFF
   2974            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_92:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   2975            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   2976          
   2977            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc
   \   000021   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000024   6013         JZ      ??ZDO_SrcRtgIndCB_0
   2978            {
   2979              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   AA82         MOV     R2,DPL
   \   00002E   AB83         MOV     R3,DPH
   \   000030   90....       MOV     DPTR,#zdoCBFunc + 1
   \   000033   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   2980            }
   \                     ??CrossCallReturnLabel_60:
   \   000036   12....       LCALL   ?CALL_IND
   2981          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000039   02....       LJMP    ?Subroutine6 & 0xFFFF
   2982          
   2983          /*********************************************************************
   2984           * @fn          ZDApp_InitZdoCBFunc
   2985           *
   2986           * @brief       Call this function to initialize zdoCBFunc[]
   2987           *
   2988           * @param       none
   2989           *
   2990           * @return      none
   2991           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2992          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   2993          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2994            uint8 i;
   2995          
   2996            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   2997            {
   2998              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   12....       LCALL   ?Subroutine25 & 0xFFFF
   2999            }
   \                     ??CrossCallReturnLabel_24:
   \   000009   0A           INC     R2
   \   00000A   EA           MOV     A,R2
   \   00000B   C3           CLR     C
   \   00000C   9407         SUBB    A,#0x7
   \   00000E   40F6         JC      ??ZDApp_InitZdoCBFunc_0
   3000          }
   \   000010   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EA           MOV     A,R2
   \   000001   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#zdoCBFunc & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET
   3001          
   3002          /*********************************************************************
   3003           * @fn          ZDO_RegisterForZdoCB
   3004           *
   3005           * @brief       Call this function to register the higher layer (for
   3006           *              example, the Application layer or MT layer) with ZDO
   3007           *              callbacks to get notified of some ZDO indication like
   3008           *              existence of a concentrator or receipt of a source
   3009           *              route record.
   3010           *
   3011           * @param       indID - ZDO Indication ID
   3012           * @param       pFn   - Callback function pointer
   3013           *
   3014           * @return      ZSuccess - successful, ZInvalidParameter if not
   3015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3016          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3017          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   3018            // Check the range of the indication ID
   3019            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9407         SUBB    A,#0x7
   \   000009   500B         JNC     ??ZDO_RegisterForZdoCB_0
   3020            {
   3021              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV     A,R4
   \   00000C   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00000F   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   3022              return ZSuccess;
   \                     ??CrossCallReturnLabel_89:
   \   000012   7900         MOV     R1,#0x0
   \   000014   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3023            }
   3024          
   3025            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000016   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000018   02....       LJMP    ?Subroutine3 & 0xFFFF
   3026          }
   3027          
   3028          /*********************************************************************
   3029           * @fn          ZDO_DeregisterForZdoCB
   3030           *
   3031           * @brief       Call this function to de-register the higher layer (for
   3032           *              example, the Application layer or MT layer) with ZDO
   3033           *              callbacks to get notified of some ZDO indication like
   3034           *              existence of a concentrator or receipt of a source
   3035           *              route record.
   3036           *
   3037           * @param       indID - ZDO Indication ID
   3038           *
   3039           * @return      ZSuccess - successful, ZInvalidParameter if not
   3040           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3041          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3042          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   3043            // Check the range of the indication ID
   3044            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9407         SUBB    A,#0x7
   \   000009   5006         JNC     ??ZDO_DeregisterForZdoCB_0
   3045            {
   3046              zdoCBFunc[indID] = NULL;
   \   00000B   12....       LCALL   ?Subroutine25 & 0xFFFF
   3047              return ZSuccess;
   \                     ??CrossCallReturnLabel_25:
   \   00000E   F9           MOV     R1,A
   \   00000F   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3048            }
   3049          
   3050            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000011   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000013   02....       LJMP    ?Subroutine3 & 0xFFFF
   3051          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SecInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDOInitDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ReadNetworkRestoreState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppDetermineDeviceType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkStartEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceAuthEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNetworkStateEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNetworkState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitUserDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppCheckForHoldKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessOSALMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RegisterCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessNetworkJoin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerStart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerCancel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlBypass?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlStartup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkDiscoveryReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_JoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceConfigured?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendEventMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkDiscoveryConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkDescListProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkFormationConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_beaconNotifyIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartRouterConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AddrChangeIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConcentratorIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveCnf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SyncIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ManytoOneFailureIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_PollConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AddrMgrWriteNVRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateDeviceIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ChangeMatchDescRespPermission?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkStateUpdateCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NodeProfileSync?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StartJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StopJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AnnounceNewAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NVUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_CoordStartPANIDConflictCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SrcRtgIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitZdoCBFunc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_DeregisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB
   3052          
   3053          /*********************************************************************
   3054          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      0  AddrMgrWriteNVRequest
       2      0      9  ZDAppCheckForHoldKey
                          2 0  0 -> HalKeyRead
       2      0     12  ZDAppDetermineDeviceType
                          2 0  0 -> nwk_ExtPANIDValid
       0      0     23  ZDApp_AnnounceNewAddress
                          0 0 10 -> APSME_HoldDataRequests
                          0 0 10 -> NLME_GetExtAddr
                          0 0 10 -> NLME_GetShortAddr
                          0 0 11 -> ZDP_DeviceAnnce
       0      0      9  ZDApp_ChangeMatchDescRespPermission
                          0 0  9 -> afSetMatch
       0      0      0  ZDApp_CoordStartPANIDConflictCB
       2      0      9  ZDApp_DeviceAuthEvt
                          2 0  0 -> NLME_SetPollRate
                          2 0  0 -> ZDApp_AnnounceNewAddress
                          2 0  0 -> ZDApp_ResetTimerCancel
                          2 0  0 -> ZDApp_SaveNwkKey
                          2 0  0 -> osal_set_event
       0      0     16  ZDApp_DeviceConfigured
                          0 0 16 -> osal_nv_read
       0      0     14  ZDApp_InMsgCB
                          0 0 14 -> ZDP_GenericRsp
       0      0      9  ZDApp_Init
                          0 0  9 -> HalLedBlink
                          0 0  9 -> NLME_GetExtAddr
                          0 0  9 -> ZDAppCheckForHoldKey
                          0 0  9 -> ZDApp_InitUserDesc
                          0 0  9 -> ZDApp_InitZdoCBFunc
                          0 0  9 -> ZDApp_RegisterCBs
                          0 0  9 -> ZDOInitDevice
                          0 0  9 -> ZDO_Init
                          0 0  9 -> afRegister
       0      0     40  ZDApp_InitUserDesc
                          0 0 27 -> osal_memset
                          0 0 29 -> osal_nv_item_init
                          0 0 31 -> osal_nv_read
       2      0      9  ZDApp_InitZdoCBFunc
       0      0     22  ZDApp_JoinReq
                          0 0 18 -> NLME_JoinRequest
                          0 0 14 -> ZDApp_NodeProfileSync
       2      0      0  ZDApp_LeaveCtrlBypass
       0      0     26  ZDApp_LeaveCtrlInit
                          0 0 12 -> osal_nv_item_init
                          0 0 14 -> osal_nv_read
       0      0     14  ZDApp_LeaveCtrlReset
                          0 0 14 -> osal_nv_write
       0      0     23  ZDApp_LeaveCtrlSet
                          0 0 14 -> osal_nv_write
       2      0     12  ZDApp_LeaveCtrlStartup
                          2 0  0 -> ZDApp_LeaveCtrlReset
       0      0     19  ZDApp_LeaveReset
                          0 0  9 -> ZDApp_LeaveCtrlSet
                          0 0  9 -> ZDApp_ResetTimerStart
       0      0     37  ZDApp_LeaveUpdate
                          0 0 24 -> RTG_RemoveRtgEntry
                          0 0 24 -> ZDSecMgrAddrClear
                          0 0 24 -> ZDSecMgrDeviceRemoveByExtAddr
                          0 0 24 -> nwkNeighborRemove
                          0 0 27 -> osal_memcpy
       0      0      0  ZDApp_NVUpdate
       0      0     12  ZDApp_NetworkDiscoveryReq
                          0 0 12 -> NLME_NetworkDiscoveryRequest
       2      0     12  ZDApp_NetworkInit
                          2 0  0 -> osal_set_event
                          2 0  0 -> osal_start_timerEx
       2      0      0  ZDApp_NetworkStartEvt
                          2 0  0 -> NLME_GetEnergyThreshold
                          2 0  0 -> NLME_SetEnergyThreshold
                          2 0  0 -> osal_pwrmgr_device
                          2 0  0 -> osal_set_event
       0      0     23  ZDApp_NodeProfileSync
                          0 0  9 -> NLME_SetBroadcastFilter
       0      0     25  ZDApp_NwkDescListProcessing
                          0 0 14 -> nwk_ExtPANIDValid
                          0 0 14 -> nwk_getNwkDescList
                          0 0 14 -> sAddrExtCmp
       2      0      0  ZDApp_NwkStateUpdateCB
                          2 0  0 -> osal_get_timeoutEx
       0      0     42  ZDApp_ProcessMsgCBs
                          0 0 31 -> ZDO_ParseAddrRsp
                          0 0 31 -> ZDO_ParseBindUnbindReq
                          0 0 31 -> ZDO_ProcessBindUnbindReq
                          0 0 31 -> ZDO_UpdateAddrManager
                          0 0 31 -> osal_mem_free
       0      0     23  ZDApp_ProcessNetworkJoin
                          0 0 12 -> NLME_GetShortAddr
                          0 0 12 -> NLME_NwkDiscTerm
                          0 0 12 -> NLME_SetPollRate
                          0 0 12 -> NLME_SetQueuedPollRate
                          0 0 12 -> NLME_SetResponseRate
                          0 0 12 -> ZDApp_AnnounceNewAddress
                          0 0 12 -> ZDApp_NetworkInit
                          0 0 12 -> ZMacSetReq
                          0 0 12 -> nwkNeighborInitTable
                          0 0 12 -> osal_rand
                          0 0 12 -> osal_set_event
       0      0     27  ZDApp_ProcessOSALMsg
                          0 0 15 -> NLME_JoinRequest
                          0 0 11 -> NLME_ReJoinRequest
                          0 0 11 -> NLME_SetPollRate
                          0 0 11 -> NLME_SetQueuedPollRate
                          0 0 11 -> NLME_SetResponseRate
                          0 0 11 -> ZDApp_NetworkInit
                          0 0 11 -> ZDApp_NodeProfileSync
                          0 0 11 -> ZDApp_NwkDescListProcessing
                          0 0 11 -> ZDApp_ProcessMsgCBs
                          0 0 11 -> ZDApp_ProcessNetworkJoin
                          0 0 11 -> ZDP_IncomingData
                          0 0 11 -> ZMacSetReq
                          0 0 11 -> osal_rand
                          0 0 11 -> sAddrExtCpy
       0      0      9  ZDApp_ProcessSecEvent
                          0 0  9 -> ZDApp_DeviceAuthEvt
                          0 0  9 -> ZDApp_SaveNwkKey
                          0 0  9 -> ZDSecMgrSaveTCLinkKey
       2      0      0  ZDApp_ProcessSecMsg
                          2 0  0 -> ZDSecMgrSwitchKeyInd
                          2 0  0 -> ZDSecMgrTransportKeyInd
       0      0      9  ZDApp_ReadNetworkRestoreState
                          0 0  9 -> zgReadStartupOptions
       2      0      9  ZDApp_RegisterCBs
                          2 0  0 -> ZDO_RegisterForZDOMsg
       0      0     35  ZDApp_ResetNwkKey
                          0 0 31 -> osal_memset
                          0 0 35 -> osal_nv_write
       2      0      0  ZDApp_ResetTimerCancel
                          2 0  0 -> osal_stop_timerEx
       2      0      9  ZDApp_ResetTimerStart
                          2 0  0 -> osal_start_timerEx
       0      0      9  ZDApp_RestoreNetworkState
                          0 0  9 -> NLME_GetShortAddr
                          0 0  9 -> NLME_InitNV
                          0 0  9 -> NLME_RestoreFromNV
                          0 0  9 -> sAddrExtCpy
       0      0     37  ZDApp_RestoreNwkKey
                          0 0 33 -> osal_memset
                          0 0 37 -> osal_nv_read
       0      0      0  ZDApp_SaveNetworkStateEvt
       0      0     46  ZDApp_SaveNwkKey
                          0 0 33 -> SSP_ReadNwkActiveKey
                          0 0 33 -> osal_memset
                          0 0 37 -> osal_nv_write
       0      0      9  ZDApp_SecInit
                          0 0  9 -> ZDSecMgrInit
       0      0      9  ZDApp_SendEventMsg
                          0 0  9 -> ZDApp_SendMsg
       1      0     33  ZDApp_SendMsg
                          0 0 19 -> osal_memcpy
                          0 0 16 -> osal_msg_allocate
                          0 0 16 -> osal_msg_send
       2      0      0  ZDApp_StartJoiningCycle
                          2 0  0 -> ZDApp_NetworkInit
       2      0      0  ZDApp_StopJoiningCycle
       0      0     12  ZDApp_event_loop
                          0 0 12 -> Onboard_soft_reset
                          0 0 12 -> ZDApp_ProcessOSALMsg
                          0 0 12 -> ZDO_StartDevice
                          0 0 12 -> ZDO_UpdateNwkStatus
                          0 0 12 -> osal_msg_deallocate
                          0 0 12 -> osal_msg_receive
                          0 0 12 -> osal_set_event
                          0 0 12 -> osal_start_timerEx
                          0 0 12 -> zgWriteStartupOptions
       0      0     21  ZDOInitDevice
                          0 0 12 -> NLME_SetBroadcastFilter
                          0 0 12 -> ZDAppDetermineDeviceType
                          0 0 12 -> ZDApp_LeaveCtrlInit
                          0 0 12 -> ZDApp_LeaveCtrlStartup
                          0 0 12 -> ZDApp_NetworkInit
                          0 0 12 -> ZDConfig_InitDescriptors
                          0 0 12 -> ZDSecMgrInit
                          0 0 12 -> osal_rand
                          0 0 12 -> osal_set_event
                          0 0 12 -> zgInitItems
                          0 0 12 -> zgWriteStartupOptions
       0      0     12  ZDO_AddrChangeIndicationCB
                          0 0 12 -> ZDApp_AnnounceNewAddress
                          0 0 12 -> osal_msg_allocate
                          0 0 12 -> osal_msg_send
                          0 0 12 -> osal_set_event
       1      0     14  ZDO_ConcentratorIndicationCB
       2      0      0  ZDO_DeregisterForZdoCB
       1      0     14  ZDO_JoinConfirmCB
                          0 0 14 -> HalLedSet
                          0 0 14 -> ZDApp_SendMsg
       0      0      1  ZDO_JoinIndicationCB
       0      0     10  ZDO_LeaveCnf
                          0 0 10 -> NLME_GetExtAddr
                          0 0 10 -> ZDApp_LeaveReset
                          0 0 10 -> sAddrExtCmp
       0      0     10  ZDO_LeaveInd
                          0 0 10 -> NLME_GetCoordShortAddr
                          0 0 10 -> ZDApp_LeaveReset
                          0 0 10 -> ZDApp_LeaveUpdate
       2      0      0  ZDO_ManytoOneFailureIndicationCB
                          2 0  0 -> RTG_MTORouteReq
       3      0      3  ZDO_NetworkDiscoveryConfirmCB
                          2 0  3 -> ZDApp_SendMsg
       0      0      9  ZDO_NetworkFormationConfirmCB
                          0 0  9 -> HalLedSet
                          0 0  9 -> osal_set_event
       0      0      0  ZDO_PollConfirmCB
       2      0      0  ZDO_RegisterForZdoCB
       1      0     14  ZDO_SrcRtgIndCB
       0      0      9  ZDO_StartRouterConfirmCB
                          0 0  9 -> HalLedSet
                          0 0  9 -> osal_set_event
       0      0      9  ZDO_SyncIndicationCB
                          0 0  9 -> ZDApp_SendMsg
                          0 0  9 -> nwkNeighborInitTable
       0      0      0  ZDO_UpdateDeviceIndication
       1      0     14  ZDO_beaconNotifyIndCB
                          0 0 14 -> osal_mem_alloc
                          0 0 14 -> osal_memset
                          0 0 14 -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for devState>
       1  ?<Initializer for zdoDiscCounter>
       6  ??AddrMgrWriteNVRequest?relay
       5  ??Subroutine31_0
      11  ??Subroutine32_0
       9  ??Subroutine33_0
       6  ??Subroutine34_0
       6  ??Subroutine35_0
       3  ??Subroutine36_0
       5  ??Subroutine37_0
       5  ??Subroutine38_0
       6  ??Subroutine39_0
       1  ??Subroutine40_0
       3  ??Subroutine41_0
       6  ??Subroutine42_0
       4  ??Subroutine43_0
       5  ??Subroutine44_0
       6  ??Subroutine45_0
       3  ??Subroutine46_0
       5  ??Subroutine47_0
       6  ??Subroutine48_0
       6  ??ZDAppCheckForHoldKey?relay
       6  ??ZDAppDetermineDeviceType?relay
       6  ??ZDApp_AnnounceNewAddress?relay
       6  ??ZDApp_ChangeMatchDescRespPermission?relay
       6  ??ZDApp_CoordStartPANIDConflictCB?relay
       6  ??ZDApp_DeviceAuthEvt?relay
       6  ??ZDApp_DeviceConfigured?relay
       6  ??ZDApp_InMsgCB?relay
       6  ??ZDApp_Init?relay
       6  ??ZDApp_InitUserDesc?relay
       6  ??ZDApp_InitZdoCBFunc?relay
       6  ??ZDApp_JoinReq?relay
       6  ??ZDApp_LeaveCtrlBypass?relay
       6  ??ZDApp_LeaveCtrlInit?relay
       6  ??ZDApp_LeaveCtrlReset?relay
       6  ??ZDApp_LeaveCtrlSet?relay
       6  ??ZDApp_LeaveCtrlStartup?relay
       6  ??ZDApp_LeaveReset?relay
       6  ??ZDApp_LeaveUpdate?relay
       6  ??ZDApp_NVUpdate?relay
       6  ??ZDApp_NetworkDiscoveryReq?relay
       6  ??ZDApp_NetworkInit?relay
       6  ??ZDApp_NetworkStartEvt?relay
       6  ??ZDApp_NodeProfileSync?relay
       6  ??ZDApp_NwkDescListProcessing?relay
       6  ??ZDApp_NwkStateUpdateCB?relay
       6  ??ZDApp_ProcessMsgCBs?relay
       6  ??ZDApp_ProcessNetworkJoin?relay
       6  ??ZDApp_ProcessOSALMsg?relay
       6  ??ZDApp_ProcessSecEvent?relay
       6  ??ZDApp_ProcessSecMsg?relay
       6  ??ZDApp_ReadNetworkRestoreState?relay
       6  ??ZDApp_RegisterCBs?relay
       6  ??ZDApp_ResetNwkKey?relay
       6  ??ZDApp_ResetTimerCancel?relay
       6  ??ZDApp_ResetTimerStart?relay
       6  ??ZDApp_RestoreNetworkState?relay
       6  ??ZDApp_RestoreNwkKey?relay
       6  ??ZDApp_SaveNetworkStateEvt?relay
       6  ??ZDApp_SaveNwkKey?relay
       6  ??ZDApp_SecInit?relay
       6  ??ZDApp_SendEventMsg?relay
       6  ??ZDApp_SendMsg?relay
       6  ??ZDApp_StartJoiningCycle?relay
       6  ??ZDApp_StopJoiningCycle?relay
       6  ??ZDApp_event_loop?relay
       6  ??ZDOInitDevice?relay
       6  ??ZDO_AddrChangeIndicationCB?relay
       6  ??ZDO_ConcentratorIndicationCB?relay
       6  ??ZDO_DeregisterForZdoCB?relay
       6  ??ZDO_JoinConfirmCB?relay
       6  ??ZDO_JoinIndicationCB?relay
       6  ??ZDO_LeaveCnf?relay
       6  ??ZDO_LeaveInd?relay
       6  ??ZDO_ManytoOneFailureIndicationCB?relay
       6  ??ZDO_NetworkDiscoveryConfirmCB?relay
       6  ??ZDO_NetworkFormationConfirmCB?relay
       6  ??ZDO_PollConfirmCB?relay
       6  ??ZDO_RegisterForZdoCB?relay
       6  ??ZDO_SrcRtgIndCB?relay
       6  ??ZDO_StartRouterConfirmCB?relay
       6  ??ZDO_SyncIndicationCB?relay
       6  ??ZDO_UpdateDeviceIndication?relay
       6  ??ZDO_beaconNotifyIndCB?relay
      10  ?Subroutine0
       5  ?Subroutine1
      12  ?Subroutine10
      12  ?Subroutine11
       7  ?Subroutine12
       6  ?Subroutine13
      10  ?Subroutine14
       8  ?Subroutine15
       5  ?Subroutine16
       4  ?Subroutine17
       8  ?Subroutine18
       6  ?Subroutine19
      35  ?Subroutine2
       4  ?Subroutine20
       1  ?Subroutine21
       3  ?Subroutine22
       9  ?Subroutine23
       4  ?Subroutine24
       9  ?Subroutine25
       1  ?Subroutine26
       9  ?Subroutine27
      11  ?Subroutine28
       3  ?Subroutine29
       7  ?Subroutine3
      17  ?Subroutine30
       5  ?Subroutine4
       5  ?Subroutine5
       8  ?Subroutine6
       5  ?Subroutine7
       5  ?Subroutine8
       5  ?Subroutine9
       3  AddrMgrWriteNVRequest
      20  ZDAppCheckForHoldKey
      74  ZDAppDetermineDeviceType
       9  ZDAppNwkAddr
       1  ZDAppTaskID
      59  ZDApp_AnnounceNewAddress
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
      11  ZDApp_CoordStartPANIDConflictCB
      47  ZDApp_DeviceAuthEvt
      91  ZDApp_DeviceConfigured
     105  ZDApp_InMsgCB
      88  ZDApp_Init
     121  ZDApp_InitUserDesc
      19  ZDApp_InitZdoCBFunc
      84  ZDApp_JoinReq
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
      75  ZDApp_LeaveCtrlInit
      13  ZDApp_LeaveCtrlReset
      22  ZDApp_LeaveCtrlSet
      45  ZDApp_LeaveCtrlStartup
      17  ZDApp_LeaveReset
     134  ZDApp_LeaveUpdate
       3  ZDApp_NVUpdate
      11  ZDApp_NetworkDiscoveryReq
      41  ZDApp_NetworkInit
      86  ZDApp_NetworkStartEvt
      44  ZDApp_NodeProfileSync
     266  ZDApp_NwkDescListProcessing
      19  ZDApp_NwkStateUpdateCB
     117  ZDApp_ProcessMsgCBs
     385  ZDApp_ProcessNetworkJoin
     453  ZDApp_ProcessOSALMsg
     101  ZDApp_ProcessSecEvent
      56  ZDApp_ProcessSecMsg
      21  ZDApp_ReadNetworkRestoreState
      55  ZDApp_RegisterCBs
      76  ZDApp_ResetNwkKey
      19  ZDApp_ResetTimerCancel
      23  ZDApp_ResetTimerStart
      68  ZDApp_RestoreNetworkState
     145  ZDApp_RestoreNwkKey
       3  ZDApp_SaveNetworkStateEvt
     112  ZDApp_SaveNwkKey
       2  ZDApp_SavedPollRate
      11  ZDApp_SecInit
      22  ZDApp_SendEventMsg
      90  ZDApp_SendMsg
      39  ZDApp_StartJoiningCycle
      31  ZDApp_StopJoiningCycle
       6  ZDApp_epDesc
     173  ZDApp_event_loop
     159  ZDOInitDevice
      90  ZDO_AddrChangeIndicationCB
      60  ZDO_ConcentratorIndicationCB
      22  ZDO_DeregisterForZdoCB
     125  ZDO_JoinConfirmCB
       0  ZDO_JoinIndicationCB
      66  ZDO_LeaveCnf
     128  ZDO_LeaveInd
      10  ZDO_ManytoOneFailureIndicationCB
      83  ZDO_NetworkDiscoveryConfirmCB
      49  ZDO_NetworkFormationConfirmCB
       3  ZDO_PollConfirmCB
      27  ZDO_RegisterForZdoCB
      60  ZDO_SrcRtgIndCB
      49  ZDO_StartRouterConfirmCB
      34  ZDO_SyncIndicationCB
       3  ZDO_UpdateDeviceIndication
       8  ZDO_UseExtendedPANID
     555  ZDO_beaconNotifyIndCB
       4  __Constant_1
       4  __Constant_3e8
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       2  nwkFrameCounterChanges
       1  nwkStatus
       1  retryCnt
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      14  zdoCBFunc
       1  zdoDiscCounter

 
 5 381 bytes in segment BANKED_CODE
   390 bytes in segment BANK_RELAYS
    11 bytes in segment XDATA_I
    11 bytes in segment XDATA_ID
     8 bytes in segment XDATA_ROM_C
    54 bytes in segment XDATA_Z
 
 5 782 bytes of CODE  memory
     0 bytes of CONST memory (+ 8 bytes shared)
    65 bytes of XDATA memory

Errors: none
Warnings: none
