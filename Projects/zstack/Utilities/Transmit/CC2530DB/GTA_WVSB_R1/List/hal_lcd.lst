###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             15/Aug/2016  21:32:11 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Co #
#                          mponents\hal\target\CC2530EB\hal_lcd.c             #
#    Command line       =  -f D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£© #
#                          \Projects\zstack\Utilities\Transmit\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO         #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00001000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1178                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=3             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=2    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\work\ZSTACK-GTAMODBUS-Ö÷ #
#                          ¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Components\hal\target\CC2530E #
#                          B\hal_lcd.c -D NWK_AUTO_POLL -D MT_TASK -D         #
#                          ZTOOL_P1 -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          #
#                          ZDNWKMGR_MIN_TRANSMISSIONS=0 -D GTA_DEBUG -D       #
#                          ZIGBEEPRO -D GTA_WVSB_R1 -lC                       #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\GTA_WVSB #
#                          _R1\List\ -lA D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140 #
#                          707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC2 #
#                          530DB\GTA_WVSB_R1\List\ --diag_suppress            #
#                          Pe001,Pa010 -o D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«14 #
#                          0707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC #
#                          2530DB\GTA_WVSB_R1\Obj\ -e --no_code_motion        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£© #
#                          \Projects\zstack\Utilities\Transmit\CC2530DB\ -I   #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\Sourc #
#                          e\ -I D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³Î #
#                          Ä£©\Projects\zstack\Utilities\Transmit\CC2530DB\.. #
#                          \..\..\ZMain\TI2530DB\ -I                          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\hal\include\ -I                  #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\hal\target\CC2530EB\ -I          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\include\ -I                  #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf04\ -I          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf04\single_chip\ #
#                           -I D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£ #
#                          ©\Projects\zstack\Utilities\Transmit\CC2530DB\..\. #
#                          .\..\..\..\Components\mt\ -I                       #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\osal\include\ -I                 #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\services\saddr\ -I               #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\services\sdata\ -I               #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\af\ -I                     #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\nwk\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sapi\ -I                   #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sec\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sys\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\zdo\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\zmac\ -I                         #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\zmac\f8w\ -Ohz                   #
#                          --require_prototypes                               #
#    List file          =  D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\GTA_WVSB #
#                          _R1\List\hal_lcd.lst                               #
#    Object file        =  D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\GTA_WVSB #
#                          _R1\Obj\hal_lcd.r51                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Components\hal\target\CC2530EB\hal_lcd.c
      1          /**************************************************************************************************
      2            Filename:       hal_lcd.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:    This file contains the interface to the HAL LCD Service.
      7          
      8          
      9            Copyright 2007 - 2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41           *                                           INCLUDES
     42           **************************************************************************************************/
     43          #include "hal_types.h"
     44          #include "hal_lcd.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf8
   \   union <unnamed> volatile __sfr _A_U1CSR
   \                     _A_U1CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf9
   \   unsigned char volatile __sfr U1DBUF
   \                     U1DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfa
   \   unsigned char volatile __sfr U1BAUD
   \                     U1BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfb
   \   unsigned char volatile __sfr U1UCR
   \                     U1UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfc
   \   unsigned char volatile __sfr U1GCR
   \                     U1GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     45          #include "OSAL.h"
     46          #include "OnBoard.h"
     47          #include "hal_assert.h"
     48          
     49          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
     50            #include "DebugTrace.h"
     51          #endif
     52          
     53          /**************************************************************************************************
     54           *                                          CONSTANTS
     55           **************************************************************************************************/
     56          /*
     57            LCD pins
     58          
     59            //control
     60            P0.0 - LCD_RESET
     61            P1.3 - FLASH_RESET
     62            P1.2 - LCD_CS
     63            
     64            //spi
     65            P1.5 - CLK
     66            P1.6 - MOSI
     67            P1.7 - MISO
     68          */
     69          
     70          /* LCD Control lines */
     71          #define HAL_LCD_RESET_PORT 0
     72          #define HAL_LCD_RESET_PIN  0
     73          
     74          #define HAL_LCD_CS_PORT 1
     75          #define HAL_LCD_CS_PIN  2
     76          
     77          /* LCD SPI lines */
     78          #define HAL_LCD_CLK_PORT 1
     79          #define HAL_LCD_CLK_PIN  5
     80          
     81          #define HAL_LCD_MOSI_PORT 1
     82          #define HAL_LCD_MOSI_PIN  6
     83          
     84          #define HAL_LCD_MISO_PORT 1
     85          #define HAL_LCD_MISO_PIN  7
     86          
     87          /* SPI settings */
     88          #define HAL_SPI_CLOCK_POL_LO       0x00
     89          #define HAL_SPI_CLOCK_POL_HI       0x80
     90          #define HAL_SPI_CLOCK_PHA_0        0x00
     91          #define HAL_SPI_CLOCK_PHA_1        0x40
     92          #define HAL_SPI_TRANSFER_MSB_LAST 0x00
     93          #define HAL_SPI_TRANSFER_MSB_FIRST 0x20
     94          
     95          
     96          /* LCD lines */
     97          #define LCD_MAX_LINE_COUNT              6
     98          #define LCD_MAX_LINE_LENGTH             21
     99          #define LCD_MAX_BUF                     25
    100          
    101          
    102          /* Font Set */
    103          #define LCD_X_WITCH              6
    104          #define LCD_Y_WITCH             10
    105          
    106          
    107          /* Defines for HW LCD */
    108          #define FUNCTION_SET(options)           HalLcd_HW_Control(options)
    109          
    110          
    111          /* Set Display Start Line */
    112          #define LINE1                           0x00
    113          #define LINE2                           0x01
    114          #define LINE3                           0x02
    115          #define LINE4                           0x03
    116          
    117          
    118          
    119          
    120          /**************************************************************************************************
    121           *                                           MACROS
    122           **************************************************************************************************/
    123          
    124          #define HAL_IO_SET(port, pin, val)        HAL_IO_SET_PREP(port, pin, val)
    125          #define HAL_IO_SET_PREP(port, pin, val)   st( P##port##_##pin## = val; )
    126          
    127          #define HAL_CONFIG_IO_OUTPUT(port, pin, val)      HAL_CONFIG_IO_OUTPUT_PREP(port, pin, val)
    128          #define HAL_CONFIG_IO_OUTPUT_PREP(port, pin, val) st( P##port##SEL &= ~BV(pin); \
    129                                                                P##port##_##pin## = val; \
    130                                                                P##port##DIR |= BV(pin); )
    131          
    132          #define HAL_CONFIG_IO_PERIPHERAL(port, pin)      HAL_CONFIG_IO_PERIPHERAL_PREP(port, pin)
    133          #define HAL_CONFIG_IO_PERIPHERAL_PREP(port, pin) st( P##port##SEL |= BV(pin); )
    134          
    135          
    136          
    137          /* SPI interface control */
    138          #define LCD_SPI_BEGIN()     HAL_IO_SET(HAL_LCD_CS_PORT,  HAL_LCD_CS_PIN,  0); /* chip select */
    139          #define LCD_SPI_END()                                                         \
    140          {                                                                             \
    141            asm("NOP");                                                                 \
    142            asm("NOP");                                                                 \
    143            asm("NOP");                                                                 \
    144            asm("NOP");                                                                 \
    145            HAL_IO_SET(HAL_LCD_CS_PORT,  HAL_LCD_CS_PIN,  1); /* chip select */         \
    146          }
    147          /* clear the received and transmit byte status, write tx data to buffer, wait till transmit done */
    148          #define LCD_SPI_TX(x)                   { U1CSR &= ~(BV(2) | BV(1)); U1DBUF = x; while( !(U1CSR & BV(1)) ); }
    149          #define LCD_SPI_WAIT_RXRDY()            { while(!(U1CSR & BV(1))); }
    150          
    151          
    152          //#define FUNCTION_SET(options)     lcdControl(options)
    153          
    154          /* Control macros */
    155          #define LCD_ACTIVATE_RESET()  HAL_IO_SET(HAL_LCD_RESET_PORT, HAL_LCD_RESET_PIN, 0);
    156          #define LCD_RELEASE_RESET()   HAL_IO_SET(HAL_LCD_RESET_PORT, HAL_LCD_RESET_PIN, 1);
    157          
    158          
    159          /**************************************************************************************************
    160           *                                       GLOBAL VARIABLES
    161           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          static uint8 *Lcd_Line1;
   \                     Lcd_Line1:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    163          
    164          /**************************************************************************************************
    165           *                                       FUNCTIONS - API
    166           **************************************************************************************************/
    167          #if (HAL_LCD == TRUE)
    168          void HalLcd_HW_Init(void);
    169          void HalLcd_HW_WaitUs(uint16 i);
    170          void HalLcd_HW_Clear(void);
    171          void HalLcd_HW_SetBackLight(unsigned char Deg) ;
    172          void HalLcd_HW_FontCharSet(unsigned char Font_NUM,unsigned char Color);
    173          void HalLcd_HW_FontMode(unsigned char Cover,unsigned char Color);
    174          
    175          
    176          void HalLcd_HW_ClearAllSpecChars(void);
    177          void HalLcd_HW_Control(uint8 cmd);
    178          void HalLcd_HW_Write(unsigned char x,unsigned char y,unsigned char a);
    179          void HalLcd_HW_SetContrast(uint8 value);
    180          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
    181          void HalLcd_HW_WriteLine(uint8 line, const char *pText);
    182          #endif //LCD
    183          
    184          
    185          
    186          #define NOP()  asm("NOP")
    187          
    188          
    189          /**************************************************************************************************
    190           * @fn      HalLcdInit
    191           *
    192           * @brief   Initilize LCD Service
    193           *
    194           * @param   init - pointer to void that contains the initialized value
    195           *
    196           * @return  None
    197           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    198          void HalLcdInit(void)
   \                     HalLcdInit:
    199          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    200            Lcd_Line1 = NULL;
   \   000004   90....       MOV     DPTR,#Lcd_Line1
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    201          #if (HAL_LCD == TRUE)
    202            HalLcd_HW_Init();
   \   00000B                ; Setup parameters for call to function HalLcd_HW_Init
   \   00000B   12....       LCALL   ??HalLcd_HW_Init?relay
    203          #endif
    204          }
   \   00000E                REQUIRE ?Subroutine0
   \   00000E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    205          
    206          /*************************************************************************************************
    207           *                    LCD EMULATION FUNCTIONS
    208           *
    209           * Some evaluation boards are equipped with Liquid Crystal Displays
    210           * (LCD) which may be used to display diagnostic information. These
    211           * functions provide LCD emulation, sending the diagnostic strings
    212           * to Z-Tool via the RS232 serial port. These functions are enabled
    213           * when the "LCD_SUPPORTED" compiler flag is placed in the makefile.
    214           *
    215           * Most applications update both lines (1 and 2) of the LCD whenever
    216           * text is posted to the device. This emulator assumes that line 1 is
    217           * updated first (saved locally) and the formatting and send operation
    218           * is triggered by receipt of line 2. Nothing will be transmitted if
    219           * only line 1 is updated.
    220           *
    221           *************************************************************************************************/
    222          
    223          
    224          /**************************************************************************************************
    225           * @fn      HalLcdWriteString
    226           *
    227           * @brief   Write a string to the LCD
    228           *
    229           * @param   str    - pointer to the string that will be displayed
    230           *          option - display options
    231           *
    232           * @return  None
    233           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    234          void HalLcdWriteString ( char *str, uint8 option)
   \                     HalLcdWriteString:
    235          {
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 8,R1
    236          #if (HAL_LCD == TRUE)
    237          
    238            uint8 strLen = 0;
    239            uint8 totalLen = 0;
    240            uint8 *buf;
    241            uint8 tmpLen;
    242          
    243            if ( Lcd_Line1 == NULL )
   \   00000B   90....       MOV     DPTR,#Lcd_Line1
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   49           ORL     A,R1
   \   000015   7018         JNZ     ??HalLcdWriteString_0
    244            {
    245              Lcd_Line1 = osal_mem_alloc( HAL_LCD_MAX_CHARS+1 );
   \   000017                ; Setup parameters for call to function osal_mem_alloc
   \   000017   7A11         MOV     R2,#0x11
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??osal_mem_alloc?relay
   \   00001E   90....       MOV     DPTR,#Lcd_Line1
   \   000021   EA           MOV     A,R2
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   EB           MOV     A,R3
   \   000025   F0           MOVX    @DPTR,A
    246              HalLcdWriteString( "ZIGCLOUD ELECTRONICS", 1 );
   \   000026                ; Setup parameters for call to function HalLcdWriteString
   \   000026   7901         MOV     R1,#0x1
   \   000028   7A..         MOV     R2,#`?<Constant "ZIGCLOUD ELECTRONICS">` & 0xff
   \   00002A   7B..         MOV     R3,#(`?<Constant "ZIGCLOUD ELECTRONICS">` >> 8) & 0xff
   \   00002C   12....       LCALL   ??HalLcdWriteString?relay
    247            }
    248          
    249            strLen = (uint8)osal_strlen( (char*)str );
   \                     ??HalLcdWriteString_0:
   \   00002F                ; Setup parameters for call to function osal_strlen
   \   00002F   EE           MOV     A,R6
   \   000030   FA           MOV     R2,A
   \   000031   EF           MOV     A,R7
   \   000032   FB           MOV     R3,A
   \   000033   12....       LCALL   ??osal_strlen?relay
   \   000036   EA           MOV     A,R2
   \   000037   F5..         MOV     ?V0 + 7,A
    250          
    251            /* Check boundries */
    252            if ( strLen > HAL_LCD_MAX_CHARS )
   \   000039   C3           CLR     C
   \   00003A   9411         SUBB    A,#0x11
   \   00003C   4003         JC      ??HalLcdWriteString_1
    253              strLen = HAL_LCD_MAX_CHARS;
   \   00003E   75..10       MOV     ?V0 + 7,#0x10
    254          
    255            if ( option == HAL_LCD_LINE_1 )
   \                     ??HalLcdWriteString_1:
   \   000041   7401         MOV     A,#0x1
   \   000043   65..         XRL     A,?V0 + 8
   \   000045   7038         JNZ     ??HalLcdWriteString_2
    256            {
    257              /* Line 1 gets saved for later */
    258              osal_memcpy( Lcd_Line1, str, strLen );
   \   000047                ; Setup parameters for call to function osal_memcpy
   \   000047   8E..         MOV     ?V0 + 0,R6
   \   000049   8F..         MOV     ?V0 + 1,R7
   \   00004B   75..00       MOV     ?V0 + 2,#0x0
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000053   85....       MOV     ?V0 + 0,?V0 + 7
   \   000056   AC..         MOV     R4,?V0 + 0
   \   000058   7D00         MOV     R5,#0x0
   \   00005A   90....       MOV     DPTR,#Lcd_Line1
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FA           MOV     R2,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   ??osal_memcpy?relay
   \   000065   7403         MOV     A,#0x3
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
    259              Lcd_Line1[strLen] = '\0';
   \   00006A   A8..         MOV     R0,?V0 + 7
   \   00006C   90....       MOV     DPTR,#Lcd_Line1
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   28           ADD     A,R0
   \   000071   FA           MOV     R2,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   3400         ADDC    A,#0x0
   \   000076   8A82         MOV     DPL,R2
   \   000078   F583         MOV     DPH,A
   \   00007A   E4           CLR     A
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   02....       LJMP    ??HalLcdWriteString_3 & 0xFFFF
    260            }
    261            else
    262            {
    263              /* Line 2 triggers action */
    264              tmpLen = (uint8)osal_strlen( (char*)Lcd_Line1 );
   \                     ??HalLcdWriteString_2:
   \   00007F                ; Setup parameters for call to function osal_strlen
   \   00007F   90....       MOV     DPTR,#Lcd_Line1
   \   000082   E0           MOVX    A,@DPTR
   \   000083   FA           MOV     R2,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   FB           MOV     R3,A
   \   000087   12....       LCALL   ??osal_strlen?relay
   \   00008A   EA           MOV     A,R2
   \   00008B   F5..         MOV     ?V0 + 2,A
    265              totalLen =  tmpLen + 1 + strLen + 1;
    266              buf = osal_mem_alloc( totalLen );
   \   00008D                ; Setup parameters for call to function osal_mem_alloc
   \   00008D   25..         ADD     A,?V0 + 7
   \   00008F   2402         ADD     A,#0x2
   \   000091   FA           MOV     R2,A
   \   000092   7B00         MOV     R3,#0x0
   \   000094   12....       LCALL   ??osal_mem_alloc?relay
   \   000097   8A..         MOV     ?V0 + 0,R2
   \   000099   8B..         MOV     ?V0 + 1,R3
    267              if ( buf != NULL )
   \   00009B   EA           MOV     A,R2
   \   00009C   45..         ORL     A,?V0 + 1
   \   00009E   606C         JZ      ??HalLcdWriteString_3
    268              {
    269                /* Concatenate strings */
    270                osal_memcpy( buf, Lcd_Line1, tmpLen );
   \   0000A0                ; Setup parameters for call to function osal_memcpy
   \   0000A0   90....       MOV     DPTR,#Lcd_Line1
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F5..         MOV     ?V0 + 4,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F5..         MOV     ?V0 + 5,A
   \   0000AA   75..00       MOV     ?V0 + 6,#0x0
   \   0000AD   78..         MOV     R0,#?V0 + 4
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B2   85....       MOV     ?V0 + 4,?V0 + 2
   \   0000B5   AC..         MOV     R4,?V0 + 4
   \   0000B7   7D00         MOV     R5,#0x0
   \   0000B9   12....       LCALL   ??osal_memcpy?relay
   \   0000BC   7403         MOV     A,#0x3
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
    271                buf[tmpLen++] = ' ';
   \   0000C1   E5..         MOV     A,?V0 + 0
   \   0000C3   25..         ADD     A,?V0 + 4
   \   0000C5   F582         MOV     DPL,A
   \   0000C7   E5..         MOV     A,?V0 + 1
   \   0000C9   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000CC   05..         INC     ?V0 + 2
    272                osal_memcpy( &buf[tmpLen], str, strLen );
   \   0000CE                ; Setup parameters for call to function osal_memcpy
   \   0000CE   8E..         MOV     ?V0 + 4,R6
   \   0000D0   8F..         MOV     ?V0 + 5,R7
   \   0000D2   78..         MOV     R0,#?V0 + 4
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D7   85....       MOV     ?V0 + 4,?V0 + 7
   \   0000DA   AC..         MOV     R4,?V0 + 4
   \   0000DC   7D00         MOV     R5,#0x0
   \   0000DE   E5..         MOV     A,?V0 + 0
   \   0000E0   25..         ADD     A,?V0 + 2
   \   0000E2   FA           MOV     R2,A
   \   0000E3   E5..         MOV     A,?V0 + 1
   \   0000E5   3400         ADDC    A,#0x0
   \   0000E7   FB           MOV     R3,A
   \   0000E8   12....       LCALL   ??osal_memcpy?relay
   \   0000EB   7403         MOV     A,#0x3
   \   0000ED   12....       LCALL   ?DEALLOC_XSTACK8
    273                buf[tmpLen+strLen] = '\0';
   \   0000F0   E5..         MOV     A,?V0 + 2
   \   0000F2   25..         ADD     A,?V0 + 4
   \   0000F4   F8           MOV     R0,A
   \   0000F5   E4           CLR     A
   \   0000F6   3400         ADDC    A,#0x0
   \   0000F8   F9           MOV     R1,A
   \   0000F9   E5..         MOV     A,?V0 + 0
   \   0000FB   28           ADD     A,R0
   \   0000FC   F582         MOV     DPL,A
   \   0000FE   E5..         MOV     A,?V0 + 1
   \   000100   39           ADDC    A,R1
   \   000101   F583         MOV     DPH,A
   \   000103   E4           CLR     A
   \   000104   F0           MOVX    @DPTR,A
    274          
    275                /* Send it out */
    276          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    277          
    278          #if defined(SERIAL_DEBUG_SUPPORTED)
    279                debug_str( (uint8*)buf );
    280          #endif //LCD_SUPPORTED
    281          
    282          #endif //ZTOOL_P1
    283          
    284                /* Free mem */
    285                osal_mem_free( buf );
   \   000105                ; Setup parameters for call to function osal_mem_free
   \   000105   AA..         MOV     R2,?V0 + 0
   \   000107   AB..         MOV     R3,?V0 + 1
   \   000109   12....       LCALL   ??osal_mem_free?relay
    286              }
    287            }
    288          
    289            /* Display the string */
    290            HalLcd_HW_WriteLine (option, str);
   \                     ??HalLcdWriteString_3:
   \   00010C                ; Setup parameters for call to function HalLcd_HW_WriteLine
   \   00010C   EE           MOV     A,R6
   \   00010D   FA           MOV     R2,A
   \   00010E   EF           MOV     A,R7
   \   00010F   FB           MOV     R3,A
   \   000110   A9..         MOV     R1,?V0 + 8
   \   000112   12....       LCALL   ??HalLcd_HW_WriteLine?relay
    291          
    292          #endif //HAL_LCD
    293          
    294          }
   \   000115   7F09         MOV     R7,#0x9
   \   000117   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   7420         MOV     A,#0x20
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET
    295          
    296          /**************************************************************************************************
    297           * @fn      HalLcdWriteValue
    298           *
    299           * @brief   Write a value to the LCD
    300           *
    301           * @param   value  - value that will be displayed
    302           *          radix  - 8, 10, 16
    303           *          option - display options
    304           *
    305           * @return  None
    306           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
   \                     HalLcdWriteValue:
    308          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7429         MOV     A,#0x29
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FE           MOV     R6,A
    309          #if (HAL_LCD == TRUE)
    310            uint8 buf[LCD_MAX_BUF];
    311          
    312            _ltoa( value, &buf[0], radix );
   \   000011                ; Setup parameters for call to function _ltoa
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   8582..       MOV     ?V0 + 0,DPL
   \   00001A   8583..       MOV     ?V0 + 1,DPH
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   12....       LCALL   ??_ltoa?relay
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?DEALLOC_XSTACK8
    313            HalLcdWriteString( (char*)buf, option );
   \   00002A                ; Setup parameters for call to function HalLcdWriteString
   \   00002A   EE           MOV     A,R6
   \   00002B   F9           MOV     R1,A
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   AA82         MOV     R2,DPL
   \   000034   AB83         MOV     R3,DPH
   \   000036   12....       LCALL   ??HalLcdWriteString?relay
    314          #endif
    315          }
   \   000039   7419         MOV     A,#0x19
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003E   7F08         MOV     R7,#0x8
   \   000040   02....       LJMP    ?BANKED_LEAVE_XDATA
    316          
    317          /**************************************************************************************************
    318           * @fn      HalLcdWriteScreen
    319           *
    320           * @brief   Write a value to the LCD
    321           *
    322           * @param   line1  - string that will be displayed on line 1
    323           *          line2  - string that will be displayed on line 2
    324           *
    325           * @return  None
    326           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    327          void HalLcdWriteScreen( char *line1, char *line2 )
   \                     HalLcdWriteScreen:
    328          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
    329          #if (HAL_LCD == TRUE)
    330            HalLcdWriteString( line1, 1 );
   \   000009                ; Setup parameters for call to function HalLcdWriteString
   \   000009   7901         MOV     R1,#0x1
   \   00000B   12....       LCALL   ??HalLcdWriteString?relay
    331            HalLcdWriteString( line2, 2 );
   \   00000E                ; Setup parameters for call to function HalLcdWriteString
   \   00000E   7902         MOV     R1,#0x2
   \   000010   EE           MOV     A,R6
   \   000011   FA           MOV     R2,A
   \   000012   EF           MOV     A,R7
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??HalLcdWriteString?relay
    332          #endif
    333          }
   \   000017   02....       LJMP    ??Subroutine5_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    334          
    335          /**************************************************************************************************
    336           * @fn      HalLcdWriteStringValue
    337           *
    338           * @brief   Write a string followed by a value to the LCD
    339           *
    340           * @param   title  - Title that will be displayed before the value
    341           *          value  - value
    342           *          format - redix
    343           *          line   - line number
    344           *
    345           * @return  None
    346           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    347          void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
   \                     HalLcdWriteStringValue:
    348          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 8,R4
   \   000010   8D..         MOV     ?V0 + 9,R5
   \   000012   89..         MOV     ?V0 + 0,R1
   \   000014   742B         MOV     A,#0x2b
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 1,A
    349          #if (HAL_LCD == TRUE)
    350            uint8 tmpLen;
    351            uint8 buf[LCD_MAX_BUF];
    352            uint32 err;
    353          
    354            tmpLen = (uint8)osal_strlen( (char*)title );
   \   00001C                ; Setup parameters for call to function osal_strlen
   \   00001C   12....       LCALL   ??osal_strlen?relay
   \   00001F   EA           MOV     A,R2
   \   000020   F5..         MOV     ?V0 + 2,A
    355            osal_memcpy( buf, title, tmpLen );
   \   000022                ; Setup parameters for call to function osal_memcpy
   \   000022   8E..         MOV     ?V0 + 4,R6
   \   000024   8F..         MOV     ?V0 + 5,R7
   \   000026   75..00       MOV     ?V0 + 6,#0x0
   \   000029   78..         MOV     R0,#?V0 + 4
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002E   8A..         MOV     ?V0 + 4,R2
   \   000030   AC..         MOV     R4,?V0 + 4
   \   000032   7D00         MOV     R5,#0x0
   \   000034   7403         MOV     A,#0x3
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   AA82         MOV     R2,DPL
   \   00003B   AB83         MOV     R3,DPH
   \   00003D   12....       LCALL   ??osal_memcpy?relay
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    356            buf[tmpLen] = ' ';
   \   000045   12....       LCALL   ?Subroutine2 & 0xFFFF
    357            err = (uint32)(value);
    358            _ltoa( err, &buf[tmpLen+1], format );
   \                     ??CrossCallReturnLabel_2:
   \   000048                ; Setup parameters for call to function _ltoa
   \   000048   A3           INC     DPTR
   \   000049   8582..       MOV     ?V0 + 2,DPL
   \   00004C   8583..       MOV     ?V0 + 3,DPH
   \   00004F   78..         MOV     R0,#?V0 + 2
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   A9..         MOV     R1,?V0 + 0
   \   000056   AA..         MOV     R2,?V0 + 8
   \   000058   AB..         MOV     R3,?V0 + 9
   \   00005A   E4           CLR     A
   \   00005B   FC           MOV     R4,A
   \   00005C   FD           MOV     R5,A
   \   00005D   12....       LCALL   ??_ltoa?relay
   \   000060   7402         MOV     A,#0x2
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
    359            HalLcdWriteString( (char*)buf, line );		
   \   000065                ; Setup parameters for call to function HalLcdWriteString
   \   000065   A9..         MOV     R1,?V0 + 1
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   AA82         MOV     R2,DPL
   \   00006F   AB83         MOV     R3,DPH
   \   000071   12....       LCALL   ??HalLcdWriteString?relay
    360          #endif
    361          }
   \   000074   7419         MOV     A,#0x19
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   7F0A         MOV     R7,#0xa
   \   00007B   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 2
   \   00000A                REQUIRE ??Subroutine3_0
   \   00000A                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E583         MOV     A,DPH
   \   000004                REQUIRE ??Subroutine4_0
   \   000004                ; // Fall through to label ??Subroutine4_0
    362          
    363          /**************************************************************************************************
    364           * @fn      HalLcdWriteStringValue
    365           *
    366           * @brief   Write a string followed by a value to the LCD
    367           *
    368           * @param   title   - Title that will be displayed before the value
    369           *          value1  - value #1
    370           *          format1 - redix of value #1
    371           *          value2  - value #2
    372           *          format2 - redix of value #2
    373           *          line    - line number
    374           *
    375           * @return  None
    376           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    377          void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
   \                     HalLcdWriteStringValueValue:
    378                                            uint16 value2, uint8 format2, uint8 line )
    379          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 2,R4
   \   000010   8D..         MOV     ?V0 + 3,R5
   \   000012   89..         MOV     ?V0 + 5,R1
   \   000014   742C         MOV     A,#0x2c
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 1,A
   \   000020   742E         MOV     A,#0x2e
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 4,A
   \   000028   742F         MOV     A,#0x2f
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 7,A
    380          
    381          #if (HAL_LCD == TRUE)
    382          
    383            uint8 tmpLen;
    384            uint8 buf[LCD_MAX_BUF];
    385            uint32 err;
    386          
    387            tmpLen = (uint8)osal_strlen( (char*)title );
   \   000030                ; Setup parameters for call to function osal_strlen
   \   000030   12....       LCALL   ??osal_strlen?relay
   \   000033   EA           MOV     A,R2
   \   000034   F5..         MOV     ?V0 + 6,A
    388            if ( tmpLen )
   \   000036   6032         JZ      ??HalLcdWriteStringValueValue_0
    389            {
    390              osal_memcpy( buf, title, tmpLen );
   \   000038                ; Setup parameters for call to function osal_memcpy
   \   000038   8E..         MOV     ?V0 + 8,R6
   \   00003A   8F..         MOV     ?V0 + 9,R7
   \   00003C   75..00       MOV     ?V0 + 10,#0x0
   \   00003F   78..         MOV     R0,#?V0 + 8
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000044   8A..         MOV     ?V0 + 8,R2
   \   000046   AC..         MOV     R4,?V0 + 8
   \   000048   7D00         MOV     R5,#0x0
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   AA82         MOV     R2,DPL
   \   000051   AB83         MOV     R3,DPH
   \   000053   12....       LCALL   ??osal_memcpy?relay
   \   000056   7403         MOV     A,#0x3
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
    391              buf[tmpLen++] = ' ';
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   E582         MOV     A,DPL
   \   000063   25..         ADD     A,?V0 + 8
   \   000065   12....       LCALL   ??Subroutine3_0 & 0xFFFF
    392            }
   \                     ??CrossCallReturnLabel_1:
   \   000068   05..         INC     ?V0 + 6
    393          
    394            err = (uint32)(value1);
    395            _ltoa( err, &buf[tmpLen], format1 );
   \                     ??HalLcdWriteStringValueValue_0:
   \   00006A                ; Setup parameters for call to function _ltoa
   \   00006A   85....       MOV     ?V0 + 8,?V0 + 6
   \   00006D   85..82       MOV     DPL,?XSP + 0
   \   000070   85..83       MOV     DPH,?XSP + 1
   \   000073   E582         MOV     A,DPL
   \   000075   25..         ADD     A,?V0 + 8
   \   000077   F5..         MOV     ?V0 + 8,A
   \   000079   E583         MOV     A,DPH
   \   00007B   3400         ADDC    A,#0x0
   \   00007D   F5..         MOV     ?V0 + 9,A
   \   00007F   78..         MOV     R0,#?V0 + 8
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000084   A9..         MOV     R1,?V0 + 5
   \   000086   AA..         MOV     R2,?V0 + 2
   \   000088   AB..         MOV     R3,?V0 + 3
   \   00008A   E4           CLR     A
   \   00008B   FC           MOV     R4,A
   \   00008C   FD           MOV     R5,A
   \   00008D   12....       LCALL   ??_ltoa?relay
   \   000090   7402         MOV     A,#0x2
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
    396            tmpLen = (uint8)osal_strlen( (char*)buf );
   \   000095                ; Setup parameters for call to function osal_strlen
   \   000095   85..82       MOV     DPL,?XSP + 0
   \   000098   85..83       MOV     DPH,?XSP + 1
   \   00009B   AA82         MOV     R2,DPL
   \   00009D   AB83         MOV     R3,DPH
   \   00009F   12....       LCALL   ??osal_strlen?relay
   \   0000A2   EA           MOV     A,R2
   \   0000A3   F5..         MOV     ?V0 + 6,A
    397          
    398            buf[tmpLen++] = ',';
   \   0000A5   F5..         MOV     ?V0 + 2,A
   \   0000A7   85..82       MOV     DPL,?XSP + 0
   \   0000AA   85..83       MOV     DPH,?XSP + 1
   \   0000AD   E582         MOV     A,DPL
   \   0000AF   25..         ADD     A,?V0 + 2
   \   0000B1   F582         MOV     DPL,A
   \   0000B3   E583         MOV     A,DPH
   \   0000B5   3400         ADDC    A,#0x0
   \   0000B7   F583         MOV     DPH,A
   \   0000B9   742C         MOV     A,#0x2c
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   05..         INC     ?V0 + 6
    399            buf[tmpLen++] = ' ';
   \   0000BE   85....       MOV     ?V0 + 2,?V0 + 6
   \   0000C1   12....       LCALL   ?Subroutine2 & 0xFFFF
    400            err = (uint32)(value2);
    401            _ltoa( err, &buf[tmpLen], format2 );
   \                     ??CrossCallReturnLabel_3:
   \   0000C4                ; Setup parameters for call to function _ltoa
   \   0000C4   7401         MOV     A,#0x1
   \   0000C6   25..         ADD     A,?V0 + 6
   \   0000C8   F8           MOV     R0,A
   \   0000C9   85..82       MOV     DPL,?XSP + 0
   \   0000CC   85..83       MOV     DPH,?XSP + 1
   \   0000CF   E582         MOV     A,DPL
   \   0000D1   28           ADD     A,R0
   \   0000D2   F5..         MOV     ?V0 + 2,A
   \   0000D4   E583         MOV     A,DPH
   \   0000D6   3400         ADDC    A,#0x0
   \   0000D8   F5..         MOV     ?V0 + 3,A
   \   0000DA   78..         MOV     R0,#?V0 + 2
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DF   A9..         MOV     R1,?V0 + 4
   \   0000E1   AA..         MOV     R2,?V0 + 0
   \   0000E3   AB..         MOV     R3,?V0 + 1
   \   0000E5   E4           CLR     A
   \   0000E6   FC           MOV     R4,A
   \   0000E7   FD           MOV     R5,A
   \   0000E8   12....       LCALL   ??_ltoa?relay
   \   0000EB   7402         MOV     A,#0x2
   \   0000ED   12....       LCALL   ?DEALLOC_XSTACK8
    402          
    403            HalLcdWriteString( (char *)buf, line );		
   \   0000F0                ; Setup parameters for call to function HalLcdWriteString
   \   0000F0   A9..         MOV     R1,?V0 + 7
   \   0000F2   85..82       MOV     DPL,?XSP + 0
   \   0000F5   85..83       MOV     DPH,?XSP + 1
   \   0000F8   AA82         MOV     R2,DPL
   \   0000FA   AB83         MOV     R3,DPH
   \   0000FC   12....       LCALL   ??HalLcdWriteString?relay
    404          
    405          #endif
    406          }
   \   0000FF   7419         MOV     A,#0x19
   \   000101   12....       LCALL   ?DEALLOC_XSTACK8
   \   000104   7F0B         MOV     R7,#0xb
   \   000106   02....       LJMP    ?BANKED_LEAVE_XDATA
    407          
    408          /**************************************************************************************************
    409           * @fn      HalLcdDisplayPercentBar
    410           *
    411           * @brief   Display percentage bar on the LCD
    412           *
    413           * @param   title   -
    414           *          value   -
    415           *
    416           * @return  None
    417           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    418          void HalLcdDisplayPercentBar( char *title, uint8 value )
   \                     HalLcdDisplayPercentBar:
    419          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    420          #if (HAL_LCD == TRUE)
    421          
    422            uint8 percent;
    423            uint8 leftOver;
    424            uint8 buf[17];
    425            uint32 err;
    426            uint8 x;
    427          
    428            /* Write the title: */
    429            HalLcdWriteString( title, HAL_LCD_LINE_1 );
   \   00000C                ; Setup parameters for call to function HalLcdWriteString
   \   00000C   7901         MOV     R1,#0x1
   \   00000E   12....       LCALL   ??HalLcdWriteString?relay
    430          
    431            if ( value > 100 )
   \   000011   EE           MOV     A,R6
   \   000012   C3           CLR     C
   \   000013   9465         SUBB    A,#0x65
   \   000015   4002         JC      ??HalLcdDisplayPercentBar_0
    432              value = 100;
   \   000017   7E64         MOV     R6,#0x64
    433          
    434            /* convert to blocks */
    435            percent = (uint8)(value / 10);
   \                     ??HalLcdDisplayPercentBar_0:
   \   000019   75F00A       MOV     B,#0xa
   \   00001C   EE           MOV     A,R6
   \   00001D   84           DIV     AB
   \   00001E   F5..         MOV     ?V0 + 3,A
    436            leftOver = (uint8)(value % 10);
   \   000020   EE           MOV     A,R6
   \   000021   75F00A       MOV     B,#0xa
   \   000024   84           DIV     AB
   \   000025   AFF0         MOV     R7,B
    437          
    438            /* Make window */
    439            osal_memcpy( buf, "[          ]  ", 15 );
   \   000027                ; Setup parameters for call to function osal_memcpy
   \   000027   75....       MOV     ?V0 + 0,#`?<Constant "[          ]  ">` & 0xff
   \   00002A   75....       MOV     ?V0 + 1,#(`?<Constant "[          ]  ">` >> 8) & 0xff
   \   00002D   75..00       MOV     ?V0 + 2,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000035   7C0F         MOV     R4,#0xf
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7403         MOV     A,#0x3
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   AA82         MOV     R2,DPL
   \   000040   AB83         MOV     R3,DPH
   \   000042   12....       LCALL   ??osal_memcpy?relay
   \   000045   7403         MOV     A,#0x3
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
    440          
    441            for ( x = 0; x < percent; x ++ )
   \   00004A   E5..         MOV     A,?V0 + 3
   \   00004C   601B         JZ      ??HalLcdDisplayPercentBar_1
    442            {
    443              buf[1+x] = '>';
   \   00004E   F8           MOV     R0,A
   \   00004F   7900         MOV     R1,#0x0
   \   000051   7A3E         MOV     R2,#0x3e
   \   000053   7401         MOV     A,#0x1
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \                     ??HalLcdDisplayPercentBar_2:
   \   000058   EA           MOV     A,R2
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E8           MOV     A,R0
   \   00005C   24FF         ADD     A,#-0x1
   \   00005E   18           DEC     R0
   \   00005F   E9           MOV     A,R1
   \   000060   34FF         ADDC    A,#-0x1
   \   000062   F9           MOV     R1,A
   \   000063   48           ORL     A,R0
   \   000064   70F2         JNZ     ??HalLcdDisplayPercentBar_2
    444            }
   \   000066   85....       MOV     ?V0 + 2,?V0 + 3
    445          
    446            if ( leftOver >= 5 )
   \                     ??HalLcdDisplayPercentBar_1:
   \   000069   EF           MOV     A,R7
   \   00006A   C3           CLR     C
   \   00006B   9405         SUBB    A,#0x5
   \   00006D   4019         JC      ??HalLcdDisplayPercentBar_3
    447              buf[1+x] = '+';
   \   00006F   85....       MOV     ?V0 + 0,?V0 + 2
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   E582         MOV     A,DPL
   \   00007A   25..         ADD     A,?V0 + 0
   \   00007C   F582         MOV     DPL,A
   \   00007E   E583         MOV     A,DPH
   \   000080   3400         ADDC    A,#0x0
   \   000082   F583         MOV     DPH,A
   \   000084   A3           INC     DPTR
   \   000085   742B         MOV     A,#0x2b
   \   000087   F0           MOVX    @DPTR,A
    448          
    449            err = (uint32)value;
    450            _ltoa( err, (uint8*)&buf[13], 10 );
   \                     ??HalLcdDisplayPercentBar_3:
   \   000088                ; Setup parameters for call to function _ltoa
   \   000088   740D         MOV     A,#0xd
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   8582..       MOV     ?V0 + 0,DPL
   \   000090   8583..       MOV     ?V0 + 1,DPH
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   790A         MOV     R1,#0xa
   \   00009A   EE           MOV     A,R6
   \   00009B   FA           MOV     R2,A
   \   00009C   E4           CLR     A
   \   00009D   FB           MOV     R3,A
   \   00009E   FC           MOV     R4,A
   \   00009F   FD           MOV     R5,A
   \   0000A0   12....       LCALL   ??_ltoa?relay
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
    451          
    452            HalLcdWriteString( (char*)buf, HAL_LCD_LINE_2 );
   \   0000A8                ; Setup parameters for call to function HalLcdWriteString
   \   0000A8   7902         MOV     R1,#0x2
   \   0000AA   85..82       MOV     DPL,?XSP + 0
   \   0000AD   85..83       MOV     DPH,?XSP + 1
   \   0000B0   AA82         MOV     R2,DPL
   \   0000B2   AB83         MOV     R3,DPH
   \   0000B4   12....       LCALL   ??HalLcdWriteString?relay
    453          
    454          #endif
    455          
    456          }
   \   0000B7   7411         MOV     A,#0x11
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BC   7F04         MOV     R7,#0x4
   \   0000BE   02....       LJMP    ?BANKED_LEAVE_XDATA
    457          
    458          
    459          #if (HAL_LCD == TRUE)
    460          /**************************************************************************************************
    461           *                                    HARDWARE LCD
    462           **************************************************************************************************/
    463          
    464          /**************************************************************************************************
    465           * @fn      halLcd_ConfigIO
    466           *
    467           * @brief   Configure IO lines needed for LCD control.
    468           *
    469           * @param   None
    470           *
    471           * @return  None
    472           **************************************************************************************************/
    473          static void halLcd_ConfigIO(void)
    474          {
    475            /* GPIO configuration */
    476            HAL_CONFIG_IO_OUTPUT(HAL_LCD_RESET_PORT, HAL_LCD_RESET_PIN, 1);
    477            HAL_CONFIG_IO_OUTPUT(HAL_LCD_CS_PORT, HAL_LCD_CS_PIN, 1);
    478          }
    479          
    480          /**************************************************************************************************
    481           * @fn      halLcd_ConfigSPI
    482           *
    483           * @brief   Configure SPI lines needed for talking to LCD.
    484           *
    485           * @param   None
    486           *
    487           * @return  None
    488           **************************************************************************************************/
    489          static void halLcd_ConfigSPI(void)
    490          {
    491            /* UART/SPI Peripheral configuration */
    492          
    493             uint8 baud_exponent;
    494             uint8 baud_mantissa;
    495          
    496            /* Set SPI on UART 1 alternative 2 */
    497            PERCFG |= 0x02;
    498          
    499            /* Configure clk, master out and master in lines */
    500            HAL_CONFIG_IO_PERIPHERAL(HAL_LCD_CLK_PORT,  HAL_LCD_CLK_PIN);
    501            HAL_CONFIG_IO_PERIPHERAL(HAL_LCD_MOSI_PORT, HAL_LCD_MOSI_PIN);
    502            HAL_CONFIG_IO_PERIPHERAL(HAL_LCD_MISO_PORT, HAL_LCD_MISO_PIN);
    503          
    504          
    505            /* Set SPI speed to 1 MHz (the values assume system clk of 32MHz)
    506             * Confirm on board that this results in 1MHz spi clk.
    507             */
    508            baud_exponent = 15;
    509            baud_mantissa =  0;
    510          
    511            /* Configure SPI */
    512            U1UCR  = 0x80;      /* Flush and goto IDLE state. 8-N-1. */
    513            //U1CSR  = 0x00;      
    514            U1CSR &= ~0xA0;/* SPI mode, master. */
    515            U1GCR  = HAL_SPI_TRANSFER_MSB_FIRST | HAL_SPI_CLOCK_PHA_1 | HAL_SPI_CLOCK_POL_HI | baud_exponent;
    516            U1BAUD = baud_mantissa;
    517          }
    518          
    519          /**************************************************************************************************
    520           * @fn      HalLcd_HW_Init
    521           *
    522           * @brief   Initilize HW LCD Driver.
    523           *
    524           * @param   None
    525           *
    526           * @return  None
    527           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    528          void HalLcd_HW_Init(void)
   \                     HalLcd_HW_Init:
    529          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    530            /* Initialize LCD IO lines */
    531            halLcd_ConfigIO();
   \   000004   53F3FE       ANL     0xf3,#0xfe
   \   000007   D280         SETB    0x80.0
   \   000009   43FD01       ORL     0xfd,#0x1
   \   00000C   53F4FB       ANL     0xf4,#0xfb
   \   00000F   D292         SETB    0x90.2
   \   000011   43FE04       ORL     0xfe,#0x4
    532          
    533            /* Initialize SPI */
    534            halLcd_ConfigSPI();
   \   000014   43F102       ORL     0xf1,#0x2
   \   000017   43F420       ORL     0xf4,#0x20
   \   00001A   43F440       ORL     0xf4,#0x40
   \   00001D   43F480       ORL     0xf4,#0x80
   \   000020   75FB80       MOV     0xfb,#-0x80
   \   000023   53F85F       ANL     0xf8,#0x5f
   \   000026   75FCEF       MOV     0xfc,#-0x11
   \   000029   75FA00       MOV     0xfa,#0x0
    535          
    536            /* Perform reset */
    537            LCD_ACTIVATE_RESET();
   \   00002C   C280         CLR     0x80.0
    538            HalLcd_HW_WaitUs(8000); // 8ms
   \   00002E                ; Setup parameters for call to function HalLcd_HW_WaitUs
   \   00002E   7A40         MOV     R2,#0x40
   \   000030   7B1F         MOV     R3,#0x1f
   \   000032   12....       LCALL   ??HalLcd_HW_WaitUs?relay
    539            LCD_RELEASE_RESET();
   \   000035   D280         SETB    0x80.0
    540            HalLcd_HW_WaitUs(30000); //60ms
   \   000037                ; Setup parameters for call to function HalLcd_HW_WaitUs
   \   000037   7A30         MOV     R2,#0x30
   \   000039   7B75         MOV     R3,#0x75
   \   00003B   12....       LCALL   ??HalLcd_HW_WaitUs?relay
    541            HalLcd_HW_WaitUs(30000); 
   \   00003E                ; Setup parameters for call to function HalLcd_HW_WaitUs
   \   00003E   7A30         MOV     R2,#0x30
   \   000040   7B75         MOV     R3,#0x75
   \   000042   12....       LCALL   ??HalLcd_HW_WaitUs?relay
    542          
    543            HalLcd_HW_SetBackLight(0); // ÉèÖÃ±³¹âÁÁ¶È 
   \   000045                ; Setup parameters for call to function HalLcd_HW_SetBackLight
   \   000045   7900         MOV     R1,#0x0
   \   000047   12....       LCALL   ??HalLcd_HW_SetBackLight?relay
    544            HalLcd_HW_Clear();
   \   00004A                ; Setup parameters for call to function HalLcd_HW_Clear
   \   00004A   12....       LCALL   ??HalLcd_HW_Clear?relay
    545            HalLcd_HW_SetBackLight(100);
   \   00004D                ; Setup parameters for call to function HalLcd_HW_SetBackLight
   \   00004D   7964         MOV     R1,#0x64
   \   00004F   12....       LCALL   ??HalLcd_HW_SetBackLight?relay
    546          	
    547            HalLcd_HW_FontCharSet(0,1);  // ÉèÖÃ×ÖÌå¼°¸²¸ÇÄ£Ê½
   \   000052                ; Setup parameters for call to function HalLcd_HW_FontCharSet
   \   000052   7A01         MOV     R2,#0x1
   \   000054   7900         MOV     R1,#0x0
   \   000056   12....       LCALL   ??HalLcd_HW_FontCharSet?relay
    548            HalLcd_HW_FontMode(1,0);
   \   000059                ; Setup parameters for call to function HalLcd_HW_FontMode
   \   000059   7A00         MOV     R2,#0x0
   \   00005B   7901         MOV     R1,#0x1
   \   00005D   12....       LCALL   ??HalLcd_HW_FontMode?relay
    549          }
   \   000060   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000063                REQUIRE _A_P0
   \   000063                REQUIRE PERCFG
   \   000063                REQUIRE P1SEL
   \   000063                REQUIRE U1UCR
   \   000063                REQUIRE _A_U1CSR
   \   000063                REQUIRE U1GCR
   \   000063                REQUIRE U1BAUD
   \   000063                REQUIRE P0SEL
   \   000063                REQUIRE P0DIR
   \   000063                REQUIRE _A_P1
   \   000063                REQUIRE P1DIR
    550          
    551          /**************************************************************************************************
    552           * @fn      HalLcd_HW_Control
    553           *
    554           * @brief   Write 1 command to the LCD
    555           *
    556           * @param   uint8 cmd - command to be written to the LCD
    557           *
    558           * @return  None
    559           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    560          void HalLcd_HW_Control(uint8 cmd)
   \                     HalLcd_HW_Control:
    561          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    562            LCD_SPI_BEGIN();
   \   000000   C292         CLR     0x90.2
    563            LCD_SPI_TX(cmd);
   \   000002   53F8F9       ANL     0xf8,#0xf9
   \   000005   89F9         MOV     0xf9,R1
   \                     ??HalLcd_HW_Control_0:
   \   000007   A2F9         MOV     C,0xf8.1
   \   000009   50FC         JNC     ??HalLcd_HW_Control_0
    564            LCD_SPI_WAIT_RXRDY();
   \                     ??HalLcd_HW_Control_1:
   \   00000B   A2F9         MOV     C,0xf8.1
   \   00000D   50FC         JNC     ??HalLcd_HW_Control_1
    565            LCD_SPI_END();
   \   00000F   00           NOP
   \   000010   00           NOP
   \   000011   00           NOP
   \   000012   00           NOP
   \   000013   D292         SETB    0x90.2
    566          }
   \   000015   02....       LJMP    ?BRET
   \   000018                REQUIRE _A_P1
   \   000018                REQUIRE _A_U1CSR
   \   000018                REQUIRE U1DBUF
    567          
    568          /*********************************************************************
    569           * º¯ÊýÃû³Æ£ºHalLcd_HW_Write
    570           * ¹¦    ÄÜ£ºÐ´ÈëÒ»¸ö±ê×¼ASCII×Ö·û
    571           * Èë¿Ú²ÎÊý£ºx  XÖá×ø±ê     
    572           *           y  YÖá×ø±ê
    573           *           a  ÒªÏÔÊ¾×Ö·ûµÄASCIIÂë
    574           * ³ö¿Ú²ÎÊý£ºÎÞ
    575           * ·µ »Ø Öµ£ºÎÞ
    576           ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    577          void HalLcd_HW_Write(unsigned char x,unsigned char y,unsigned char a)
   \                     HalLcd_HW_Write:
    578          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
   \   000009   EB           MOV     A,R3
   \   00000A   FE           MOV     R6,A
    579          
    580            LCD_SPI_BEGIN();	//SSÖÃµÍµçÆ½	
   \   00000B   C292         CLR     0x90.2
    581            FUNCTION_SET(0x07);	//´«ËÍÖ¸Áî0x07
   \   00000D                ; Setup parameters for call to function HalLcd_HW_Control
   \   00000D   7907         MOV     R1,#0x7
   \   00000F   12....       LCALL   ??HalLcd_HW_Control?relay
    582            FUNCTION_SET(x);	//ÒªÏÔÊ¾×Ö·ûµÄ×óÉÏ½ÇµÄXÖáÎ»ÖÃ
   \   000012                ; Setup parameters for call to function HalLcd_HW_Control
   \   000012   A9..         MOV     R1,?V0 + 0
   \   000014   12....       LCALL   ??HalLcd_HW_Control?relay
    583            FUNCTION_SET(y);	//ÒªÏÔÊ¾×Ö·ûµÄ×óÉÏ½ÇµÄYÖáÎ»ÖÃ
   \   000017                ; Setup parameters for call to function HalLcd_HW_Control
   \   000017   EF           MOV     A,R7
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   ??HalLcd_HW_Control?relay
    584            FUNCTION_SET(a);	//ÒªÏÔÊ¾×Ö·ûASCII×Ö·ûµÄASCIIÂëÖµ
   \   00001C                ; Setup parameters for call to function HalLcd_HW_Control
   \   00001C   EE           MOV     A,R6
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   ??HalLcd_HW_Control?relay
    585            LCD_SPI_END();	//Íê³É²Ù×÷ÖÃSS¸ßµçÆ½
   \   000021   00           NOP
   \   000022   00           NOP
   \   000023   00           NOP
   \   000024   00           NOP
   \   000025   80..         SJMP    ?Subroutine1
   \   000027                REQUIRE _A_P1
    586          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D292         SETB    0x90.2
   \   000002                REQUIRE ??Subroutine5_0
   \   000002                ; // Fall through to label ??Subroutine5_0
    587          
    588          
    589          /**************************************************************************************************
    590           * @fn          HalLcd_HW_SetContrast
    591           *
    592           * @brief       Set display contrast
    593           *
    594           * @param       uint8 value - contrast value
    595           *
    596           * @return      none
    597           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    598          void HalLcd_HW_SetContrast(uint8 value)
   \                     HalLcd_HW_SetContrast:
    599          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    600            return;
   \   000000   02....       LJMP    ?BRET
    601          }
    602          
    603          /**************************************************************************************************
    604           * @fn      HalLcd_HW_Clear
    605           *
    606           * @brief   Clear the HW LCD
    607           *
    608           * @param   None
    609           *
    610           * @return  None
    611           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    612          void HalLcd_HW_Clear(void)
   \                     HalLcd_HW_Clear:
    613          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    614            //ÇåÆÁ²Ù×÷
    615            LCD_SPI_BEGIN();		//SSÖÃµÍµçÆ½
   \   000004   C292         CLR     0x90.2
    616            FUNCTION_SET(0x80);		//ËÍÖ¸Áî0x80
   \   000006                ; Setup parameters for call to function HalLcd_HW_Control
   \   000006   7980         MOV     R1,#-0x80
   \   000008   12....       LCALL   ??HalLcd_HW_Control?relay
    617            LCD_SPI_END();		//Íê³É²Ù×÷ÖÃSS¸ßµçÆ½
   \   00000B   00           NOP
   \   00000C   00           NOP
   \   00000D   00           NOP
   \   00000E   00           NOP
   \   00000F   D292         SETB    0x90.2
    618          }
   \   000011   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000014                REQUIRE _A_P1
    619          
    620          /*********************************************************************
    621           * º¯ÊýÃû³Æ£ºHalLcd_HW_SetBackLight
    622           * ¹¦    ÄÜ£ºÉèÖÃ±³¹âÁÁ¶È
    623           * Èë¿Ú²ÎÊý£ºdeg    ±³¹âÁÁ¶ÈÖµ(·¶Î§£º0-127)
    624           * ³ö¿Ú²ÎÊý£ºÎÞ
    625           * ·µ »Ø Öµ£ºÎÞ
    626           ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    627          void HalLcd_HW_SetBackLight(unsigned char Deg) 
   \                     HalLcd_HW_SetBackLight:
    628          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    629          
    630            LCD_SPI_BEGIN();		//SSÖÃµÍµçÆ½	
   \   000007   C292         CLR     0x90.2
    631            FUNCTION_SET(0x8A);		//´«ËÍÖ¸Áî0x8A
   \   000009                ; Setup parameters for call to function HalLcd_HW_Control
   \   000009   798A         MOV     R1,#-0x76
   \   00000B   12....       LCALL   ??HalLcd_HW_Control?relay
    632            FUNCTION_SET(Deg);		//·¢ËÍÉèÖÃÖµ
   \   00000E                ; Setup parameters for call to function HalLcd_HW_Control
   \   00000E   EE           MOV     A,R6
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   ??HalLcd_HW_Control?relay
    633            LCD_SPI_END();		//Íê³É²Ù×÷ÖÃSS¸ßµçÆ½
   \   000013   00           NOP
   \   000014   00           NOP
   \   000015   00           NOP
   \   000016   00           NOP
   \   000017   80..         SJMP    ?Subroutine1
   \   000019                REQUIRE _A_P1
    634          }
    635          
    636          /*********************************************************************
    637           * º¯ÊýÃû³Æ£ºHalLcd_HW_FontCharSet
    638           * ¹¦    ÄÜ£ºASCII×Ö·û×ÖÌåÉèÖÃ
    639           * Èë¿Ú²ÎÊý£ºFont_NUM ×ÖÌåÑ¡Ôñ,ÒÔÇý¶¯Ëù´øµÄ×Ö¿âÎª×¼
    640           *           Color  ÎÄ±¾ÑÕÉ«,½ö×÷ÓÃÓÚASCII×Ö¿â 
    641           * ³ö¿Ú²ÎÊý£ºÎÞ
    642           * ·µ »Ø Öµ£ºÎÞ
    643           ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    644          void HalLcd_HW_FontCharSet(unsigned char Font_NUM,unsigned char Color)
   \                     HalLcd_HW_FontCharSet:
    645          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    646            unsigned char ucTemp=0;
    647          	
    648            ucTemp = (Font_NUM<<4)|Color;
    649            //ÉèÖÃASCII×Ö·ûµÄ×ÖÐÍ
    650            LCD_SPI_BEGIN();		//SSÖÃµÍµçÆ½			
   \   000009   C292         CLR     0x90.2
    651            FUNCTION_SET(0x81);		//´«ËÍÖ¸Áî0x81
   \   00000B                ; Setup parameters for call to function HalLcd_HW_Control
   \   00000B   7981         MOV     R1,#-0x7f
   \   00000D   12....       LCALL   ??HalLcd_HW_Control?relay
    652            FUNCTION_SET(ucTemp);		//·¢ËÍÉèÖÃÖµ
   \   000010                ; Setup parameters for call to function HalLcd_HW_Control
   \   000010   EE           MOV     A,R6
   \   000011   C4           SWAP    A
   \   000012   54F0         ANL     A,#0xf0
   \   000014   4F           ORL     A,R7
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   ??HalLcd_HW_Control?relay
    653            LCD_SPI_END();		//Íê³É²Ù×÷ÖÃSS¸ßµçÆ½	
   \   000019   00           NOP
   \   00001A   00           NOP
   \   00001B   00           NOP
   \   00001C   00           NOP
   \   00001D   80..         SJMP    ?Subroutine1
   \   00001F                REQUIRE _A_P1
    654          }
    655          
    656          /*********************************************************************
    657           * º¯ÊýÃû³Æ£ºHalLcd_HW_FontMode
    658           * ¹¦    ÄÜ£ºÉèÖÃ×Ö·ûÏÔÊ¾¸²¸ÇÄ£Ê½
    659           * Èë¿Ú²ÎÊý£ºCover  ×Ö·û¸²¸ÇÄ£Ê½ÉèÖÃ£¬0»ò1
    660           *	     Color  ¸²¸ÇÄ£Ê½Îª1Ê±×Ö·ûÏÔÊ¾Ê±µÄ±³¾°¸²¸ÇÉ« 
    661           * ³ö¿Ú²ÎÊý£ºÎÞ
    662           * ·µ »Ø Öµ£ºÎÞ
    663           ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    664          void HalLcd_HW_FontMode(unsigned char Cover,unsigned char Color)
   \                     HalLcd_HW_FontMode:
    665          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    666            unsigned char ucTemp=0;
    667          	
    668            ucTemp = (Cover<<4)|Color;
    669          	
    670            LCD_SPI_BEGIN();		//SSÖÃµÍµçÆ½			
   \   000009   C292         CLR     0x90.2
    671            FUNCTION_SET(0x89);		//´«ËÍÖ¸Áî0x89
   \   00000B                ; Setup parameters for call to function HalLcd_HW_Control
   \   00000B   7989         MOV     R1,#-0x77
   \   00000D   12....       LCALL   ??HalLcd_HW_Control?relay
    672            FUNCTION_SET(ucTemp);		//·¢ËÍÉèÖÃÖµ
   \   000010                ; Setup parameters for call to function HalLcd_HW_Control
   \   000010   EE           MOV     A,R6
   \   000011   C4           SWAP    A
   \   000012   54F0         ANL     A,#0xf0
   \   000014   4F           ORL     A,R7
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   ??HalLcd_HW_Control?relay
    673            LCD_SPI_END();		//Íê³É²Ù×÷ÖÃSS¸ßµçÆ½	
   \   000019   00           NOP
   \   00001A   00           NOP
   \   00001B   00           NOP
   \   00001C   00           NOP
   \   00001D                REQUIRE ?Subroutine1
   \   00001D                REQUIRE _A_P1
   \   00001D                ; // Fall through to label ?Subroutine1
    674          }
    675          
    676          
    677          /**************************************************************************************************
    678           * @fn      HalLcd_HW_ClearAllSpecChars
    679           *
    680           * @brief   Clear all special chars
    681           *
    682           * @param   None
    683           *
    684           * @return  None
    685           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    686          void HalLcd_HW_ClearAllSpecChars(void)
   \                     HalLcd_HW_ClearAllSpecChars:
    687          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    688            return;
   \   000000   02....       LJMP    ?BRET
    689          }
    690          
    691          /**************************************************************************************************
    692           * @fn      HalLcd_HW_WriteChar
    693           *
    694           * @brief   Write one char to the display
    695           *
    696           * @param   uint8 line - line number that the char will be displayed
    697           *          uint8 col - colum where the char will be displayed
    698           *
    699           * @return  None
    700           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    701          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text)
   \                     HalLcd_HW_WriteChar:
    702          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   8A..         MOV     ?V0 + 0,R2
    703            if (col < LCD_MAX_LINE_LENGTH)
   \   000009   EA           MOV     A,R2
   \   00000A   C3           CLR     C
   \   00000B   9415         SUBB    A,#0x15
   \   00000D   5012         JNC     ??HalLcd_HW_WriteChar_0
    704            {
    705              HalLcd_HW_Write(col*LCD_X_WITCH, (line-1)*LCD_Y_WITCH, text);
   \   00000F                ; Setup parameters for call to function HalLcd_HW_Write
   \   00000F   75F00A       MOV     B,#0xa
   \   000012   74FF         MOV     A,#-0x1
   \   000014   2F           ADD     A,R7
   \   000015   A4           MUL     AB
   \   000016   FA           MOV     R2,A
   \   000017   75F006       MOV     B,#0x6
   \   00001A   E5..         MOV     A,?V0 + 0
   \   00001C   A4           MUL     AB
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   ??HalLcd_HW_Write?relay
    706            }
    707            else
    708            {
    709              return;
    710            }
    711          }
   \                     ??HalLcd_HW_WriteChar_0:
   \   000021   80..         SJMP    ??Subroutine5_0
    712          
    713          /**************************************************************************************************
    714           * @fn          halLcdWriteLine
    715           *
    716           * @brief       Write one line on display
    717           *
    718           * @param       uint8 line - display line
    719           *              char *pText - text buffer to write
    720           *
    721           * @return      none
    722           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    723          void HalLcd_HW_WriteLine(uint8 line, const char *pText)
   \                     HalLcd_HW_WriteLine:
    724          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 1,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    725            uint8 count;
    726            uint8 totalLength = (uint8)osal_strlen( (char *)pText );
   \   00000B                ; Setup parameters for call to function osal_strlen
   \   00000B   12....       LCALL   ??osal_strlen?relay
   \   00000E   EA           MOV     A,R2
   \   00000F   F5..         MOV     ?V0 + 2,A
    727          
    728            /* Write the content first */
    729            for (count=0; count<totalLength; count++)
   \   000011   75..00       MOV     ?V0 + 0,#0x0
   \   000014   8018         SJMP    ??HalLcd_HW_WriteLine_0
    730            {
    731              HalLcd_HW_WriteChar(line, count, (*(pText++)));
   \                     ??HalLcd_HW_WriteLine_1:
   \   000016                ; Setup parameters for call to function HalLcd_HW_WriteChar
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FB           MOV     R3,A
   \   00001C   AA..         MOV     R2,?V0 + 0
   \   00001E   A9..         MOV     R1,?V0 + 1
   \   000020   12....       LCALL   ??HalLcd_HW_WriteChar?relay
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   AE82         MOV     R6,DPL
   \   00002A   AF83         MOV     R7,DPH
    732            }
   \   00002C   05..         INC     ?V0 + 0
   \                     ??HalLcd_HW_WriteLine_0:
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   C3           CLR     C
   \   000031   95..         SUBB    A,?V0 + 2
   \   000033   40E1         JC      ??HalLcd_HW_WriteLine_1
    733          
    734            /* Write blank spaces to rest of the line */
    735            for(count=totalLength; count<LCD_MAX_LINE_LENGTH;count++)
   \   000035   85....       MOV     ?V0 + 0,?V0 + 2
   \   000038   800B         SJMP    ??HalLcd_HW_WriteLine_2
    736            {
    737              HalLcd_HW_WriteChar(line, count, ' ');
   \                     ??HalLcd_HW_WriteLine_3:
   \   00003A                ; Setup parameters for call to function HalLcd_HW_WriteChar
   \   00003A   7B20         MOV     R3,#0x20
   \   00003C   AA..         MOV     R2,?V0 + 0
   \   00003E   A9..         MOV     R1,?V0 + 1
   \   000040   12....       LCALL   ??HalLcd_HW_WriteChar?relay
    738            }
   \   000043   05..         INC     ?V0 + 0
   \                     ??HalLcd_HW_WriteLine_2:
   \   000045   E5..         MOV     A,?V0 + 0
   \   000047   C3           CLR     C
   \   000048   9415         SUBB    A,#0x15
   \   00004A   40EE         JC      ??HalLcd_HW_WriteLine_3
    739          }
   \   00004C   7F03         MOV     R7,#0x3
   \   00004E   02....       LJMP    ?BANKED_LEAVE_XDATA
    740          
    741          /**************************************************************************************************
    742           * @fn      HalLcd_HW_WaitUs
    743           *
    744           * @brief   wait for x us. @ 32MHz MCU clock it takes 32 "nop"s for 1 us delay.
    745           *
    746           * @param   x us. range[0-65536]
    747           *
    748           * @return  None
    749           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    750          void HalLcd_HW_WaitUs(uint16 microSecs)
   \                     HalLcd_HW_WaitUs:
    751          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8020         SJMP    ??HalLcd_HW_WaitUs_0
    752            while(microSecs--)
    753            {
    754              /* 32 NOPs == 1 usecs */
    755              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \                     ??HalLcd_HW_WaitUs_1:
   \   000002   00           nop
   \   000003   00           nop
   \   000004   00           nop
   \   000005   00           nop
   \   000006   00           nop
    756              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   000007   00           nop
   \   000008   00           nop
   \   000009   00           nop
   \   00000A   00           nop
   \   00000B   00           nop
    757              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   00000C   00           nop
   \   00000D   00           nop
   \   00000E   00           nop
   \   00000F   00           nop
   \   000010   00           nop
    758              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   000011   00           nop
   \   000012   00           nop
   \   000013   00           nop
   \   000014   00           nop
   \   000015   00           nop
    759              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   000016   00           nop
   \   000017   00           nop
   \   000018   00           nop
   \   000019   00           nop
   \   00001A   00           nop
    760              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   00001B   00           nop
   \   00001C   00           nop
   \   00001D   00           nop
   \   00001E   00           nop
   \   00001F   00           nop
    761              asm("nop"); asm("nop");
   \   000020   00           nop
   \   000021   00           nop
    762            }
   \                     ??HalLcd_HW_WaitUs_0:
   \   000022   EA           MOV     A,R2
   \   000023   F8           MOV     R0,A
   \   000024   EB           MOV     A,R3
   \   000025   F9           MOV     R1,A
   \   000026   E8           MOV     A,R0
   \   000027   24FF         ADD     A,#-0x1
   \   000029   1A           DEC     R2
   \   00002A   E9           MOV     A,R1
   \   00002B   34FF         ADDC    A,#-0x1
   \   00002D   FB           MOV     R3,A
   \   00002E   E8           MOV     A,R0
   \   00002F   49           ORL     A,R1
   \   000030   70D0         JNZ     ??HalLcd_HW_WaitUs_1
    763          }
   \   000032   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteString?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteString

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteScreen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteScreen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteStringValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteStringValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteStringValueValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteStringValueValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdDisplayPercentBar?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdDisplayPercentBar

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_Control?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_Control

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_Write?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_Write

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_SetContrast?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_SetContrast

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_Clear?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_Clear

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_SetBackLight?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_SetBackLight

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_FontCharSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_FontCharSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_FontMode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_FontMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_ClearAllSpecChars?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_ClearAllSpecChars

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_WriteChar?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_WriteChar

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_WriteLine?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_WriteLine

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_WaitUs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_WaitUs

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZIGCLOUD ELECTRONICS">`:
   \   000000   5A494743     DB "ZIGCLOUD ELECTRONICS"
   \            4C4F5544
   \            20454C45
   \            4354524F
   \            4E494353
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "[          ]  ">`:
   \   000000   5B202020     DB "[          ]  "
   \            20202020
   \            2020205D
   \            202000  
    764          #endif
    765          
    766          
    767          /**************************************************************************************************
    768          **************************************************************************************************/
    769          
    770          
    771          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     32  HalLcdDisplayPercentBar
                          0 0 29 -> HalLcdWriteString
                          0 0 31 -> _ltoa
                          0 0 32 -> osal_memcpy
       2      0      0  HalLcdInit
                          2 0  0 -> HalLcd_HW_Init
       0      0      9  HalLcdWriteScreen
                          0 0  9 -> HalLcdWriteString
       0      0     64  HalLcdWriteString
                          0 0 17 -> HalLcdWriteString
                          0 0 17 -> HalLcd_HW_WriteLine
                          0 0 17 -> osal_mem_alloc
                          0 0 17 -> osal_mem_free
                          0 0 20 -> osal_memcpy
                          0 0 17 -> osal_strlen
       0      0     47  HalLcdWriteStringValue
                          0 0 43 -> HalLcdWriteString
                          0 0 45 -> _ltoa
                          0 0 46 -> osal_memcpy
                          0 0 43 -> osal_strlen
       0      0     51  HalLcdWriteStringValueValue
                          0 0 44 -> HalLcdWriteString
                          0 0 46 -> _ltoa
                          0 0 47 -> osal_memcpy
                          0 0 44 -> osal_strlen
       0      0     44  HalLcdWriteValue
                          0 0 41 -> HalLcdWriteString
                          0 0 43 -> _ltoa
       2      0      0  HalLcd_HW_Clear
                          2 0  0 -> HalLcd_HW_Control
       0      0      0  HalLcd_HW_ClearAllSpecChars
       0      0      9  HalLcd_HW_Control
       0      0      9  HalLcd_HW_FontCharSet
                          0 0  9 -> HalLcd_HW_Control
       0      0      9  HalLcd_HW_FontMode
                          0 0  9 -> HalLcd_HW_Control
       2      0      0  HalLcd_HW_Init
                          2 0  0 -> HalLcd_HW_Clear
                          2 0  0 -> HalLcd_HW_FontCharSet
                          2 0  0 -> HalLcd_HW_FontMode
                          2 0  0 -> HalLcd_HW_SetBackLight
                          2 0  0 -> HalLcd_HW_WaitUs
       0      0      9  HalLcd_HW_SetBackLight
                          0 0  9 -> HalLcd_HW_Control
       0      0      0  HalLcd_HW_SetContrast
       0      0      0  HalLcd_HW_WaitUs
       0      0     18  HalLcd_HW_Write
                          0 0  9 -> HalLcd_HW_Control
       0      0     20  HalLcd_HW_WriteChar
                          0 0  9 -> HalLcd_HW_Write
       0      0     28  HalLcd_HW_WriteLine
                          0 0 11 -> HalLcd_HW_WriteChar
                          0 0 11 -> osal_strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      21  ?<Constant "ZIGCLOUD ELECTRONICS">
      15  ?<Constant "[          ]  ">
       6  ??HalLcdDisplayPercentBar?relay
       6  ??HalLcdInit?relay
       6  ??HalLcdWriteScreen?relay
       6  ??HalLcdWriteString?relay
       6  ??HalLcdWriteStringValue?relay
       6  ??HalLcdWriteStringValueValue?relay
       6  ??HalLcdWriteValue?relay
       6  ??HalLcd_HW_Clear?relay
       6  ??HalLcd_HW_ClearAllSpecChars?relay
       6  ??HalLcd_HW_Control?relay
       6  ??HalLcd_HW_FontCharSet?relay
       6  ??HalLcd_HW_FontMode?relay
       6  ??HalLcd_HW_Init?relay
       6  ??HalLcd_HW_SetBackLight?relay
       6  ??HalLcd_HW_SetContrast?relay
       6  ??HalLcd_HW_WaitUs?relay
       6  ??HalLcd_HW_Write?relay
       6  ??HalLcd_HW_WriteChar?relay
       6  ??HalLcd_HW_WriteLine?relay
       4  ??Subroutine3_0
       8  ??Subroutine4_0
       5  ??Subroutine5_0
       7  ?Subroutine0
       2  ?Subroutine1
      10  ?Subroutine2
     193  HalLcdDisplayPercentBar
      14  HalLcdInit
      26  HalLcdWriteScreen
     282  HalLcdWriteString
     126  HalLcdWriteStringValue
     265  HalLcdWriteStringValueValue
      67  HalLcdWriteValue
      20  HalLcd_HW_Clear
       3  HalLcd_HW_ClearAllSpecChars
      24  HalLcd_HW_Control
      31  HalLcd_HW_FontCharSet
      29  HalLcd_HW_FontMode
      99  HalLcd_HW_Init
      25  HalLcd_HW_SetBackLight
       3  HalLcd_HW_SetContrast
      53  HalLcd_HW_WaitUs
      39  HalLcd_HW_Write
      35  HalLcd_HW_WriteChar
      81  HalLcd_HW_WriteLine
       2  Lcd_Line1
       1  P0DIR
       1  P0SEL
       1  P1DIR
       1  P1SEL
       1  PERCFG
       1  U1BAUD
       1  U1DBUF
       1  U1GCR
       1  U1UCR
       1  _A_P0
       1  _A_P1
       1  _A_U1CSR

 
 1 451 bytes in segment BANKED_CODE
   114 bytes in segment BANK_RELAYS
    12 bytes in segment SFR_AN
    36 bytes in segment XDATA_ROM_C
     2 bytes in segment XDATA_Z
 
 1 565 bytes of CODE  memory
    36 bytes of CONST memory
     0 bytes of DATA  memory (+ 12 bytes shared)
     2 bytes of XDATA memory

Errors: none
Warnings: none
