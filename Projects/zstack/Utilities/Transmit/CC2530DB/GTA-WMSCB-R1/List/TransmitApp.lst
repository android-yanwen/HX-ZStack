###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             18/Aug/2016  19:18:18 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\Source\TransmitApp.c        #
#    Command line       =  -f D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\ #
#                          zstack\Utilities\Transmit\CC2530DB\..\..\..\Tools\ #
#                          CC2530DB\f8wEndev.cfg (-DCPU32MHZ                  #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\..\..\..\Tools\CC2 #
#                          530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0        #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00001000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1178                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=3             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=2    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\work\ZSTACK-GTAMODBUS-v1 #
#                          .0£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\Sour #
#                          ce\TransmitApp.c -D xNWK_AUTO_POLL -D xMT_TASK -D  #
#                          xZTOOL_P1 -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       #
#                          ZDNWKMGR_MIN_TRANSMISSIONS=0 -D xGTA_DEBUG -D      #
#                          ZIGBEEPRO -D GTA_WMSCB_R1 -lC                      #
#                          D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\GTA-WMSCB-R1\List\ #
#                           -lA D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Project #
#                          s\zstack\Utilities\Transmit\CC2530DB\GTA-WMSCB-R1\ #
#                          List\ --diag_suppress Pe001,Pa010 -o               #
#                          D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\GTA-WMSCB-R1\Obj\  #
#                          -e --no_code_motion --debug --core=plain           #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I D:\work\ZSTACK-GTAMODBUS-v #
#                          1.0£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC2 #
#                          530DB\ -I D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\Sourc #
#                          e\ -I D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projec #
#                          ts\zstack\Utilities\Transmit\CC2530DB\..\..\..\ZMa #
#                          in\TI2530DB\ -I D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³Î #
#                          Ä£©\Projects\zstack\Utilities\Transmit\CC2530DB\.. #
#                          \..\..\..\..\Components\hal\include\ -I            #
#                          D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\..\..\..\..\..\Com #
#                          ponents\hal\target\CC2530EB\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\..\..\..\..\..\Com #
#                          ponents\mac\include\ -I D:\work\ZSTACK-GTAMODBUS-v #
#                          1.0£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC2 #
#                          530DB\..\..\..\..\..\Components\mac\high_level\    #
#                          -I D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\ #
#                          zstack\Utilities\Transmit\CC2530DB\..\..\..\..\..\ #
#                          Components\mac\low_level\srf04\ -I                 #
#                          D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\..\..\..\..\..\Com #
#                          ponents\mac\low_level\srf04\single_chip\ -I        #
#                          D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\..\..\..\..\..\Com #
#                          ponents\mt\ -I D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ #
#                          £©\Projects\zstack\Utilities\Transmit\CC2530DB\..\ #
#                          ..\..\..\..\Components\osal\include\ -I            #
#                          D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\..\..\..\..\..\Com #
#                          ponents\services\saddr\ -I                         #
#                          D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\..\..\..\..\..\Com #
#                          ponents\services\sdata\ -I                         #
#                          D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\..\..\..\..\..\Com #
#                          ponents\stack\af\ -I D:\work\ZSTACK-GTAMODBUS-v1.0 #
#                          £¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC2530 #
#                          DB\..\..\..\..\..\Components\stack\nwk\ -I         #
#                          D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\..\..\..\..\..\Com #
#                          ponents\stack\sapi\ -I D:\work\ZSTACK-GTAMODBUS-v1 #
#                          .0£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\sec\ -I       #
#                          D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\..\..\..\..\..\Com #
#                          ponents\stack\sys\ -I D:\work\ZSTACK-GTAMODBUS-v1. #
#                          0£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\..\..\..\..\..\Components\stack\zdo\ -I        #
#                          D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\..\..\..\..\..\Com #
#                          ponents\zmac\ -I D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ #
#                          ÎÄ£©\Projects\zstack\Utilities\Transmit\CC2530DB\. #
#                          .\..\..\..\..\Components\zmac\f8w\ -Ohz            #
#                          --require_prototypes                               #
#    List file          =  D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\GTA-WMSCB-R1\List\ #
#                          TransmitApp.lst                                    #
#    Object file        =  D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\GTA-WMSCB-R1\Obj\T #
#                          ransmitApp.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c
      1          /**************************************************************************************************
      2            Filename:       TransmitApp.c
      3            Revised:        $Date: 2012-03-05 09:54:49 -0800 (Mon, 05 Mar 2012) $
      4            Revision:       $Revision: 29619 $
      5          
      6            Description:    Transmit Application (no Profile).
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application will send a data packet to another
     42            tranmitApp device as fast as it can.  The receiving
     43            transmitApp device will calculate the following transmit
     44            rate statistics:
     45              - Number bytes in the last second
     46              - Number of seconds running
     47              - Average number of bytes per second
     48              - Number of packets received.
     49          
     50            The application will send one message and as soon as it
     51            receives the confirmation for that message it will send
     52            the next message.
     53          
     54            If you would like a delay between messages
     55            define TRANSMITAPP_DELAY_SEND and set the delay amount
     56            in TRANSMITAPP_SEND_DELAY.
     57          
     58            TransmitApp_MaxDataLength defines the message size
     59          
     60            Set TRANSMITAPP_TX_OPTIONS to AF_MSG_ACK_REQUEST to send
     61            the message expecting an APS ACK, this will decrease your
     62            throughput.  Set TRANSMITAPP_TX_OPTIONS to 0 for no
     63            APS ACK.
     64          
     65            This applications doesn't have a profile, so it handles
     66            everything directly - itself.
     67          
     68            Key control:
     69              SW1:  Starts and stops the transmitting
     70              SW2:  initiates end device binding
     71              SW3:  Resets the display totals
     72              SW4:  initiates a match description request
     73          
     74            Notes:
     75          
     76              This application was intended to be used to test the maximum
     77              throughput between 2 devices in a network - between routers
     78              coordinators.
     79          
     80              Although not recommended, it can be used between
     81              an end device and a router (or coordinator), but you must
     82              enable the delay feature (TRANSMITAPP_DELAY_SEND and
     83              TRANSMITAPP_SEND_DELAY).  If you don't include the delay, the
     84              end device can't receive messages because it will stop polling.
     85              Also, the delay must be greater than RESPONSE_POLL_RATE (default 100 MSec).
     86          *********************************************************************/
     87          
     88          /*********************************************************************
     89           * INCLUDES
     90           */
     91          #include "OSAL.h"
     92          #include "AF.h"
     93          #include "ZDObject.h"
     94          #include "ZDProfile.h"
     95          
     96          #include "TransmitApp.h"

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xcb
   \   unsigned char volatile __sfr T3CTL
   \                     T3CTL:
   \   000000                DS 1
     97          #include "OnBoard.h"
     98          
     99          #include "DebugTrace.h"
    100          
    101          /* HAL */
    102          #include "hal_lcd.h"
    103          #include "hal_led.h"
    104          #include "hal_key.h"
    105          #include "hal_uart.h"
    106          
    107          #include "OSAL_NV.h"
    108          
    109          #include "ZComDef.h"
    110          #include "sapi.h"//
    111          
    112          #include "hal_types.h"
    113          
    114          #if defined(GTA_WTHSB_R1)
    115          #include "hal_sht11.h"
    116          #endif
    117          
    118          #if defined(GTA_WHFRFID_R1)
    119          #include "WHFRFID.h"
    120          #endif
    121          #include <string.h>
    122          
    123          #if defined GTA_WMSCB_R1
    124          #include "ControlModule.h"
    125          #endif
    126          /*********************************************************************
    127           * MACROS
    128           */
    129          
    130          /*********************************************************************
    131           * CONSTANTS
    132           */
    133          //#define TRANSMITAPP_RANDOM_LEN
    134          
    135          #define TRANSMITAPP_STATE_WAITING 0
    136          #define TRANSMITAPP_STATE_SENDING 1
    137          
    138          #if !defined ( RTR_NWK )
    139            // Use these 2 lines to add a delay between each packet sent
    140            //  - default for end devices
    141            #define TRANSMITAPP_DELAY_SEND
    142            #define TRANSMITAPP_SEND_DELAY    (RESPONSE_POLL_RATE * 2)  // in MSecs
    143          #endif
    144          
    145          // Send with or without APS ACKs
    146          //#define TRANSMITAPP_TX_OPTIONS    (AF_DISCV_ROUTE | AF_ACK_REQUEST)
    147          #define TRANSMITAPP_TX_OPTIONS    AF_DISCV_ROUTE
    148          
    149          #define TRANSMITAPP_INITIAL_MSG_COUNT  2
    150          
    151          #define TRANSMITAPP_TRANSMIT_TIME   4  // 4 MS
    152          #define TRANSMITAPP_DISPLAY_TIMER   (2 * 1000)
    153          
    154          #if defined ( TRANSMITAPP_FRAGMENTED )
    155          #define TRANSMITAPP_MAX_DATA_LEN    225
    156          #else
    157          #define TRANSMITAPP_MAX_DATA_LEN    102
    158          #endif
    159          
    160          /*********************************************************************
    161           * TYPEDEFS
    162           */
    163          
    164          /*********************************************************************
    165           * GLOBAL VARIABLES
    166           */
    167          
    168          
    169          // This is the buffer that is sent out as data.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ];
   \                     TransmitApp_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
    171          
    172          // This is the Cluster ID List and should be filled with Application
    173          // specific cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    174          const cId_t TransmitApp_ClusterList[TRANSMITAPP_MAX_CLUSTERS] =
   \                     TransmitApp_ClusterList:
   \   000000   A100         DW 161
    175          {
    176            TRANSMITAPP_CLUSTERID_TESTMSG  // MSG Cluster ID
    177          };
    178          

   \                                 In  segment XDATA_ROM_C, align 1
    179          const SimpleDescriptionFormat_t TransmitApp_SimpleDesc =
   \                     TransmitApp_SimpleDesc:
   \   000000   01           DB 1
   \   000001   050F         DW 3845
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW TransmitApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW TransmitApp_ClusterList
    180          {
    181            TRANSMITAPP_ENDPOINT,              //  int    Endpoint;
    182            TRANSMITAPP_PROFID,                //  uint16 AppProfId[2];
    183            TRANSMITAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    184            TRANSMITAPP_DEVICE_VERSION,        //  int    AppDevVer:4;
    185            TRANSMITAPP_FLAGS,                 //  int    AppFlags:4;
    186            TRANSMITAPP_MAX_CLUSTERS,          //  byte   AppNumInClusters;
    187            (cId_t *)TransmitApp_ClusterList,  //  byte   *pAppInClusterList;
    188            TRANSMITAPP_MAX_CLUSTERS,          //  byte   AppNumInClusters;
    189            (cId_t *)TransmitApp_ClusterList   //  byte   *pAppInClusterList;
    190          };
    191          
    192          // This is the Endpoint/Interface description.  It is defined here, but
    193          // filled-in in TransmitApp_Init().  Another way to go would be to fill
    194          // in the structure here and make it a "const" (in code space).  The
    195          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          endPointDesc_t TransmitApp_epDesc;
   \                     TransmitApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    197          
    198          /*********************************************************************
    199           * EXTERNAL VARIABLES
    200           */
    201          
    202          /*********************************************************************
    203           * EXTERNAL FUNCTIONS
    204           */
    205          
    206          /*********************************************************************
    207           * LOCAL VARIABLES
    208           */
    209          
    210          // Task ID for event processing - received when TransmitApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          byte TransmitApp_TaskID;
   \                     TransmitApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    212          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          devStates_t TransmitApp_NwkState;
   \                     TransmitApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    214          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          static byte TransmitApp_TransID;  // This is the unique message ID (counter)
   \                     TransmitApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    216          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          afAddrType_t TransmitApp_DstAddr;
   \                     TransmitApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          afAddrType_t TestDirectSent_DstAddr;
   \                     TestDirectSent_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          byte TransmitApp_State;
   \                     TransmitApp_State:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    220          
    221          // Shadow of the OSAL system clock used for calculating actual time expired.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    222          static uint32 clkShdw;
   \                     clkShdw:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    223          // Running total count of test messages recv/sent since beginning current run.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    224          static uint32 rxTotal, txTotal;
   \                     rxTotal:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     txTotal:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    225          // Running count of test messages recv/sent since last display / update - 1 Hz.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    226          static uint32 rxAccum, txAccum;
   \                     rxAccum:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     txAccum:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    227          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    228          static byte timerOn;
   \                     timerOn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    229          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    230          static byte timesToSend;
   \                     timesToSend:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    231          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    232          uint16 pktCounter;
   \                     pktCounter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    233          
    234          // Max Data Request Length

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    235          uint16 TransmitApp_MaxDataLength;
   \                     TransmitApp_MaxDataLength:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    236          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    237          uint8   NativeAddr=0x01;
   \                     NativeAddr:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for NativeAddr>`
   \   000001                REQUIRE __INIT_XDATA_I
    238          
    239          #if defined(GTA_DEBUG)
    240          uint8 Test_Mark=0;
    241          uint8 Test_Buf[15];
    242          #endif
    243          
    244          #if defined(GTA_WTHSB_R1)
    245          
    246          char temp_val[2];
    247          char humi_val[2];
    248          static uint8 readTempHumi(void);
    249          #endif
    250          
    251          #if defined(GTA_WMSCB_R1)
    252          __interrupt void T3_ISR(void);
    253          void initTimer3(void);
    254          void startTimer3(void);
    255          void stopTimer3(void);

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    256          uint8 u_LedsNumber = 0;
   \                     u_LedsNumber:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    257          bool isScan = false;
   \                     isScan:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    258          #endif
    259          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    260          uint8 Flag_ReportData=0;
   \                     Flag_ReportData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    261          
    262          /*********************************************************************
    263           * LOCAL FUNCTIONS
    264           */
    265          void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    266          void TransmitApp_HandleKeys( byte shift, byte keys );
    267          void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    268          void TransmitApp_ProcessZDOIncomingMsgs( zdoIncomingMsg_t *inMsg );//microdjg
    269          void TransmitApp_SendTheMessage( void );
    270          void TransmitApp_ChangeState( void );
    271          
    272          void ReportData(ModBusFrame_t *pRxFrame);
    273          uint16 FramePackage(uint8 *pFrame,uint8 addr,uint8 cmd,uint8 *data,uint16 datalen);
    274          uint16 ReadADC(uint8 channel);
    275          void SendDataRequest(uint8 *pBuf,uint16 len);
    276          
    277          /*********************************************************************
    278           * NETWORK LAYER CALLBACKS
    279           */
    280          
    281          /*********************************************************************
    282           * PUBLIC FUNCTIONS
    283           */
    284          void TransmitApp_DisplayResults( void );
    285          /*********************************************************************
    286           * @fn      TransmitApp_Init
    287           *
    288           * @brief   Initialization function for the Generic App Task.
    289           *          This is called during initialization and should contain
    290           *          any application specific initialization (ie. hardware
    291           *          initialization/setup, table initialization, power up
    292           *          notificaiton ... ).
    293           *
    294           * @param   task_id - the ID assigned by OSAL.  This ID should be
    295           *                    used to send messages and set timers.
    296           *
    297           * @return  none
    298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          void TransmitApp_Init( byte task_id )
   \                     TransmitApp_Init:
    300          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    301          #if !defined ( TRANSMITAPP_FRAGMENTED )
    302            afDataReqMTU_t mtu;
    303          #endif
    304            uint16 i;
    305            
    306            #if defined(GTA_WTHSB_R1)
    307            Hal_SHT11_Init();
    308            s_connectionreset();
    309            #endif
    310          /*#if defined (HX_18B20_R1)
    311            P0SEL &= 0x00;
    312          #endif*/
    313            
    314            
    315            initUart(uartRxCB);//microdjg
   \   00000C                ; Setup parameters for call to function initUart
   \   00000C   7A..         MOV     R2,#??uartRxCB?relay & 0xff
   \   00000E   7B..         MOV     R3,#(??uartRxCB?relay >> 8) & 0xff
   \   000010   12....       LCALL   ??initUart?relay
    316            osal_nv_item_init(ZCD_NV_NATIVE_ADDRESS,sizeof(NativeAddr),NULL);
   \   000013                ; Setup parameters for call to function osal_nv_item_init
   \   000013   E4           CLR     A
   \   000014   F5..         MOV     ?V0 + 0,A
   \   000016   F5..         MOV     ?V0 + 1,A
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   7C01         MOV     R4,#0x1
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   7A01         MOV     R2,#0x1
   \   000023   7B04         MOV     R3,#0x4
   \   000025   12....       LCALL   ??osal_nv_item_init?relay
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?DEALLOC_XSTACK8
    317            osal_nv_read(ZCD_NV_NATIVE_ADDRESS,0,sizeof(NativeAddr),&NativeAddr);
   \   00002D                ; Setup parameters for call to function osal_nv_read
   \   00002D   75....       MOV     ?V0 + 0,#NativeAddr & 0xff
   \   000030   75....       MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   75..01       MOV     ?V0 + 0,#0x1
   \   00003B   75..00       MOV     ?V0 + 1,#0x0
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7C00         MOV     R4,#0x0
   \   000045   7D00         MOV     R5,#0x0
   \   000047   7A01         MOV     R2,#0x1
   \   000049   7B04         MOV     R3,#0x4
   \   00004B   12....       LCALL   ??osal_nv_read?relay
   \   00004E   7404         MOV     A,#0x4
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
    318            
    319            TransmitApp_TaskID = task_id;
   \   000053   EE           MOV     A,R6
   \   000054   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000057   F0           MOVX    @DPTR,A
    320            TransmitApp_NwkState = DEV_INIT;
   \   000058   90....       MOV     DPTR,#TransmitApp_NwkState
   \   00005B   7401         MOV     A,#0x1
   \   00005D   F0           MOVX    @DPTR,A
    321            TransmitApp_TransID = 0;
   \   00005E   90....       MOV     DPTR,#TransmitApp_TransID
   \   000061   E4           CLR     A
   \   000062   F0           MOVX    @DPTR,A
    322          
    323            pktCounter = 0;
   \   000063   90....       MOV     DPTR,#pktCounter
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   F0           MOVX    @DPTR,A
    324          
    325            TransmitApp_State = TRANSMITAPP_STATE_WAITING;
   \   000069   90....       MOV     DPTR,#TransmitApp_State
   \   00006C   F0           MOVX    @DPTR,A
    326          
    327            // Device hardware initialization can be added here or in main() (Zmain.c).
    328            // If the hardware is application specific - add it here.
    329            // If the hardware is other parts of the device add it in main().
    330          
    331            TransmitApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;//°ó¶¨·¢
   \   00006D   90....       MOV     DPTR,#TransmitApp_DstAddr + 8
   \   000070   F0           MOVX    @DPTR,A
    332            TransmitApp_DstAddr.endPoint = 0;
   \   000071   A3           INC     DPTR
   \   000072   F0           MOVX    @DPTR,A
    333            TransmitApp_DstAddr.addr.shortAddr = 0;//ÎÞËùÎ½
   \   000073   90....       MOV     DPTR,#TransmitApp_DstAddr
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   F0           MOVX    @DPTR,A
    334          
    335            // Fill out the endpoint description.
    336            TransmitApp_epDesc.endPoint = TRANSMITAPP_ENDPOINT;
   \   000079   90....       MOV     DPTR,#TransmitApp_epDesc
   \   00007C   04           INC     A
   \   00007D   F0           MOVX    @DPTR,A
    337            TransmitApp_epDesc.task_id = &TransmitApp_TaskID;
   \   00007E   A3           INC     DPTR
   \   00007F   74..         MOV     A,#TransmitApp_TaskID & 0xff
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   74..         MOV     A,#(TransmitApp_TaskID >> 8) & 0xff
   \   000085   F0           MOVX    @DPTR,A
    338            TransmitApp_epDesc.simpleDesc
    339                      = (SimpleDescriptionFormat_t *)&TransmitApp_SimpleDesc;
   \   000086   A3           INC     DPTR
   \   000087   74..         MOV     A,#TransmitApp_SimpleDesc & 0xff
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   74..         MOV     A,#(TransmitApp_SimpleDesc >> 8) & 0xff
   \   00008D   12....       LCALL   ??Subroutine18_0 & 0xFFFF
    340            TransmitApp_epDesc.latencyReq = noLatencyReqs;
    341            
    342            
    343            
    344            //if(ZG_DEVICE_COORDINATOR_TYPE)
    345            //{
    346              //HalLcdInit();
    347              //HalLcd_HW_WriteLine(HAL_LCD_LINE_1,"GTA Zigbee Test");
    348              HalLcdWriteString( "GTA Zigbee", HAL_LCD_LINE_1 );
   \                     ??CrossCallReturnLabel_18:
   \   000090                ; Setup parameters for call to function HalLcdWriteString
   \   000090   7901         MOV     R1,#0x1
   \   000092   7A..         MOV     R2,#`?<Constant "GTA Zigbee">` & 0xff
   \   000094   7B..         MOV     R3,#(`?<Constant "GTA Zigbee">` >> 8) & 0xff
   \   000096   12....       LCALL   ??HalLcdWriteString?relay
    349            //}
    350          
    351          
    352            // Register the endpoint/interface description with the AF
    353            afRegister( &TransmitApp_epDesc );
   \   000099                ; Setup parameters for call to function afRegister
   \   000099   7A..         MOV     R2,#TransmitApp_epDesc & 0xff
   \   00009B   7B..         MOV     R3,#(TransmitApp_epDesc >> 8) & 0xff
   \   00009D   12....       LCALL   ??afRegister?relay
    354          
    355            // Register for all key events - This app will handle all key events
    356            RegisterForKeys( TransmitApp_TaskID );
   \   0000A0                ; Setup parameters for call to function RegisterForKeys
   \   0000A0   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F9           MOV     R1,A
   \   0000A5   12....       LCALL   ??RegisterForKeys?relay
    357          
    358            // Update the display
    359          #if defined ( LCD_SUPPORTED )
    360            HalLcdWriteString( "TransmitApp", HAL_LCD_LINE_2 );
    361          #endif
    362          
    363            // Set the data length
    364          #if defined ( TRANSMITAPP_FRAGMENTED )
    365            TransmitApp_MaxDataLength = TRANSMITAPP_MAX_DATA_LEN;
    366          #else
    367            mtu.kvp        = FALSE;
   \   0000A8   85..82       MOV     DPL,?XSP + 0
   \   0000AB   85..83       MOV     DPH,?XSP + 1
   \   0000AE   E4           CLR     A
   \   0000AF   F0           MOVX    @DPTR,A
    368            mtu.aps.secure = FALSE;
   \   0000B0   04           INC     A
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   E4           CLR     A
   \   0000B5   12....       LCALL   ?Subroutine6 & 0xFFFF
    369            TransmitApp_MaxDataLength = afDataReqMTU( &mtu );
   \                     ??CrossCallReturnLabel_0:
   \   0000B8   12....       LCALL   ??afDataReqMTU?relay
   \   0000BB   E9           MOV     A,R1
   \   0000BC   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   0000BF   12....       LCALL   ??Subroutine18_0 & 0xFFFF
    370          #endif
    371          
    372            // Generate the data
    373            for (i=0; i<TransmitApp_MaxDataLength; i++)
   \                     ??CrossCallReturnLabel_21:
   \   0000C2   F8           MOV     R0,A
   \   0000C3   8012         SJMP    ??TransmitApp_Init_0
    374            {
    375              TransmitApp_Msg[i] = (uint8) i;
   \                     ??TransmitApp_Init_1:
   \   0000C5   74..         MOV     A,#TransmitApp_Msg & 0xff
   \   0000C7   28           ADD     A,R0
   \   0000C8   F582         MOV     DPL,A
   \   0000CA   74..         MOV     A,#(TransmitApp_Msg >> 8) & 0xff
   \   0000CC   39           ADDC    A,R1
   \   0000CD   F583         MOV     DPH,A
   \   0000CF   E8           MOV     A,R0
   \   0000D0   F0           MOVX    @DPTR,A
    376            }
   \   0000D1   2401         ADD     A,#0x1
   \   0000D3   08           INC     R0
   \   0000D4   E9           MOV     A,R1
   \   0000D5   3400         ADDC    A,#0x0
   \                     ??TransmitApp_Init_0:
   \   0000D7   F9           MOV     R1,A
   \   0000D8   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   FA           MOV     R2,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   FB           MOV     R3,A
   \   0000E0   C3           CLR     C
   \   0000E1   E8           MOV     A,R0
   \   0000E2   9A           SUBB    A,R2
   \   0000E3   E9           MOV     A,R1
   \   0000E4   9B           SUBB    A,R3
   \   0000E5   40DE         JC      ??TransmitApp_Init_1
    377          
    378            ZDO_RegisterForZDOMsg( TransmitApp_TaskID, End_Device_Bind_rsp );
   \   0000E7                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000E7   7A20         MOV     R2,#0x20
   \   0000E9   7B80         MOV     R3,#-0x80
   \   0000EB   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F9           MOV     R1,A
   \   0000F0   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    379            ZDO_RegisterForZDOMsg( TransmitApp_TaskID, Match_Desc_rsp );
   \   0000F3                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000F3   7A06         MOV     R2,#0x6
   \   0000F5   7B80         MOV     R3,#-0x80
   \   0000F7   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F9           MOV     R1,A
   \   0000FC   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    380            ZDO_RegisterForZDOMsg( TransmitApp_TaskID,TRANSMITAPP_CLUSTERID_TESTMSG);
   \   0000FF                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000FF   7AA1         MOV     R2,#-0x5f
   \   000101   7B00         MOV     R3,#0x0
   \   000103   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000106   E0           MOVX    A,@DPTR
   \   000107   F9           MOV     R1,A
   \   000108   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    381            
    382          #if defined (HX_18B20_R1)
    383            osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 1000);
    384            Flag_ReportData = true;
    385          #endif
    386          #if defined GTA_WMSCB_R1
    387            NativeAddr = 0x22;  //ÉèÖÃ¿ØÖÆÄ£¿éµÄZigBeeµØÖ·
   \   00010B   90....       MOV     DPTR,#NativeAddr
   \   00010E   7422         MOV     A,#0x22
   \   000110   F0           MOVX    @DPTR,A
    388          //  initTimer3();//³õÊ¼»¯¶¨Ê±Æ÷3
    389          //  stopTimer3();
    390          #endif
    391          
    392          }
   \   000111   7402         MOV     A,#0x2
   \   000113                REQUIRE ?Subroutine5
   \   000113                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine17_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function afDataReqMTU
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    393          
    394          /*********************************************************************
    395           * @fn      TransmitApp_ProcessEvent
    396           *
    397           * @brief   Generic Application Task event processor.  This function
    398           *          is called to process all events for the task.  Events
    399           *          include timers, messages and any other user defined events.
    400           *
    401           * @param   task_id  - The OSAL assigned task ID.
    402           * @param   events - events to process.  This is a bit map and can
    403           *                   contain more than one event.
    404           *
    405           * @return  none
    406           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    407          UINT16 TransmitApp_ProcessEvent( byte task_id, UINT16 events )
   \                     TransmitApp_ProcessEvent:
    408          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    409            afIncomingMSGPacket_t *MSGpkt;
    410            afDataConfirm_t *afDataConfirm;
    411            (void)task_id;  // Intentionally unreferenced parameter
    412          
    413            // Data Confirmation message fields
    414            ZStatus_t sentStatus;
    415            byte sentEP;
    416            
    417          
    418            
    419            uint8 Frame[20];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
                         ^
Warning[Pe177]: variable "Frame" was declared but never referenced
    420            uint8 data[10];//
                         ^
Warning[Pe177]: variable "data" was declared but never referenced
    421            uint16 i=0,j=0;
                          ^
Warning[Pe177]: variable "i" was declared but never referenced

    uint16 i=0,j=0;
               ^
"D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c",421  Warning[Pe177]: 
          variable "j" was declared but never referenced
    422            uint8 led=0;
                         ^
Warning[Pe177]: variable "led" was declared but never referenced
    423            uint16 temp;
                          ^
Warning[Pe177]: variable "temp" was declared but never referenced
    424            uint16 FrameLen;
                          ^
Warning[Pe177]: variable "FrameLen" was declared but never referenced
    425            
    426          
    427            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??TransmitApp_ProcessEvent_0 & 0xFFFF
    428            {
    429              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   800D         SJMP    ??TransmitApp_ProcessEvent_1
    430              while ( MSGpkt )
    431              {
    432                switch ( MSGpkt->hdr.event )
    433                {
    434                  case ZDO_CB_MSG:
    435                    TransmitApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    436                    break;
    437          
    438                  case KEY_CHANGE:
    439                    TransmitApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    440                    break;
    441          
    442                  case AF_DATA_CONFIRM_CMD:
    443                    // This message is received as a confirmation of a data packet sent.
    444                    // The status is of ZStatus_t type [defined in ZComDef.h]
    445                    // The message fields are defined in AF.h
    446                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    447                    sentEP = afDataConfirm->endpoint;
    448                    sentStatus = afDataConfirm->hdr.status;
    449          
    450                    if ( (ZSuccess == sentStatus) &&
    451                         (TransmitApp_epDesc.endPoint == sentEP) )
    452                    {
    453          #if !defined ( TRANSMITAPP_RANDOM_LEN )
    454                      txAccum += TransmitApp_MaxDataLength;
    455          #endif
    456                      if ( !timerOn )
    457                      {
    458                        osal_start_timerEx( TransmitApp_TaskID,TRANSMITAPP_RCVTIMER_EVT,
    459                                                               TRANSMITAPP_DISPLAY_TIMER);
    460                        clkShdw = osal_GetSystemClock();
    461                        timerOn = TRUE;
    462                      }
    463                    }
    464          
    465                    // Action taken when confirmation is received: Send the next message.
    466                    TransmitApp_SetSendEvt();
    467                    break;
    468          
    469                  case AF_INCOMING_MSG_CMD:
    470                    TransmitApp_MessageMSGCB( MSGpkt );
    471                    
    472                    break;
    473          
    474                  case ZDO_STATE_CHANGE:
    475                    TransmitApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??TransmitApp_ProcessEvent_2:
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   90....       MOV     DPTR,#TransmitApp_NwkState
   \   000017   F0           MOVX    @DPTR,A
    476          
    477                    break;
    478          
    479                  default:
    480                    break;
    481                }
    482          
    483                // Release the memory
    484                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??TransmitApp_ProcessEvent_3:
   \   000018                ; Setup parameters for call to function osal_msg_deallocate
   \   000018   AA..         MOV     R2,?V0 + 0
   \   00001A   AB..         MOV     R3,?V0 + 1
   \   00001C   12....       LCALL   ??osal_msg_deallocate?relay
    485          
    486                // Next
    487                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
   \   00001F                ; Setup parameters for call to function osal_msg_receive
   \                     ??TransmitApp_ProcessEvent_1:
   \   00001F   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   12....       LCALL   ??osal_msg_receive?relay
   \   000027   8A..         MOV     ?V0 + 0,R2
   \   000029   8B..         MOV     ?V0 + 1,R3
   \   00002B   E5..         MOV     A,?V0 + 0
   \   00002D   45..         ORL     A,?V0 + 1
   \   00002F   7003         JNZ     $+5
   \   000031   02....       LJMP    ??TransmitApp_ProcessEvent_4 & 0xFFFF
   \   000034   85..82       MOV     DPL,?V0 + 0
   \   000037   85..83       MOV     DPH,?V0 + 1
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   2440         ADD     A,#0x40
   \   00003D   6017         JZ      ??TransmitApp_ProcessEvent_5
   \   00003F   24EF         ADD     A,#-0x11
   \   000041   60CF         JZ      ??TransmitApp_ProcessEvent_2
   \   000043   24FE         ADD     A,#-0x2
   \   000045   6006         JZ      ??TransmitApp_ProcessEvent_6
   \   000047   24D6         ADD     A,#-0x2a
   \   000049   601F         JZ      ??TransmitApp_ProcessEvent_7
   \   00004B   80CB         SJMP    ??TransmitApp_ProcessEvent_3
   \                     ??TransmitApp_ProcessEvent_6:
   \   00004D                ; Setup parameters for call to function TransmitApp_ProcessZDOMsgs
   \   00004D   AA..         MOV     R2,?V0 + 0
   \   00004F   AB..         MOV     R3,?V0 + 1
   \   000051   12....       LCALL   ??TransmitApp_ProcessZDOMsgs?relay
   \   000054   80C2         SJMP    ??TransmitApp_ProcessEvent_3
   \                     ??TransmitApp_ProcessEvent_5:
   \   000056                ; Setup parameters for call to function TransmitApp_HandleKeys
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FA           MOV     R2,A
   \   00005B   85..82       MOV     DPL,?V0 + 0
   \   00005E   85..83       MOV     DPH,?V0 + 1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   12....       LCALL   ??TransmitApp_HandleKeys?relay
   \   000068   80AE         SJMP    ??TransmitApp_ProcessEvent_3
   \                     ??TransmitApp_ProcessEvent_7:
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   704D         JNZ     ??TransmitApp_ProcessEvent_8
   \   00006E   90....       MOV     DPTR,#TransmitApp_epDesc
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F8           MOV     R0,A
   \   000073   85..82       MOV     DPL,?V0 + 0
   \   000076   85..83       MOV     DPH,?V0 + 1
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   68           XRL     A,R0
   \   00007D   703C         JNZ     ??TransmitApp_ProcessEvent_8
   \   00007F   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F5..         MOV     ?V0 + 4,A
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F5..         MOV     ?V0 + 5,A
   \   000089   E4           CLR     A
   \   00008A   F5..         MOV     ?V0 + 6,A
   \   00008C   F5..         MOV     ?V0 + 7,A
   \   00008E   90....       MOV     DPTR,#txAccum
   \   000091   78..         MOV     R0,#?V0 + 4
   \   000093   12....       LCALL   ?L_ADD_TO_X
   \   000096   90....       MOV     DPTR,#timerOn
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   701F         JNZ     ??TransmitApp_ProcessEvent_8
   \   00009C                ; Setup parameters for call to function osal_start_timerEx
   \   00009C   7CD0         MOV     R4,#-0x30
   \   00009E   7D07         MOV     R5,#0x7
   \   0000A0   7A02         MOV     R2,#0x2
   \   0000A2   7B00         MOV     R3,#0x0
   \   0000A4   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   12....       LCALL   ??osal_start_timerEx?relay
   \   0000AC                ; Setup parameters for call to function osal_GetSystemClock
   \   0000AC   12....       LCALL   ??osal_GetSystemClock?relay
   \   0000AF   90....       MOV     DPTR,#clkShdw
   \   0000B2   12....       LCALL   ?XSTORE_R2345
   \   0000B5   90....       MOV     DPTR,#timerOn
   \   0000B8   7401         MOV     A,#0x1
   \   0000BA   F0           MOVX    @DPTR,A
   \                     ??TransmitApp_ProcessEvent_8:
   \   0000BB                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   0000BB   12....       LCALL   ??TransmitApp_SetSendEvt?relay
   \   0000BE   02....       LJMP    ??TransmitApp_ProcessEvent_3 & 0xFFFF
    488              }
    489          
    490              // Squash compiler warnings until values are used.
    491              (void)sentStatus;
    492              (void)sentEP;
    493          
    494              // Return unprocessed events
    495              return (events ^ SYS_EVENT_MSG);
   \                     ??TransmitApp_ProcessEvent_4:
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   6480         XRL     A,#0x80
   \   0000C6   02....       LJMP    ??TransmitApp_ProcessEvent_9 & 0xFFFF
    496            }
    497          
    498            // Send a message out
    499            if ( events & TRANSMITAPP_SEND_MSG_EVT )
   \                     ??TransmitApp_ProcessEvent_0:
   \   0000C9   EE           MOV     A,R6
   \   0000CA   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000CC   5011         JNC     ??TransmitApp_ProcessEvent_10
    500            {
    501              if ( TransmitApp_State == TRANSMITAPP_STATE_SENDING )
   \   0000CE   90....       MOV     DPTR,#TransmitApp_State
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   6401         XRL     A,#0x1
   \   0000D4   7003         JNZ     ??TransmitApp_ProcessEvent_11
    502              {
    503                TransmitApp_SendTheMessage();
   \   0000D6                ; Setup parameters for call to function TransmitApp_SendTheMessage
   \   0000D6   12....       LCALL   ??TransmitApp_SendTheMessage?relay
    504              }
    505          
    506              // Return unprocessed events
    507              return (events ^ TRANSMITAPP_SEND_MSG_EVT);
   \                     ??TransmitApp_ProcessEvent_11:
   \   0000D9   EE           MOV     A,R6
   \   0000DA   6401         XRL     A,#0x1
   \   0000DC   02....       LJMP    ??TransmitApp_ProcessEvent_12 & 0xFFFF
    508            }
    509          
    510            // Timed wait from error
    511            if ( events & TRANSMITAPP_SEND_ERR_EVT )
   \                     ??TransmitApp_ProcessEvent_10:
   \   0000DF   5404         ANL     A,#0x4
   \   0000E1   6008         JZ      ??TransmitApp_ProcessEvent_13
    512            {
    513              TransmitApp_SetSendEvt();
   \   0000E3                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   0000E3   12....       LCALL   ??TransmitApp_SetSendEvt?relay
    514          
    515              // Return unprocessed events
    516              return (events ^ TRANSMITAPP_SEND_ERR_EVT);
   \   0000E6   EE           MOV     A,R6
   \   0000E7   6404         XRL     A,#0x4
   \   0000E9   807F         SJMP    ??TransmitApp_ProcessEvent_12
    517            }
    518          
    519            // Receive timer
    520            if ( events & TRANSMITAPP_RCVTIMER_EVT )
   \                     ??TransmitApp_ProcessEvent_13:
   \   0000EB   EE           MOV     A,R6
   \   0000EC   5402         ANL     A,#0x2
   \   0000EE   6018         JZ      ??TransmitApp_ProcessEvent_14
    521            {
    522              // Setup to display the next result
    523              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT,
    524                                                      TRANSMITAPP_DISPLAY_TIMER );
   \   0000F0                ; Setup parameters for call to function osal_start_timerEx
   \   0000F0   7CD0         MOV     R4,#-0x30
   \   0000F2   7D07         MOV     R5,#0x7
   \   0000F4   7A02         MOV     R2,#0x2
   \   0000F6   7B00         MOV     R3,#0x0
   \   0000F8   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F9           MOV     R1,A
   \   0000FD   12....       LCALL   ??osal_start_timerEx?relay
    525              TransmitApp_DisplayResults();
   \   000100                ; Setup parameters for call to function TransmitApp_DisplayResults
   \   000100   12....       LCALL   ??TransmitApp_DisplayResults?relay
    526          
    527              return (events ^ TRANSMITAPP_RCVTIMER_EVT);
   \   000103   EE           MOV     A,R6
   \   000104   6402         XRL     A,#0x2
   \   000106   8062         SJMP    ??TransmitApp_ProcessEvent_12
    528            }
    529            if ( events & TRANSMITAPP_BIND_REQUEST_EVT)//microdjg
   \                     ??TransmitApp_ProcessEvent_14:
   \   000108   EE           MOV     A,R6
   \   000109   5408         ANL     A,#0x8
   \   00010B   6008         JZ      ??TransmitApp_ProcessEvent_15
    530            {
    531              SendBindRequest();//×Ô¶¯¿ªÊ¼°ó¶¨ microdjg
   \   00010D                ; Setup parameters for call to function SendBindRequest
   \   00010D   12....       LCALL   ??SendBindRequest?relay
    532              //osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT,3000 );
    533              return (events ^ TRANSMITAPP_BIND_REQUEST_EVT);
   \   000110   EE           MOV     A,R6
   \   000111   6408         XRL     A,#0x8
   \   000113   8055         SJMP    ??TransmitApp_ProcessEvent_12
    534            }
    535            
    536            
    537            if ( events & TRANSMITAPP_START_REPORT_EVT )
   \                     ??TransmitApp_ProcessEvent_15:
   \   000115   EE           MOV     A,R6
   \   000116   5410         ANL     A,#0x10
   \   000118   6028         JZ      ??TransmitApp_ProcessEvent_16
    538            {
    539              if(Flag_ReportData)
   \   00011A   90....       MOV     DPTR,#Flag_ReportData
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   6010         JZ      ??TransmitApp_ProcessEvent_17
    540                {
    541                  osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 1000);
   \   000120                ; Setup parameters for call to function osal_start_timerEx
   \   000120   7CE8         MOV     R4,#-0x18
   \   000122   7D03         MOV     R5,#0x3
   \   000124   7A10         MOV     R2,#0x10
   \   000126   7B00         MOV     R3,#0x0
   \   000128   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   F9           MOV     R1,A
   \   00012D   12....       LCALL   ??osal_start_timerEx?relay
    542                }
    543              HalLedBlink(HAL_LED_1,1,50,300);
   \                     ??TransmitApp_ProcessEvent_17:
   \   000130                ; Setup parameters for call to function HalLedBlink
   \   000130   7C2C         MOV     R4,#0x2c
   \   000132   7D01         MOV     R5,#0x1
   \   000134   7B32         MOV     R3,#0x32
   \   000136   7A01         MOV     R2,#0x1
   \   000138   7901         MOV     R1,#0x1
   \   00013A   12....       LCALL   ??HalLedBlink?relay
    544              
    545              
    546              
    547              
    548              #if defined ( GTA_WWSB_R1 )||(GTA_WFSB_R1) //´«¸ÐÆ÷   
    549              temp=ReadADC(4);//¶ÁµçÑ¹Öµ
    550              data[0]=1;
    551              if(temp>3000)
    552                data[1]=0x01;
    553              else
    554                data[1]=0x00;
    555              //data[1]=LO_UINT16(temp);
    556              //data[2]=HI_UINT16(temp);
    557          #if defined GTA_WWSB_R1
    558              NativeAddr = 0x11;//ÓêµÎ´«¸ÐÆ÷µØÖ·
    559          #elif defined GTA_WFSB_R1
    560              NativeAddr = 0x16;//»ðÑæ´«¸ÐÆ÷µØÖ·
    561          #endif
    562              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    563              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    564              #endif
    565              
    566              
    567              #if defined (GTA_WVSB_R1)||(GTA_WIRSB_R1)
    568              temp=ReadADC(4);
    569              data[0]=1;
    570              if(temp>3000)
    571                data[1]=0x00;
    572              else
    573                data[1]=0x01;
    574          #if defined GTA_WVSB_R1
    575              NativeAddr = 0x13;//Çã½Ç´«¸ÐÆ÷µØÖ·
    576          #elif defined GTA_WIRSB_R1
    577              NativeAddr = 0x15;//ºìÍâ´«¸ÐÆ÷µØÖ·
    578          #endif
    579              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    580              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    581              #endif
    582              
    583              #if defined ( GTA_WUSB_R1 )
    584              IO_DIR_PORT_PIN(0, 6, IO_IN);
    585              data[0]=1;
    586              if(IO_SENSOR)
    587                data[1]=0x01;
    588              else
    589                data[1]=0x00;
    590              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    591              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    592              #endif
    593              
    594              #if defined (GTA_WISB_R1)
    595              temp=ReadADC(4);//
    596              data[0]=2;
    597              data[1]=LO_UINT16(temp);
    598              data[2]=HI_UINT16(temp);
    599              NativeAddr = 0x14;//¹âÕÕ´«¸ÐÆ÷µØÖ·
    600              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,3);//´ò°ü
    601              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    602              #endif
    603              
    604              
    605              #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷  
    606              
    607              readTempHumi();
    608              data[0]=4;
    609              data[1]=humi_val[0];//L
    610              data[2]=humi_val[1];//H
    611              data[3]=temp_val[0];
    612              data[4]=temp_val[1];
    613              NativeAddr = 0x12;//ÎÂÊª¶È´«¸ÐÆ÷µØÖ·
    614              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,5);//´ò°ü
    615              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    616              HalUARTWrite(HAL_UART_PORT_0, Frame, FrameLen);
    617              
    618              #endif
    619              
    620              //¿ÉÈ¼ÆøÌåCombustible gas¡¢¾Æ¾«Alcohol¡¢ÑÌÎíSmoke
    621          #if defined ( HX_WCGSB_R1 ) || (HX_ALCOHOL_SENSOR) || (HX_SMOKE_SENSOR)
    622              IO_DIR_PORT_PIN(0, 1, IO_IN);
    623              data[0]=1;
    624              if(IO_COMBUSTIBLE_GAS_PORT)
    625                data[1] = 1;
    626              else
    627                data[1] = 0;
    628          #if defined HX_SMOKE_SENSOR
    629              NativeAddr = 0x21;//ÑÌÎí´«¸ÐÆ÷µØÖ·
    630          #elif defined HX_ALCOHOL_SENSOR
    631              NativeAddr = 0x20;//¾Æ¾«´«¸ÐÆ÷µØÖ·
    632          #elif defined HX_WCGSB_R1
    633              NativeAddr = 0x18;//¿ÉÈ¼ÆøÌå´«¸ÐÆ÷µØÖ·
    634          #endif
    635              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    636              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    637          #endif
    638              
    639          #if defined ( HX_18B20_R1 )
    640              uint8* pTempData;
    641              read_data();
    642              pTempData = DataChange();
    643              data[0]=4;
    644              data[1]=*pTempData++;//temperature H
    645              data[2]=*pTempData;//temperature L
    646              NativeAddr = 0x19;//ÉèÖÃ18b20µÄZigBeeµØÖ·Îª19h
    647              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,3);//´ò°ü
    648              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    649              HalUARTWrite(HAL_UART_PORT_0, Frame, FrameLen);
    650          #endif
    651              
    652              
    653              return (events ^ TRANSMITAPP_START_REPORT_EVT);
   \   00013D   EE           MOV     A,R6
   \   00013E   6410         XRL     A,#0x10
   \   000140   8028         SJMP    ??TransmitApp_ProcessEvent_12
    654            }
    655            
    656          #if defined GTA_WMSCB_R1
    657            // ´ËÊÂ¼þÓÃÓÚLEDµãÕóÉ¨ÃèÏÔÊ¾
    658            if(events & TRANSMITAPP_LEDS_DISPLAY_EVT){
   \                     ??TransmitApp_ProcessEvent_16:
   \   000142   EE           MOV     A,R6
   \   000143   5420         ANL     A,#0x20
   \   000145   6028         JZ      ??TransmitApp_ProcessEvent_18
    659                if(isScan == true){
   \   000147   90....       MOV     DPTR,#isScan
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   6401         XRL     A,#0x1
   \   00014D   7018         JNZ     ??TransmitApp_ProcessEvent_19
    660                  osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_LEDS_DISPLAY_EVT, 1);
   \   00014F                ; Setup parameters for call to function osal_start_timerEx
   \   00014F   7C01         MOV     R4,#0x1
   \   000151   7D00         MOV     R5,#0x0
   \   000153   7A20         MOV     R2,#0x20
   \   000155   7B00         MOV     R3,#0x0
   \   000157   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F9           MOV     R1,A
   \   00015C   12....       LCALL   ??osal_start_timerEx?relay
    661                  ControlLeds(u_LedsNumber);
   \   00015F                ; Setup parameters for call to function ControlLeds
   \   00015F   90....       MOV     DPTR,#u_LedsNumber
   \   000162   E0           MOVX    A,@DPTR
   \   000163   F9           MOV     R1,A
   \   000164   12....       LCALL   ??ControlLeds?relay
    662                }
    663              return events ^ TRANSMITAPP_LEDS_DISPLAY_EVT;
   \                     ??TransmitApp_ProcessEvent_19:
   \   000167   EE           MOV     A,R6
   \   000168   6420         XRL     A,#0x20
   \                     ??TransmitApp_ProcessEvent_12:
   \   00016A   FA           MOV     R2,A
   \   00016B   EF           MOV     A,R7
   \                     ??TransmitApp_ProcessEvent_9:
   \   00016C   FB           MOV     R3,A
   \   00016D   8004         SJMP    ??TransmitApp_ProcessEvent_20
    664            }
    665          #endif
    666            
    667          
    668            // Discard unknown events
    669            return 0;
   \                     ??TransmitApp_ProcessEvent_18:
   \   00016F   7A00         MOV     R2,#0x0
   \   000171   7B00         MOV     R3,#0x0
   \                     ??TransmitApp_ProcessEvent_20:
   \   000173                REQUIRE ?Subroutine1
   \   000173                ; // Fall through to label ?Subroutine1
    670          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    671          
    672          /*********************************************************************
    673           * Event Generation Functions
    674           */
    675          /*********************************************************************
    676           * @fn      TransmitApp_ProcessZDOMsgs()
    677           *
    678           * @brief   Process response messages
    679           *
    680           * @param   none
    681           *
    682           * @return  none
    683           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    684          void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     TransmitApp_ProcessZDOMsgs:
    685          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    686            switch ( inMsg->clusterID )
   \   000005   EA           MOV     A,R2
   \   000006   240C         ADD     A,#0xc
   \   000008   F582         MOV     DPL,A
   \   00000A   EB           MOV     A,R3
   \   00000B   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 1,A
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for TransmitApp_ProcessZDOMsgs>_0`:
   \   000019   0000         DW        0
   \   00001B   0300         DW        3
   \   00001D   A100         DW        161
   \   00001F   ....         DW        ??TransmitApp_ProcessZDOMsgs_0
   \   000021   0680         DW        32774
   \   000023   ....         DW        ??TransmitApp_ProcessZDOMsgs_1
   \   000025   2080         DW        32800
   \   000027   ....         DW        ??TransmitApp_ProcessZDOMsgs_2
   \   000029   ....         DW        ??TransmitApp_ProcessZDOMsgs_3
    687            {
    688              case End_Device_Bind_rsp:
    689                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
   \                     ??TransmitApp_ProcessZDOMsgs_2:
   \   00002B   EA           MOV     A,R2
   \   00002C   2413         ADD     A,#0x13
   \   00002E   F582         MOV     DPL,A
   \   000030   EB           MOV     A,R3
   \   000031   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000034   7015         JNZ     ??TransmitApp_ProcessZDOMsgs_4
    690                {
    691                  // Light LED
    692                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000036                ; Setup parameters for call to function HalLedSet
   \   000036   7A01         MOV     R2,#0x1
   \   000038   7908         MOV     R1,#0x8
   \   00003A   12....       LCALL   ??HalLedSet?relay
    693                  osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT );
   \   00003D                ; Setup parameters for call to function osal_stop_timerEx
   \   00003D   7A08         MOV     R2,#0x8
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   ??osal_stop_timerEx?relay
   \   000049   8063         SJMP    ??TransmitApp_ProcessZDOMsgs_3
    694          
    695                }
    696          #if defined(BLINK_LEDS)
    697                else
    698                {
    699                  // Flash LED to show failure
    700                  //HalLedSet ( HAL_LED_2, HAL_LED_MODE_FLASH );//4
    701                  HalLedBlink(HAL_LED_2,1,50,1000);//Ö¸Ê¾°ó¶¨ÓÐÎó
   \                     ??TransmitApp_ProcessZDOMsgs_4:
   \   00004B                ; Setup parameters for call to function HalLedBlink
   \   00004B   7CE8         MOV     R4,#-0x18
   \   00004D   7D03         MOV     R5,#0x3
   \   00004F   7B32         MOV     R3,#0x32
   \   000051   7A01         MOV     R2,#0x1
   \   000053   7902         MOV     R1,#0x2
   \   000055   8054         SJMP    ??TransmitApp_ProcessZDOMsgs_5
    702                }
    703          #endif
    704                break;
    705          
    706              case Match_Desc_rsp:
    707                {
    708                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??TransmitApp_ProcessZDOMsgs_1:
   \   000057                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000057   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   00005A   8A..         MOV     ?V0 + 0,R2
   \   00005C   8B..         MOV     ?V0 + 1,R3
   \   00005E   AE..         MOV     R6,?V0 + 0
   \   000060   AF..         MOV     R7,?V0 + 1
    709                  if ( pRsp )
   \   000062   EE           MOV     A,R6
   \   000063   4F           ORL     A,R7
   \   000064   6048         JZ      ??TransmitApp_ProcessZDOMsgs_3
    710                  {
    711                    if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   7028         JNZ     ??TransmitApp_ProcessZDOMsgs_6
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   6022         JZ      ??TransmitApp_ProcessZDOMsgs_6
    712                    {
    713                      TransmitApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000073   90....       MOV     DPTR,#TransmitApp_DstAddr + 8
   \   000076   7402         MOV     A,#0x2
   \   000078   12....       LCALL   ?Subroutine10 & 0xFFFF
    714                      TransmitApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \                     ??CrossCallReturnLabel_6:
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F8           MOV     R0,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080   90....       MOV     DPTR,#TransmitApp_DstAddr
   \   000083   E8           MOV     A,R0
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E9           MOV     A,R1
   \   000087   12....       LCALL   ?Subroutine7 & 0xFFFF
    715                      // Take the first endpoint, Can be changed to search through endpoints
    716                      TransmitApp_DstAddr.endPoint = pRsp->epList[0];
   \                     ??CrossCallReturnLabel_2:
   \   00008A   90....       MOV     DPTR,#TransmitApp_DstAddr + 9
   \   00008D   F0           MOVX    @DPTR,A
    717          
    718                      // Light LED
    719                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00008E                ; Setup parameters for call to function HalLedSet
   \   00008E   7A01         MOV     R2,#0x1
   \   000090   7908         MOV     R1,#0x8
   \   000092   12....       LCALL   ??HalLedSet?relay
    720                    }
    721                    osal_mem_free( pRsp );
   \                     ??TransmitApp_ProcessZDOMsgs_6:
   \   000095                ; Setup parameters for call to function osal_mem_free
   \   000095   EE           MOV     A,R6
   \   000096   FA           MOV     R2,A
   \   000097   EF           MOV     A,R7
   \   000098   FB           MOV     R3,A
   \   000099   12....       LCALL   ??osal_mem_free?relay
   \   00009C   8010         SJMP    ??TransmitApp_ProcessZDOMsgs_3
    722                  }
    723                }
    724                break;
    725                
    726            case TRANSMITAPP_CLUSTERID_TESTMSG://microdjg
    727              {  
    728                //osal_set_event( TransmitApp_TaskID, AF_INCOMING_MSG_CMD );///
    729                TransmitApp_ProcessZDOIncomingMsgs(inMsg);
   \                     ??TransmitApp_ProcessZDOMsgs_0:
   \   00009E                ; Setup parameters for call to function TransmitApp_ProcessZDOIncomingMsgs
   \   00009E   12....       LCALL   ??TransmitApp_ProcessZDOIncomingMsgs?relay
    730                HalLedBlink(HAL_LED_4,1,50,500);///
   \   0000A1                ; Setup parameters for call to function HalLedBlink
   \   0000A1   7CF4         MOV     R4,#-0xc
   \   0000A3   7D01         MOV     R5,#0x1
   \   0000A5   7B32         MOV     R3,#0x32
   \   0000A7   7A01         MOV     R2,#0x1
   \   0000A9   7908         MOV     R1,#0x8
   \                     ??TransmitApp_ProcessZDOMsgs_5:
   \   0000AB   12....       LCALL   ??HalLedBlink?relay
    731              }
    732            }
    733          }
   \                     ??TransmitApp_ProcessZDOMsgs_3:
   \   0000AE   02....       LJMP    ??Subroutine17_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    734          
    735          /*********************************************************************
    736           * @fn      TransmitApp_HandleKeys
    737           *
    738           * @brief   Handles all key events for this device.
    739           *
    740           * @param   shift - true if in shift/alt.
    741           * @param   keys - bit field for key events. Valid entries:
    742           *                 EVAL_SW4
    743           *                 EVAL_SW3
    744           *                 EVAL_SW2
    745           *                 EVAL_SW1
    746           *
    747           * @return  none
    748           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    749          void TransmitApp_HandleKeys( byte shift, byte keys )
   \                     TransmitApp_HandleKeys:
    750          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    751            //zAddrType_t dstAddr;
    752                
    753              if ( keys == HAL_KEY_INT_1)
   \   000007   74E1         MOV     A,#-0x1f
   \   000009   6E           XRL     A,R6
   \   00000A   702B         JNZ     ??TransmitApp_HandleKeys_0
    754              {
    755                #if defined(GTA_DEBUG)
    756                Test_Mark=0x01;
    757                Test_Buf[0] = 0x99;
    758                Test_Buf[1] = 0x88;
    759                Test_Buf[2] = 0x77;
    760                Test_Buf[3] = 0x66;
    761                HalUARTWrite(HAL_UART_PORT_0,Test_Buf,15);
    762                #endif
    763                Flag_ReportData=!Flag_ReportData;
   \   00000C   90....       MOV     DPTR,#Flag_ReportData
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7004         JNZ     ??TransmitApp_HandleKeys_1
   \   000012   7401         MOV     A,#0x1
   \   000014   8001         SJMP    ??TransmitApp_HandleKeys_2
   \                     ??TransmitApp_HandleKeys_1:
   \   000016   E4           CLR     A
   \                     ??TransmitApp_HandleKeys_2:
   \   000017   F0           MOVX    @DPTR,A
    764                HalLedBlink (HAL_LED_1, 1, 50, 100);
   \   000018                ; Setup parameters for call to function HalLedBlink
   \   000018   7C64         MOV     R4,#0x64
   \   00001A   7D00         MOV     R5,#0x0
   \   00001C   7B32         MOV     R3,#0x32
   \   00001E   7A01         MOV     R2,#0x1
   \   000020   7901         MOV     R1,#0x1
   \   000022   12....       LCALL   ??HalLedBlink?relay
    765                if(Flag_ReportData)
   \   000025   90....       MOV     DPTR,#Flag_ReportData
   \   000028   E0           MOVX    A,@DPTR
   \   000029   600C         JZ      ??TransmitApp_HandleKeys_0
    766                {
    767                  //osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 2000);
    768                  osal_set_event( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT );
   \   00002B                ; Setup parameters for call to function osal_set_event
   \   00002B   7A10         MOV     R2,#0x10
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   ??osal_set_event?relay
    769                }
    770              }
    771           //}
    772          }
   \                     ??TransmitApp_HandleKeys_0:
   \   000037                REQUIRE ?Subroutine2
   \   000037                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    773          
    774          /*********************************************************************
    775           * LOCAL FUNCTIONS
    776           */
    777          
    778          /*********************************************************************
    779           * @fn      TransmitApp_MessageMSGCB
    780           *
    781           * @brief   Data message processor callback.  This function processes
    782           *          any incoming data - probably from other devices.  So, based
    783           *          on cluster ID, perform the intended action.
    784           *
    785           * @param   none
    786           *
    787           * @return  none
    788           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    789          void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     TransmitApp_MessageMSGCB:
    790          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    791            uint16 i;
                          ^
Warning[Pe177]: variable "i" was declared but never referenced
    792            uint8 error = FALSE;
                         ^
Warning[Pe177]: variable "error" was declared but never referenced
    793          //HalLedBlink (HAL_LED_2, 1, 50, 300);
    794          //HalUARTWrite(HAL_UART_PORT_0,pkt->cmd.Data,pkt->cmd.DataLength);//microdjg
    795            switch ( pkt->clusterId )
    796            {
    797              case TRANSMITAPP_CLUSTERID_TESTMSG:
    798                
    799                //HalUARTWrite(HAL_UART_PORT_0,pkt->cmd.Data,pkt->cmd.DataLength);//microdjg
    800                //HalLedBlink ( HAL_LED_2, 1, 50, 300 );//Blink to indicate RX
    801                break;
    802            default:break;
    803            }
    804          }
   \   000000   02....       LJMP    ?BRET
    805          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    806          void TransmitApp_ProcessZDOIncomingMsgs( zdoIncomingMsg_t *inMsg )
   \                     TransmitApp_ProcessZDOIncomingMsgs:
    807          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    808              ModBusFrame_t RxFrame;
    809              uint16 temp;
                            ^
Warning[Pe177]: variable "temp" was declared but never referenced
    810              //uint8 recdatabuf[20];
    811              HalLedBlink (HAL_LED_2, 1, 50, 300);
   \   00000E                ; Setup parameters for call to function HalLedBlink
   \   00000E   7C2C         MOV     R4,#0x2c
   \   000010   7D01         MOV     R5,#0x1
   \   000012   7B32         MOV     R3,#0x32
   \   000014   7A01         MOV     R2,#0x1
   \   000016   7902         MOV     R1,#0x2
   \   000018   12....       LCALL   ??HalLedBlink?relay
    812              uint8 i;
                           ^
Warning[Pe177]: variable "i" was declared but never referenced
    813              //#if defined(GTA_DEBUG)
    814              //  uint8 i;
    815              //#endif
    816              
    817              //HalUARTWrite(HAL_UART_PORT_0,inMsg->asdu,inMsg->asduLen);//²âÊÔ
    818              
    819              if(ZG_DEVICE_COORDINATOR_TYPE)
   \   00001B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   7020         JNZ     ??TransmitApp_ProcessZDOIncomingMsgs_0
    820              {
    821                
    822                if(inMsg->asduLen!=0&&inMsg->asdu[0]!=0)
   \   000021   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000024   6042         JZ      ??TransmitApp_ProcessZDOIncomingMsgs_1
   \   000026   EE           MOV     A,R6
   \   000027   2413         ADD     A,#0x13
   \   000029   F582         MOV     DPL,A
   \   00002B   EF           MOV     A,R7
   \   00002C   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00002F   6037         JZ      ??TransmitApp_ProcessZDOIncomingMsgs_1
    823                {/*
    824                  for(i=0;i<inMsg->asduLen;i++)
    825                  {
    826                    recdatabuf[i]=inMsg->asdu[i];
    827                  } 
    828                  HalUARTWrite(HAL_UART_PORT_0,recdatabuf,inMsg->asduLen);
    829                  */
    830                  HalUARTWrite(HAL_UART_PORT_0,inMsg->asdu,inMsg->asduLen);
   \   000031                ; Setup parameters for call to function HalUARTWrite
   \   000031   12....       LCALL   ?Subroutine14 & 0xFFFF
    831                }
    832                
    833                //HalUARTWrite(HAL_UART_PORT_0,recdatabuf,inMsg->asduLen);
    834                #if defined(GTA_DEBUG)
    835                if(Test_Mark==0x01)
    836                {
    837                  for(i=0;i<15;i++)
    838                  {
    839                    Test_Buf[i]=0;
    840                  }
    841                  for(i=0;i<inMsg->asduLen;i++)
    842                  {
    843                    Test_Buf[i]=inMsg->asdu[i];
    844                  }
    845                  Test_Mark=0;
    846                }
    847                
    848                #endif
    849              }
   \                     ??CrossCallReturnLabel_29:
   \   000034   FC           MOV     R4,A
   \   000035   7D00         MOV     R5,#0x0
   \   000037   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   ??HalUARTWrite?relay
   \   00003F   8027         SJMP    ??TransmitApp_ProcessZDOIncomingMsgs_1
    850              else
    851              {
    852                FrameUnPackage(inMsg->asdu,&RxFrame);//check Package
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_0:
   \   000041                ; Setup parameters for call to function FrameUnPackage
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   AC82         MOV     R4,DPL
   \   000049   AD83         MOV     R5,DPH
   \   00004B   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00004E   12....       LCALL   ??FrameUnPackage?relay
    853                if(RxFrame.COMFIRM==FRAME_CHECK_RIGHT)
   \   000051   7417         MOV     A,#0x17
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E0           MOVX    A,@DPTR
   \   000057   6401         XRL     A,#0x1
   \   000059   700D         JNZ     ??TransmitApp_ProcessZDOIncomingMsgs_1
    854                {
    855                  ReportData(&RxFrame);
   \   00005B                ; Setup parameters for call to function ReportData
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   AA82         MOV     R2,DPL
   \   000063   AB83         MOV     R3,DPH
   \   000065   12....       LCALL   ??ReportData?relay
    856                  
    857                }
    858              } 
    859              
    860          }
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_1:
   \   000068   7418         MOV     A,#0x18
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006D   80..         SJMP    ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FB           MOV     R3,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine19_0
   \   000003                ; // Fall through to label ??Subroutine19_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   EE           MOV     A,R6
   \   000001   2410         ADD     A,#0x10
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006                REQUIRE ??Subroutine20_0
   \   000006                ; // Fall through to label ??Subroutine20_0
    861          
    862          /*********************************************************************
    863           * @fn      TransmitApp_SendTheMessage
    864           *
    865           * @brief   Send "the" message.
    866           *
    867           * @param   none
    868           *
    869           * @return  none
    870           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    871          void TransmitApp_SendTheMessage( void )
   \                     TransmitApp_SendTheMessage:
    872          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    873            uint16 len;
    874            uint8 tmp;
    875          
    876            do {
    877              // put the sequence number in the message
    878              tmp = HI_UINT8( TransmitApp_TransID );
   \                     ??TransmitApp_SendTheMessage_0:
   \   000005   90....       MOV     DPTR,#TransmitApp_TransID
   \   000008   E0           MOVX    A,@DPTR
   \   000009   C4           SWAP    A
   \   00000A   540F         ANL     A,#0xf
   \   00000C   FE           MOV     R6,A
    879              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \   00000D   C3           CLR     C
   \   00000E   940A         SUBB    A,#0xa
   \   000010   5004         JNC     ??TransmitApp_SendTheMessage_1
   \   000012   7830         MOV     R0,#0x30
   \   000014   8002         SJMP    ??TransmitApp_SendTheMessage_2
   \                     ??TransmitApp_SendTheMessage_1:
   \   000016   7837         MOV     R0,#0x37
    880              TransmitApp_Msg[2] = tmp;
   \                     ??TransmitApp_SendTheMessage_2:
   \   000018   E8           MOV     A,R0
   \   000019   2E           ADD     A,R6
   \   00001A   90....       MOV     DPTR,#TransmitApp_Msg + 2
   \   00001D   F0           MOVX    @DPTR,A
    881              tmp = LO_UINT8( TransmitApp_TransID );
   \   00001E   90....       MOV     DPTR,#TransmitApp_TransID
   \   000021   E0           MOVX    A,@DPTR
   \   000022   540F         ANL     A,#0xf
   \   000024   FE           MOV     R6,A
    882              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \   000025   C3           CLR     C
   \   000026   940A         SUBB    A,#0xa
   \   000028   5004         JNC     ??TransmitApp_SendTheMessage_3
   \   00002A   7830         MOV     R0,#0x30
   \   00002C   8002         SJMP    ??TransmitApp_SendTheMessage_4
   \                     ??TransmitApp_SendTheMessage_3:
   \   00002E   7837         MOV     R0,#0x37
    883              TransmitApp_Msg[3] = tmp;
   \                     ??TransmitApp_SendTheMessage_4:
   \   000030   E8           MOV     A,R0
   \   000031   2E           ADD     A,R6
   \   000032   90....       MOV     DPTR,#TransmitApp_Msg + 3
   \   000035   F0           MOVX    @DPTR,A
    884          
    885              len = TransmitApp_MaxDataLength;
    886          
    887          #if defined ( TRANSMITAPP_RANDOM_LEN )
    888              len = (uint8)(osal_rand() & 0x7F);
    889              if( len > TransmitApp_MaxDataLength || len == 0 )
    890                len = TransmitApp_MaxDataLength;
    891              else if ( len < 4 )
    892                len = 4;
    893          #endif
    894          	
    895              tmp = AF_DataRequest( &TransmitApp_DstAddr, &TransmitApp_epDesc,
    896                                     TRANSMITAPP_CLUSTERID_TESTMSG,
    897                                     len, TransmitApp_Msg,
    898                                    &TransmitApp_TransID,
    899                                     TRANSMITAPP_TX_OPTIONS,
    900                                     AF_DEFAULT_RADIUS );
   \   000036                ; Setup parameters for call to function AF_DataRequest
   \   000036   75..1E       MOV     ?V0 + 0,#0x1e
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003E   75....       MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
   \   000041   75....       MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   75....       MOV     ?V0 + 0,#TransmitApp_Msg & 0xff
   \   00004C   75....       MOV     ?V0 + 1,#(TransmitApp_Msg >> 8) & 0xff
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   000057   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005A   75..A1       MOV     ?V0 + 0,#-0x5f
   \   00005D   75..00       MOV     ?V0 + 1,#0x0
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   7920         MOV     R1,#0x20
   \   000067   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000069   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   00006B   7A..         MOV     R2,#TransmitApp_DstAddr & 0xff
   \   00006D   7B..         MOV     R3,#(TransmitApp_DstAddr >> 8) & 0xff
   \   00006F   12....       LCALL   ??AF_DataRequest?relay
   \   000072   7409         MOV     A,#0x9
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   E9           MOV     A,R1
   \   000078   FE           MOV     R6,A
    901              HalLedBlink ( HAL_LED_3, 1, 50, 200 );//Blink to indicate TX  microdjg
   \   000079                ; Setup parameters for call to function HalLedBlink
   \   000079   7CC8         MOV     R4,#-0x38
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   7B32         MOV     R3,#0x32
   \   00007F   7A01         MOV     R2,#0x1
   \   000081   7904         MOV     R1,#0x4
   \   000083   12....       LCALL   ??HalLedBlink?relay
    902          
    903          #if defined ( TRANSMITAPP_RANDOM_LEN )
    904              if ( tmp == afStatus_SUCCESS )
    905              {
    906                txAccum += len;
    907              }
    908          #endif
    909          
    910              if ( timesToSend )
   \   000086   90....       MOV     DPTR,#timesToSend
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   600A         JZ      ??TransmitApp_SendTheMessage_5
    911              {
    912                timesToSend--;
    913              }
    914            } while ( (timesToSend != 0) && (afStatus_SUCCESS == tmp) );
   \   00008C   14           DEC     A
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   6006         JZ      ??TransmitApp_SendTheMessage_5
   \   000090   EE           MOV     A,R6
   \   000091   7003         JNZ     $+5
   \   000093   02....       LJMP    ??TransmitApp_SendTheMessage_0 & 0xFFFF
    915          
    916            if ( afStatus_SUCCESS == tmp )
   \                     ??TransmitApp_SendTheMessage_5:
   \   000096   EE           MOV     A,R6
   \   000097   700E         JNZ     ??TransmitApp_SendTheMessage_6
    917            {
    918              pktCounter++;
   \   000099   90....       MOV     DPTR,#pktCounter
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   2401         ADD     A,#0x1
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   3400         ADDC    A,#0x0
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   8010         SJMP    ??TransmitApp_SendTheMessage_7
    919            }
    920            else
    921            {
    922              // Error, so wait (10 mSec) and try again.
    923              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_SEND_ERR_EVT, 10 );
   \                     ??TransmitApp_SendTheMessage_6:
   \   0000A7                ; Setup parameters for call to function osal_start_timerEx
   \   0000A7   7C0A         MOV     R4,#0xa
   \   0000A9   7D00         MOV     R5,#0x0
   \   0000AB   7A04         MOV     R2,#0x4
   \   0000AD   7B00         MOV     R3,#0x0
   \   0000AF   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   12....       LCALL   ??osal_start_timerEx?relay
    924            }
    925          }
   \                     ??TransmitApp_SendTheMessage_7:
   \   0000B7   80..         SJMP    ??Subroutine17_0
    926          
    927          /*********************************************************************
    928           * @fn      TransmitApp_ChangeState
    929           *
    930           * @brief   Toggle the Sending/Waiting state flag
    931           *
    932           * @param   none
    933           *
    934           * @return  none
    935           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    936          void TransmitApp_ChangeState( void )
   \                     TransmitApp_ChangeState:
    937          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    938            if ( TransmitApp_State == TRANSMITAPP_STATE_WAITING )
   \   000004   90....       MOV     DPTR,#TransmitApp_State
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700D         JNZ     ??TransmitApp_ChangeState_0
    939            {
    940              TransmitApp_State = TRANSMITAPP_STATE_SENDING;
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
    941              TransmitApp_SetSendEvt();
   \   00000D                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   00000D   12....       LCALL   ??TransmitApp_SetSendEvt?relay
    942              timesToSend = TRANSMITAPP_INITIAL_MSG_COUNT;
   \   000010   90....       MOV     DPTR,#timesToSend
   \   000013   7402         MOV     A,#0x2
   \   000015   8001         SJMP    ??TransmitApp_ChangeState_1
    943            }
    944            else
    945            {
    946              TransmitApp_State = TRANSMITAPP_STATE_WAITING;
   \                     ??TransmitApp_ChangeState_0:
   \   000017   E4           CLR     A
   \                     ??TransmitApp_ChangeState_1:
   \   000018   F0           MOVX    @DPTR,A
    947            }
    948          }
   \   000019                REQUIRE ?Subroutine3
   \   000019                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    949          
    950          /*********************************************************************
    951           * @fn      TransmitApp_SetSendEvt
    952           *
    953           * @brief   Set the event flag
    954           *
    955           * @param   none
    956           *
    957           * @return  none
    958           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    959          void TransmitApp_SetSendEvt( void )
   \                     TransmitApp_SetSendEvt:
    960          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    961          #if defined( TRANSMITAPP_DELAY_SEND )
    962            // Adds a delay to sending the data
    963            osal_start_timerEx( TransmitApp_TaskID,
    964                              TRANSMITAPP_SEND_MSG_EVT, TRANSMITAPP_SEND_DELAY );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   7CC8         MOV     R4,#-0x38
   \   000006   7D00         MOV     R5,#0x0
   \   000008   7A01         MOV     R2,#0x1
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??osal_start_timerEx?relay
    965          #else
    966            // No Delay - just send the data
    967            osal_set_event( TransmitApp_TaskID, TRANSMITAPP_SEND_MSG_EVT );
    968          #endif
    969          }
   \   000014   80..         SJMP    ?Subroutine3
    970          
    971          /*********************************************************************
    972           * @fn      TransmitApp_DisplayResults
    973           *
    974           * @brief   Display the results and clear the accumulators
    975           *
    976           * @param   none
    977           *
    978           * @return  none
    979           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    980          void TransmitApp_DisplayResults( void )
   \                     TransmitApp_DisplayResults:
    981          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    982          #ifdef LCD_SUPPORTED
    983            #define LCD_W  16
    984            uint32 rxShdw, txShdw, tmp;
    985            byte lcd_buf[LCD_W+1];
    986            byte idx;
    987          #endif
    988          
    989            // The OSAL timers are not real-time, so calculate the actual time expired.
    990            uint32 msecs = osal_GetSystemClock() - clkShdw;
   \   000005                ; Setup parameters for call to function osal_GetSystemClock
   \   000005   12....       LCALL   ??osal_GetSystemClock?relay
    991            clkShdw = osal_GetSystemClock();
   \   000008                ; Setup parameters for call to function osal_GetSystemClock
   \   000008   12....       LCALL   ??osal_GetSystemClock?relay
   \   00000B   90....       MOV     DPTR,#clkShdw
   \   00000E   12....       LCALL   ?XSTORE_R2345
    992          
    993            rxTotal += rxAccum;
   \   000011   90....       MOV     DPTR,#rxAccum
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?L_MOV_X
   \   000019   90....       MOV     DPTR,#rxTotal
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?L_ADD_TO_X
    994            txTotal += txAccum;
   \   000021   90....       MOV     DPTR,#txAccum
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_MOV_X
   \   000029   90....       MOV     DPTR,#txTotal
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?L_ADD_TO_X
    995          
    996          #if defined ( LCD_SUPPORTED )
    997            rxShdw = (rxAccum * 1000 + msecs/2) / msecs;
    998            txShdw = (txAccum * 1000 + msecs/2) / msecs;
    999          
   1000            osal_memset( lcd_buf, ' ', LCD_W );
   1001            lcd_buf[LCD_W] = NULL;
   1002          
   1003            idx = 4;
   1004            tmp = (rxShdw >= 100000) ? 99999 : rxShdw;
   1005            do
   1006            {
   1007              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
   1008              tmp /= 10;
   1009            } while ( tmp );
   1010          
   1011            idx = LCD_W-1;
   1012            tmp = rxTotal;
   1013            do
   1014            {
   1015              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
   1016              tmp /= 10;
   1017            } while ( tmp );
   1018          
   1019            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_1 );
   1020            osal_memset( lcd_buf, ' ', LCD_W );
   1021          
   1022            idx = 4;
   1023            tmp = (txShdw >= 100000) ? 99999 : txShdw;
   1024            do
   1025            {
   1026              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
   1027              tmp /= 10;
   1028            } while ( tmp );
   1029          
   1030            idx = LCD_W-1;
   1031            tmp = txTotal;
   1032            do
   1033            {
   1034              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
   1035              tmp /= 10;
   1036            } while ( tmp );
   1037          
   1038            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
   1039          
   1040          #elif defined( MT_TASK )
   1041            DEBUG_INFO( COMPID_APP, SEVERITY_INFORMATION, 3,
   1042                        rxAccum, (uint16)msecs, (uint16)rxTotal );
   1043          #else
   1044            (void)msecs;  // Not used when no output
   1045          #endif
   1046          
   1047            if ( (rxAccum == 0) && (txAccum == 0) )
   \   000031   90....       MOV     DPTR,#rxAccum
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?L_MOV_X
   \   000039   E5..         MOV     A,?V0 + 0
   \   00003B   45..         ORL     A,?V0 + 1
   \   00003D   45..         ORL     A,?V0 + 2
   \   00003F   45..         ORL     A,?V0 + 3
   \   000041   7023         JNZ     ??TransmitApp_DisplayResults_0
   \   000043   90....       MOV     DPTR,#txAccum
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?L_MOV_X
   \   00004B   E5..         MOV     A,?V0 + 0
   \   00004D   45..         ORL     A,?V0 + 1
   \   00004F   45..         ORL     A,?V0 + 2
   \   000051   45..         ORL     A,?V0 + 3
   \   000053   7011         JNZ     ??TransmitApp_DisplayResults_0
   1048            {
   1049              osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT );
   \   000055                ; Setup parameters for call to function osal_stop_timerEx
   \   000055   7A02         MOV     R2,#0x2
   \   000057   7B00         MOV     R3,#0x0
   \   000059   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   12....       LCALL   ??osal_stop_timerEx?relay
   1050              timerOn = FALSE;
   \   000061   90....       MOV     DPTR,#timerOn
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
   1051            }
   1052          
   1053            rxAccum = txAccum = 0;
   \                     ??TransmitApp_DisplayResults_0:
   \   000066   90....       MOV     DPTR,#txAccum
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   F0           MOVX    @DPTR,A
   \   000071   90....       MOV     DPTR,#rxAccum
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   F0           MOVX    @DPTR,A
   1054          }
   \   00007B                REQUIRE ?Subroutine4
   \   00007B                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1055          
   1056          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1057          void initUart(halUARTCBack_t pf)
   \                     initUart:
   1058          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1059            halUARTCfg_t uartConfig;
   1060            
   1061            uartConfig.configured           = TRUE;              
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7401         MOV     A,#0x1
   \   000011   F0           MOVX    @DPTR,A
   1062            uartConfig.baudRate             = HAL_UART_BR_9600;//HAL_UART_BR_38400;  //HAL_UART_BR_19200;
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
   1063            uartConfig.flowControl          = FALSE;              
   \   000017   7402         MOV     A,#0x2
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E4           CLR     A
   \   00001D   F0           MOVX    @DPTR,A
   1064            uartConfig.flowControlThreshold = 48;
   \   00001E   7403         MOV     A,#0x3
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7430         MOV     A,#0x30
   \   000025   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   1065            uartConfig.rx.maxBufSize        = RX_BUF_LEN;
   \                     ??CrossCallReturnLabel_22:
   \   000028   740A         MOV     A,#0xa
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   12....       LCALL   ?Subroutine9 & 0xFFFF
   1066            uartConfig.tx.maxBufSize        = 128;
   \                     ??CrossCallReturnLabel_23:
   \   000030   7412         MOV     A,#0x12
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?Subroutine9 & 0xFFFF
   1067            
   1068            uartConfig.idleTimeout          = 6;   
   \                     ??CrossCallReturnLabel_24:
   \   000038   7405         MOV     A,#0x5
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   7406         MOV     A,#0x6
   \   00003F   F0           MOVX    @DPTR,A
   1069            uartConfig.intEnable            = TRUE;              
   \   000040   7416         MOV     A,#0x16
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   7401         MOV     A,#0x1
   \   000047   F0           MOVX    @DPTR,A
   1070            uartConfig.callBackFunc         = pf;
   \   000048   741B         MOV     A,#0x1b
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   EA           MOV     A,R2
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   EB           MOV     A,R3
   \   000051   12....       LCALL   ?Subroutine6 & 0xFFFF
   1071            
   1072            HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
   \                     ??CrossCallReturnLabel_1:
   \   000054   7900         MOV     R1,#0x0
   \   000056   12....       LCALL   ??HalUARTOpen?relay
   1073          }
   \   000059   741D         MOV     A,#0x1d
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005E   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7480         MOV     A,#-0x80
   \   000002                REQUIRE ??Subroutine18_0
   \   000002                ; // Fall through to label ??Subroutine18_0
   1074          
   1075          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1076          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
   1077          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 128
   \   000005   7480         MOV     A,#-0x80
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1078            uint8 pBuf[RX_BUF_LEN];
   1079            uint16 len;
   1080            static uint16 destAddr;
                                 ^
Warning[Pe177]: variable "destAddr" was declared but never referenced
   1081            ModBusFrame_t *pRxFrame;
                                  ^
Warning[Pe177]: variable "pRxFrame" was declared but never referenced
   1082            zAddrType_t dstAddr;
                               ^
Warning[Pe177]: variable "dstAddr" was declared but never referenced
   1083            #if defined (GTA_WHFRFID_R1) 
   1084            RC623Frame_t *pRC623Frame;
   1085            uint8 Frame[15];//ÁÙÊ±Éè¶¨µÄ´óÐ¡  
   1086            uint8 data[10];//
   1087            uint16 FrameLen;
   1088            uint8 i;
   1089            #endif
   1090           
   1091              len = HalUARTRead( HAL_UART_PORT_0, pBuf, RX_BUF_LEN );
   \   00000A                ; Setup parameters for call to function HalUARTRead
   \   00000A   7C80         MOV     R4,#-0x80
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AA82         MOV     R2,DPL
   \   000016   AB83         MOV     R3,DPH
   \   000018   7900         MOV     R1,#0x0
   \   00001A   12....       LCALL   ??HalUARTRead?relay
   \   00001D   8A..         MOV     ?V0 + 0,R2
   \   00001F   8B..         MOV     ?V0 + 1,R3
   1092              if ( len>0 ) 
   \   000021   EA           MOV     A,R2
   \   000022   45..         ORL     A,?V0 + 1
   \   000024   606B         JZ      ??uartRxCB_0
   1093              {
   1094                 // HalUARTWrite(HAL_UART_PORT_0, pBuf, len);
   1095                //SentDataInBind(pBuf,len);
   1096                if(!ZG_DEVICE_COORDINATOR_TYPE)//·ÇÐ­µ÷Æ÷
   \   000026   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   90....       MOV     DPTR,#TestDirectSent_DstAddr + 8
   \   00002D   600A         JZ      ??uartRxCB_1
   1097                {
   1098                  #if defined (GTA_WHFRFID_R1) 
   1099                  UnPackRC623Data(pBuf,pRC623Frame);
   1100                  if(pRC623Frame->Comfirm==FRAME_CHECK_RIGHT)
   1101                  {
   1102                    switch(pRC623Frame->Cmd)
   1103                    {
   1104                        case RFID_CMD_SET_ISOTYPE:
   1105          
   1106                          break;
   1107                        case RFID_CMD_SELECT_CARD:
   1108          
   1109                          break;
   1110                        case RFID_CMD_GET_CARD_ID:
   1111                          data[0]=7;
   1112                          data[1]=MODBUS_RFID_CMD_GET_CARD_ID&0x00FF;
   1113                          data[2]=(MODBUS_RFID_CMD_GET_CARD_ID>>8)&0x00FF;
   1114                          data[3]=pRC623Frame->Data[1];
   1115                          data[4]=pRC623Frame->Data[2];
   1116                          data[5]=pRC623Frame->Data[3];
   1117                          data[6]=pRC623Frame->Data[4];
   1118                          //data[4]=pRC623Frame->Data[3];
   1119                          FrameLen=FramePackage(Frame,NativeAddr,0x03,data,7);//´ò°ü
   1120                          SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1121                          break;
   1122                        case RFID_CMD_FIND_ISO14443_CARD:
   1123                          //for(i=0;i<RC623Frame.DataLen;i++)
   1124                          //{
   1125                          //  RC623Frame.Data
   1126                          //}
   1127                          data[0]=5;//2+1+2
   1128                          data[1]=MODBUS_RFID_CMD_FIND_ISO14443_CARD&0x00FF;
   1129                          data[2]=(MODBUS_RFID_CMD_FIND_ISO14443_CARD>>8)&0x00FF;
   1130                          data[3]=pRC623Frame->Data[0];
   1131                          data[4]=pRC623Frame->Data[1];
   1132                          data[5]=pRC623Frame->Data[2];
   1133                          data[6]=pRC623Frame->Data[3];
   1134                          FrameLen=FramePackage(Frame,NativeAddr,0x03,data,6);//´ò°ü
   1135                          SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1136          
   1137                          break;
   1138                        case RFID_CMD_CONFIG_KEY:
   1139          
   1140                          break;
   1141                        case RFID_CMD_READ_VAL:
   1142          
   1143                          break;
   1144                        default:
   1145                          break;
   1146                    }
   1147                  }
   1148                  #else
   1149                  TestDirectSent_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;//µØÖ·´«ËÍ
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   1150                  TestDirectSent_DstAddr.endPoint = 0;
   1151                  TestDirectSent_DstAddr.addr.shortAddr = 0x0000;
   \                     ??CrossCallReturnLabel_19:
   \   000034   90....       MOV     DPTR,#TestDirectSent_DstAddr
   \   000037   8003         SJMP    ??CrossCallReturnLabel_4
   1152              
   1153                  AF_DataRequest( 
   1154                                &TestDirectSent_DstAddr,               //µØÖ·
   1155                                &TransmitApp_epDesc,                //ÃèÊö
   1156                                TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1157                                  len,                                  //len
   1158                                  pBuf,//TransmitApp_Msg,             //DATA
   1159                                &TransmitApp_TransID,               //
   1160                                TRANSMITAPP_TX_OPTIONS,
   1161                                AF_DEFAULT_RADIUS 
   1162                                );
   1163                  HalLedBlink (HAL_LED_3, 1, 50, 200);
   1164                  #endif
   1165                }
   1166                else
   1167                {
   1168                  //destAddr=BUILD_UINT16(pBuf[1],pBuf[0]);
   1169                  if(ZG_DEVICE_COORDINATOR_TYPE)
   1170                  {
   1171                    TestDirectSent_DstAddr.addrMode=(afAddrMode_t)AddrBroadcast;//Addr16Bit;//µØÖ·´«ËÍ
   \                     ??uartRxCB_1:
   \   000039   12....       LCALL   ?Subroutine8 & 0xFFFF
   1172                    TestDirectSent_DstAddr.endPoint = 0;
   1173                    TestDirectSent_DstAddr.addr.shortAddr = 0xffff;//destAddr;
   \                     ??CrossCallReturnLabel_4:
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   F0           MOVX    @DPTR,A
   1174                    //TestDirectSent_DstAddr.addr.extAddr
   1175                    
   1176                    AF_DataRequest( 
   1177                                &TestDirectSent_DstAddr,               //µØÖ·
   1178                                &TransmitApp_epDesc,                //ÃèÊö
   1179                                TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1180                                  len,                                  //len
   1181                                  pBuf,//TransmitApp_Msg,             //DATA
   1182                                &TransmitApp_TransID,               //
   1183                                TRANSMITAPP_TX_OPTIONS,
   1184                                AF_DEFAULT_RADIUS 
   1185                                );
   \   00003F                ; Setup parameters for call to function AF_DataRequest
   \   00003F   75..1E       MOV     ?V0 + 2,#0x1e
   \   000042   78..         MOV     R0,#?V0 + 2
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   75....       MOV     ?V0 + 2,#TransmitApp_TransID & 0xff
   \   00004A   75....       MOV     ?V0 + 3,#(TransmitApp_TransID >> 8) & 0xff
   \   00004D   78..         MOV     R0,#?V0 + 2
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   7403         MOV     A,#0x3
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   8582..       MOV     ?V0 + 2,DPL
   \   00005A   8583..       MOV     ?V0 + 3,DPH
   \   00005D   78..         MOV     R0,#?V0 + 2
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   78..         MOV     R0,#?V0 + 0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   75..A1       MOV     ?V0 + 0,#-0x5f
   \   00006A   75..00       MOV     ?V0 + 1,#0x0
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   7920         MOV     R1,#0x20
   \   000074   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000076   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   000078   7A..         MOV     R2,#TestDirectSent_DstAddr & 0xff
   \   00007A   7B..         MOV     R3,#(TestDirectSent_DstAddr >> 8) & 0xff
   \   00007C   12....       LCALL   ??AF_DataRequest?relay
   \   00007F   7409         MOV     A,#0x9
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   1186                    HalLedBlink (HAL_LED_3, 1, 50, 200);
   \   000084                ; Setup parameters for call to function HalLedBlink
   \   000084   7CC8         MOV     R4,#-0x38
   \   000086   7D00         MOV     R5,#0x0
   \   000088   7B32         MOV     R3,#0x32
   \   00008A   7A01         MOV     R2,#0x1
   \   00008C   7904         MOV     R1,#0x4
   \   00008E   12....       LCALL   ??HalLedBlink?relay
   1187                  }
   1188                }
   1189              }
   1190          
   1191          }
   \                     ??uartRxCB_0:
   \   000091   7480         MOV     A,#-0x80
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   \   000096   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   90....       MOV     DPTR,#TestDirectSent_DstAddr
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   22           RET
   1192          /*********************************************************************
   1193          *********************************************************************/
   1194          
   1195          
   1196          
   1197          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1198          void FrameUnPackage(uint8 *pBuf,ModBusFrame_t *pFrame)
   \                     FrameUnPackage:
   1199          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1200             uint16 crc;
   1201             uint8 datalen;
   1202             uint8 cmd;
   1203             uint8 i;
   1204             
   1205             if(pBuf[0]==FRAME_HEAD)
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   647E         XRL     A,#0x7e
   \   000014   6003         JZ      $+5
   \   000016   02....       LJMP    ??FrameUnPackage_0 & 0xFFFF
   1206             {
   1207             	cmd=pBuf[2];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 5,A
   1208          	switch(cmd)
   \   00001E   14           DEC     A
   \   00001F   6024         JZ      ??FrameUnPackage_1
   \   000021   24FE         ADD     A,#-0x2
   \   000023   6020         JZ      ??FrameUnPackage_1
   \   000025   24FE         ADD     A,#-0x2
   \   000027   601C         JZ      ??FrameUnPackage_1
   \   000029   14           DEC     A
   \   00002A   6019         JZ      ??FrameUnPackage_1
   \   00002C   24F7         ADD     A,#-0x9
   \   00002E   607E         JZ      ??FrameUnPackage_2
   \   000030   14           DEC     A
   \   000031   7003         JNZ     $+5
   \   000033   02....       LJMP    ??FrameUnPackage_3 & 0xFFFF
   \   000036   14           DEC     A
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??FrameUnPackage_4 & 0xFFFF
   \   00003C   14           DEC     A
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??FrameUnPackage_5 & 0xFFFF
   \   000042   02....       LJMP    ??FrameUnPackage_6 & 0xFFFF
   1209          		{
   1210          		case FUN_CODE_READ_COIL_STATE:		
   1211          		case FUN_CODE_READ_HOLDING_REGISTERS:
   1212          			datalen =4;
   1213          			break;
   1214          		case 0x05:	
   1215          		case 0x06:
   1216          			datalen =4;
   \                     ??FrameUnPackage_1:
   \   000045   75..04       MOV     ?V0 + 4,#0x4
   1217          			break;
   1218          		case 0x0F:
   1219          			datalen =5+((BUILD_UINT16(pBuf[6],pBuf[5])+7)/8);//2+2+1+(N+7)/8
   1220          			break;
   1221          		case 0x10:
   1222          			datalen=5+((BUILD_UINT16(pBuf[6],pBuf[5])*2));//2+2+1+2N
   1223          			break;
   1224          		case 0x11:
   1225                                  datalen = 0;
   1226                                  break;
   1227          		case 0x12:
   1228          			datalen = 1;	//1+ 6;
   1229          			break;
   1230          		default:pFrame->COMFIRM=FRAME_CHECK_CMD_WRONG;
   1231          			return ;
   1232          		}
   1233             	crc=BUILD_UINT16(pBuf[3+datalen],pBuf[3+datalen+1]);
   \                     ??FrameUnPackage_7:
   \   000048   85....       MOV     ?V0 + 2,?V0 + 4
   \   00004B   E5..         MOV     A,?V0 + 0
   \   00004D   25..         ADD     A,?V0 + 2
   \   00004F   F8           MOV     R0,A
   \   000050   EB           MOV     A,R3
   \   000051   3400         ADDC    A,#0x0
   \   000053   F9           MOV     R1,A
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FA           MOV     R2,A
   \   00005D   8882         MOV     DPL,R0
   \   00005F   8983         MOV     DPH,R1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F9           MOV     R1,A
   \   000067   EA           MOV     A,R2
   \   000068   2400         ADD     A,#0x0
   \   00006A   F5..         MOV     ?V0 + 2,A
   \   00006C   E4           CLR     A
   \   00006D   39           ADDC    A,R1
   \   00006E   F5..         MOV     ?V0 + 3,A
   1234               if(crc==Crc16Code(pBuf+1,datalen+2))//pBuf+1  ²»¼ÆHEAD  ³¤¶ÈÊÇ1+1+1-1
   \   000070                ; Setup parameters for call to function Crc16Code
   \   000070   7402         MOV     A,#0x2
   \   000072   25..         ADD     A,?V0 + 4
   \   000074   F9           MOV     R1,A
   \   000075   85..82       MOV     DPL,?V0 + 0
   \   000078   8B83         MOV     DPH,R3
   \   00007A   A3           INC     DPTR
   \   00007B   AA82         MOV     R2,DPL
   \   00007D   AB83         MOV     R3,DPH
   \   00007F   12....       LCALL   ??Crc16Code?relay
   \   000082   EA           MOV     A,R2
   \   000083   65..         XRL     A,?V0 + 2
   \   000085   7003         JNZ     ??FrameUnPackage_8
   \   000087   EB           MOV     A,R3
   \   000088   65..         XRL     A,?V0 + 3
   \                     ??FrameUnPackage_8:
   \   00008A   6003         JZ      $+5
   \   00008C   02....       LJMP    ??FrameUnPackage_9 & 0xFFFF
   1235               	{
   1236               		pFrame->CMD=cmd;
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   A3           INC     DPTR
   \   000094   E5..         MOV     A,?V0 + 5
   \   000096   12....       LCALL   ?Subroutine10 & 0xFFFF
   1237          		pFrame->DATALEN=datalen;
   \                     ??CrossCallReturnLabel_7:
   \   000099   A3           INC     DPTR
   \   00009A   E5..         MOV     A,?V0 + 4
   \   00009C   F0           MOVX    @DPTR,A
   1238          		pFrame->ADDR=pBuf[1];
   \   00009D   85..82       MOV     DPL,?V0 + 0
   \   0000A0   85..83       MOV     DPH,?V0 + 1
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   F0           MOVX    @DPTR,A
   1239          		for(i=0;i<datalen;i++)
   \   0000AA   7A00         MOV     R2,#0x0
   \   0000AC   8074         SJMP    ??FrameUnPackage_10
   \                     ??FrameUnPackage_2:
   \   0000AE   8A82         MOV     DPL,R2
   \   0000B0   8B83         MOV     DPH,R3
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FA           MOV     R2,A
   \   0000BA   85..82       MOV     DPL,?V0 + 0
   \   0000BD   8B83         MOV     DPH,R3
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F9           MOV     R1,A
   \   0000C6   EA           MOV     A,R2
   \   0000C7   2407         ADD     A,#0x7
   \   0000C9   F5..         MOV     ?V0 + 2,A
   \   0000CB   E9           MOV     A,R1
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   F5..         MOV     ?V0 + 3,A
   \   0000D0   7403         MOV     A,#0x3
   \   0000D2   78..         MOV     R0,#?V0 + 2
   \   0000D4   12....       LCALL   ?US_SHR
   \   0000D7   E5..         MOV     A,?V0 + 2
   \                     ??FrameUnPackage_11:
   \   0000D9   2405         ADD     A,#0x5
   \   0000DB   F5..         MOV     ?V0 + 4,A
   \   0000DD   02....       LJMP    ??FrameUnPackage_7 & 0xFFFF
   \                     ??FrameUnPackage_3:
   \   0000E0   8A82         MOV     DPL,R2
   \   0000E2   8B83         MOV     DPH,R3
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   C3           CLR     C
   \   0000EC   33           RLC     A
   \   0000ED   80EA         SJMP    ??FrameUnPackage_11
   \                     ??FrameUnPackage_4:
   \   0000EF   75..00       MOV     ?V0 + 4,#0x0
   \   0000F2   02....       LJMP    ??FrameUnPackage_7 & 0xFFFF
   \                     ??FrameUnPackage_5:
   \   0000F5   75..01       MOV     ?V0 + 4,#0x1
   \   0000F8   02....       LJMP    ??FrameUnPackage_7 & 0xFFFF
   \                     ??FrameUnPackage_6:
   \   0000FB   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000FE   7403         MOV     A,#0x3
   \   000100   8032         SJMP    ??FrameUnPackage_12
   1240                              {
   1241                              pFrame->pData[i]=pBuf[3+i];
   \                     ??FrameUnPackage_13:
   \   000102   8A82         MOV     DPL,R2
   \   000104   A882         MOV     R0,DPL
   \   000106   E5..         MOV     A,?V0 + 0
   \   000108   28           ADD     A,R0
   \   000109   F582         MOV     DPL,A
   \   00010B   E5..         MOV     A,?V0 + 1
   \   00010D   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   1242                              }
   \                     ??CrossCallReturnLabel_30:
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   E0           MOVX    A,@DPTR
   \   000114   C0E0         PUSH    A
   \   000116   EE           MOV     A,R6
   \   000117   28           ADD     A,R0
   \   000118   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   D0E0         POP     A
   \   000120   F0           MOVX    @DPTR,A
   \   000121   0A           INC     R2
   \                     ??FrameUnPackage_10:
   \   000122   EA           MOV     A,R2
   \   000123   C3           CLR     C
   \   000124   95..         SUBB    A,?V0 + 4
   \   000126   40DA         JC      ??FrameUnPackage_13
   1243                          pFrame->COMFIRM=FRAME_CHECK_RIGHT;
   \   000128   12....       LCALL   ?Subroutine12 & 0xFFFF
   1244                          return ;//ÍêÈ«ÕýÈ· ²¢°Ñ°ü·µ»Ø
   1245               	}
   1246          	 	
   1247             }
   \                     ??CrossCallReturnLabel_12:
   \   00012B   7401         MOV     A,#0x1
   \   00012D   8005         SJMP    ??FrameUnPackage_12
   1248             else
   1249             {
   1250             	 pFrame->COMFIRM=FRAME_CHECK_HEAD_WRONG;
   \                     ??FrameUnPackage_0:
   \   00012F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000132   7402         MOV     A,#0x2
   \                     ??FrameUnPackage_12:
   \   000134   F0           MOVX    @DPTR,A
   1251          	 return ;
   1252             }
   \                     ??FrameUnPackage_9:
   \   000135   02....       LJMP    ?Subroutine1 & 0xFFFF
   1253               
   1254          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV     A,R6
   \   000001   2417         ADD     A,#0x17
   \   000003   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000006   22           RET
   1255          
   1256          
   1257          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1258          uint16 Crc16Code(uint8 *str, uint8 len)//Modbus Ckeck Code.//LO First
   \                     Crc16Code:
   1259          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FC           MOV     R4,A
   1260              uint16 code = 0xFFFF;
   \   00000B   7AFF         MOV     R2,#-0x1
   \   00000D   7BFF         MOV     R3,#-0x1
   1261              uint16 Poly = 0xA001;
   1262          // Dnp is 0x3D65 or A6BC
   1263          
   1264              int flag = 0;
   \   00000F   7E00         MOV     R6,#0x0
   1265              int j = 0;
   \   000011   7800         MOV     R0,#0x0
   \   000013   7900         MOV     R1,#0x0
   1266          
   1267              for(j=0; j<len; j++)
   \   000015   802D         SJMP    ??Crc16Code_0
   1268              {
   1269          		code ^= (uint16) (*str);
   \                     ??Crc16Code_1:
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6A           XRL     A,R2
   \   000019   FA           MOV     R2,A
   1270          		for(int i=0; i<8;i++)
   \   00001A   7D08         MOV     R5,#0x8
   1271          		{
   1272          			if ( code & 0x0001 ) flag = 1;
   \                     ??Crc16Code_2:
   \   00001C   EA           MOV     A,R2
   \   00001D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001F   5002         JNC     ??Crc16Code_3
   \   000021   7E01         MOV     R6,#0x1
   1273          			code = code>>1;
   \                     ??Crc16Code_3:
   \   000023   EB           MOV     A,R3
   \   000024   C3           CLR     C
   \   000025   13           RRC     A
   \   000026   FB           MOV     R3,A
   \   000027   EA           MOV     A,R2
   \   000028   13           RRC     A
   \   000029   FA           MOV     R2,A
   1274          			if ( flag )
   \   00002A   EE           MOV     A,R6
   \   00002B   600A         JZ      ??Crc16Code_4
   1275          			{
   1276          				code ^= Poly;
   \   00002D   7401         MOV     A,#0x1
   \   00002F   6A           XRL     A,R2
   \   000030   FA           MOV     R2,A
   \   000031   74A0         MOV     A,#-0x60
   \   000033   6B           XRL     A,R3
   \   000034   FB           MOV     R3,A
   1277          				flag = 0;
   \   000035   7E00         MOV     R6,#0x0
   1278          			}
   1279          		}
   \                     ??Crc16Code_4:
   \   000037   1D           DEC     R5
   \   000038   ED           MOV     A,R5
   \   000039   70E1         JNZ     ??Crc16Code_2
   1280          		str ++;
   \   00003B   A3           INC     DPTR
   1281              }
   \   00003C   E8           MOV     A,R0
   \   00003D   2401         ADD     A,#0x1
   \   00003F   08           INC     R0
   \   000040   E9           MOV     A,R1
   \   000041   3400         ADDC    A,#0x0
   \   000043   F9           MOV     R1,A
   \                     ??Crc16Code_0:
   \   000044   8C..         MOV     ?V0 + 0,R4
   \   000046   C3           CLR     C
   \   000047   E8           MOV     A,R0
   \   000048   95..         SUBB    A,?V0 + 0
   \   00004A   E9           MOV     A,R1
   \   00004B   9400         SUBB    A,#0x0
   \   00004D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00004F   65D0         XRL     A,PSW
   \   000051   33           RLC     A
   \   000052   40C3         JC      ??Crc16Code_1
   1282              return code;
   \   000054   02....       LJMP    ??Subroutine17_0 & 0xFFFF
   1283          }
   1284          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B32         MOV     R3,#0x32
   \   000002   7A01         MOV     R2,#0x1
   \   000004   7904         MOV     R1,#0x4
   \   000006   12....       LCALL   ??HalLedBlink?relay
   \   000009                REQUIRE ??Subroutine17_0
   \   000009                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1285          void SentDataInBind(uint8 *pdata,uint16 len)
   \                     SentDataInBind:
   1286          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1287            //uint8 data[]="hello";
   1288               AF_DataRequest( 
   1289                              &TransmitApp_DstAddr,               //µØÖ·
   1290                              &TransmitApp_epDesc,                //ÃèÊö
   1291                              TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1292                              len,                                  //len
   1293                              pdata,//TransmitApp_Msg,             //DATA
   1294                              &TransmitApp_TransID,               //
   1295                              TRANSMITAPP_TX_OPTIONS,
   1296                              AF_DEFAULT_RADIUS 
   1297                              );
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   8A..         MOV     ?V0 + 0,R2
   \   00001A   8B..         MOV     ?V0 + 1,R3
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   8C..         MOV     ?V0 + 0,R4
   \   000023   8D..         MOV     ?V0 + 1,R5
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..A1       MOV     ?V0 + 0,#-0x5f
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7920         MOV     R1,#0x20
   \   000037   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000039   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   00003B   7A..         MOV     R2,#TransmitApp_DstAddr & 0xff
   \   00003D   7B..         MOV     R3,#(TransmitApp_DstAddr >> 8) & 0xff
   \   00003F   12....       LCALL   ??AF_DataRequest?relay
   \   000042   7409         MOV     A,#0x9
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   1298               HalLedBlink (HAL_LED_3, 1, 50, 300);
   \   000047                ; Setup parameters for call to function HalLedBlink
   \   000047   7C2C         MOV     R4,#0x2c
   \   000049   7D01         MOV     R5,#0x1
   \   00004B   02....       LJMP    ?Subroutine0 & 0xFFFF
   1299          }
   1300          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1301          void SendBindRequest(void)
   \                     SendBindRequest:
   1302          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1303              zAddrType_t dstAddr;
   1304              dstAddr.addrMode = Addr16Bit;
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
   1305              dstAddr.addr.shortAddr = 0x0000; // Coordinator
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
   1306              ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
   1307                            TransmitApp_epDesc.endPoint,
   1308                            TRANSMITAPP_PROFID,
   1309                            TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
   1310                            TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
   1311                            FALSE );
   \   00001C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001C   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00001F   8A..         MOV     ?V0 + 0,R2
   \   000021   8B..         MOV     ?V0 + 1,R3
   \   000023   AC..         MOV     R4,?V0 + 0
   \   000025   AD..         MOV     R5,?V0 + 1
   \   000027   75....       MOV     ?V0 + 0,#TransmitApp_ClusterList & 0xff
   \   00002A   75....       MOV     ?V0 + 1,#(TransmitApp_ClusterList >> 8) & 0xff
   \   00002D                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   00002D   75..00       MOV     ?V0 + 2,#0x0
   \   000030   78..         MOV     R0,#?V0 + 2
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..01       MOV     ?V0 + 2,#0x1
   \   00003D   78..         MOV     R0,#?V0 + 2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..01       MOV     ?V0 + 0,#0x1
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..05       MOV     ?V0 + 0,#0x5
   \   000052   75..0F       MOV     ?V0 + 1,#0xf
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   90....       MOV     DPTR,#TransmitApp_epDesc
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   7409         MOV     A,#0x9
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
   \   000068   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   00006B   7409         MOV     A,#0x9
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   1312              HalLedBlink (HAL_LED_1, 1, 50, 300);
   \   000070                ; Setup parameters for call to function HalLedBlink
   \   000070   7C2C         MOV     R4,#0x2c
   \   000072   7D01         MOV     R5,#0x1
   \   000074   7B32         MOV     R3,#0x32
   \   000076   7A01         MOV     R2,#0x1
   \   000078   7901         MOV     R1,#0x1
   \   00007A   12....       LCALL   ??HalLedBlink?relay
   1313          }
   \   00007D   7409         MOV     A,#0x9
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   7F03         MOV     R7,#0x3
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
   1314          
   1315          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1316          void ReportData(ModBusFrame_t *pRxFrame)
   \                     ReportData:
   1317          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1318           /* 
   1319            #if defined ( GTA_WWSB_R1 ) //ÓêµÎ´«¸ÐÆ÷   
   1320            uint8 Frame[10];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
   1321            uint8 data[3];//GTA_WWSB_R1 Êý¾ÝÎª3
   1322            #endif
   1323            #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷   
   1324            uint8 Frame[10];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
   1325            uint8 data[5];//GTA_WWSB_R1 Êý¾ÝÎª3
   1326            #endif
   1327          */
   1328          
   1329            #if defined (GTA_WHFRFID_R1)
   1330            RC623Frame_t pframe;
   1331            uint16 cmd;
   1332            #endif
   1333          
   1334            uint8 Frame[20];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
   1335            uint8 data[10];//
                         ^
Warning[Pe177]: variable "data" was declared but never referenced
   1336            uint16 i=0,j=0;
                          ^
Warning[Pe177]: variable "i" was declared but never referenced

    uint16 i=0,j=0;
               ^
"D:\work\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c",1336  Warning[Pe177]: 
          variable "j" was declared but never referenced
   1337            uint8 led=0;
                         ^
Warning[Pe177]: variable "led" was declared but never referenced
   1338          
   1339            
   1340            uint16 temp;
                          ^
Warning[Pe177]: variable "temp" was declared but never referenced
   1341            uint16 FrameLen;
   1342            switch(pRxFrame->CMD)
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   24FD         ADD     A,#-0x3
   \   000016   6010         JZ      ??ReportData_0
   \   000018   24F2         ADD     A,#-0xe
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??ReportData_1 & 0xFFFF
   \   00001F   14           DEC     A
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??ReportData_2 & 0xFFFF
   \   000025   02....       LJMP    ??ReportData_3 & 0xFFFF
   1343                {
   1344                case FUN_CODE_READ_HOLDING_REGISTERS://¶Á¼Ä´æÆ÷Êý¾Ý
   1345                  {
   1346                    //temp=BUILD_UINT16(pRxFrame->pData[1],pRxFrame->pData[0]);
   1347                    //if(temp==NativeAddr)//1 2×Ö½ÚÊÇµØÖ·£¬ÊÇ·ñ±¾»úµØÖ·
   1348                    if(pRxFrame->ADDR==NativeAddr)//ÊÇ·ñ±¾»úµØÖ·
   \                     ??ReportData_0:
   \   000028   8E82         MOV     DPL,R6
   \   00002A   8F83         MOV     DPH,R7
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   90....       MOV     DPTR,#NativeAddr
   \   000031   E0           MOVX    A,@DPTR
   \   000032   68           XRL     A,R0
   \   000033   6003         JZ      $+5
   \   000035   02....       LJMP    ??ReportData_3 & 0xFFFF
   1349                    {
   1350                        #if defined ( GTA_WWSB_R1 )||(GTA_WFSB_R1) //´«¸ÐÆ÷   
   1351                        temp=ReadADC(4);//¶ÁÓêµÎµçÑ¹Öµ,»ðÑæ´«¸ÐÆ÷
   1352                        data[0]=1;
   1353                        if(temp>3000)
   1354                          data[1]=0x01;
   1355                        else
   1356                          data[1]=0x00;
   1357                        //data[1]=LO_UINT16(temp);
   1358                        //data[2]=HI_UINT16(temp);
   1359                        FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
   1360                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1361                        #endif
   1362                        
   1363                        #if defined ( GTA_WUSB_R1 )
   1364                        IO_DIR_PORT_PIN(0, 6, IO_IN);
   1365                        data[0]=1;
   1366                        if(IO_SENSOR)
   1367                          data[1]=0x01;
   1368                        else
   1369                          data[1]=0x00;
   1370                        FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
   1371                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1372                        #endif
   1373          
   1374                        #if defined(GTA_WRCB_R1)
   1375                        IO_DIR_PORT_PIN(0, 6, IO_OUT);
   1376                        IO_DIR_PORT_PIN(0, 0, IO_OUT);
   1377                        if(pRxFrame->pData[0]==0x01)
   1378                          {
   1379                            if(pRxFrame->pData[1]==0x00)
   1380                              IO_RELAY1=0;
   1381                            if(pRxFrame->pData[1]==0x01)
   1382                              IO_RELAY1=1;
   1383                          }
   1384                        if(pRxFrame->pData[0]==0x02)
   1385                          {
   1386                            if(pRxFrame->pData[1]==0x00)
   1387                              IO_RELAY2=0;
   1388                            if(pRxFrame->pData[1]==0x01)
   1389                              IO_RELAY2=1;
   1390                          }
   1391                        #endif
   1392                        
   1393                        
   1394                        #if defined (GTA_WVSB_R1)||(GTA_WIRSB_R1)
   1395                        temp=ReadADC(4);//ºìÍâ´«¸ÐÆ÷
   1396                        data[0]=1;
   1397                        if(temp>3000)
   1398                          data[1]=0x00;
   1399                        else
   1400                          data[1]=0x01;
   1401                        FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
   1402                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1403                        #endif
   1404                        
   1405                        #if defined (GTA_WISB_R1)
   1406                        temp=ReadADC(4);//
   1407                        data[0]=2;
   1408                        data[1]=LO_UINT16(temp);
   1409                        data[2]=HI_UINT16(temp);
   1410                        FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,data,3);//´ò°ü
   1411                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1412                        #endif
   1413                        
   1414                        
   1415                        #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷  
   1416                        osal_int_disable( INTS_ALL );
   1417                        readTempHumi();
   1418                        osal_int_enable( INTS_ALL );
   1419                        data[0]=4;
   1420                        data[1]=humi_val[0];//L
   1421                        data[2]=humi_val[1];//H
   1422                        data[3]=temp_val[0];
   1423                        data[4]=temp_val[1];
   1424                        FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,data,5);//´ò°ü
   1425                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1426                        #endif
   1427                        
   1428                        #if defined (GTA_WHFRFID_R1)
   1429                        cmd=BUILD_UINT16(pRxFrame->pData[0],pRxFrame->pData[1]);
   1430                          switch(cmd)
   1431                          {
   1432                          case MODBUS_RFID_CMD_FIND_ISO14443_CARD://7E xx 03 01 0A 00 00 xx
   1433                            FrameLen=PackUpRC623Data(RFID_CMD_FIND_ISO14443_CARD,&(pRxFrame->pData[2]),Frame);//´ò°ü
   1434                             HalUARTWrite(HAL_UART_PORT_0,Frame,FrameLen);
   1435                            //SendDataRequest(Frame,FrameLen);
   1436                            break;
   1437                          case MODBUS_RFID_CMD_GET_CARD_ID:
   1438                            FrameLen=PackUpRC623Data(RFID_CMD_GET_CARD_ID,&(pRxFrame->pData[2]),Frame);//´ò°ü
   1439                             HalUARTWrite(HAL_UART_PORT_0,Frame,FrameLen);
   1440                            break;
   1441                          case MODBUS_RFID_CMD_READ_VAL:
   1442                            
   1443                            break;
   1444                          default:
   1445                            break;
   1446                          }
   1447                        
   1448                        #endif
   1449                          
   1450                        #if defined(GTA_WMSCB_R1)
   1451                          if(pRxFrame->pData[0] == 0x04){//ÅÐ¶ÏÊÇ·ñÊÇLEDµãÕó
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6404         XRL     A,#0x4
   \   000042   90....       MOV     DPTR,#isScan
   \   000045   700B         JNZ     ??ReportData_4
   1452                              //startTimer3();  //LEDµãÕóÐèÒª¿ªÆô¶¨Ê±Æ÷½øÐÐÉ¨Ãè
   1453                              isScan = true;
   \   000047   7401         MOV     A,#0x1
   \   000049   12....       LCALL   ?Subroutine7 & 0xFFFF
   1454                              u_LedsNumber = pRxFrame->pData[1];
   1455                          } else {
   \                     ??CrossCallReturnLabel_3:
   \   00004C   90....       MOV     DPTR,#u_LedsNumber
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   805F         SJMP    ??ReportData_5
   1456                              //stopTimer3();  //Èç¹û²Ù×÷µÄ²»ÊÇLEDµãÕó£¬Ò»¶¨Òª¹Ø±Õ¶¨Ê±Æ÷
   1457                              isScan = false;
   \                     ??ReportData_4:
   \   000052   E4           CLR     A
   \   000053   12....       LCALL   ?Subroutine10 & 0xFFFF
   1458                              /*if(isScan == false){
   1459                                  osal_stop_timerEx(TransmitApp_TaskID, TRANSMITAPP_LEDS_DISPLAY_EVT);
   1460                              }   */         
   1461                              if(pRxFrame->pData[0] == 0x00){  //ÅÐ¶ÏÊÇµç»úµÄ¿ØÖÆÊý¾Ý
   \                     ??CrossCallReturnLabel_8:
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   700F         JNZ     ??ReportData_6
   1462                                  ControlStepMotor(pRxFrame->pData[1]);
   \   00005B                ; Setup parameters for call to function ControlStepMotor
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   12....       LCALL   ??ControlStepMotor?relay
   \   000068   803C         SJMP    ??ReportData_7
   1463                              } else if(pRxFrame->pData[0] == 0x02){//ÅÐ¶ÏÊÇÊýÂë¹ÜµÄ¿ØÖÆÊý¾Ý
   \                     ??ReportData_6:
   \   00006A   6402         XRL     A,#0x2
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   7008         JNZ     ??ReportData_8
   1464                                  DisplaySmg(pRxFrame->pData[1]);
   \   000075                ; Setup parameters for call to function DisplaySmg
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078   12....       LCALL   ??DisplaySmg?relay
   \   00007B   8029         SJMP    ??ReportData_7
   1465                              } else if(pRxFrame->pData[0] == 0x01){//ÅÐ¶ÏÊÇ·äÃùÆ÷
   \                     ??ReportData_8:
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   6401         XRL     A,#0x1
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   7008         JNZ     ??ReportData_9
   1466                                  ControlBeep(pRxFrame->pData[1]);
   \   000089                ; Setup parameters for call to function ControlBeep
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   ??ControlBeep?relay
   \   00008F   8015         SJMP    ??ReportData_7
   1467                              } else if(pRxFrame->pData[0] == 0x03){//ÅÐ¶ÏÊÇ¼ÌµçÆ÷
   \                     ??ReportData_9:
   \   000091   E0           MOVX    A,@DPTR
   \   000092   6403         XRL     A,#0x3
   \   000094   6003         JZ      $+5
   \   000096   02....       LJMP    ??ReportData_3 & 0xFFFF
   1468                                  ControlRelay(pRxFrame->pData[1]);
   \   000099                ; Setup parameters for call to function ControlRelay
   \   000099   8E82         MOV     DPL,R6
   \   00009B   8F83         MOV     DPH,R7
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F9           MOV     R1,A
   \   0000A3   12....       LCALL   ??ControlRelay?relay
   1469                              } 
   1470                          }
   1471                          if(isScan == true){
   \                     ??ReportData_7:
   \   0000A6   90....       MOV     DPTR,#isScan
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   6401         XRL     A,#0x1
   \   0000AC   6003         JZ      $+5
   \   0000AE   02....       LJMP    ??ReportData_3 & 0xFFFF
   1472                              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_LEDS_DISPLAY_EVT, 1);            
   \                     ??ReportData_5:
   \   0000B1                ; Setup parameters for call to function osal_start_timerEx
   \   0000B1   7C01         MOV     R4,#0x1
   \   0000B3   7D00         MOV     R5,#0x0
   \   0000B5   7A20         MOV     R2,#0x20
   \   0000B7   7B00         MOV     R3,#0x0
   \   0000B9   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   12....       LCALL   ??osal_start_timerEx?relay
   \   0000C1   02....       LJMP    ??ReportData_3 & 0xFFFF
   1473                          }
   1474                          
   1475                        #endif
   1476                        
   1477                    }
   1478                  }
   1479                  break;
   1480                case FUN_CODE_SET_ADDR://ÉèµØÖ·
   1481                  {
   1482                    if(pRxFrame->ADDR==NativeAddr)//ÊÇ·ñ±¾»úµØÖ·
   \                     ??ReportData_2:
   \   0000C4   8E82         MOV     DPL,R6
   \   0000C6   8F83         MOV     DPH,R7
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F8           MOV     R0,A
   \   0000CA   90....       MOV     DPTR,#NativeAddr
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   68           XRL     A,R0
   \   0000CF   6003         JZ      $+5
   \   0000D1   02....       LJMP    ??ReportData_3 & 0xFFFF
   1483                    {
   1484                    NativeAddr=pRxFrame->pData[0];
   \   0000D4   8E82         MOV     DPL,R6
   \   0000D6   8F83         MOV     DPH,R7
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   90....       MOV     DPTR,#NativeAddr
   \   0000DF   F0           MOVX    @DPTR,A
   1485                    osal_nv_item_init(ZCD_NV_NATIVE_ADDRESS,sizeof(NativeAddr),NULL);
   \   0000E0                ; Setup parameters for call to function osal_nv_item_init
   \   0000E0   E4           CLR     A
   \   0000E1   F5..         MOV     ?V0 + 0,A
   \   0000E3   F5..         MOV     ?V0 + 1,A
   \   0000E5   78..         MOV     R0,#?V0 + 0
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EA   7C01         MOV     R4,#0x1
   \   0000EC   7D00         MOV     R5,#0x0
   \   0000EE   7A01         MOV     R2,#0x1
   \   0000F0   7B04         MOV     R3,#0x4
   \   0000F2   12....       LCALL   ??osal_nv_item_init?relay
   \   0000F5   7402         MOV     A,#0x2
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   1486                    osal_nv_write(ZCD_NV_NATIVE_ADDRESS,0,sizeof(NativeAddr),&NativeAddr);
   \   0000FA                ; Setup parameters for call to function osal_nv_write
   \   0000FA   75....       MOV     ?V0 + 0,#NativeAddr & 0xff
   \   0000FD   75....       MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
   \   000100   78..         MOV     R0,#?V0 + 0
   \   000102   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000105   75..01       MOV     ?V0 + 0,#0x1
   \   000108   75..00       MOV     ?V0 + 1,#0x0
   \   00010B   78..         MOV     R0,#?V0 + 0
   \   00010D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000110   7C00         MOV     R4,#0x0
   \   000112   7D00         MOV     R5,#0x0
   \   000114   7A01         MOV     R2,#0x1
   \   000116   7B04         MOV     R3,#0x4
   \   000118   12....       LCALL   ??osal_nv_write?relay
   \   00011B   7404         MOV     A,#0x4
   \   00011D   12....       LCALL   ?DEALLOC_XSTACK8
   1487                    FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,pRxFrame->pData,1);//´ò°ü
   1488                    SendDataRequest(Frame,FrameLen);//·¢ËÍ
   \   000120                ; Setup parameters for call to function SendDataRequest
   \   000120                ; Setup parameters for call to function FramePackage
   \   000120   78..         MOV     R0,#?V0 + 0
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000125   EE           MOV     A,R6
   \   000126   2403         ADD     A,#0x3
   \   000128   F5..         MOV     ?V0 + 0,A
   \   00012A   EF           MOV     A,R7
   \   00012B   3400         ADDC    A,#0x0
   \   00012D   F5..         MOV     ?V0 + 1,A
   \   00012F   78..         MOV     R0,#?V0 + 0
   \   000131   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000134   8E82         MOV     DPL,R6
   \   000136   8F83         MOV     DPH,R7
   \   000138   A3           INC     DPTR
   \   000139   E0           MOVX    A,@DPTR
   \   00013A   FC           MOV     R4,A
   \   00013B   8018         SJMP    ??ReportData_10
   1489                    }
   1490                  }
   1491                  break;
   1492                case FUN_CODE_READ_ADDR://¶ÁµØÖ·
   1493                  {
   1494                    FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,&NativeAddr,1);//´ò°ü
   1495                    SendDataRequest(Frame,FrameLen);//·¢ËÍ
   \                     ??ReportData_1:
   \   00013D                ; Setup parameters for call to function SendDataRequest
   \   00013D                ; Setup parameters for call to function FramePackage
   \   00013D   75..01       MOV     ?V0 + 0,#0x1
   \   000140   75..00       MOV     ?V0 + 1,#0x0
   \   000143   78..         MOV     R0,#?V0 + 0
   \   000145   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000148   75....       MOV     ?V0 + 0,#NativeAddr & 0xff
   \   00014B   75....       MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
   \   00014E   78..         MOV     R0,#?V0 + 0
   \   000150   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000153   7C11         MOV     R4,#0x11
   \                     ??ReportData_10:
   \   000155   8E82         MOV     DPL,R6
   \   000157   8F83         MOV     DPH,R7
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F9           MOV     R1,A
   \   00015B   7404         MOV     A,#0x4
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   AA82         MOV     R2,DPL
   \   000162   AB83         MOV     R3,DPH
   \   000164   12....       LCALL   ??FramePackage?relay
   \   000167   7404         MOV     A,#0x4
   \   000169   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016C   EA           MOV     A,R2
   \   00016D   FC           MOV     R4,A
   \   00016E   EB           MOV     A,R3
   \   00016F   FD           MOV     R5,A
   \   000170   85..82       MOV     DPL,?XSP + 0
   \   000173   85..83       MOV     DPH,?XSP + 1
   \   000176   AA82         MOV     R2,DPL
   \   000178   AB83         MOV     R3,DPH
   \   00017A   12....       LCALL   ??SendDataRequest?relay
   1496                    
   1497                  }
   1498                  break;
   1499                }
   1500            
   1501            
   1502          
   1503          }
   \                     ??ReportData_3:
   \   00017D   7414         MOV     A,#0x14
   \   00017F   02....       LJMP    ?Subroutine5 & 0xFFFF
   1504          #if defined(GTA_WMSCB_R1)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1505          void StepMotorRun(uint8 Dir,uint16 StepNum)
   \                     StepMotorRun:
   1506          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 4,R1
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   8B..         MOV     ?V0 + 1,R3
   1507            uint8 ForwardStep[4]={0x03,0x09,0x0C,0x06};
   \   000010   7404         MOV     A,#0x4
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7583..       MOV     DPH,#(`?<Constant {3, 9, 12, 6}>` >> 8) & 0xff
   \   00001C   7582..       MOV     DPL,#`?<Constant {3, 9, 12, 6}>` & 0xff
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1508            uint8 BackStep[4]={0x03,0x06,0x0C,0x09};
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   AC82         MOV     R4,DPL
   \   00002C   AD83         MOV     R5,DPH
   \   00002E   7583..       MOV     DPH,#(`?<Constant {3, 6, 12, 9}>` >> 8) & 0xff
   \   000031   7582..       MOV     DPL,#`?<Constant {3, 6, 12, 9}>` & 0xff
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1509            uint16 i=0,j=0,k=0;
   \   000039   FE           MOV     R6,A
   \   00003A   FF           MOV     R7,A
   \   00003B   F5..         MOV     ?V0 + 2,A
   \   00003D   F5..         MOV     ?V0 + 3,A
   1510            uint8 index=0,l=0;
   \   00003F   F5..         MOV     ?V0 + 6,A
   \   000041   F5..         MOV     ?V0 + 5,A
   1511            for(i=0;i<StepNum;i++)
   \   000043   02....       LJMP    ??StepMotorRun_0 & 0xFFFF
   1512            {
   1513              if(Dir)
   1514                ctrl_GTA_WMSCB('C',ForwardStep[index]);
   1515              else
   1516                ctrl_GTA_WMSCB('C',BackStep[index]);
   \                     ??StepMotorRun_1:
   \   000046                ; Setup parameters for call to function ctrl_GTA_WMSCB
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \                     ??StepMotorRun_2:
   \   00004C   E582         MOV     A,DPL
   \   00004E   25..         ADD     A,?V0 + 8
   \   000050   F582         MOV     DPL,A
   \   000052   E583         MOV     A,DPH
   \   000054   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000057   FA           MOV     R2,A
   \   000058   7943         MOV     R1,#0x43
   \   00005A   12....       LCALL   ??ctrl_GTA_WMSCB?relay
   1517              if(i==(k*255-1)||i==0)
   \   00005D   E5..         MOV     A,?V0 + 2
   \   00005F   75F0FF       MOV     B,#-0x1
   \   000062   A4           MUL     AB
   \   000063   F8           MOV     R0,A
   \   000064   AAF0         MOV     R2,B
   \   000066   75F0FF       MOV     B,#-0x1
   \   000069   E5..         MOV     A,?V0 + 3
   \   00006B   A4           MUL     AB
   \   00006C   2A           ADD     A,R2
   \   00006D   F9           MOV     R1,A
   \   00006E   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000071   6E           XRL     A,R6
   \   000072   7002         JNZ     ??StepMotorRun_3
   \   000074   E9           MOV     A,R1
   \   000075   6F           XRL     A,R7
   \                     ??StepMotorRun_3:
   \   000076   6004         JZ      ??StepMotorRun_4
   \   000078   EE           MOV     A,R6
   \   000079   4F           ORL     A,R7
   \   00007A   7024         JNZ     ??StepMotorRun_5
   1518              {
   1519                SegDisplay(l);
   \                     ??StepMotorRun_4:
   \   00007C                ; Setup parameters for call to function SegDisplay
   \   00007C   A9..         MOV     R1,?V0 + 5
   \   00007E   12....       LCALL   ??SegDisplay?relay
   1520                if(l++>8)l=0;
   \   000081   85....       MOV     ?V0 + 7,?V0 + 5
   \   000084   7401         MOV     A,#0x1
   \   000086   25..         ADD     A,?V0 + 7
   \   000088   F5..         MOV     ?V0 + 5,A
   \   00008A   E5..         MOV     A,?V0 + 7
   \   00008C   C3           CLR     C
   \   00008D   9409         SUBB    A,#0x9
   \   00008F   4003         JC      ??StepMotorRun_6
   \   000091   75..00       MOV     ?V0 + 5,#0x0
   1521                k++;
   \                     ??StepMotorRun_6:
   \   000094   E5..         MOV     A,?V0 + 2
   \   000096   2401         ADD     A,#0x1
   \   000098   F5..         MOV     ?V0 + 2,A
   \   00009A   E5..         MOV     A,?V0 + 3
   \   00009C   3400         ADDC    A,#0x0
   \   00009E   F5..         MOV     ?V0 + 3,A
   1522              }
   1523              ctrl_GTA_WMSCB('A',i);
   \                     ??StepMotorRun_5:
   \   0000A0                ; Setup parameters for call to function ctrl_GTA_WMSCB
   \   0000A0   EE           MOV     A,R6
   \   0000A1   FA           MOV     R2,A
   \   0000A2   7941         MOV     R1,#0x41
   \   0000A4   12....       LCALL   ??ctrl_GTA_WMSCB?relay
   1524              
   1525              if(++index>=4)index=0;
   \   0000A7   05..         INC     ?V0 + 6
   \   0000A9   E5..         MOV     A,?V0 + 6
   \   0000AB   C3           CLR     C
   \   0000AC   9404         SUBB    A,#0x4
   \   0000AE   4003         JC      ??StepMotorRun_7
   \   0000B0   75..00       MOV     ?V0 + 6,#0x0
   1526              
   1527              for(j=0;j<3000;j++)
   \                     ??StepMotorRun_7:
   \   0000B3   78B8         MOV     R0,#-0x48
   \   0000B5   790B         MOV     R1,#0xb
   1528              {
   1529                asm("nop");            
   \                     ??StepMotorRun_8:
   \   0000B7   00           nop
   1530              }
   \   0000B8   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000BB   49           ORL     A,R1
   \   0000BC   70F9         JNZ     ??StepMotorRun_8
   \   0000BE   EE           MOV     A,R6
   \   0000BF   2401         ADD     A,#0x1
   \   0000C1   0E           INC     R6
   \   0000C2   EF           MOV     A,R7
   \   0000C3   3400         ADDC    A,#0x0
   \   0000C5   FF           MOV     R7,A
   \                     ??StepMotorRun_0:
   \   0000C6   C3           CLR     C
   \   0000C7   EE           MOV     A,R6
   \   0000C8   95..         SUBB    A,?V0 + 0
   \   0000CA   EF           MOV     A,R7
   \   0000CB   95..         SUBB    A,?V0 + 1
   \   0000CD   5012         JNC     ??StepMotorRun_9
   \   0000CF   E5..         MOV     A,?V0 + 4
   \   0000D1   85....       MOV     ?V0 + 8,?V0 + 6
   \   0000D4   7003         JNZ     $+5
   \   0000D6   02....       LJMP    ??StepMotorRun_1 & 0xFFFF
   \   0000D9                ; Setup parameters for call to function ctrl_GTA_WMSCB
   \   0000D9   7404         MOV     A,#0x4
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   02....       LJMP    ??StepMotorRun_2 & 0xFFFF
   1531              //ctrl_GTA_WMSCB('A',StepNum);
   1532            }
   1533          }
   \                     ??StepMotorRun_9:
   \   0000E1   7408         MOV     A,#0x8
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E6   7F0A         MOV     R7,#0xa
   \   0000E8   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E8           MOV     A,R0
   \   000001   24FF         ADD     A,#-0x1
   \   000003   18           DEC     R0
   \   000004   E9           MOV     A,R1
   \   000005   34FF         ADDC    A,#-0x1
   \   000007   F9           MOV     R1,A
   \   000008   E8           MOV     A,R0
   \   000009   22           RET
   1534          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1535          void SegDisplay(uint8 num)
   \                     SegDisplay:
   1536          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   1537            uint8 DispNum[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   AC82         MOV     R4,DPL
   \   000014   AD83         MOV     R5,DPH
   \   000016   7583..       MOV     DPH,#(`?<Constant {63, 6, 91, 79, 102, 109, 125, 7, 1` >> 8) & 0xff
   \   000019   7582..       MOV     DPL,#`?<Constant {63, 6, 91, 79, 102, 109, 125, 7, 1` & 0xff
   \   00001C   740A         MOV     A,#0xa
   \   00001E   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1538            //ctrl_GTA_WMSCB('M',0x80);
   1539            if(num<0x10)
   \   000021   EE           MOV     A,R6
   \   000022   C3           CLR     C
   \   000023   9410         SUBB    A,#0x10
   \   000025   5019         JNC     ??SegDisplay_0
   1540              ctrl_GTA_WMSCB('B',DispNum[num]);
   \   000027                ; Setup parameters for call to function ctrl_GTA_WMSCB
   \   000027   8E..         MOV     ?V0 + 0,R6
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   E582         MOV     A,DPL
   \   000031   25..         ADD     A,?V0 + 0
   \   000033   F582         MOV     DPL,A
   \   000035   E583         MOV     A,DPH
   \   000037   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00003A   FA           MOV     R2,A
   \   00003B   7942         MOV     R1,#0x42
   \   00003D   12....       LCALL   ??ctrl_GTA_WMSCB?relay
   1541          }
   \                     ??SegDisplay_0:
   \   000040   740A         MOV     A,#0xa
   \   000042   02....       LJMP    ?Subroutine5 & 0xFFFF
   1542          #endif

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1543          uint16 FramePackage(uint8 *pFrame,uint8 addr,uint8 cmd,uint8 *data,uint16 datalen)
   \                     FramePackage:
   1544          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   1545            uint16 i;
   1546            uint16 crc;
   1547            uint8 *p;
   1548              p=pFrame;
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1549            *p++=FRAME_HEAD;//²»Ã÷bug ÔÙ¼ÓÒ»¸ö×Ö½Ú
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   747E         MOV     A,#0x7e
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   1550            *p++=FRAME_HEAD;
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   1551            *p++=addr;
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   1552            *p++=cmd;
   \   000016   EC           MOV     A,R4
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   AE82         MOV     R6,DPL
   \   00001B   AF83         MOV     R7,DPH
   1553            for(i=0;i<datalen;i++)
   \   00001D   7C00         MOV     R4,#0x0
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   740E         MOV     A,#0xe
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   7410         MOV     A,#0x10
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 1,A
   \   000037   8024         SJMP    ??FramePackage_0
   1554            {
   1555              *p++=*data++;
   \                     ??FramePackage_1:
   \   000039   8882         MOV     DPL,R0
   \   00003B   8983         MOV     DPH,R1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   F0           MOVX    @DPTR,A
   \   000043   8882         MOV     DPL,R0
   \   000045   8983         MOV     DPH,R1
   \   000047   A3           INC     DPTR
   \   000048   A882         MOV     R0,DPL
   \   00004A   A983         MOV     R1,DPH
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   A3           INC     DPTR
   \   000051   AE82         MOV     R6,DPL
   \   000053   AF83         MOV     R7,DPH
   1556            }
   \   000055   EC           MOV     A,R4
   \   000056   2401         ADD     A,#0x1
   \   000058   0C           INC     R4
   \   000059   ED           MOV     A,R5
   \   00005A   3400         ADDC    A,#0x0
   \   00005C   FD           MOV     R5,A
   \                     ??FramePackage_0:
   \   00005D   C3           CLR     C
   \   00005E   EC           MOV     A,R4
   \   00005F   95..         SUBB    A,?V0 + 0
   \   000061   ED           MOV     A,R5
   \   000062   95..         SUBB    A,?V0 + 1
   \   000064   40D3         JC      ??FramePackage_1
   1557            //crc=Crc16Code(pFrame+1,datalen+2);//FRAME_HEAD²»¼Æ
   1558             crc=Crc16Code(pFrame+2,datalen+2);//FRAME_HEAD²»¼Æ
   \   000066                ; Setup parameters for call to function Crc16Code
   \   000066   E5..         MOV     A,?V0 + 0
   \   000068   2402         ADD     A,#0x2
   \   00006A   F9           MOV     R1,A
   \   00006B   EA           MOV     A,R2
   \   00006C   2402         ADD     A,#0x2
   \   00006E   FA           MOV     R2,A
   \   00006F   EB           MOV     A,R3
   \   000070   3400         ADDC    A,#0x0
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   ??Crc16Code?relay
   1559            *p++=LO_UINT16(crc);
   \   000076   EA           MOV     A,R2
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   1560            *p=HI_UINT16(crc);
   \   00007D   EB           MOV     A,R3
   \   00007E   F0           MOVX    @DPTR,A
   1561            //return datalen+5;
   1562            return datalen+6;//¶à¼ÓÒ»¸öFRAME_HEAD
   \   00007F   E5..         MOV     A,?V0 + 0
   \   000081   2406         ADD     A,#0x6
   \   000083   FA           MOV     R2,A
   \   000084   E5..         MOV     A,?V0 + 1
   \   000086   3400         ADDC    A,#0x0
   \   000088   FB           MOV     R3,A
   \   000089   7F06         MOV     R7,#0x6
   \   00008B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1563          }
   1564          
   1565            /*********************************************************************
   1566           * º¯ÊýÃû³Æ£ºReadADC
   1567           * ¹¦    ÄÜ£º¶ÁÈ¡ADCÖµ
   1568           * Èë¿Ú²ÎÊý£ºÍ¨µÀ
   1569           * ³ö¿Ú²ÎÊý£ºÎÞ
   1570           * ·µ »Ø Öµ£ºADÊý¾Ý()
   1571           ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1572          uint16 ReadADC( uint8 channel )
   \                     ReadADC:
   1573          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
   1574            volatile unsigned char tmp,n;
   1575            signed short adcvalue;
   1576            float voltagevalue_X;
   1577          
   1578            /* XÖá¼ÓËÙ¶È²É¼¯ */
   1579            /* ÉèÖÃ»ù×¼µçÑ¹¡¢³éÈ¡ÂÊºÍµ¥¶ËÊäÈëÍ¨µÀ */
   1580            ADCCON3 = ((0x02 << 6) |  // ²ÉÓÃAVDD5Òý½ÅÉÏµÄµçÑ¹Îª»ù×¼µçÑ¹
   1581                       (0x03 << 4) |  // ³éÈ¡ÂÊÎª512£¬ÏàÓ¦µÄÓÐÐ§Î»Îª12Î»(×î¸ßÎ»Îª·ûºÅÎ»)
   1582                       channel);
   \   000007   74B0         MOV     A,#-0x50
   \   000009   4C           ORL     A,R4
   \   00000A   F5B6         MOV     0xb6,A
   1583          
   1584            /* µÈ´ýÍ¨µÀ×ª»»Íê³É */
   1585            while ((ADCCON1 & 0x80) != 0x80);
   \                     ??ReadADC_0:
   \   00000C   E5B4         MOV     A,0xb4
   \   00000E   A2E7         MOV     C,0xE0 /* A   */.7
   \   000010   50FA         JNC     ??ReadADC_0
   1586          
   1587            /* ´ÓADCL£¬ADCH¶ÁÈ¡×ª»»Öµ£¬´Ë²Ù×÷»¹ÇåÁãADCCON1.EOC */
   1588            adcvalue = (signed short)ADCL;
   \   000012   E5BA         MOV     A,0xba
   \   000014   F5..         MOV     ?V0 + 0,A
   1589            adcvalue |= (signed short)(ADCH << 8); 
   \   000016   E5BB         MOV     A,0xbb
   \   000018   F8           MOV     R0,A
   \   000019   E4           CLR     A
   \   00001A   C8           XCH     A,R0
   \   00001B   F5..         MOV     ?V0 + 1,A
   1590          
   1591            /* ÈôadcvalueÐ¡ÓÚ0£¬¾ÍÈÏÎªËüÎª0 */
   1592            if(adcvalue < 0) adcvalue = 0;
   \   00001D   C3           CLR     C
   \   00001E   9400         SUBB    A,#0x0
   \   000020   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000022   65D0         XRL     A,PSW
   \   000024   33           RLC     A
   \   000025   5004         JNC     ??ReadADC_1
   \   000027   88..         MOV     ?V0 + 0,R0
   \   000029   88..         MOV     ?V0 + 1,R0
   1593              
   1594            adcvalue >>= 4;  // È¡³ö12Î»ÓÐÐ§Î»
   1595              
   1596            /* ½«×ª»»Öµ»»ËãÎªÊµ¼ÊµçÑ¹Öµ */
   1597            voltagevalue_X = (adcvalue * 3.3) / 2047;  // 2047ÊÇÄ£ÄâÊäÈë´ïµ½VREFÊ±µÄÂúÁ¿³ÌÖµ
   1598                                                       // ÓÉÓÚÓÐÐ§Î»ÊÇ12Î»(×î¸ßÎ»Îª·ûºÅÎ»)£¬
   1599                                                       // ËùÒÔÕýµÄÂúÁ¿³ÌÖµÎª2047
   1600                                                       // ´Ë´¦£¬VREF = 3.3V
   1601            return ((uint16)(voltagevalue_X * 1000));  // µçÑ¹·Å´ó100±¶±ãÓÚ´«Êä¼°ÉÏÎ»»ú´¦Àí
   \                     ??ReadADC_1:
   \   00002B   7404         MOV     A,#0x4
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?SS_SHR
   \   000032   E5..         MOV     A,?V0 + 1
   \   000034   33           RLC     A
   \   000035   95E0         SUBB    A,0xE0 /* A   */
   \   000037   F5..         MOV     ?V0 + 2,A
   \   000039   F5..         MOV     ?V0 + 3,A
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?L_TO_FLT
   \   000040   90....       MOV     DPTR,#__Constant_40533333
   \   000043   78..         MOV     R0,#?V0 + 4
   \   000045   12....       LCALL   ?L_MOV_X
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   79..         MOV     R1,#?V0 + 4
   \   00004C   12....       LCALL   ?FLT_MUL
   \   00004F   90....       MOV     DPTR,#__Constant_44ffe000
   \   000052   78..         MOV     R0,#?V0 + 4
   \   000054   12....       LCALL   ?L_MOV_X
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   79..         MOV     R1,#?V0 + 4
   \   00005B   12....       LCALL   ?FLT_DIV
   \   00005E   90....       MOV     DPTR,#__Constant_447a0000
   \   000061   78..         MOV     R0,#?V0 + 4
   \   000063   12....       LCALL   ?L_MOV_X
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   79..         MOV     R1,#?V0 + 4
   \   00006A   12....       LCALL   ?FLT_MUL
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?FLT_TO_L
   \   000072   AA..         MOV     R2,?V0 + 0
   \   000074   AB..         MOV     R3,?V0 + 1
   \   000076   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000079                REQUIRE ADCCON3
   \   000079                REQUIRE ADCCON1
   \   000079                REQUIRE ADCL
   \   000079                REQUIRE ADCH
   1602          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1603          void SendDataRequest(uint8 *pBuf,uint16 len)
   \                     SendDataRequest:
   1604          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1605              if(!ZG_DEVICE_COORDINATOR_TYPE)//·ÇÐ­µ÷Æ÷
   \   000005   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000008   E0           MOVX    A,@DPTR
   \   000009   90....       MOV     DPTR,#TestDirectSent_DstAddr + 8
   \   00000C   600A         JZ      ??SendDataRequest_0
   1606                {
   1607                  TestDirectSent_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;//µØÖ·´«ËÍ
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   1608                  TestDirectSent_DstAddr.endPoint = 0;
   1609                  TestDirectSent_DstAddr.addr.shortAddr = 0x0000;
   \                     ??CrossCallReturnLabel_20:
   \   000013   90....       MOV     DPTR,#TestDirectSent_DstAddr
   \   000016   8003         SJMP    ??CrossCallReturnLabel_5
   1610                }
   1611                else
   1612                {
   1613                  if(ZG_DEVICE_COORDINATOR_TYPE)
   1614                  {
   1615                    TestDirectSent_DstAddr.addrMode=(afAddrMode_t)AddrBroadcast;//Addr16Bit;//µØÖ·´«ËÍ
   \                     ??SendDataRequest_0:
   \   000018   12....       LCALL   ?Subroutine8 & 0xFFFF
   1616                    TestDirectSent_DstAddr.endPoint = 0;
   1617                    TestDirectSent_DstAddr.addr.shortAddr = 0xffff;//destAddr;
   1618                    //TestDirectSent_DstAddr.addr.extAddr
   1619                  }
   1620                }
   \                     ??CrossCallReturnLabel_5:
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
   1621               AF_DataRequest(    
   1622                        &TestDirectSent_DstAddr,               //µØÖ·
   1623                        &TransmitApp_epDesc,                //ÃèÊö
   1624                        TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1625                          len,                                  //len
   1626                          pBuf,//TransmitApp_Msg,             //DATA
   1627                        &TransmitApp_TransID,               //
   1628                        TRANSMITAPP_TX_OPTIONS,
   1629                        AF_DEFAULT_RADIUS 
   1630                        );
   \   00001E                ; Setup parameters for call to function AF_DataRequest
   \   00001E   75..1E       MOV     ?V0 + 0,#0x1e
   \   000021   78..         MOV     R0,#?V0 + 0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000026   75....       MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
   \   000029   75....       MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8A..         MOV     ?V0 + 0,R2
   \   000033   8B..         MOV     ?V0 + 1,R3
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   8C..         MOV     ?V0 + 0,R4
   \   00003C   8D..         MOV     ?V0 + 1,R5
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   75..A1       MOV     ?V0 + 0,#-0x5f
   \   000046   75..00       MOV     ?V0 + 1,#0x0
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   7920         MOV     R1,#0x20
   \   000050   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000052   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   000054   7A..         MOV     R2,#TestDirectSent_DstAddr & 0xff
   \   000056   7B..         MOV     R3,#(TestDirectSent_DstAddr >> 8) & 0xff
   \   000058   12....       LCALL   ??AF_DataRequest?relay
   \   00005B   7409         MOV     A,#0x9
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   1631               HalLedBlink (HAL_LED_3, 1, 50, 200);
   \   000060                ; Setup parameters for call to function HalLedBlink
   \   000060   7CC8         MOV     R4,#-0x38
   \   000062   7D00         MOV     R5,#0x0
   \   000064   02....       LJMP    ?Subroutine0 & 0xFFFF
   1632          }
   1633          
   1634          #if defined(GTA_WTHSB_R1)
   1635          uint8 readTempHumi(void)
   1636          {
   1637           float f_humi=0,f_temp=0; 
   1638           
   1639            uint8 checksum;
   1640           
   1641            /* ¿ØÖÆSHT11½øÐÐÎÂÊª¶È²âÁ¿ */
   1642            
   1643            
   1644            s_measure(temp_val,&checksum,TEMP); // ²âÁ¿ÎÂ¶È
   1645            s_measure(humi_val,&checksum,HUMI); // ²âÁ¿Ïà¶ÔÊª¶È
   1646            f_humi=BUILD_UINT16(humi_val[0],humi_val[1]);
   1647            f_temp=BUILD_UINT16(temp_val[0],temp_val[1]);
   1648            calc_sth11(&f_humi,&f_temp);
   1649            humi_val[0]=f_humi;//&(uint8)f_humi;
   1650            humi_val[1]=(f_humi-humi_val[0])*100;  
   1651            temp_val[0]=f_temp; 
   1652            temp_val[1]=(f_temp-temp_val[0])*100;  
   1653            return TRUE;
   1654          }
   1655          #endif
   1656          
   1657          #if defined(GTA_WMSCB_R1)
   1658          /**
   1659          * ³õÊ¼»¯¶¨Ê±Æ÷3µÄÏà¹Ø¼Ä´æÆ÷
   1660          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1661          void initTimer3(void){
   \                     initTimer3:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1662              T3CTL |= 0x08 ;   //¿ªÒç³öÖÐ¶Ï
   \   000000   43CB08       ORL     0xcb,#0x8
   1663          //    T3IE = 1;   //¿ª×ÜÖÐ¶ÏºÍ T3ÖÐ¶Ï
   1664              T3CTL|=0XE0;   //128 ·ÖÆµ,128/16000000*N=0.5S,N=65200
   \   000003   43CBE0       ORL     0xcb,#0xe0
   1665              T3CTL &= ~0X03;   //×Ô¶¯ÖØ×° 00£­>0xff  65200/256=254(´Î)
   \   000006   53CBFC       ANL     0xcb,#0xfc
   1666              T3CTL |=0X10;   //Æô¶¯
   \   000009   43CB10       ORL     0xcb,#0x10
   1667          //    EA = 0;    //¿ª×ÜÖÐ¶Ï
   1668          }
   \   00000C   02....       LJMP    ?BRET
   \   00000F                REQUIRE T3CTL
   1669          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1670          void startTimer3(void){
   \                     startTimer3:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1671              T3IE = 1;
   \   000000   D2BB         SETB    0xb8.3
   1672          }
   \   000002   02....       LJMP    ?BRET
   \   000005                REQUIRE _A_IEN1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1673          void stopTimer3(void){
   \                     stopTimer3:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1674              T3IE = 0;
   \   000000   C2BB         CLR     0xb8.3
   1675          }
   \   000002   02....       LJMP    ?BRET
   \   000005                REQUIRE _A_IEN1
   1676          
   1677          /************************************
   1678          ¶¨Ê±Æ÷3ÖÐ¶Ïº¯Êý
   1679          ************************************/
   1680          #pragma vector = T3_VECTOR    //¶¨Ê±Æ÷ T3

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1681          __interrupt void T3_ISR(void)
   \                     T3_ISR:
   1682          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
   1683              IRCON = 0x00;   //ÇåÖÐ¶Ï±êÖ¾,Ò²¿ÉÓÉÓ²¼þ×Ô¶¯Íê³É
   \   000007   75C000       MOV     0xc0,#0x0
   1684              ControlLeds(u_LedsNumber);
   \   00000A                ; Setup parameters for call to function ControlLeds
   \   00000A   90....       MOV     DPTR,#u_LedsNumber
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   ??ControlLeds?relay
   1685          }
   \   000012   7F01         MOV     R7,#0x1
   \   000014   02....       LJMP    ?INTERRUPT_LEAVE_XSP
   \   000017                REQUIRE _A_IRCON

   \                                 In  segment INTVEC, offset 0x5b, root
   \                     `??T3_ISR??INTVEC 91`:
   \   00005B   02....       LJMP       (T3_ISR)

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for NativeAddr>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessZDOIncomingMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessZDOIncomingMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_SendTheMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ChangeState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ChangeState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_SetSendEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_SetSendEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_DisplayResults?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_DisplayResults

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initUart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initUart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??uartRxCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FrameUnPackage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FrameUnPackage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Crc16Code?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Crc16Code

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SentDataInBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SentDataInBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendBindRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReportData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReportData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StepMotorRun?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StepMotorRun

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SegDisplay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SegDisplay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FramePackage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FramePackage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadADC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadADC

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendDataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initTimer3?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initTimer3

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??startTimer3?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    startTimer3

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??stopTimer3?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    stopTimer3

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GTA Zigbee">`:
   \   000000   47544120     DB "GTA Zigbee"
   \            5A696762
   \            656500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {3, 9, 12, 6}>`:
   \   000000   03           DB 3
   \   000001   09           DB 9
   \   000002   0C           DB 12
   \   000003   06           DB 6

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {3, 6, 12, 9}>`:
   \   000000   03           DB 3
   \   000001   06           DB 6
   \   000002   0C           DB 12
   \   000003   09           DB 9

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {63, 6, 91, 79, 102, 109, 125, 7, 1`:
   \   000000   3F           DB 63
   \   000001   06           DB 6
   \   000002   5B           DB 91
   \   000003   4F           DB 79
   \   000004   66           DB 102
   \   000005   6D           DB 109
   \   000006   7D           DB 125
   \   000007   07           DB 7
   \   000008   7F           DB 127
   \   000009   6F           DB 111

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40533333:
   \   000000   33335340     DD 40533333H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_44ffe000:
   \   000000   00E0FF44     DD 44FFE000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_447a0000:
   \   000000   00007A44     DD 447A0000H
   1686          #endif

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     26  Crc16Code
       1      0     48  FramePackage
                          0 0  14 -> Crc16Code
       1      0     49  FrameUnPackage
                          0 0  16 -> Crc16Code
       0      0     16  ReadADC
       0      0     67  ReportData
                          0 0  30 -> ControlBeep
                          0 0  30 -> ControlRelay
                          0 0  30 -> ControlStepMotor
                          0 0  30 -> DisplaySmg
                          0 0  34 -> FramePackage
                          0 0  30 -> SendDataRequest
                          0 0  32 -> osal_nv_item_init
                          0 0  34 -> osal_nv_write
                          0 0  30 -> osal_start_timerEx
       2      0     46  SegDisplay
                          0 0  20 -> ctrl_GTA_WMSCB
       0      0     45  SendBindRequest
                          0 0  20 -> HalLedBlink
                          0 0  20 -> NLME_GetShortAddr
                          0 0  29 -> ZDP_EndDeviceBindReq
       0      0     49  SendDataRequest
                          0 0  19 -> AF_DataRequest
                          0 0  10 -> HalLedBlink
       0      0     19  SentDataInBind
                          0 0  19 -> AF_DataRequest
                          0 0  10 -> HalLedBlink
       2      0     26  StepMotorRun
                          0 0  26 -> SegDisplay
                          0 0  26 -> ctrl_GTA_WMSCB
       0      0     14  T3_ISR
                          0 0  14 -> ControlLeds
       2      0      0  TransmitApp_ChangeState
                          2 0   0 -> TransmitApp_SetSendEvt
       0      0     28  TransmitApp_DisplayResults
                          0 0  12 -> osal_GetSystemClock
                          0 0  12 -> osal_stop_timerEx
       0      0     25  TransmitApp_HandleKeys
                          0 0   9 -> HalLedBlink
                          0 0   9 -> osal_set_event
       1      0     16  TransmitApp_Init
                          0 0  12 -> HalLcdWriteString
                          0 0  12 -> RegisterForKeys
                          0 0  12 -> ZDO_RegisterForZDOMsg
                          0 0  12 -> afDataReqMTU
                          0 0  12 -> afRegister
                          0 0  12 -> initUart
                          0 0  14 -> osal_nv_item_init
                          0 0  16 -> osal_nv_read
       0      0      0  TransmitApp_MessageMSGCB
       0      0     16  TransmitApp_ProcessEvent
                          0 0  16 -> ControlLeds
                          0 0  16 -> HalLedBlink
                          0 0  16 -> SendBindRequest
                          0 0  16 -> TransmitApp_DisplayResults
                          0 0  16 -> TransmitApp_HandleKeys
                          0 0  16 -> TransmitApp_ProcessZDOMsgs
                          0 0  16 -> TransmitApp_SendTheMessage
                          0 0  16 -> TransmitApp_SetSendEvt
                          0 0  16 -> osal_GetSystemClock
                          0 0  16 -> osal_msg_deallocate
                          0 0  16 -> osal_msg_receive
                          0 0  16 -> osal_start_timerEx
       0      0     43  TransmitApp_ProcessZDOIncomingMsgs
                          0 0  33 -> FrameUnPackage
                          0 0  33 -> HalLedBlink
                          0 0  33 -> HalUARTWrite
                          0 0  33 -> ReportData
       0      0     26  TransmitApp_ProcessZDOMsgs
                          0 0  10 -> HalLedBlink
                          0 0  10 -> HalLedSet
                          0 0  10 -> TransmitApp_ProcessZDOIncomingMsgs
                          0 0  10 -> ZDO_ParseEPListRsp
                          0 0  10 -> osal_mem_free
                          0 0  10 -> osal_stop_timerEx
       0      0     35  TransmitApp_SendTheMessage
                          0 0  19 -> AF_DataRequest
                          0 0  10 -> HalLedBlink
                          0 0  10 -> osal_start_timerEx
       2      0     16  TransmitApp_SetSendEvt
                          2 0   0 -> osal_start_timerEx
       0      0      0  initTimer3
       2      0     41  initUart
                          2 0  29 -> HalUARTOpen
       0      0      0  startTimer3
       0      0      0  stopTimer3
       0      0    149  uartRxCB
                          0 0 149 -> AF_DataRequest
                          0 0 140 -> HalLedBlink
                          0 0 140 -> HalUARTRead


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "GTA Zigbee">
       4  ?<Constant {3, 6, 12, 9}>
       4  ?<Constant {3, 9, 12, 6}>
      10  ?<Constant {63, 6, 91, 79, 102, 109, 125, 7, 1
       1  ?<Initializer for NativeAddr>
       6  ??Crc16Code?relay
       6  ??FramePackage?relay
       6  ??FrameUnPackage?relay
       6  ??ReadADC?relay
       6  ??ReportData?relay
       6  ??SegDisplay?relay
       6  ??SendBindRequest?relay
       6  ??SendDataRequest?relay
       6  ??SentDataInBind?relay
       6  ??StepMotorRun?relay
       5  ??Subroutine17_0
       5  ??Subroutine18_0
       5  ??Subroutine19_0
       5  ??Subroutine20_0
       3  ??T3_ISR??INTVEC 91
       6  ??TransmitApp_ChangeState?relay
       6  ??TransmitApp_DisplayResults?relay
       6  ??TransmitApp_HandleKeys?relay
       6  ??TransmitApp_Init?relay
       6  ??TransmitApp_MessageMSGCB?relay
       6  ??TransmitApp_ProcessEvent?relay
       6  ??TransmitApp_ProcessZDOIncomingMsgs?relay
       6  ??TransmitApp_ProcessZDOMsgs?relay
       6  ??TransmitApp_SendTheMessage?relay
       6  ??TransmitApp_SetSendEvt?relay
       6  ??initTimer3?relay
       6  ??initUart?relay
       6  ??startTimer3?relay
       6  ??stopTimer3?relay
       6  ??uartRxCB?relay
       9  ?Subroutine0
       5  ?Subroutine1
       7  ?Subroutine10
      13  ?Subroutine11
       7  ?Subroutine12
      12  ?Subroutine13
       6  ?Subroutine14
      10  ?Subroutine15
       3  ?Subroutine16
       5  ?Subroutine2
       7  ?Subroutine3
       5  ?Subroutine4
       6  ?Subroutine5
      12  ?Subroutine6
      11  ?Subroutine7
      12  ?Subroutine8
       2  ?Subroutine9
       1  ADCCON1
       1  ADCCON3
       1  ADCH
       1  ADCL
      87  Crc16Code
       1  Flag_ReportData
     142  FramePackage
     312  FrameUnPackage
       1  NativeAddr
     121  ReadADC
     386  ReportData
      69  SegDisplay
     135  SendBindRequest
     103  SendDataRequest
      78  SentDataInBind
     235  StepMotorRun
       1  T3CTL
      23  T3_ISR
      12  TestDirectSent_DstAddr
      25  TransmitApp_ChangeState
       2  TransmitApp_ClusterList
     123  TransmitApp_DisplayResults
      12  TransmitApp_DstAddr
      55  TransmitApp_HandleKeys
     275  TransmitApp_Init
       2  TransmitApp_MaxDataLength
       3  TransmitApp_MessageMSGCB
     102  TransmitApp_Msg
       1  TransmitApp_NwkState
     371  TransmitApp_ProcessEvent
     111  TransmitApp_ProcessZDOIncomingMsgs
     177  TransmitApp_ProcessZDOMsgs
     185  TransmitApp_SendTheMessage
      22  TransmitApp_SetSendEvt
      12  TransmitApp_SimpleDesc
       1  TransmitApp_State
       1  TransmitApp_TaskID
       1  TransmitApp_TransID
       6  TransmitApp_epDesc
       1  _A_IEN1
       1  _A_IRCON
       4  __Constant_40533333
       4  __Constant_447a0000
       4  __Constant_44ffe000
       4  clkShdw
      15  initTimer3
      97  initUart
       1  isScan
       2  pktCounter
       4  rxAccum
       4  rxTotal
       5  startTimer3
       5  stopTimer3
       1  timerOn
       1  timesToSend
       4  txAccum
       4  txTotal
       1  u_LedsNumber
     153  uartRxCB

 
 3 442 bytes in segment BANKED_CODE
   150 bytes in segment BANK_RELAYS
     3 bytes in segment INTVEC
    23 bytes in segment NEAR_CODE
     7 bytes in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    55 bytes in segment XDATA_ROM_C
   165 bytes in segment XDATA_Z
 
 3 616 bytes of CODE  memory (+  3 bytes shared)
    43 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  7 bytes shared)
   166 bytes of XDATA memory

Errors: none
Warnings: 19
