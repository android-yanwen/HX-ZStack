###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             17/Aug/2016  13:15:13 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\Source\TransmitApp.c             #
#    Command line       =  -f E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstac #
#                          k\Utilities\Transmit\CC2530DB\..\..\..\Tools\CC253 #
#                          0DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func    #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f E:\ZSTACK-GTAMODBUS-v1.0£¨Û #
#                          ³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC2530DB\ #
#                          ..\..\..\Tools\CC2530DB\f8wConfig.cfg              #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00001000          #
#                          -DZDAPP_CONFIG_PAN_ID=0x1178                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=3             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=2    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 E:\ZSTACK-GTAMODBUS-v1.0£¨Û #
#                          ³ÎÄ£©\Projects\zstack\Utilities\Transmit\Source\Tr #
#                          ansmitApp.c -D xNWK_AUTO_POLL -D xMT_TASK -D       #
#                          xZTOOL_P1 -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       #
#                          ZDNWKMGR_MIN_TRANSMISSIONS=0 -D xGTA_DEBUG -D      #
#                          ZIGBEEPRO -D GTA_WMSCB_R1 -lC                      #
#                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\GTA-WMSCB-R1\List\ -lA  #
#                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\GTA-WMSCB-R1\List\      #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\GTA-WMSCB-R1\Obj\ -e    #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstac #
#                          k\Utilities\Transmit\CC2530DB\ -I                  #
#                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\..\Source\ -I           #
#                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\..\..\..\ZMain\TI2530DB #
#                          \ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\..\..\..\..\..\Com #
#                          ponents\hal\include\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨ #
#                          Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC2530DB #
#                          \..\..\..\..\..\Components\hal\target\CC2530EB\    #
#                          -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstac #
#                          k\Utilities\Transmit\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mac\include\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ #
#                          ÎÄ£©\Projects\zstack\Utilities\Transmit\CC2530DB\. #
#                          .\..\..\..\..\Components\mac\high_level\ -I        #
#                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\low_level\srf04\ -I                         #
#                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\low_level\srf04\single_chip\ -I             #
#                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mt\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Project #
#                          s\zstack\Utilities\Transmit\CC2530DB\..\..\..\..\. #
#                          .\Components\osal\include\ -I                      #
#                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\..\..\..\..\..\Componen #
#                          ts\services\saddr\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ #
#                          ÎÄ£©\Projects\zstack\Utilities\Transmit\CC2530DB\. #
#                          .\..\..\..\..\Components\services\sdata\ -I        #
#                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\af\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\P #
#                          rojects\zstack\Utilities\Transmit\CC2530DB\..\..\. #
#                          .\..\..\Components\stack\nwk\ -I                   #
#                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sapi\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£© #
#                          \Projects\zstack\Utilities\Transmit\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\sec\ -I                 #
#                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sys\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\ #
#                          Projects\zstack\Utilities\Transmit\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\zdo\ -I                  #
#                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\..\..\..\..\..\Componen #
#                          ts\zmac\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Proje #
#                          cts\zstack\Utilities\Transmit\CC2530DB\..\..\..\.. #
#                          \..\Components\zmac\f8w\ -Ohz --require_prototypes #
#    List file          =  E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\GTA-WMSCB-R1\List\Trans #
#                          mitApp.lst                                         #
#    Object file        =  E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\GTA-WMSCB-R1\Obj\Transm #
#                          itApp.r51                                          #
#                                                                             #
#                                                                             #
###############################################################################

E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c
      1          /**************************************************************************************************
      2            Filename:       TransmitApp.c
      3            Revised:        $Date: 2012-03-05 09:54:49 -0800 (Mon, 05 Mar 2012) $
      4            Revision:       $Revision: 29619 $
      5          
      6            Description:    Transmit Application (no Profile).
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application will send a data packet to another
     42            tranmitApp device as fast as it can.  The receiving
     43            transmitApp device will calculate the following transmit
     44            rate statistics:
     45              - Number bytes in the last second
     46              - Number of seconds running
     47              - Average number of bytes per second
     48              - Number of packets received.
     49          
     50            The application will send one message and as soon as it
     51            receives the confirmation for that message it will send
     52            the next message.
     53          
     54            If you would like a delay between messages
     55            define TRANSMITAPP_DELAY_SEND and set the delay amount
     56            in TRANSMITAPP_SEND_DELAY.
     57          
     58            TransmitApp_MaxDataLength defines the message size
     59          
     60            Set TRANSMITAPP_TX_OPTIONS to AF_MSG_ACK_REQUEST to send
     61            the message expecting an APS ACK, this will decrease your
     62            throughput.  Set TRANSMITAPP_TX_OPTIONS to 0 for no
     63            APS ACK.
     64          
     65            This applications doesn't have a profile, so it handles
     66            everything directly - itself.
     67          
     68            Key control:
     69              SW1:  Starts and stops the transmitting
     70              SW2:  initiates end device binding
     71              SW3:  Resets the display totals
     72              SW4:  initiates a match description request
     73          
     74            Notes:
     75          
     76              This application was intended to be used to test the maximum
     77              throughput between 2 devices in a network - between routers
     78              coordinators.
     79          
     80              Although not recommended, it can be used between
     81              an end device and a router (or coordinator), but you must
     82              enable the delay feature (TRANSMITAPP_DELAY_SEND and
     83              TRANSMITAPP_SEND_DELAY).  If you don't include the delay, the
     84              end device can't receive messages because it will stop polling.
     85              Also, the delay must be greater than RESPONSE_POLL_RATE (default 100 MSec).
     86          *********************************************************************/
     87          
     88          /*********************************************************************
     89           * INCLUDES
     90           */
     91          #include "OSAL.h"
     92          #include "AF.h"
     93          #include "ZDObject.h"
     94          #include "ZDProfile.h"
     95          
     96          #include "TransmitApp.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     97          #include "OnBoard.h"
     98          
     99          #include "DebugTrace.h"
    100          
    101          /* HAL */
    102          #include "hal_lcd.h"
    103          #include "hal_led.h"
    104          #include "hal_key.h"
    105          #include "hal_uart.h"
    106          
    107          #include "OSAL_NV.h"
    108          
    109          #include "ZComDef.h"
    110          #include "sapi.h"//
    111          
    112          #include "hal_types.h"
    113          
    114          #if defined(GTA_WTHSB_R1)
    115          #include "hal_sht11.h"
    116          #endif
    117          
    118          #if defined(GTA_WHFRFID_R1)
    119          #include "WHFRFID.h"
    120          #endif
    121          #include <string.h>
    122          
    123          #if defined GTA_WMSCB_R1
    124          #include "ControlModule.h"
    125          #endif
    126          /*********************************************************************
    127           * MACROS
    128           */
    129          
    130          /*********************************************************************
    131           * CONSTANTS
    132           */
    133          //#define TRANSMITAPP_RANDOM_LEN
    134          
    135          #define TRANSMITAPP_STATE_WAITING 0
    136          #define TRANSMITAPP_STATE_SENDING 1
    137          
    138          #if !defined ( RTR_NWK )
    139            // Use these 2 lines to add a delay between each packet sent
    140            //  - default for end devices
    141            #define TRANSMITAPP_DELAY_SEND
    142            #define TRANSMITAPP_SEND_DELAY    (RESPONSE_POLL_RATE * 2)  // in MSecs
    143          #endif
    144          
    145          // Send with or without APS ACKs
    146          //#define TRANSMITAPP_TX_OPTIONS    (AF_DISCV_ROUTE | AF_ACK_REQUEST)
    147          #define TRANSMITAPP_TX_OPTIONS    AF_DISCV_ROUTE
    148          
    149          #define TRANSMITAPP_INITIAL_MSG_COUNT  2
    150          
    151          #define TRANSMITAPP_TRANSMIT_TIME   4  // 4 MS
    152          #define TRANSMITAPP_DISPLAY_TIMER   (2 * 1000)
    153          
    154          #if defined ( TRANSMITAPP_FRAGMENTED )
    155          #define TRANSMITAPP_MAX_DATA_LEN    225
    156          #else
    157          #define TRANSMITAPP_MAX_DATA_LEN    102
    158          #endif
    159          
    160          /*********************************************************************
    161           * TYPEDEFS
    162           */
    163          
    164          /*********************************************************************
    165           * GLOBAL VARIABLES
    166           */
    167          
    168          
    169          // This is the buffer that is sent out as data.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ];
   \                     TransmitApp_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
    171          
    172          // This is the Cluster ID List and should be filled with Application
    173          // specific cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    174          const cId_t TransmitApp_ClusterList[TRANSMITAPP_MAX_CLUSTERS] =
   \                     TransmitApp_ClusterList:
   \   000000   A100         DW 161
    175          {
    176            TRANSMITAPP_CLUSTERID_TESTMSG  // MSG Cluster ID
    177          };
    178          

   \                                 In  segment XDATA_ROM_C, align 1
    179          const SimpleDescriptionFormat_t TransmitApp_SimpleDesc =
   \                     TransmitApp_SimpleDesc:
   \   000000   01           DB 1
   \   000001   050F         DW 3845
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW TransmitApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW TransmitApp_ClusterList
    180          {
    181            TRANSMITAPP_ENDPOINT,              //  int    Endpoint;
    182            TRANSMITAPP_PROFID,                //  uint16 AppProfId[2];
    183            TRANSMITAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    184            TRANSMITAPP_DEVICE_VERSION,        //  int    AppDevVer:4;
    185            TRANSMITAPP_FLAGS,                 //  int    AppFlags:4;
    186            TRANSMITAPP_MAX_CLUSTERS,          //  byte   AppNumInClusters;
    187            (cId_t *)TransmitApp_ClusterList,  //  byte   *pAppInClusterList;
    188            TRANSMITAPP_MAX_CLUSTERS,          //  byte   AppNumInClusters;
    189            (cId_t *)TransmitApp_ClusterList   //  byte   *pAppInClusterList;
    190          };
    191          
    192          // This is the Endpoint/Interface description.  It is defined here, but
    193          // filled-in in TransmitApp_Init().  Another way to go would be to fill
    194          // in the structure here and make it a "const" (in code space).  The
    195          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          endPointDesc_t TransmitApp_epDesc;
   \                     TransmitApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    197          
    198          /*********************************************************************
    199           * EXTERNAL VARIABLES
    200           */
    201          
    202          /*********************************************************************
    203           * EXTERNAL FUNCTIONS
    204           */
    205          
    206          /*********************************************************************
    207           * LOCAL VARIABLES
    208           */
    209          
    210          // Task ID for event processing - received when TransmitApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          byte TransmitApp_TaskID;
   \                     TransmitApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    212          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          devStates_t TransmitApp_NwkState;
   \                     TransmitApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    214          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          static byte TransmitApp_TransID;  // This is the unique message ID (counter)
   \                     TransmitApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    216          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          afAddrType_t TransmitApp_DstAddr;
   \                     TransmitApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          afAddrType_t TestDirectSent_DstAddr;
   \                     TestDirectSent_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          byte TransmitApp_State;
   \                     TransmitApp_State:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    220          
    221          // Shadow of the OSAL system clock used for calculating actual time expired.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    222          static uint32 clkShdw;
   \                     clkShdw:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    223          // Running total count of test messages recv/sent since beginning current run.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    224          static uint32 rxTotal, txTotal;
   \                     rxTotal:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     txTotal:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    225          // Running count of test messages recv/sent since last display / update - 1 Hz.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    226          static uint32 rxAccum, txAccum;
   \                     rxAccum:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     txAccum:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    227          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    228          static byte timerOn;
   \                     timerOn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    229          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    230          static byte timesToSend;
   \                     timesToSend:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    231          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    232          uint16 pktCounter;
   \                     pktCounter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    233          
    234          // Max Data Request Length

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    235          uint16 TransmitApp_MaxDataLength;
   \                     TransmitApp_MaxDataLength:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    236          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    237          uint8   NativeAddr=0x01;
   \                     NativeAddr:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for NativeAddr>`
   \   000001                REQUIRE __INIT_XDATA_I
    238          
    239          #if defined(GTA_DEBUG)
    240          uint8 Test_Mark=0;
    241          uint8 Test_Buf[15];
    242          #endif
    243          
    244          #if defined(GTA_WTHSB_R1)
    245          
    246          char temp_val[2];
    247          char humi_val[2];
    248          static uint8 readTempHumi(void);
    249          #endif
    250          
    251          #if defined(GTA_WMSCB_R1)
    252          
    253          #endif
    254          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    255          uint8 Flag_ReportData=0;
   \                     Flag_ReportData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    256          
    257          /*********************************************************************
    258           * LOCAL FUNCTIONS
    259           */
    260          void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    261          void TransmitApp_HandleKeys( byte shift, byte keys );
    262          void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    263          void TransmitApp_ProcessZDOIncomingMsgs( zdoIncomingMsg_t *inMsg );//microdjg
    264          void TransmitApp_SendTheMessage( void );
    265          void TransmitApp_ChangeState( void );
    266          
    267          void ReportData(ModBusFrame_t *pRxFrame);
    268          uint16 FramePackage(uint8 *pFrame,uint8 addr,uint8 cmd,uint8 *data,uint16 datalen);
    269          uint16 ReadADC(uint8 channel);
    270          void SendDataRequest(uint8 *pBuf,uint16 len);
    271          
    272          /*********************************************************************
    273           * NETWORK LAYER CALLBACKS
    274           */
    275          
    276          /*********************************************************************
    277           * PUBLIC FUNCTIONS
    278           */
    279          void TransmitApp_DisplayResults( void );
    280          
    281          /*********************************************************************
    282           * @fn      TransmitApp_Init
    283           *
    284           * @brief   Initialization function for the Generic App Task.
    285           *          This is called during initialization and should contain
    286           *          any application specific initialization (ie. hardware
    287           *          initialization/setup, table initialization, power up
    288           *          notificaiton ... ).
    289           *
    290           * @param   task_id - the ID assigned by OSAL.  This ID should be
    291           *                    used to send messages and set timers.
    292           *
    293           * @return  none
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          void TransmitApp_Init( byte task_id )
   \                     TransmitApp_Init:
    296          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    297          #if !defined ( TRANSMITAPP_FRAGMENTED )
    298            afDataReqMTU_t mtu;
    299          #endif
    300            uint16 i;
    301            
    302            #if defined(GTA_WTHSB_R1)
    303            Hal_SHT11_Init();
    304            s_connectionreset();
    305            #endif
    306          /*#if defined (HX_18B20_R1)
    307            P0SEL &= 0x00;
    308          #endif*/
    309            
    310            
    311            initUart(uartRxCB);//microdjg
   \   00000C                ; Setup parameters for call to function initUart
   \   00000C   7A..         MOV     R2,#??uartRxCB?relay & 0xff
   \   00000E   7B..         MOV     R3,#(??uartRxCB?relay >> 8) & 0xff
   \   000010   12....       LCALL   ??initUart?relay
    312            osal_nv_item_init(ZCD_NV_NATIVE_ADDRESS,sizeof(NativeAddr),NULL);
   \   000013                ; Setup parameters for call to function osal_nv_item_init
   \   000013   E4           CLR     A
   \   000014   F5..         MOV     ?V0 + 0,A
   \   000016   F5..         MOV     ?V0 + 1,A
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   7C01         MOV     R4,#0x1
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   7A01         MOV     R2,#0x1
   \   000023   7B04         MOV     R3,#0x4
   \   000025   12....       LCALL   ??osal_nv_item_init?relay
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?DEALLOC_XSTACK8
    313            osal_nv_read(ZCD_NV_NATIVE_ADDRESS,0,sizeof(NativeAddr),&NativeAddr);
   \   00002D                ; Setup parameters for call to function osal_nv_read
   \   00002D   75....       MOV     ?V0 + 0,#NativeAddr & 0xff
   \   000030   75....       MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   75..01       MOV     ?V0 + 0,#0x1
   \   00003B   75..00       MOV     ?V0 + 1,#0x0
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7C00         MOV     R4,#0x0
   \   000045   7D00         MOV     R5,#0x0
   \   000047   7A01         MOV     R2,#0x1
   \   000049   7B04         MOV     R3,#0x4
   \   00004B   12....       LCALL   ??osal_nv_read?relay
   \   00004E   7404         MOV     A,#0x4
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
    314            
    315            TransmitApp_TaskID = task_id;
   \   000053   EE           MOV     A,R6
   \   000054   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000057   F0           MOVX    @DPTR,A
    316            TransmitApp_NwkState = DEV_INIT;
   \   000058   90....       MOV     DPTR,#TransmitApp_NwkState
   \   00005B   7401         MOV     A,#0x1
   \   00005D   F0           MOVX    @DPTR,A
    317            TransmitApp_TransID = 0;
   \   00005E   90....       MOV     DPTR,#TransmitApp_TransID
   \   000061   E4           CLR     A
   \   000062   F0           MOVX    @DPTR,A
    318          
    319            pktCounter = 0;
   \   000063   90....       MOV     DPTR,#pktCounter
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   F0           MOVX    @DPTR,A
    320          
    321            TransmitApp_State = TRANSMITAPP_STATE_WAITING;
   \   000069   90....       MOV     DPTR,#TransmitApp_State
   \   00006C   F0           MOVX    @DPTR,A
    322          
    323            // Device hardware initialization can be added here or in main() (Zmain.c).
    324            // If the hardware is application specific - add it here.
    325            // If the hardware is other parts of the device add it in main().
    326          
    327            TransmitApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;//°ó¶¨·¢
   \   00006D   90....       MOV     DPTR,#TransmitApp_DstAddr + 8
   \   000070   F0           MOVX    @DPTR,A
    328            TransmitApp_DstAddr.endPoint = 0;
   \   000071   A3           INC     DPTR
   \   000072   F0           MOVX    @DPTR,A
    329            TransmitApp_DstAddr.addr.shortAddr = 0;//ÎÞËùÎ½
   \   000073   90....       MOV     DPTR,#TransmitApp_DstAddr
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   F0           MOVX    @DPTR,A
    330          
    331            // Fill out the endpoint description.
    332            TransmitApp_epDesc.endPoint = TRANSMITAPP_ENDPOINT;
   \   000079   90....       MOV     DPTR,#TransmitApp_epDesc
   \   00007C   04           INC     A
   \   00007D   F0           MOVX    @DPTR,A
    333            TransmitApp_epDesc.task_id = &TransmitApp_TaskID;
   \   00007E   A3           INC     DPTR
   \   00007F   74..         MOV     A,#TransmitApp_TaskID & 0xff
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   74..         MOV     A,#(TransmitApp_TaskID >> 8) & 0xff
   \   000085   F0           MOVX    @DPTR,A
    334            TransmitApp_epDesc.simpleDesc
    335                      = (SimpleDescriptionFormat_t *)&TransmitApp_SimpleDesc;
   \   000086   A3           INC     DPTR
   \   000087   74..         MOV     A,#TransmitApp_SimpleDesc & 0xff
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   74..         MOV     A,#(TransmitApp_SimpleDesc >> 8) & 0xff
   \   00008D   12....       LCALL   ??Subroutine17_0 & 0xFFFF
    336            TransmitApp_epDesc.latencyReq = noLatencyReqs;
    337            
    338            
    339            
    340            //if(ZG_DEVICE_COORDINATOR_TYPE)
    341            //{
    342              //HalLcdInit();
    343              //HalLcd_HW_WriteLine(HAL_LCD_LINE_1,"GTA Zigbee Test");
    344              HalLcdWriteString( "GTA Zigbee", HAL_LCD_LINE_1 );
   \                     ??CrossCallReturnLabel_16:
   \   000090                ; Setup parameters for call to function HalLcdWriteString
   \   000090   7901         MOV     R1,#0x1
   \   000092   7A..         MOV     R2,#`?<Constant "GTA Zigbee">` & 0xff
   \   000094   7B..         MOV     R3,#(`?<Constant "GTA Zigbee">` >> 8) & 0xff
   \   000096   12....       LCALL   ??HalLcdWriteString?relay
    345            //}
    346          
    347          
    348            // Register the endpoint/interface description with the AF
    349            afRegister( &TransmitApp_epDesc );
   \   000099                ; Setup parameters for call to function afRegister
   \   000099   7A..         MOV     R2,#TransmitApp_epDesc & 0xff
   \   00009B   7B..         MOV     R3,#(TransmitApp_epDesc >> 8) & 0xff
   \   00009D   12....       LCALL   ??afRegister?relay
    350          
    351            // Register for all key events - This app will handle all key events
    352            RegisterForKeys( TransmitApp_TaskID );
   \   0000A0                ; Setup parameters for call to function RegisterForKeys
   \   0000A0   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F9           MOV     R1,A
   \   0000A5   12....       LCALL   ??RegisterForKeys?relay
    353          
    354            // Update the display
    355          #if defined ( LCD_SUPPORTED )
    356            HalLcdWriteString( "TransmitApp", HAL_LCD_LINE_2 );
    357          #endif
    358          
    359            // Set the data length
    360          #if defined ( TRANSMITAPP_FRAGMENTED )
    361            TransmitApp_MaxDataLength = TRANSMITAPP_MAX_DATA_LEN;
    362          #else
    363            mtu.kvp        = FALSE;
   \   0000A8   85..82       MOV     DPL,?XSP + 0
   \   0000AB   85..83       MOV     DPH,?XSP + 1
   \   0000AE   E4           CLR     A
   \   0000AF   F0           MOVX    @DPTR,A
    364            mtu.aps.secure = FALSE;
   \   0000B0   04           INC     A
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   E4           CLR     A
   \   0000B5   12....       LCALL   ?Subroutine6 & 0xFFFF
    365            TransmitApp_MaxDataLength = afDataReqMTU( &mtu );
   \                     ??CrossCallReturnLabel_0:
   \   0000B8   12....       LCALL   ??afDataReqMTU?relay
   \   0000BB   E9           MOV     A,R1
   \   0000BC   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   0000BF   12....       LCALL   ??Subroutine17_0 & 0xFFFF
    366          #endif
    367          
    368            // Generate the data
    369            for (i=0; i<TransmitApp_MaxDataLength; i++)
   \                     ??CrossCallReturnLabel_19:
   \   0000C2   F8           MOV     R0,A
   \   0000C3   8012         SJMP    ??TransmitApp_Init_0
    370            {
    371              TransmitApp_Msg[i] = (uint8) i;
   \                     ??TransmitApp_Init_1:
   \   0000C5   74..         MOV     A,#TransmitApp_Msg & 0xff
   \   0000C7   28           ADD     A,R0
   \   0000C8   F582         MOV     DPL,A
   \   0000CA   74..         MOV     A,#(TransmitApp_Msg >> 8) & 0xff
   \   0000CC   39           ADDC    A,R1
   \   0000CD   F583         MOV     DPH,A
   \   0000CF   E8           MOV     A,R0
   \   0000D0   F0           MOVX    @DPTR,A
    372            }
   \   0000D1   2401         ADD     A,#0x1
   \   0000D3   08           INC     R0
   \   0000D4   E9           MOV     A,R1
   \   0000D5   3400         ADDC    A,#0x0
   \                     ??TransmitApp_Init_0:
   \   0000D7   F9           MOV     R1,A
   \   0000D8   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   FA           MOV     R2,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   FB           MOV     R3,A
   \   0000E0   C3           CLR     C
   \   0000E1   E8           MOV     A,R0
   \   0000E2   9A           SUBB    A,R2
   \   0000E3   E9           MOV     A,R1
   \   0000E4   9B           SUBB    A,R3
   \   0000E5   40DE         JC      ??TransmitApp_Init_1
    373          
    374            ZDO_RegisterForZDOMsg( TransmitApp_TaskID, End_Device_Bind_rsp );
   \   0000E7                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000E7   7A20         MOV     R2,#0x20
   \   0000E9   7B80         MOV     R3,#-0x80
   \   0000EB   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F9           MOV     R1,A
   \   0000F0   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    375            ZDO_RegisterForZDOMsg( TransmitApp_TaskID, Match_Desc_rsp );
   \   0000F3                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000F3   7A06         MOV     R2,#0x6
   \   0000F5   7B80         MOV     R3,#-0x80
   \   0000F7   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F9           MOV     R1,A
   \   0000FC   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    376            ZDO_RegisterForZDOMsg( TransmitApp_TaskID,TRANSMITAPP_CLUSTERID_TESTMSG);
   \   0000FF                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000FF   7AA1         MOV     R2,#-0x5f
   \   000101   7B00         MOV     R3,#0x0
   \   000103   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000106   E0           MOVX    A,@DPTR
   \   000107   F9           MOV     R1,A
   \   000108   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    377            
    378          #if defined (HX_18B20_R1)
    379            osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 1000);
    380            Flag_ReportData = true;
    381          #endif
    382          #if defined GTA_WMSCB_R1
    383            NativeAddr = 0x22;  //ÉèÖÃ¿ØÖÆÄ£¿éµÄZigBeeµØÖ·
   \   00010B   90....       MOV     DPTR,#NativeAddr
   \   00010E   7422         MOV     A,#0x22
   \   000110   F0           MOVX    @DPTR,A
    384          #endif
    385          
    386          }
   \   000111   7402         MOV     A,#0x2
   \   000113                REQUIRE ?Subroutine5
   \   000113                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine16_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function afDataReqMTU
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    387          
    388          /*********************************************************************
    389           * @fn      TransmitApp_ProcessEvent
    390           *
    391           * @brief   Generic Application Task event processor.  This function
    392           *          is called to process all events for the task.  Events
    393           *          include timers, messages and any other user defined events.
    394           *
    395           * @param   task_id  - The OSAL assigned task ID.
    396           * @param   events - events to process.  This is a bit map and can
    397           *                   contain more than one event.
    398           *
    399           * @return  none
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          UINT16 TransmitApp_ProcessEvent( byte task_id, UINT16 events )
   \                     TransmitApp_ProcessEvent:
    402          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    403            afIncomingMSGPacket_t *MSGpkt;
    404            afDataConfirm_t *afDataConfirm;
    405            (void)task_id;  // Intentionally unreferenced parameter
    406          
    407            // Data Confirmation message fields
    408            ZStatus_t sentStatus;
    409            byte sentEP;
    410            
    411          
    412            
    413            uint8 Frame[20];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
                         ^
Warning[Pe177]: variable "Frame" was declared but never referenced
    414            uint8 data[10];//
                         ^
Warning[Pe177]: variable "data" was declared but never referenced
    415            uint16 i=0,j=0;
                          ^
Warning[Pe177]: variable "i" was declared but never referenced

    uint16 i=0,j=0;
               ^
"E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c",415  Warning[Pe177]: 
          variable "j" was declared but never referenced
    416            uint8 led=0;
                         ^
Warning[Pe177]: variable "led" was declared but never referenced
    417            uint16 temp;
                          ^
Warning[Pe177]: variable "temp" was declared but never referenced
    418            uint16 FrameLen;
                          ^
Warning[Pe177]: variable "FrameLen" was declared but never referenced
    419            
    420          
    421            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??TransmitApp_ProcessEvent_0 & 0xFFFF
    422            {
    423              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   800D         SJMP    ??TransmitApp_ProcessEvent_1
    424              while ( MSGpkt )
    425              {
    426                switch ( MSGpkt->hdr.event )
    427                {
    428                  case ZDO_CB_MSG:
    429                    TransmitApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    430                    break;
    431          
    432                  case KEY_CHANGE:
    433                    TransmitApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    434                    break;
    435          
    436                  case AF_DATA_CONFIRM_CMD:
    437                    // This message is received as a confirmation of a data packet sent.
    438                    // The status is of ZStatus_t type [defined in ZComDef.h]
    439                    // The message fields are defined in AF.h
    440                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    441                    sentEP = afDataConfirm->endpoint;
    442                    sentStatus = afDataConfirm->hdr.status;
    443          
    444                    if ( (ZSuccess == sentStatus) &&
    445                         (TransmitApp_epDesc.endPoint == sentEP) )
    446                    {
    447          #if !defined ( TRANSMITAPP_RANDOM_LEN )
    448                      txAccum += TransmitApp_MaxDataLength;
    449          #endif
    450                      if ( !timerOn )
    451                      {
    452                        osal_start_timerEx( TransmitApp_TaskID,TRANSMITAPP_RCVTIMER_EVT,
    453                                                               TRANSMITAPP_DISPLAY_TIMER);
    454                        clkShdw = osal_GetSystemClock();
    455                        timerOn = TRUE;
    456                      }
    457                    }
    458          
    459                    // Action taken when confirmation is received: Send the next message.
    460                    TransmitApp_SetSendEvt();
    461                    break;
    462          
    463                  case AF_INCOMING_MSG_CMD:
    464                    TransmitApp_MessageMSGCB( MSGpkt );
    465                    
    466                    break;
    467          
    468                  case ZDO_STATE_CHANGE:
    469                    TransmitApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??TransmitApp_ProcessEvent_2:
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   90....       MOV     DPTR,#TransmitApp_NwkState
   \   000017   F0           MOVX    @DPTR,A
    470          
    471                    break;
    472          
    473                  default:
    474                    break;
    475                }
    476          
    477                // Release the memory
    478                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??TransmitApp_ProcessEvent_3:
   \   000018                ; Setup parameters for call to function osal_msg_deallocate
   \   000018   AA..         MOV     R2,?V0 + 0
   \   00001A   AB..         MOV     R3,?V0 + 1
   \   00001C   12....       LCALL   ??osal_msg_deallocate?relay
    479          
    480                // Next
    481                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
   \   00001F                ; Setup parameters for call to function osal_msg_receive
   \                     ??TransmitApp_ProcessEvent_1:
   \   00001F   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   12....       LCALL   ??osal_msg_receive?relay
   \   000027   8A..         MOV     ?V0 + 0,R2
   \   000029   8B..         MOV     ?V0 + 1,R3
   \   00002B   E5..         MOV     A,?V0 + 0
   \   00002D   45..         ORL     A,?V0 + 1
   \   00002F   7003         JNZ     $+5
   \   000031   02....       LJMP    ??TransmitApp_ProcessEvent_4 & 0xFFFF
   \   000034   85..82       MOV     DPL,?V0 + 0
   \   000037   85..83       MOV     DPH,?V0 + 1
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   2440         ADD     A,#0x40
   \   00003D   6017         JZ      ??TransmitApp_ProcessEvent_5
   \   00003F   24EF         ADD     A,#-0x11
   \   000041   60CF         JZ      ??TransmitApp_ProcessEvent_2
   \   000043   24FE         ADD     A,#-0x2
   \   000045   6006         JZ      ??TransmitApp_ProcessEvent_6
   \   000047   24D6         ADD     A,#-0x2a
   \   000049   601F         JZ      ??TransmitApp_ProcessEvent_7
   \   00004B   80CB         SJMP    ??TransmitApp_ProcessEvent_3
   \                     ??TransmitApp_ProcessEvent_6:
   \   00004D                ; Setup parameters for call to function TransmitApp_ProcessZDOMsgs
   \   00004D   AA..         MOV     R2,?V0 + 0
   \   00004F   AB..         MOV     R3,?V0 + 1
   \   000051   12....       LCALL   ??TransmitApp_ProcessZDOMsgs?relay
   \   000054   80C2         SJMP    ??TransmitApp_ProcessEvent_3
   \                     ??TransmitApp_ProcessEvent_5:
   \   000056                ; Setup parameters for call to function TransmitApp_HandleKeys
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FA           MOV     R2,A
   \   00005B   85..82       MOV     DPL,?V0 + 0
   \   00005E   85..83       MOV     DPH,?V0 + 1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   12....       LCALL   ??TransmitApp_HandleKeys?relay
   \   000068   80AE         SJMP    ??TransmitApp_ProcessEvent_3
   \                     ??TransmitApp_ProcessEvent_7:
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   704D         JNZ     ??TransmitApp_ProcessEvent_8
   \   00006E   90....       MOV     DPTR,#TransmitApp_epDesc
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F8           MOV     R0,A
   \   000073   85..82       MOV     DPL,?V0 + 0
   \   000076   85..83       MOV     DPH,?V0 + 1
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   68           XRL     A,R0
   \   00007D   703C         JNZ     ??TransmitApp_ProcessEvent_8
   \   00007F   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F5..         MOV     ?V0 + 4,A
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F5..         MOV     ?V0 + 5,A
   \   000089   E4           CLR     A
   \   00008A   F5..         MOV     ?V0 + 6,A
   \   00008C   F5..         MOV     ?V0 + 7,A
   \   00008E   90....       MOV     DPTR,#txAccum
   \   000091   78..         MOV     R0,#?V0 + 4
   \   000093   12....       LCALL   ?L_ADD_TO_X
   \   000096   90....       MOV     DPTR,#timerOn
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   701F         JNZ     ??TransmitApp_ProcessEvent_8
   \   00009C                ; Setup parameters for call to function osal_start_timerEx
   \   00009C   7CD0         MOV     R4,#-0x30
   \   00009E   7D07         MOV     R5,#0x7
   \   0000A0   7A02         MOV     R2,#0x2
   \   0000A2   7B00         MOV     R3,#0x0
   \   0000A4   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   12....       LCALL   ??osal_start_timerEx?relay
   \   0000AC                ; Setup parameters for call to function osal_GetSystemClock
   \   0000AC   12....       LCALL   ??osal_GetSystemClock?relay
   \   0000AF   90....       MOV     DPTR,#clkShdw
   \   0000B2   12....       LCALL   ?XSTORE_R2345
   \   0000B5   90....       MOV     DPTR,#timerOn
   \   0000B8   7401         MOV     A,#0x1
   \   0000BA   F0           MOVX    @DPTR,A
   \                     ??TransmitApp_ProcessEvent_8:
   \   0000BB                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   0000BB   12....       LCALL   ??TransmitApp_SetSendEvt?relay
   \   0000BE   02....       LJMP    ??TransmitApp_ProcessEvent_3 & 0xFFFF
    482              }
    483          
    484              // Squash compiler warnings until values are used.
    485              (void)sentStatus;
    486              (void)sentEP;
    487          
    488              // Return unprocessed events
    489              return (events ^ SYS_EVENT_MSG);
   \                     ??TransmitApp_ProcessEvent_4:
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   6480         XRL     A,#0x80
   \   0000C6   8078         SJMP    ??TransmitApp_ProcessEvent_9
    490            }
    491          
    492            // Send a message out
    493            if ( events & TRANSMITAPP_SEND_MSG_EVT )
   \                     ??TransmitApp_ProcessEvent_0:
   \   0000C8   EE           MOV     A,R6
   \   0000C9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000CB   5010         JNC     ??TransmitApp_ProcessEvent_10
    494            {
    495              if ( TransmitApp_State == TRANSMITAPP_STATE_SENDING )
   \   0000CD   90....       MOV     DPTR,#TransmitApp_State
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   6401         XRL     A,#0x1
   \   0000D3   7003         JNZ     ??TransmitApp_ProcessEvent_11
    496              {
    497                TransmitApp_SendTheMessage();
   \   0000D5                ; Setup parameters for call to function TransmitApp_SendTheMessage
   \   0000D5   12....       LCALL   ??TransmitApp_SendTheMessage?relay
    498              }
    499          
    500              // Return unprocessed events
    501              return (events ^ TRANSMITAPP_SEND_MSG_EVT);
   \                     ??TransmitApp_ProcessEvent_11:
   \   0000D8   EE           MOV     A,R6
   \   0000D9   6401         XRL     A,#0x1
   \   0000DB   8061         SJMP    ??TransmitApp_ProcessEvent_12
    502            }
    503          
    504            // Timed wait from error
    505            if ( events & TRANSMITAPP_SEND_ERR_EVT )
   \                     ??TransmitApp_ProcessEvent_10:
   \   0000DD   5404         ANL     A,#0x4
   \   0000DF   6008         JZ      ??TransmitApp_ProcessEvent_13
    506            {
    507              TransmitApp_SetSendEvt();
   \   0000E1                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   0000E1   12....       LCALL   ??TransmitApp_SetSendEvt?relay
    508          
    509              // Return unprocessed events
    510              return (events ^ TRANSMITAPP_SEND_ERR_EVT);
   \   0000E4   EE           MOV     A,R6
   \   0000E5   6404         XRL     A,#0x4
   \   0000E7   8055         SJMP    ??TransmitApp_ProcessEvent_12
    511            }
    512          
    513            // Receive timer
    514            if ( events & TRANSMITAPP_RCVTIMER_EVT )
   \                     ??TransmitApp_ProcessEvent_13:
   \   0000E9   EE           MOV     A,R6
   \   0000EA   5402         ANL     A,#0x2
   \   0000EC   6018         JZ      ??TransmitApp_ProcessEvent_14
    515            {
    516              // Setup to display the next result
    517              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT,
    518                                                      TRANSMITAPP_DISPLAY_TIMER );
   \   0000EE                ; Setup parameters for call to function osal_start_timerEx
   \   0000EE   7CD0         MOV     R4,#-0x30
   \   0000F0   7D07         MOV     R5,#0x7
   \   0000F2   7A02         MOV     R2,#0x2
   \   0000F4   7B00         MOV     R3,#0x0
   \   0000F6   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F9           MOV     R1,A
   \   0000FB   12....       LCALL   ??osal_start_timerEx?relay
    519              TransmitApp_DisplayResults();
   \   0000FE                ; Setup parameters for call to function TransmitApp_DisplayResults
   \   0000FE   12....       LCALL   ??TransmitApp_DisplayResults?relay
    520          
    521              return (events ^ TRANSMITAPP_RCVTIMER_EVT);
   \   000101   EE           MOV     A,R6
   \   000102   6402         XRL     A,#0x2
   \   000104   8038         SJMP    ??TransmitApp_ProcessEvent_12
    522            }
    523            if ( events & TRANSMITAPP_BIND_REQUEST_EVT)//microdjg
   \                     ??TransmitApp_ProcessEvent_14:
   \   000106   EE           MOV     A,R6
   \   000107   5408         ANL     A,#0x8
   \   000109   6008         JZ      ??TransmitApp_ProcessEvent_15
    524            {
    525              SendBindRequest();//×Ô¶¯¿ªÊ¼°ó¶¨ microdjg
   \   00010B                ; Setup parameters for call to function SendBindRequest
   \   00010B   12....       LCALL   ??SendBindRequest?relay
    526              //osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT,3000 );
    527              return (events ^ TRANSMITAPP_BIND_REQUEST_EVT);
   \   00010E   EE           MOV     A,R6
   \   00010F   6408         XRL     A,#0x8
   \   000111   802B         SJMP    ??TransmitApp_ProcessEvent_12
    528            }
    529            
    530            
    531            if ( events & TRANSMITAPP_START_REPORT_EVT )
   \                     ??TransmitApp_ProcessEvent_15:
   \   000113   EE           MOV     A,R6
   \   000114   5410         ANL     A,#0x10
   \   000116   602B         JZ      ??TransmitApp_ProcessEvent_16
    532            {
    533              if(Flag_ReportData)
   \   000118   90....       MOV     DPTR,#Flag_ReportData
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   6010         JZ      ??TransmitApp_ProcessEvent_17
    534                {
    535                  osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 1000);
   \   00011E                ; Setup parameters for call to function osal_start_timerEx
   \   00011E   7CE8         MOV     R4,#-0x18
   \   000120   7D03         MOV     R5,#0x3
   \   000122   7A10         MOV     R2,#0x10
   \   000124   7B00         MOV     R3,#0x0
   \   000126   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   F9           MOV     R1,A
   \   00012B   12....       LCALL   ??osal_start_timerEx?relay
    536                }
    537              HalLedBlink(HAL_LED_1,1,50,300);
   \                     ??TransmitApp_ProcessEvent_17:
   \   00012E                ; Setup parameters for call to function HalLedBlink
   \   00012E   7C2C         MOV     R4,#0x2c
   \   000130   7D01         MOV     R5,#0x1
   \   000132   7B32         MOV     R3,#0x32
   \   000134   7A01         MOV     R2,#0x1
   \   000136   7901         MOV     R1,#0x1
   \   000138   12....       LCALL   ??HalLedBlink?relay
    538              
    539              
    540              
    541              
    542              #if defined ( GTA_WWSB_R1 )||(GTA_WFSB_R1) //´«¸ÐÆ÷   
    543              temp=ReadADC(4);//¶ÁµçÑ¹Öµ
    544              data[0]=1;
    545              if(temp>3000)
    546                data[1]=0x01;
    547              else
    548                data[1]=0x00;
    549              //data[1]=LO_UINT16(temp);
    550              //data[2]=HI_UINT16(temp);
    551          #if defined GTA_WWSB_R1
    552              NativeAddr = 0x11;//ÓêµÎ´«¸ÐÆ÷µØÖ·
    553          #elif defined GTA_WFSB_R1
    554              NativeAddr = 0x16;//»ðÑæ´«¸ÐÆ÷µØÖ·
    555          #endif
    556              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    557              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    558              #endif
    559              
    560              
    561              #if defined (GTA_WVSB_R1)||(GTA_WIRSB_R1)
    562              temp=ReadADC(4);
    563              data[0]=1;
    564              if(temp>3000)
    565                data[1]=0x00;
    566              else
    567                data[1]=0x01;
    568          #if defined GTA_WVSB_R1
    569              NativeAddr = 0x13;//Çã½Ç´«¸ÐÆ÷µØÖ·
    570          #elif defined GTA_WIRSB_R1
    571              NativeAddr = 0x15;//ºìÍâ´«¸ÐÆ÷µØÖ·
    572          #endif
    573              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    574              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    575              #endif
    576              
    577              #if defined ( GTA_WUSB_R1 )
    578              IO_DIR_PORT_PIN(0, 6, IO_IN);
    579              data[0]=1;
    580              if(IO_SENSOR)
    581                data[1]=0x01;
    582              else
    583                data[1]=0x00;
    584              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    585              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    586              #endif
    587              
    588              #if defined (GTA_WISB_R1)
    589              temp=ReadADC(4);//
    590              data[0]=2;
    591              data[1]=LO_UINT16(temp);
    592              data[2]=HI_UINT16(temp);
    593              NativeAddr = 0x14;//¹âÕÕ´«¸ÐÆ÷µØÖ·
    594              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,3);//´ò°ü
    595              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    596              #endif
    597              
    598              
    599              #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷  
    600              
    601              readTempHumi();
    602              data[0]=4;
    603              data[1]=humi_val[0];//L
    604              data[2]=humi_val[1];//H
    605              data[3]=temp_val[0];
    606              data[4]=temp_val[1];
    607              NativeAddr = 0x12;//ÎÂÊª¶È´«¸ÐÆ÷µØÖ·
    608              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,5);//´ò°ü
    609              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    610              HalUARTWrite(HAL_UART_PORT_0, Frame, FrameLen);
    611              
    612              #endif
    613              
    614              //¿ÉÈ¼ÆøÌåCombustible gas¡¢¾Æ¾«Alcohol¡¢ÑÌÎíSmoke
    615          #if defined ( HX_WCGSB_R1 ) || (HX_ALCOHOL_SENSOR) || (HX_SMOKE_SENSOR)
    616              IO_DIR_PORT_PIN(0, 1, IO_IN);
    617              data[0]=1;
    618              if(IO_COMBUSTIBLE_GAS_PORT)
    619                data[1] = 1;
    620              else
    621                data[1] = 0;
    622          #if defined HX_SMOKE_SENSOR
    623              NativeAddr = 0x21;//ÑÌÎí´«¸ÐÆ÷µØÖ·
    624          #elif defined HX_ALCOHOL_SENSOR
    625              NativeAddr = 0x20;//¾Æ¾«´«¸ÐÆ÷µØÖ·
    626          #elif defined HX_WCGSB_R1
    627              NativeAddr = 0x18;//¿ÉÈ¼ÆøÌå´«¸ÐÆ÷µØÖ·
    628          #endif
    629              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    630              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    631          #endif
    632              
    633          #if defined ( HX_18B20_R1 )
    634              uint8* pTempData;
    635              read_data();
    636              pTempData = DataChange();
    637              data[0]=4;
    638              data[1]=*pTempData++;//temperature H
    639              data[2]=*pTempData;//temperature L
    640              NativeAddr = 0x19;//ÉèÖÃ18b20µÄZigBeeµØÖ·Îª19h
    641              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,3);//´ò°ü
    642              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    643              HalUARTWrite(HAL_UART_PORT_0, Frame, FrameLen);
    644          #endif
    645              
    646              
    647              return (events ^ TRANSMITAPP_START_REPORT_EVT);
   \   00013B   EE           MOV     A,R6
   \   00013C   6410         XRL     A,#0x10
   \                     ??TransmitApp_ProcessEvent_12:
   \   00013E   FA           MOV     R2,A
   \   00013F   EF           MOV     A,R7
   \                     ??TransmitApp_ProcessEvent_9:
   \   000140   FB           MOV     R3,A
   \   000141   8004         SJMP    ??TransmitApp_ProcessEvent_18
    648            }
    649            
    650            
    651          
    652            // Discard unknown events
    653            return 0;
   \                     ??TransmitApp_ProcessEvent_16:
   \   000143   7A00         MOV     R2,#0x0
   \   000145   7B00         MOV     R3,#0x0
   \                     ??TransmitApp_ProcessEvent_18:
   \   000147                REQUIRE ?Subroutine1
   \   000147                ; // Fall through to label ?Subroutine1
    654          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    655          
    656          /*********************************************************************
    657           * Event Generation Functions
    658           */
    659          /*********************************************************************
    660           * @fn      TransmitApp_ProcessZDOMsgs()
    661           *
    662           * @brief   Process response messages
    663           *
    664           * @param   none
    665           *
    666           * @return  none
    667           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    668          void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     TransmitApp_ProcessZDOMsgs:
    669          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    670            switch ( inMsg->clusterID )
   \   000005   EA           MOV     A,R2
   \   000006   240C         ADD     A,#0xc
   \   000008   F582         MOV     DPL,A
   \   00000A   EB           MOV     A,R3
   \   00000B   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 1,A
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for TransmitApp_ProcessZDOMsgs>_0`:
   \   000019   0000         DW        0
   \   00001B   0300         DW        3
   \   00001D   A100         DW        161
   \   00001F   ....         DW        ??TransmitApp_ProcessZDOMsgs_0
   \   000021   0680         DW        32774
   \   000023   ....         DW        ??TransmitApp_ProcessZDOMsgs_1
   \   000025   2080         DW        32800
   \   000027   ....         DW        ??TransmitApp_ProcessZDOMsgs_2
   \   000029   ....         DW        ??TransmitApp_ProcessZDOMsgs_3
    671            {
    672              case End_Device_Bind_rsp:
    673                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
   \                     ??TransmitApp_ProcessZDOMsgs_2:
   \   00002B   EA           MOV     A,R2
   \   00002C   2413         ADD     A,#0x13
   \   00002E   F582         MOV     DPL,A
   \   000030   EB           MOV     A,R3
   \   000031   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000034   7015         JNZ     ??TransmitApp_ProcessZDOMsgs_4
    674                {
    675                  // Light LED
    676                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000036                ; Setup parameters for call to function HalLedSet
   \   000036   7A01         MOV     R2,#0x1
   \   000038   7908         MOV     R1,#0x8
   \   00003A   12....       LCALL   ??HalLedSet?relay
    677                  osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT );
   \   00003D                ; Setup parameters for call to function osal_stop_timerEx
   \   00003D   7A08         MOV     R2,#0x8
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   ??osal_stop_timerEx?relay
   \   000049   8067         SJMP    ??TransmitApp_ProcessZDOMsgs_3
    678          
    679                }
    680          #if defined(BLINK_LEDS)
    681                else
    682                {
    683                  // Flash LED to show failure
    684                  //HalLedSet ( HAL_LED_2, HAL_LED_MODE_FLASH );//4
    685                  HalLedBlink(HAL_LED_2,1,50,1000);//Ö¸Ê¾°ó¶¨ÓÐÎó
   \                     ??TransmitApp_ProcessZDOMsgs_4:
   \   00004B                ; Setup parameters for call to function HalLedBlink
   \   00004B   7CE8         MOV     R4,#-0x18
   \   00004D   7D03         MOV     R5,#0x3
   \   00004F   7B32         MOV     R3,#0x32
   \   000051   7A01         MOV     R2,#0x1
   \   000053   7902         MOV     R1,#0x2
   \   000055   8058         SJMP    ??TransmitApp_ProcessZDOMsgs_5
    686                }
    687          #endif
    688                break;
    689          
    690              case Match_Desc_rsp:
    691                {
    692                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??TransmitApp_ProcessZDOMsgs_1:
   \   000057                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000057   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   00005A   8A..         MOV     ?V0 + 0,R2
   \   00005C   8B..         MOV     ?V0 + 1,R3
   \   00005E   AE..         MOV     R6,?V0 + 0
   \   000060   AF..         MOV     R7,?V0 + 1
    693                  if ( pRsp )
   \   000062   EE           MOV     A,R6
   \   000063   4F           ORL     A,R7
   \   000064   604C         JZ      ??TransmitApp_ProcessZDOMsgs_3
    694                  {
    695                    if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   702C         JNZ     ??TransmitApp_ProcessZDOMsgs_6
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   6026         JZ      ??TransmitApp_ProcessZDOMsgs_6
    696                    {
    697                      TransmitApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000073   90....       MOV     DPTR,#TransmitApp_DstAddr + 8
   \   000076   7402         MOV     A,#0x2
   \   000078   12....       LCALL   ?Subroutine9 & 0xFFFF
    698                      TransmitApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \                     ??CrossCallReturnLabel_4:
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F8           MOV     R0,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080   90....       MOV     DPTR,#TransmitApp_DstAddr
   \   000083   E8           MOV     A,R0
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E9           MOV     A,R1
   \   000087   12....       LCALL   ?Subroutine9 & 0xFFFF
    699                      // Take the first endpoint, Can be changed to search through endpoints
    700                      TransmitApp_DstAddr.endPoint = pRsp->epList[0];
   \                     ??CrossCallReturnLabel_5:
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   90....       MOV     DPTR,#TransmitApp_DstAddr + 9
   \   000091   F0           MOVX    @DPTR,A
    701          
    702                      // Light LED
    703                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000092                ; Setup parameters for call to function HalLedSet
   \   000092   7A01         MOV     R2,#0x1
   \   000094   7908         MOV     R1,#0x8
   \   000096   12....       LCALL   ??HalLedSet?relay
    704                    }
    705                    osal_mem_free( pRsp );
   \                     ??TransmitApp_ProcessZDOMsgs_6:
   \   000099                ; Setup parameters for call to function osal_mem_free
   \   000099   EE           MOV     A,R6
   \   00009A   FA           MOV     R2,A
   \   00009B   EF           MOV     A,R7
   \   00009C   FB           MOV     R3,A
   \   00009D   12....       LCALL   ??osal_mem_free?relay
   \   0000A0   8010         SJMP    ??TransmitApp_ProcessZDOMsgs_3
    706                  }
    707                }
    708                break;
    709                
    710            case TRANSMITAPP_CLUSTERID_TESTMSG://microdjg
    711              {  
    712                //osal_set_event( TransmitApp_TaskID, AF_INCOMING_MSG_CMD );///
    713                TransmitApp_ProcessZDOIncomingMsgs(inMsg);
   \                     ??TransmitApp_ProcessZDOMsgs_0:
   \   0000A2                ; Setup parameters for call to function TransmitApp_ProcessZDOIncomingMsgs
   \   0000A2   12....       LCALL   ??TransmitApp_ProcessZDOIncomingMsgs?relay
    714                HalLedBlink(HAL_LED_4,1,50,500);///
   \   0000A5                ; Setup parameters for call to function HalLedBlink
   \   0000A5   7CF4         MOV     R4,#-0xc
   \   0000A7   7D01         MOV     R5,#0x1
   \   0000A9   7B32         MOV     R3,#0x32
   \   0000AB   7A01         MOV     R2,#0x1
   \   0000AD   7908         MOV     R1,#0x8
   \                     ??TransmitApp_ProcessZDOMsgs_5:
   \   0000AF   12....       LCALL   ??HalLedBlink?relay
    715              }
    716            }
    717          }
   \                     ??TransmitApp_ProcessZDOMsgs_3:
   \   0000B2   02....       LJMP    ??Subroutine16_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    718          
    719          /*********************************************************************
    720           * @fn      TransmitApp_HandleKeys
    721           *
    722           * @brief   Handles all key events for this device.
    723           *
    724           * @param   shift - true if in shift/alt.
    725           * @param   keys - bit field for key events. Valid entries:
    726           *                 EVAL_SW4
    727           *                 EVAL_SW3
    728           *                 EVAL_SW2
    729           *                 EVAL_SW1
    730           *
    731           * @return  none
    732           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    733          void TransmitApp_HandleKeys( byte shift, byte keys )
   \                     TransmitApp_HandleKeys:
    734          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    735            //zAddrType_t dstAddr;
    736                
    737              if ( keys == HAL_KEY_INT_1)
   \   000007   74E1         MOV     A,#-0x1f
   \   000009   6E           XRL     A,R6
   \   00000A   702B         JNZ     ??TransmitApp_HandleKeys_0
    738              {
    739                #if defined(GTA_DEBUG)
    740                Test_Mark=0x01;
    741                Test_Buf[0] = 0x99;
    742                Test_Buf[1] = 0x88;
    743                Test_Buf[2] = 0x77;
    744                Test_Buf[3] = 0x66;
    745                HalUARTWrite(HAL_UART_PORT_0,Test_Buf,15);
    746                #endif
    747                Flag_ReportData=!Flag_ReportData;
   \   00000C   90....       MOV     DPTR,#Flag_ReportData
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7004         JNZ     ??TransmitApp_HandleKeys_1
   \   000012   7401         MOV     A,#0x1
   \   000014   8001         SJMP    ??TransmitApp_HandleKeys_2
   \                     ??TransmitApp_HandleKeys_1:
   \   000016   E4           CLR     A
   \                     ??TransmitApp_HandleKeys_2:
   \   000017   F0           MOVX    @DPTR,A
    748                HalLedBlink (HAL_LED_1, 1, 50, 100);
   \   000018                ; Setup parameters for call to function HalLedBlink
   \   000018   7C64         MOV     R4,#0x64
   \   00001A   7D00         MOV     R5,#0x0
   \   00001C   7B32         MOV     R3,#0x32
   \   00001E   7A01         MOV     R2,#0x1
   \   000020   7901         MOV     R1,#0x1
   \   000022   12....       LCALL   ??HalLedBlink?relay
    749                if(Flag_ReportData)
   \   000025   90....       MOV     DPTR,#Flag_ReportData
   \   000028   E0           MOVX    A,@DPTR
   \   000029   600C         JZ      ??TransmitApp_HandleKeys_0
    750                {
    751                  //osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 2000);
    752                  osal_set_event( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT );
   \   00002B                ; Setup parameters for call to function osal_set_event
   \   00002B   7A10         MOV     R2,#0x10
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   ??osal_set_event?relay
    753                }
    754              }
    755           //}
    756          }
   \                     ??TransmitApp_HandleKeys_0:
   \   000037                REQUIRE ?Subroutine2
   \   000037                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    757          
    758          /*********************************************************************
    759           * LOCAL FUNCTIONS
    760           */
    761          
    762          /*********************************************************************
    763           * @fn      TransmitApp_MessageMSGCB
    764           *
    765           * @brief   Data message processor callback.  This function processes
    766           *          any incoming data - probably from other devices.  So, based
    767           *          on cluster ID, perform the intended action.
    768           *
    769           * @param   none
    770           *
    771           * @return  none
    772           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    773          void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     TransmitApp_MessageMSGCB:
    774          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    775            uint16 i;
                          ^
Warning[Pe177]: variable "i" was declared but never referenced
    776            uint8 error = FALSE;
                         ^
Warning[Pe177]: variable "error" was declared but never referenced
    777          //HalLedBlink (HAL_LED_2, 1, 50, 300);
    778          //HalUARTWrite(HAL_UART_PORT_0,pkt->cmd.Data,pkt->cmd.DataLength);//microdjg
    779            switch ( pkt->clusterId )
    780            {
    781              case TRANSMITAPP_CLUSTERID_TESTMSG:
    782                
    783                //HalUARTWrite(HAL_UART_PORT_0,pkt->cmd.Data,pkt->cmd.DataLength);//microdjg
    784                //HalLedBlink ( HAL_LED_2, 1, 50, 300 );//Blink to indicate RX
    785                break;
    786            default:break;
    787            }
    788          }
   \   000000   02....       LJMP    ?BRET
    789          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    790          void TransmitApp_ProcessZDOIncomingMsgs( zdoIncomingMsg_t *inMsg )
   \                     TransmitApp_ProcessZDOIncomingMsgs:
    791          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    792              ModBusFrame_t RxFrame;
    793              uint16 temp;
                            ^
Warning[Pe177]: variable "temp" was declared but never referenced
    794              //uint8 recdatabuf[20];
    795              HalLedBlink (HAL_LED_2, 1, 50, 300);
   \   00000E                ; Setup parameters for call to function HalLedBlink
   \   00000E   7C2C         MOV     R4,#0x2c
   \   000010   7D01         MOV     R5,#0x1
   \   000012   7B32         MOV     R3,#0x32
   \   000014   7A01         MOV     R2,#0x1
   \   000016   7902         MOV     R1,#0x2
   \   000018   12....       LCALL   ??HalLedBlink?relay
    796              uint8 i;
                           ^
Warning[Pe177]: variable "i" was declared but never referenced
    797              //#if defined(GTA_DEBUG)
    798              //  uint8 i;
    799              //#endif
    800              
    801              //HalUARTWrite(HAL_UART_PORT_0,inMsg->asdu,inMsg->asduLen);//²âÊÔ
    802              
    803              if(ZG_DEVICE_COORDINATOR_TYPE)
   \   00001B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   7020         JNZ     ??TransmitApp_ProcessZDOIncomingMsgs_0
    804              {
    805                
    806                if(inMsg->asduLen!=0&&inMsg->asdu[0]!=0)
   \   000021   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000024   6042         JZ      ??TransmitApp_ProcessZDOIncomingMsgs_1
   \   000026   EE           MOV     A,R6
   \   000027   2413         ADD     A,#0x13
   \   000029   F582         MOV     DPL,A
   \   00002B   EF           MOV     A,R7
   \   00002C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00002F   6037         JZ      ??TransmitApp_ProcessZDOIncomingMsgs_1
    807                {/*
    808                  for(i=0;i<inMsg->asduLen;i++)
    809                  {
    810                    recdatabuf[i]=inMsg->asdu[i];
    811                  } 
    812                  HalUARTWrite(HAL_UART_PORT_0,recdatabuf,inMsg->asduLen);
    813                  */
    814                  HalUARTWrite(HAL_UART_PORT_0,inMsg->asdu,inMsg->asduLen);
   \   000031                ; Setup parameters for call to function HalUARTWrite
   \   000031   12....       LCALL   ?Subroutine13 & 0xFFFF
    815                }
    816                
    817                //HalUARTWrite(HAL_UART_PORT_0,recdatabuf,inMsg->asduLen);
    818                #if defined(GTA_DEBUG)
    819                if(Test_Mark==0x01)
    820                {
    821                  for(i=0;i<15;i++)
    822                  {
    823                    Test_Buf[i]=0;
    824                  }
    825                  for(i=0;i<inMsg->asduLen;i++)
    826                  {
    827                    Test_Buf[i]=inMsg->asdu[i];
    828                  }
    829                  Test_Mark=0;
    830                }
    831                
    832                #endif
    833              }
   \                     ??CrossCallReturnLabel_27:
   \   000034   FC           MOV     R4,A
   \   000035   7D00         MOV     R5,#0x0
   \   000037   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   ??HalUARTWrite?relay
   \   00003F   8027         SJMP    ??TransmitApp_ProcessZDOIncomingMsgs_1
    834              else
    835              {
    836                FrameUnPackage(inMsg->asdu,&RxFrame);//check Package
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_0:
   \   000041                ; Setup parameters for call to function FrameUnPackage
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   AC82         MOV     R4,DPL
   \   000049   AD83         MOV     R5,DPH
   \   00004B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00004E   12....       LCALL   ??FrameUnPackage?relay
    837                if(RxFrame.COMFIRM==FRAME_CHECK_RIGHT)
   \   000051   7417         MOV     A,#0x17
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E0           MOVX    A,@DPTR
   \   000057   6401         XRL     A,#0x1
   \   000059   700D         JNZ     ??TransmitApp_ProcessZDOIncomingMsgs_1
    838                {
    839                  ReportData(&RxFrame);
   \   00005B                ; Setup parameters for call to function ReportData
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   AA82         MOV     R2,DPL
   \   000063   AB83         MOV     R3,DPH
   \   000065   12....       LCALL   ??ReportData?relay
    840                  
    841                }
    842              } 
    843              
    844          }
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_1:
   \   000068   7418         MOV     A,#0x18
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006D   80..         SJMP    ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FB           MOV     R3,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine18_0
   \   000003                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EE           MOV     A,R6
   \   000001   2410         ADD     A,#0x10
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006                REQUIRE ??Subroutine19_0
   \   000006                ; // Fall through to label ??Subroutine19_0
    845          
    846          /*********************************************************************
    847           * @fn      TransmitApp_SendTheMessage
    848           *
    849           * @brief   Send "the" message.
    850           *
    851           * @param   none
    852           *
    853           * @return  none
    854           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    855          void TransmitApp_SendTheMessage( void )
   \                     TransmitApp_SendTheMessage:
    856          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    857            uint16 len;
    858            uint8 tmp;
    859          
    860            do {
    861              // put the sequence number in the message
    862              tmp = HI_UINT8( TransmitApp_TransID );
   \                     ??TransmitApp_SendTheMessage_0:
   \   000005   90....       MOV     DPTR,#TransmitApp_TransID
   \   000008   E0           MOVX    A,@DPTR
   \   000009   C4           SWAP    A
   \   00000A   540F         ANL     A,#0xf
   \   00000C   FE           MOV     R6,A
    863              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \   00000D   C3           CLR     C
   \   00000E   940A         SUBB    A,#0xa
   \   000010   5004         JNC     ??TransmitApp_SendTheMessage_1
   \   000012   7830         MOV     R0,#0x30
   \   000014   8002         SJMP    ??TransmitApp_SendTheMessage_2
   \                     ??TransmitApp_SendTheMessage_1:
   \   000016   7837         MOV     R0,#0x37
    864              TransmitApp_Msg[2] = tmp;
   \                     ??TransmitApp_SendTheMessage_2:
   \   000018   E8           MOV     A,R0
   \   000019   2E           ADD     A,R6
   \   00001A   90....       MOV     DPTR,#TransmitApp_Msg + 2
   \   00001D   F0           MOVX    @DPTR,A
    865              tmp = LO_UINT8( TransmitApp_TransID );
   \   00001E   90....       MOV     DPTR,#TransmitApp_TransID
   \   000021   E0           MOVX    A,@DPTR
   \   000022   540F         ANL     A,#0xf
   \   000024   FE           MOV     R6,A
    866              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \   000025   C3           CLR     C
   \   000026   940A         SUBB    A,#0xa
   \   000028   5004         JNC     ??TransmitApp_SendTheMessage_3
   \   00002A   7830         MOV     R0,#0x30
   \   00002C   8002         SJMP    ??TransmitApp_SendTheMessage_4
   \                     ??TransmitApp_SendTheMessage_3:
   \   00002E   7837         MOV     R0,#0x37
    867              TransmitApp_Msg[3] = tmp;
   \                     ??TransmitApp_SendTheMessage_4:
   \   000030   E8           MOV     A,R0
   \   000031   2E           ADD     A,R6
   \   000032   90....       MOV     DPTR,#TransmitApp_Msg + 3
   \   000035   F0           MOVX    @DPTR,A
    868          
    869              len = TransmitApp_MaxDataLength;
    870          
    871          #if defined ( TRANSMITAPP_RANDOM_LEN )
    872              len = (uint8)(osal_rand() & 0x7F);
    873              if( len > TransmitApp_MaxDataLength || len == 0 )
    874                len = TransmitApp_MaxDataLength;
    875              else if ( len < 4 )
    876                len = 4;
    877          #endif
    878          	
    879              tmp = AF_DataRequest( &TransmitApp_DstAddr, &TransmitApp_epDesc,
    880                                     TRANSMITAPP_CLUSTERID_TESTMSG,
    881                                     len, TransmitApp_Msg,
    882                                    &TransmitApp_TransID,
    883                                     TRANSMITAPP_TX_OPTIONS,
    884                                     AF_DEFAULT_RADIUS );
   \   000036                ; Setup parameters for call to function AF_DataRequest
   \   000036   75..1E       MOV     ?V0 + 0,#0x1e
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003E   75....       MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
   \   000041   75....       MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   75....       MOV     ?V0 + 0,#TransmitApp_Msg & 0xff
   \   00004C   75....       MOV     ?V0 + 1,#(TransmitApp_Msg >> 8) & 0xff
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   000057   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005A   75..A1       MOV     ?V0 + 0,#-0x5f
   \   00005D   75..00       MOV     ?V0 + 1,#0x0
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   7920         MOV     R1,#0x20
   \   000067   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000069   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   00006B   7A..         MOV     R2,#TransmitApp_DstAddr & 0xff
   \   00006D   7B..         MOV     R3,#(TransmitApp_DstAddr >> 8) & 0xff
   \   00006F   12....       LCALL   ??AF_DataRequest?relay
   \   000072   7409         MOV     A,#0x9
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   E9           MOV     A,R1
   \   000078   FE           MOV     R6,A
    885              HalLedBlink ( HAL_LED_3, 1, 50, 200 );//Blink to indicate TX  microdjg
   \   000079                ; Setup parameters for call to function HalLedBlink
   \   000079   7CC8         MOV     R4,#-0x38
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   7B32         MOV     R3,#0x32
   \   00007F   7A01         MOV     R2,#0x1
   \   000081   7904         MOV     R1,#0x4
   \   000083   12....       LCALL   ??HalLedBlink?relay
    886          
    887          #if defined ( TRANSMITAPP_RANDOM_LEN )
    888              if ( tmp == afStatus_SUCCESS )
    889              {
    890                txAccum += len;
    891              }
    892          #endif
    893          
    894              if ( timesToSend )
   \   000086   90....       MOV     DPTR,#timesToSend
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   600A         JZ      ??TransmitApp_SendTheMessage_5
    895              {
    896                timesToSend--;
    897              }
    898            } while ( (timesToSend != 0) && (afStatus_SUCCESS == tmp) );
   \   00008C   14           DEC     A
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   6006         JZ      ??TransmitApp_SendTheMessage_5
   \   000090   EE           MOV     A,R6
   \   000091   7003         JNZ     $+5
   \   000093   02....       LJMP    ??TransmitApp_SendTheMessage_0 & 0xFFFF
    899          
    900            if ( afStatus_SUCCESS == tmp )
   \                     ??TransmitApp_SendTheMessage_5:
   \   000096   EE           MOV     A,R6
   \   000097   700E         JNZ     ??TransmitApp_SendTheMessage_6
    901            {
    902              pktCounter++;
   \   000099   90....       MOV     DPTR,#pktCounter
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   2401         ADD     A,#0x1
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   3400         ADDC    A,#0x0
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   8010         SJMP    ??TransmitApp_SendTheMessage_7
    903            }
    904            else
    905            {
    906              // Error, so wait (10 mSec) and try again.
    907              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_SEND_ERR_EVT, 10 );
   \                     ??TransmitApp_SendTheMessage_6:
   \   0000A7                ; Setup parameters for call to function osal_start_timerEx
   \   0000A7   7C0A         MOV     R4,#0xa
   \   0000A9   7D00         MOV     R5,#0x0
   \   0000AB   7A04         MOV     R2,#0x4
   \   0000AD   7B00         MOV     R3,#0x0
   \   0000AF   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   12....       LCALL   ??osal_start_timerEx?relay
    908            }
    909          }
   \                     ??TransmitApp_SendTheMessage_7:
   \   0000B7   80..         SJMP    ??Subroutine16_0
    910          
    911          /*********************************************************************
    912           * @fn      TransmitApp_ChangeState
    913           *
    914           * @brief   Toggle the Sending/Waiting state flag
    915           *
    916           * @param   none
    917           *
    918           * @return  none
    919           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    920          void TransmitApp_ChangeState( void )
   \                     TransmitApp_ChangeState:
    921          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    922            if ( TransmitApp_State == TRANSMITAPP_STATE_WAITING )
   \   000004   90....       MOV     DPTR,#TransmitApp_State
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700D         JNZ     ??TransmitApp_ChangeState_0
    923            {
    924              TransmitApp_State = TRANSMITAPP_STATE_SENDING;
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
    925              TransmitApp_SetSendEvt();
   \   00000D                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   00000D   12....       LCALL   ??TransmitApp_SetSendEvt?relay
    926              timesToSend = TRANSMITAPP_INITIAL_MSG_COUNT;
   \   000010   90....       MOV     DPTR,#timesToSend
   \   000013   7402         MOV     A,#0x2
   \   000015   8001         SJMP    ??TransmitApp_ChangeState_1
    927            }
    928            else
    929            {
    930              TransmitApp_State = TRANSMITAPP_STATE_WAITING;
   \                     ??TransmitApp_ChangeState_0:
   \   000017   E4           CLR     A
   \                     ??TransmitApp_ChangeState_1:
   \   000018   F0           MOVX    @DPTR,A
    931            }
    932          }
   \   000019                REQUIRE ?Subroutine3
   \   000019                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    933          
    934          /*********************************************************************
    935           * @fn      TransmitApp_SetSendEvt
    936           *
    937           * @brief   Set the event flag
    938           *
    939           * @param   none
    940           *
    941           * @return  none
    942           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    943          void TransmitApp_SetSendEvt( void )
   \                     TransmitApp_SetSendEvt:
    944          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    945          #if defined( TRANSMITAPP_DELAY_SEND )
    946            // Adds a delay to sending the data
    947            osal_start_timerEx( TransmitApp_TaskID,
    948                              TRANSMITAPP_SEND_MSG_EVT, TRANSMITAPP_SEND_DELAY );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   7CC8         MOV     R4,#-0x38
   \   000006   7D00         MOV     R5,#0x0
   \   000008   7A01         MOV     R2,#0x1
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??osal_start_timerEx?relay
    949          #else
    950            // No Delay - just send the data
    951            osal_set_event( TransmitApp_TaskID, TRANSMITAPP_SEND_MSG_EVT );
    952          #endif
    953          }
   \   000014   80..         SJMP    ?Subroutine3
    954          
    955          /*********************************************************************
    956           * @fn      TransmitApp_DisplayResults
    957           *
    958           * @brief   Display the results and clear the accumulators
    959           *
    960           * @param   none
    961           *
    962           * @return  none
    963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    964          void TransmitApp_DisplayResults( void )
   \                     TransmitApp_DisplayResults:
    965          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    966          #ifdef LCD_SUPPORTED
    967            #define LCD_W  16
    968            uint32 rxShdw, txShdw, tmp;
    969            byte lcd_buf[LCD_W+1];
    970            byte idx;
    971          #endif
    972          
    973            // The OSAL timers are not real-time, so calculate the actual time expired.
    974            uint32 msecs = osal_GetSystemClock() - clkShdw;
   \   000005                ; Setup parameters for call to function osal_GetSystemClock
   \   000005   12....       LCALL   ??osal_GetSystemClock?relay
    975            clkShdw = osal_GetSystemClock();
   \   000008                ; Setup parameters for call to function osal_GetSystemClock
   \   000008   12....       LCALL   ??osal_GetSystemClock?relay
   \   00000B   90....       MOV     DPTR,#clkShdw
   \   00000E   12....       LCALL   ?XSTORE_R2345
    976          
    977            rxTotal += rxAccum;
   \   000011   90....       MOV     DPTR,#rxAccum
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?L_MOV_X
   \   000019   90....       MOV     DPTR,#rxTotal
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?L_ADD_TO_X
    978            txTotal += txAccum;
   \   000021   90....       MOV     DPTR,#txAccum
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_MOV_X
   \   000029   90....       MOV     DPTR,#txTotal
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?L_ADD_TO_X
    979          
    980          #if defined ( LCD_SUPPORTED )
    981            rxShdw = (rxAccum * 1000 + msecs/2) / msecs;
    982            txShdw = (txAccum * 1000 + msecs/2) / msecs;
    983          
    984            osal_memset( lcd_buf, ' ', LCD_W );
    985            lcd_buf[LCD_W] = NULL;
    986          
    987            idx = 4;
    988            tmp = (rxShdw >= 100000) ? 99999 : rxShdw;
    989            do
    990            {
    991              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
    992              tmp /= 10;
    993            } while ( tmp );
    994          
    995            idx = LCD_W-1;
    996            tmp = rxTotal;
    997            do
    998            {
    999              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
   1000              tmp /= 10;
   1001            } while ( tmp );
   1002          
   1003            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_1 );
   1004            osal_memset( lcd_buf, ' ', LCD_W );
   1005          
   1006            idx = 4;
   1007            tmp = (txShdw >= 100000) ? 99999 : txShdw;
   1008            do
   1009            {
   1010              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
   1011              tmp /= 10;
   1012            } while ( tmp );
   1013          
   1014            idx = LCD_W-1;
   1015            tmp = txTotal;
   1016            do
   1017            {
   1018              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
   1019              tmp /= 10;
   1020            } while ( tmp );
   1021          
   1022            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
   1023          
   1024          #elif defined( MT_TASK )
   1025            DEBUG_INFO( COMPID_APP, SEVERITY_INFORMATION, 3,
   1026                        rxAccum, (uint16)msecs, (uint16)rxTotal );
   1027          #else
   1028            (void)msecs;  // Not used when no output
   1029          #endif
   1030          
   1031            if ( (rxAccum == 0) && (txAccum == 0) )
   \   000031   90....       MOV     DPTR,#rxAccum
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?L_MOV_X
   \   000039   E5..         MOV     A,?V0 + 0
   \   00003B   45..         ORL     A,?V0 + 1
   \   00003D   45..         ORL     A,?V0 + 2
   \   00003F   45..         ORL     A,?V0 + 3
   \   000041   7023         JNZ     ??TransmitApp_DisplayResults_0
   \   000043   90....       MOV     DPTR,#txAccum
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?L_MOV_X
   \   00004B   E5..         MOV     A,?V0 + 0
   \   00004D   45..         ORL     A,?V0 + 1
   \   00004F   45..         ORL     A,?V0 + 2
   \   000051   45..         ORL     A,?V0 + 3
   \   000053   7011         JNZ     ??TransmitApp_DisplayResults_0
   1032            {
   1033              osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT );
   \   000055                ; Setup parameters for call to function osal_stop_timerEx
   \   000055   7A02         MOV     R2,#0x2
   \   000057   7B00         MOV     R3,#0x0
   \   000059   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   12....       LCALL   ??osal_stop_timerEx?relay
   1034              timerOn = FALSE;
   \   000061   90....       MOV     DPTR,#timerOn
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
   1035            }
   1036          
   1037            rxAccum = txAccum = 0;
   \                     ??TransmitApp_DisplayResults_0:
   \   000066   90....       MOV     DPTR,#txAccum
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   F0           MOVX    @DPTR,A
   \   000071   90....       MOV     DPTR,#rxAccum
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   F0           MOVX    @DPTR,A
   1038          }
   \   00007B                REQUIRE ?Subroutine4
   \   00007B                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1039          
   1040          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1041          void initUart(halUARTCBack_t pf)
   \                     initUart:
   1042          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1043            halUARTCfg_t uartConfig;
   1044            
   1045            uartConfig.configured           = TRUE;              
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7401         MOV     A,#0x1
   \   000011   F0           MOVX    @DPTR,A
   1046            uartConfig.baudRate             = HAL_UART_BR_9600;//HAL_UART_BR_38400;  //HAL_UART_BR_19200;
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
   1047            uartConfig.flowControl          = FALSE;              
   \   000017   7402         MOV     A,#0x2
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E4           CLR     A
   \   00001D   F0           MOVX    @DPTR,A
   1048            uartConfig.flowControlThreshold = 48;
   \   00001E   7403         MOV     A,#0x3
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7430         MOV     A,#0x30
   \   000025   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   1049            uartConfig.rx.maxBufSize        = RX_BUF_LEN;
   \                     ??CrossCallReturnLabel_20:
   \   000028   740A         MOV     A,#0xa
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   12....       LCALL   ?Subroutine8 & 0xFFFF
   1050            uartConfig.tx.maxBufSize        = 128;
   \                     ??CrossCallReturnLabel_21:
   \   000030   7412         MOV     A,#0x12
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?Subroutine8 & 0xFFFF
   1051            
   1052            uartConfig.idleTimeout          = 6;   
   \                     ??CrossCallReturnLabel_22:
   \   000038   7405         MOV     A,#0x5
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   7406         MOV     A,#0x6
   \   00003F   F0           MOVX    @DPTR,A
   1053            uartConfig.intEnable            = TRUE;              
   \   000040   7416         MOV     A,#0x16
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   7401         MOV     A,#0x1
   \   000047   F0           MOVX    @DPTR,A
   1054            uartConfig.callBackFunc         = pf;
   \   000048   741B         MOV     A,#0x1b
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   EA           MOV     A,R2
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   EB           MOV     A,R3
   \   000051   12....       LCALL   ?Subroutine6 & 0xFFFF
   1055            
   1056            HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
   \                     ??CrossCallReturnLabel_1:
   \   000054   7900         MOV     R1,#0x0
   \   000056   12....       LCALL   ??HalUARTOpen?relay
   1057          }
   \   000059   741D         MOV     A,#0x1d
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005E   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7480         MOV     A,#-0x80
   \   000002                REQUIRE ??Subroutine17_0
   \   000002                ; // Fall through to label ??Subroutine17_0
   1058          
   1059          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1060          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
   1061          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 128
   \   000005   7480         MOV     A,#-0x80
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1062            uint8 pBuf[RX_BUF_LEN];
   1063            uint16 len;
   1064            static uint16 destAddr;
                                 ^
Warning[Pe177]: variable "destAddr" was declared but never referenced
   1065            ModBusFrame_t *pRxFrame;
                                  ^
Warning[Pe177]: variable "pRxFrame" was declared but never referenced
   1066            zAddrType_t dstAddr;
                               ^
Warning[Pe177]: variable "dstAddr" was declared but never referenced
   1067            #if defined (GTA_WHFRFID_R1) 
   1068            RC623Frame_t *pRC623Frame;
   1069            uint8 Frame[15];//ÁÙÊ±Éè¶¨µÄ´óÐ¡  
   1070            uint8 data[10];//
   1071            uint16 FrameLen;
   1072            uint8 i;
   1073            #endif
   1074           
   1075              len = HalUARTRead( HAL_UART_PORT_0, pBuf, RX_BUF_LEN );
   \   00000A                ; Setup parameters for call to function HalUARTRead
   \   00000A   7C80         MOV     R4,#-0x80
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AA82         MOV     R2,DPL
   \   000016   AB83         MOV     R3,DPH
   \   000018   7900         MOV     R1,#0x0
   \   00001A   12....       LCALL   ??HalUARTRead?relay
   \   00001D   8A..         MOV     ?V0 + 0,R2
   \   00001F   8B..         MOV     ?V0 + 1,R3
   1076              if ( len>0 ) 
   \   000021   EA           MOV     A,R2
   \   000022   45..         ORL     A,?V0 + 1
   \   000024   606B         JZ      ??uartRxCB_0
   1077              {
   1078                 // HalUARTWrite(HAL_UART_PORT_0, pBuf, len);
   1079                //SentDataInBind(pBuf,len);
   1080                if(!ZG_DEVICE_COORDINATOR_TYPE)//·ÇÐ­µ÷Æ÷
   \   000026   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   90....       MOV     DPTR,#TestDirectSent_DstAddr + 8
   \   00002D   600A         JZ      ??uartRxCB_1
   1081                {
   1082                  #if defined (GTA_WHFRFID_R1) 
   1083                  UnPackRC623Data(pBuf,pRC623Frame);
   1084                  if(pRC623Frame->Comfirm==FRAME_CHECK_RIGHT)
   1085                  {
   1086                    switch(pRC623Frame->Cmd)
   1087                    {
   1088                        case RFID_CMD_SET_ISOTYPE:
   1089          
   1090                          break;
   1091                        case RFID_CMD_SELECT_CARD:
   1092          
   1093                          break;
   1094                        case RFID_CMD_GET_CARD_ID:
   1095                          data[0]=7;
   1096                          data[1]=MODBUS_RFID_CMD_GET_CARD_ID&0x00FF;
   1097                          data[2]=(MODBUS_RFID_CMD_GET_CARD_ID>>8)&0x00FF;
   1098                          data[3]=pRC623Frame->Data[1];
   1099                          data[4]=pRC623Frame->Data[2];
   1100                          data[5]=pRC623Frame->Data[3];
   1101                          data[6]=pRC623Frame->Data[4];
   1102                          //data[4]=pRC623Frame->Data[3];
   1103                          FrameLen=FramePackage(Frame,NativeAddr,0x03,data,7);//´ò°ü
   1104                          SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1105                          break;
   1106                        case RFID_CMD_FIND_ISO14443_CARD:
   1107                          //for(i=0;i<RC623Frame.DataLen;i++)
   1108                          //{
   1109                          //  RC623Frame.Data
   1110                          //}
   1111                          data[0]=5;//2+1+2
   1112                          data[1]=MODBUS_RFID_CMD_FIND_ISO14443_CARD&0x00FF;
   1113                          data[2]=(MODBUS_RFID_CMD_FIND_ISO14443_CARD>>8)&0x00FF;
   1114                          data[3]=pRC623Frame->Data[0];
   1115                          data[4]=pRC623Frame->Data[1];
   1116                          data[5]=pRC623Frame->Data[2];
   1117                          data[6]=pRC623Frame->Data[3];
   1118                          FrameLen=FramePackage(Frame,NativeAddr,0x03,data,6);//´ò°ü
   1119                          SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1120          
   1121                          break;
   1122                        case RFID_CMD_CONFIG_KEY:
   1123          
   1124                          break;
   1125                        case RFID_CMD_READ_VAL:
   1126          
   1127                          break;
   1128                        default:
   1129                          break;
   1130                    }
   1131                  }
   1132                  #else
   1133                  TestDirectSent_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;//µØÖ·´«ËÍ
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   1134                  TestDirectSent_DstAddr.endPoint = 0;
   1135                  TestDirectSent_DstAddr.addr.shortAddr = 0x0000;
   \                     ??CrossCallReturnLabel_17:
   \   000034   90....       MOV     DPTR,#TestDirectSent_DstAddr
   \   000037   8003         SJMP    ??CrossCallReturnLabel_2
   1136              
   1137                  AF_DataRequest( 
   1138                                &TestDirectSent_DstAddr,               //µØÖ·
   1139                                &TransmitApp_epDesc,                //ÃèÊö
   1140                                TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1141                                  len,                                  //len
   1142                                  pBuf,//TransmitApp_Msg,             //DATA
   1143                                &TransmitApp_TransID,               //
   1144                                TRANSMITAPP_TX_OPTIONS,
   1145                                AF_DEFAULT_RADIUS 
   1146                                );
   1147                  HalLedBlink (HAL_LED_3, 1, 50, 200);
   1148                  #endif
   1149                }
   1150                else
   1151                {
   1152                  //destAddr=BUILD_UINT16(pBuf[1],pBuf[0]);
   1153                  if(ZG_DEVICE_COORDINATOR_TYPE)
   1154                  {
   1155                    TestDirectSent_DstAddr.addrMode=(afAddrMode_t)AddrBroadcast;//Addr16Bit;//µØÖ·´«ËÍ
   \                     ??uartRxCB_1:
   \   000039   12....       LCALL   ?Subroutine7 & 0xFFFF
   1156                    TestDirectSent_DstAddr.endPoint = 0;
   1157                    TestDirectSent_DstAddr.addr.shortAddr = 0xffff;//destAddr;
   \                     ??CrossCallReturnLabel_2:
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   F0           MOVX    @DPTR,A
   1158                    //TestDirectSent_DstAddr.addr.extAddr
   1159                    
   1160                    AF_DataRequest( 
   1161                                &TestDirectSent_DstAddr,               //µØÖ·
   1162                                &TransmitApp_epDesc,                //ÃèÊö
   1163                                TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1164                                  len,                                  //len
   1165                                  pBuf,//TransmitApp_Msg,             //DATA
   1166                                &TransmitApp_TransID,               //
   1167                                TRANSMITAPP_TX_OPTIONS,
   1168                                AF_DEFAULT_RADIUS 
   1169                                );
   \   00003F                ; Setup parameters for call to function AF_DataRequest
   \   00003F   75..1E       MOV     ?V0 + 2,#0x1e
   \   000042   78..         MOV     R0,#?V0 + 2
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   75....       MOV     ?V0 + 2,#TransmitApp_TransID & 0xff
   \   00004A   75....       MOV     ?V0 + 3,#(TransmitApp_TransID >> 8) & 0xff
   \   00004D   78..         MOV     R0,#?V0 + 2
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   7403         MOV     A,#0x3
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   8582..       MOV     ?V0 + 2,DPL
   \   00005A   8583..       MOV     ?V0 + 3,DPH
   \   00005D   78..         MOV     R0,#?V0 + 2
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   78..         MOV     R0,#?V0 + 0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   75..A1       MOV     ?V0 + 0,#-0x5f
   \   00006A   75..00       MOV     ?V0 + 1,#0x0
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   7920         MOV     R1,#0x20
   \   000074   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000076   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   000078   7A..         MOV     R2,#TestDirectSent_DstAddr & 0xff
   \   00007A   7B..         MOV     R3,#(TestDirectSent_DstAddr >> 8) & 0xff
   \   00007C   12....       LCALL   ??AF_DataRequest?relay
   \   00007F   7409         MOV     A,#0x9
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   1170                    HalLedBlink (HAL_LED_3, 1, 50, 200);
   \   000084                ; Setup parameters for call to function HalLedBlink
   \   000084   7CC8         MOV     R4,#-0x38
   \   000086   7D00         MOV     R5,#0x0
   \   000088   7B32         MOV     R3,#0x32
   \   00008A   7A01         MOV     R2,#0x1
   \   00008C   7904         MOV     R1,#0x4
   \   00008E   12....       LCALL   ??HalLedBlink?relay
   1171                  }
   1172                }
   1173              }
   1174          
   1175          }
   \                     ??uartRxCB_0:
   \   000091   7480         MOV     A,#-0x80
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   \   000096   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   90....       MOV     DPTR,#TestDirectSent_DstAddr
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   22           RET
   1176          /*********************************************************************
   1177          *********************************************************************/
   1178          
   1179          
   1180          
   1181          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1182          void FrameUnPackage(uint8 *pBuf,ModBusFrame_t *pFrame)
   \                     FrameUnPackage:
   1183          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1184             uint16 crc;
   1185             uint8 datalen;
   1186             uint8 cmd;
   1187             uint8 i;
   1188             
   1189             if(pBuf[0]==FRAME_HEAD)
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   647E         XRL     A,#0x7e
   \   000014   6003         JZ      $+5
   \   000016   02....       LJMP    ??FrameUnPackage_0 & 0xFFFF
   1190             {
   1191             	cmd=pBuf[2];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 5,A
   1192          	switch(cmd)
   \   00001E   14           DEC     A
   \   00001F   6024         JZ      ??FrameUnPackage_1
   \   000021   24FE         ADD     A,#-0x2
   \   000023   6020         JZ      ??FrameUnPackage_1
   \   000025   24FE         ADD     A,#-0x2
   \   000027   601C         JZ      ??FrameUnPackage_1
   \   000029   14           DEC     A
   \   00002A   6019         JZ      ??FrameUnPackage_1
   \   00002C   24F7         ADD     A,#-0x9
   \   00002E   607E         JZ      ??FrameUnPackage_2
   \   000030   14           DEC     A
   \   000031   7003         JNZ     $+5
   \   000033   02....       LJMP    ??FrameUnPackage_3 & 0xFFFF
   \   000036   14           DEC     A
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??FrameUnPackage_4 & 0xFFFF
   \   00003C   14           DEC     A
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??FrameUnPackage_5 & 0xFFFF
   \   000042   02....       LJMP    ??FrameUnPackage_6 & 0xFFFF
   1193          		{
   1194          		case FUN_CODE_READ_COIL_STATE:		
   1195          		case FUN_CODE_READ_HOLDING_REGISTERS:
   1196          			datalen =4;
   1197          			break;
   1198          		case 0x05:	
   1199          		case 0x06:
   1200          			datalen =4;
   \                     ??FrameUnPackage_1:
   \   000045   75..04       MOV     ?V0 + 4,#0x4
   1201          			break;
   1202          		case 0x0F:
   1203          			datalen =5+((BUILD_UINT16(pBuf[6],pBuf[5])+7)/8);//2+2+1+(N+7)/8
   1204          			break;
   1205          		case 0x10:
   1206          			datalen=5+((BUILD_UINT16(pBuf[6],pBuf[5])*2));//2+2+1+2N
   1207          			break;
   1208          		case 0x11:
   1209                                  datalen = 0;
   1210                                  break;
   1211          		case 0x12:
   1212          			datalen = 1;	//1+ 6;
   1213          			break;
   1214          		default:pFrame->COMFIRM=FRAME_CHECK_CMD_WRONG;
   1215          			return ;
   1216          		}
   1217             	crc=BUILD_UINT16(pBuf[3+datalen],pBuf[3+datalen+1]);
   \                     ??FrameUnPackage_7:
   \   000048   85....       MOV     ?V0 + 2,?V0 + 4
   \   00004B   E5..         MOV     A,?V0 + 0
   \   00004D   25..         ADD     A,?V0 + 2
   \   00004F   F8           MOV     R0,A
   \   000050   EB           MOV     A,R3
   \   000051   3400         ADDC    A,#0x0
   \   000053   F9           MOV     R1,A
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FA           MOV     R2,A
   \   00005D   8882         MOV     DPL,R0
   \   00005F   8983         MOV     DPH,R1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F9           MOV     R1,A
   \   000067   EA           MOV     A,R2
   \   000068   2400         ADD     A,#0x0
   \   00006A   F5..         MOV     ?V0 + 2,A
   \   00006C   E4           CLR     A
   \   00006D   39           ADDC    A,R1
   \   00006E   F5..         MOV     ?V0 + 3,A
   1218               if(crc==Crc16Code(pBuf+1,datalen+2))//pBuf+1  ²»¼ÆHEAD  ³¤¶ÈÊÇ1+1+1-1
   \   000070                ; Setup parameters for call to function Crc16Code
   \   000070   7402         MOV     A,#0x2
   \   000072   25..         ADD     A,?V0 + 4
   \   000074   F9           MOV     R1,A
   \   000075   85..82       MOV     DPL,?V0 + 0
   \   000078   8B83         MOV     DPH,R3
   \   00007A   A3           INC     DPTR
   \   00007B   AA82         MOV     R2,DPL
   \   00007D   AB83         MOV     R3,DPH
   \   00007F   12....       LCALL   ??Crc16Code?relay
   \   000082   EA           MOV     A,R2
   \   000083   65..         XRL     A,?V0 + 2
   \   000085   7003         JNZ     ??FrameUnPackage_8
   \   000087   EB           MOV     A,R3
   \   000088   65..         XRL     A,?V0 + 3
   \                     ??FrameUnPackage_8:
   \   00008A   6003         JZ      $+5
   \   00008C   02....       LJMP    ??FrameUnPackage_9 & 0xFFFF
   1219               	{
   1220               		pFrame->CMD=cmd;
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   A3           INC     DPTR
   \   000094   E5..         MOV     A,?V0 + 5
   \   000096   12....       LCALL   ?Subroutine9 & 0xFFFF
   1221          		pFrame->DATALEN=datalen;
   \                     ??CrossCallReturnLabel_6:
   \   000099   A3           INC     DPTR
   \   00009A   E5..         MOV     A,?V0 + 4
   \   00009C   F0           MOVX    @DPTR,A
   1222          		pFrame->ADDR=pBuf[1];
   \   00009D   85..82       MOV     DPL,?V0 + 0
   \   0000A0   85..83       MOV     DPH,?V0 + 1
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   F0           MOVX    @DPTR,A
   1223          		for(i=0;i<datalen;i++)
   \   0000AA   7A00         MOV     R2,#0x0
   \   0000AC   8074         SJMP    ??FrameUnPackage_10
   \                     ??FrameUnPackage_2:
   \   0000AE   8A82         MOV     DPL,R2
   \   0000B0   8B83         MOV     DPH,R3
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FA           MOV     R2,A
   \   0000BA   85..82       MOV     DPL,?V0 + 0
   \   0000BD   8B83         MOV     DPH,R3
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F9           MOV     R1,A
   \   0000C6   EA           MOV     A,R2
   \   0000C7   2407         ADD     A,#0x7
   \   0000C9   F5..         MOV     ?V0 + 2,A
   \   0000CB   E9           MOV     A,R1
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   F5..         MOV     ?V0 + 3,A
   \   0000D0   7403         MOV     A,#0x3
   \   0000D2   78..         MOV     R0,#?V0 + 2
   \   0000D4   12....       LCALL   ?US_SHR
   \   0000D7   E5..         MOV     A,?V0 + 2
   \                     ??FrameUnPackage_11:
   \   0000D9   2405         ADD     A,#0x5
   \   0000DB   F5..         MOV     ?V0 + 4,A
   \   0000DD   02....       LJMP    ??FrameUnPackage_7 & 0xFFFF
   \                     ??FrameUnPackage_3:
   \   0000E0   8A82         MOV     DPL,R2
   \   0000E2   8B83         MOV     DPH,R3
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   C3           CLR     C
   \   0000EC   33           RLC     A
   \   0000ED   80EA         SJMP    ??FrameUnPackage_11
   \                     ??FrameUnPackage_4:
   \   0000EF   75..00       MOV     ?V0 + 4,#0x0
   \   0000F2   02....       LJMP    ??FrameUnPackage_7 & 0xFFFF
   \                     ??FrameUnPackage_5:
   \   0000F5   75..01       MOV     ?V0 + 4,#0x1
   \   0000F8   02....       LJMP    ??FrameUnPackage_7 & 0xFFFF
   \                     ??FrameUnPackage_6:
   \   0000FB   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000FE   7403         MOV     A,#0x3
   \   000100   8032         SJMP    ??FrameUnPackage_12
   1224                              {
   1225                              pFrame->pData[i]=pBuf[3+i];
   \                     ??FrameUnPackage_13:
   \   000102   8A82         MOV     DPL,R2
   \   000104   A882         MOV     R0,DPL
   \   000106   E5..         MOV     A,?V0 + 0
   \   000108   28           ADD     A,R0
   \   000109   F582         MOV     DPL,A
   \   00010B   E5..         MOV     A,?V0 + 1
   \   00010D   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   1226                              }
   \                     ??CrossCallReturnLabel_28:
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   E0           MOVX    A,@DPTR
   \   000114   C0E0         PUSH    A
   \   000116   EE           MOV     A,R6
   \   000117   28           ADD     A,R0
   \   000118   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   D0E0         POP     A
   \   000120   F0           MOVX    @DPTR,A
   \   000121   0A           INC     R2
   \                     ??FrameUnPackage_10:
   \   000122   EA           MOV     A,R2
   \   000123   C3           CLR     C
   \   000124   95..         SUBB    A,?V0 + 4
   \   000126   40DA         JC      ??FrameUnPackage_13
   1227                          pFrame->COMFIRM=FRAME_CHECK_RIGHT;
   \   000128   12....       LCALL   ?Subroutine11 & 0xFFFF
   1228                          return ;//ÍêÈ«ÕýÈ· ²¢°Ñ°ü·µ»Ø
   1229               	}
   1230          	 	
   1231             }
   \                     ??CrossCallReturnLabel_10:
   \   00012B   7401         MOV     A,#0x1
   \   00012D   8005         SJMP    ??FrameUnPackage_12
   1232             else
   1233             {
   1234             	 pFrame->COMFIRM=FRAME_CHECK_HEAD_WRONG;
   \                     ??FrameUnPackage_0:
   \   00012F   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000132   7402         MOV     A,#0x2
   \                     ??FrameUnPackage_12:
   \   000134   F0           MOVX    @DPTR,A
   1235          	 return ;
   1236             }
   \                     ??FrameUnPackage_9:
   \   000135   02....       LJMP    ?Subroutine1 & 0xFFFF
   1237               
   1238          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   EE           MOV     A,R6
   \   000001   2417         ADD     A,#0x17
   \   000003   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000006   22           RET
   1239          
   1240          
   1241          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1242          uint16 Crc16Code(uint8 *str, uint8 len)//Modbus Ckeck Code.//LO First
   \                     Crc16Code:
   1243          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FC           MOV     R4,A
   1244              uint16 code = 0xFFFF;
   \   00000B   7AFF         MOV     R2,#-0x1
   \   00000D   7BFF         MOV     R3,#-0x1
   1245              uint16 Poly = 0xA001;
   1246          // Dnp is 0x3D65 or A6BC
   1247          
   1248              int flag = 0;
   \   00000F   7E00         MOV     R6,#0x0
   1249              int j = 0;
   \   000011   7800         MOV     R0,#0x0
   \   000013   7900         MOV     R1,#0x0
   1250          
   1251              for(j=0; j<len; j++)
   \   000015   802D         SJMP    ??Crc16Code_0
   1252              {
   1253          		code ^= (uint16) (*str);
   \                     ??Crc16Code_1:
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6A           XRL     A,R2
   \   000019   FA           MOV     R2,A
   1254          		for(int i=0; i<8;i++)
   \   00001A   7D08         MOV     R5,#0x8
   1255          		{
   1256          			if ( code & 0x0001 ) flag = 1;
   \                     ??Crc16Code_2:
   \   00001C   EA           MOV     A,R2
   \   00001D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001F   5002         JNC     ??Crc16Code_3
   \   000021   7E01         MOV     R6,#0x1
   1257          			code = code>>1;
   \                     ??Crc16Code_3:
   \   000023   EB           MOV     A,R3
   \   000024   C3           CLR     C
   \   000025   13           RRC     A
   \   000026   FB           MOV     R3,A
   \   000027   EA           MOV     A,R2
   \   000028   13           RRC     A
   \   000029   FA           MOV     R2,A
   1258          			if ( flag )
   \   00002A   EE           MOV     A,R6
   \   00002B   600A         JZ      ??Crc16Code_4
   1259          			{
   1260          				code ^= Poly;
   \   00002D   7401         MOV     A,#0x1
   \   00002F   6A           XRL     A,R2
   \   000030   FA           MOV     R2,A
   \   000031   74A0         MOV     A,#-0x60
   \   000033   6B           XRL     A,R3
   \   000034   FB           MOV     R3,A
   1261          				flag = 0;
   \   000035   7E00         MOV     R6,#0x0
   1262          			}
   1263          		}
   \                     ??Crc16Code_4:
   \   000037   1D           DEC     R5
   \   000038   ED           MOV     A,R5
   \   000039   70E1         JNZ     ??Crc16Code_2
   1264          		str ++;
   \   00003B   A3           INC     DPTR
   1265              }
   \   00003C   E8           MOV     A,R0
   \   00003D   2401         ADD     A,#0x1
   \   00003F   08           INC     R0
   \   000040   E9           MOV     A,R1
   \   000041   3400         ADDC    A,#0x0
   \   000043   F9           MOV     R1,A
   \                     ??Crc16Code_0:
   \   000044   8C..         MOV     ?V0 + 0,R4
   \   000046   C3           CLR     C
   \   000047   E8           MOV     A,R0
   \   000048   95..         SUBB    A,?V0 + 0
   \   00004A   E9           MOV     A,R1
   \   00004B   9400         SUBB    A,#0x0
   \   00004D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00004F   65D0         XRL     A,PSW
   \   000051   33           RLC     A
   \   000052   40C3         JC      ??Crc16Code_1
   1266              return code;
   \   000054   02....       LJMP    ??Subroutine16_0 & 0xFFFF
   1267          }
   1268          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B32         MOV     R3,#0x32
   \   000002   7A01         MOV     R2,#0x1
   \   000004   7904         MOV     R1,#0x4
   \   000006   12....       LCALL   ??HalLedBlink?relay
   \   000009                REQUIRE ??Subroutine16_0
   \   000009                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1269          void SentDataInBind(uint8 *pdata,uint16 len)
   \                     SentDataInBind:
   1270          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1271            //uint8 data[]="hello";
   1272               AF_DataRequest( 
   1273                              &TransmitApp_DstAddr,               //µØÖ·
   1274                              &TransmitApp_epDesc,                //ÃèÊö
   1275                              TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1276                              len,                                  //len
   1277                              pdata,//TransmitApp_Msg,             //DATA
   1278                              &TransmitApp_TransID,               //
   1279                              TRANSMITAPP_TX_OPTIONS,
   1280                              AF_DEFAULT_RADIUS 
   1281                              );
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   8A..         MOV     ?V0 + 0,R2
   \   00001A   8B..         MOV     ?V0 + 1,R3
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   8C..         MOV     ?V0 + 0,R4
   \   000023   8D..         MOV     ?V0 + 1,R5
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..A1       MOV     ?V0 + 0,#-0x5f
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7920         MOV     R1,#0x20
   \   000037   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000039   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   00003B   7A..         MOV     R2,#TransmitApp_DstAddr & 0xff
   \   00003D   7B..         MOV     R3,#(TransmitApp_DstAddr >> 8) & 0xff
   \   00003F   12....       LCALL   ??AF_DataRequest?relay
   \   000042   7409         MOV     A,#0x9
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   1282               HalLedBlink (HAL_LED_3, 1, 50, 300);
   \   000047                ; Setup parameters for call to function HalLedBlink
   \   000047   7C2C         MOV     R4,#0x2c
   \   000049   7D01         MOV     R5,#0x1
   \   00004B   02....       LJMP    ?Subroutine0 & 0xFFFF
   1283          }
   1284          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1285          void SendBindRequest(void)
   \                     SendBindRequest:
   1286          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1287              zAddrType_t dstAddr;
   1288              dstAddr.addrMode = Addr16Bit;
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
   1289              dstAddr.addr.shortAddr = 0x0000; // Coordinator
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
   1290              ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
   1291                            TransmitApp_epDesc.endPoint,
   1292                            TRANSMITAPP_PROFID,
   1293                            TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
   1294                            TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
   1295                            FALSE );
   \   00001C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001C   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00001F   8A..         MOV     ?V0 + 0,R2
   \   000021   8B..         MOV     ?V0 + 1,R3
   \   000023   AC..         MOV     R4,?V0 + 0
   \   000025   AD..         MOV     R5,?V0 + 1
   \   000027   75....       MOV     ?V0 + 0,#TransmitApp_ClusterList & 0xff
   \   00002A   75....       MOV     ?V0 + 1,#(TransmitApp_ClusterList >> 8) & 0xff
   \   00002D                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   00002D   75..00       MOV     ?V0 + 2,#0x0
   \   000030   78..         MOV     R0,#?V0 + 2
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..01       MOV     ?V0 + 2,#0x1
   \   00003D   78..         MOV     R0,#?V0 + 2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..01       MOV     ?V0 + 0,#0x1
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..05       MOV     ?V0 + 0,#0x5
   \   000052   75..0F       MOV     ?V0 + 1,#0xf
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   90....       MOV     DPTR,#TransmitApp_epDesc
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   7409         MOV     A,#0x9
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
   \   000068   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   00006B   7409         MOV     A,#0x9
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   1296              HalLedBlink (HAL_LED_1, 1, 50, 300);
   \   000070                ; Setup parameters for call to function HalLedBlink
   \   000070   7C2C         MOV     R4,#0x2c
   \   000072   7D01         MOV     R5,#0x1
   \   000074   7B32         MOV     R3,#0x32
   \   000076   7A01         MOV     R2,#0x1
   \   000078   7901         MOV     R1,#0x1
   \   00007A   12....       LCALL   ??HalLedBlink?relay
   1297          }
   \   00007D   7409         MOV     A,#0x9
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   7F03         MOV     R7,#0x3
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
   1298          
   1299          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1300          void ReportData(ModBusFrame_t *pRxFrame)
   \                     ReportData:
   1301          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1302           /* 
   1303            #if defined ( GTA_WWSB_R1 ) //ÓêµÎ´«¸ÐÆ÷   
   1304            uint8 Frame[10];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
   1305            uint8 data[3];//GTA_WWSB_R1 Êý¾ÝÎª3
   1306            #endif
   1307            #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷   
   1308            uint8 Frame[10];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
   1309            uint8 data[5];//GTA_WWSB_R1 Êý¾ÝÎª3
   1310            #endif
   1311          */
   1312          
   1313            #if defined (GTA_WHFRFID_R1)
   1314            RC623Frame_t pframe;
   1315            uint16 cmd;
   1316            #endif
   1317          
   1318            uint8 Frame[20];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
   1319            uint8 data[10];//
                         ^
Warning[Pe177]: variable "data" was declared but never referenced
   1320            uint16 i=0,j=0;
                          ^
Warning[Pe177]: variable "i" was declared but never referenced

    uint16 i=0,j=0;
               ^
"E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c",1320  Warning[Pe177]: 
          variable "j" was declared but never referenced
   1321            uint8 led=0;
                         ^
Warning[Pe177]: variable "led" was declared but never referenced
   1322          
   1323            
   1324            uint16 temp;
                          ^
Warning[Pe177]: variable "temp" was declared but never referenced
   1325            uint16 FrameLen;
   1326            switch(pRxFrame->CMD)
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   24FD         ADD     A,#-0x3
   \   000016   600D         JZ      ??ReportData_0
   \   000018   24F2         ADD     A,#-0xe
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??ReportData_1 & 0xFFFF
   \   00001F   14           DEC     A
   \   000020   6044         JZ      ??ReportData_2
   \   000022   02....       LJMP    ??ReportData_3 & 0xFFFF
   1327                {
   1328                case FUN_CODE_READ_HOLDING_REGISTERS://¶Á¼Ä´æÆ÷Êý¾Ý
   1329                  {
   1330                    //temp=BUILD_UINT16(pRxFrame->pData[1],pRxFrame->pData[0]);
   1331                    //if(temp==NativeAddr)//1 2×Ö½ÚÊÇµØÖ·£¬ÊÇ·ñ±¾»úµØÖ·
   1332                    if(pRxFrame->ADDR==NativeAddr)//ÊÇ·ñ±¾»úµØÖ·
   \                     ??ReportData_0:
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   90....       MOV     DPTR,#NativeAddr
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   68           XRL     A,R0
   \   000030   6003         JZ      $+5
   \   000032   02....       LJMP    ??ReportData_3 & 0xFFFF
   1333                    {
   1334                        #if defined ( GTA_WWSB_R1 )||(GTA_WFSB_R1) //´«¸ÐÆ÷   
   1335                        temp=ReadADC(4);//¶ÁÓêµÎµçÑ¹Öµ,»ðÑæ´«¸ÐÆ÷
   1336                        data[0]=1;
   1337                        if(temp>3000)
   1338                          data[1]=0x01;
   1339                        else
   1340                          data[1]=0x00;
   1341                        //data[1]=LO_UINT16(temp);
   1342                        //data[2]=HI_UINT16(temp);
   1343                        FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
   1344                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1345                        #endif
   1346                        
   1347                        #if defined ( GTA_WUSB_R1 )
   1348                        IO_DIR_PORT_PIN(0, 6, IO_IN);
   1349                        data[0]=1;
   1350                        if(IO_SENSOR)
   1351                          data[1]=0x01;
   1352                        else
   1353                          data[1]=0x00;
   1354                        FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
   1355                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1356                        #endif
   1357          
   1358                        #if defined(GTA_WRCB_R1)
   1359                        IO_DIR_PORT_PIN(0, 6, IO_OUT);
   1360                        IO_DIR_PORT_PIN(0, 0, IO_OUT);
   1361                        if(pRxFrame->pData[0]==0x01)
   1362                          {
   1363                            if(pRxFrame->pData[1]==0x00)
   1364                              IO_RELAY1=0;
   1365                            if(pRxFrame->pData[1]==0x01)
   1366                              IO_RELAY1=1;
   1367                          }
   1368                        if(pRxFrame->pData[0]==0x02)
   1369                          {
   1370                            if(pRxFrame->pData[1]==0x00)
   1371                              IO_RELAY2=0;
   1372                            if(pRxFrame->pData[1]==0x01)
   1373                              IO_RELAY2=1;
   1374                          }
   1375                        #endif
   1376                        
   1377                        
   1378                        #if defined (GTA_WVSB_R1)||(GTA_WIRSB_R1)
   1379                        temp=ReadADC(4);//ºìÍâ´«¸ÐÆ÷
   1380                        data[0]=1;
   1381                        if(temp>3000)
   1382                          data[1]=0x00;
   1383                        else
   1384                          data[1]=0x01;
   1385                        FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
   1386                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1387                        #endif
   1388                        
   1389                        #if defined (GTA_WISB_R1)
   1390                        temp=ReadADC(4);//
   1391                        data[0]=2;
   1392                        data[1]=LO_UINT16(temp);
   1393                        data[2]=HI_UINT16(temp);
   1394                        FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,data,3);//´ò°ü
   1395                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1396                        #endif
   1397                        
   1398                        
   1399                        #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷  
   1400                        osal_int_disable( INTS_ALL );
   1401                        readTempHumi();
   1402                        osal_int_enable( INTS_ALL );
   1403                        data[0]=4;
   1404                        data[1]=humi_val[0];//L
   1405                        data[2]=humi_val[1];//H
   1406                        data[3]=temp_val[0];
   1407                        data[4]=temp_val[1];
   1408                        FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,data,5);//´ò°ü
   1409                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1410                        #endif
   1411                        
   1412                        #if defined (GTA_WHFRFID_R1)
   1413                        cmd=BUILD_UINT16(pRxFrame->pData[0],pRxFrame->pData[1]);
   1414                          switch(cmd)
   1415                          {
   1416                          case MODBUS_RFID_CMD_FIND_ISO14443_CARD://7E xx 03 01 0A 00 00 xx
   1417                            FrameLen=PackUpRC623Data(RFID_CMD_FIND_ISO14443_CARD,&(pRxFrame->pData[2]),Frame);//´ò°ü
   1418                             HalUARTWrite(HAL_UART_PORT_0,Frame,FrameLen);
   1419                            //SendDataRequest(Frame,FrameLen);
   1420                            break;
   1421                          case MODBUS_RFID_CMD_GET_CARD_ID:
   1422                            FrameLen=PackUpRC623Data(RFID_CMD_GET_CARD_ID,&(pRxFrame->pData[2]),Frame);//´ò°ü
   1423                             HalUARTWrite(HAL_UART_PORT_0,Frame,FrameLen);
   1424                            break;
   1425                          case MODBUS_RFID_CMD_READ_VAL:
   1426                            
   1427                            break;
   1428                          default:
   1429                            break;
   1430                          }
   1431                        
   1432                        #endif
   1433                          
   1434                        #if defined(GTA_WMSCB_R1)
   1435                         /*
   1436                        ctrl_GTA_WMSCB('M',0x80);
   1437                        for(j=0;j<1000;j++)
   1438                        {
   1439                         
   1440                         ctrl_GTA_WMSCB('A',led);
   1441                         ctrl_GTA_WMSCB('B',led++);
   1442                        StepMotorRun(1,4096);
   1443                        StepMotorRun(0,4096);
   1444                        }
   1445                          */
   1446                          /*init_GTA_WMSCB();
   1447                          ctrl_GTA_WMSCB('M',0x80);
   1448                          if(pRxFrame->pData[0]==0x00)
   1449                          {
   1450                            //ctrl_GTA_WMSCB('M',0x80);
   1451                            osal_int_disable( INTS_ALL );
   1452                            StepMotorRun(pRxFrame->pData[1],BUILD_UINT16(pRxFrame->pData[2],pRxFrame->pData[3]));
   1453                            osal_int_enable( INTS_ALL );
   1454                          }
   1455                          if(pRxFrame->pData[0]==0x01)
   1456                          {
   1457                            //ctrl_GTA_WMSCB('M',0x80);
   1458                            ctrl_GTA_WMSCB('A',pRxFrame->pData[1]);
   1459                          }
   1460                          if(pRxFrame->pData[0]==0x02)
   1461                          {
   1462          
   1463                            SegDisplay(pRxFrame->pData[1]);
   1464                          }*/
   1465                          if(pRxFrame->pData[0] == 0x00){  //ÅÐ¶ÏÊÇ·ñÊÇµç»úµÄ¿ØÖÆÊý¾Ý
   \   000035   8E82         MOV     DPL,R6
   \   000037   8F83         MOV     DPH,R7
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   7010         JNZ     ??ReportData_4
   1466                              ControlStepMotor(pRxFrame->pData[1]);
   \   00003F                ; Setup parameters for call to function ControlStepMotor
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   12....       LCALL   ??ControlStepMotor?relay
   \   00004C   02....       LJMP    ??ReportData_3 & 0xFFFF
   1467                          } else if(pRxFrame->pData[0] == 0x02){//ÅÐ¶ÏÊÇ·ñÊÇÊýÂë¹ÜµÄ¿ØÖÆÊý¾Ý
   \                     ??ReportData_4:
   \   00004F   6402         XRL     A,#0x2
   \   000051   6003         JZ      $+5
   \   000053   02....       LJMP    ??ReportData_3 & 0xFFFF
   1468                              DisplaySmg(pRxFrame->pData[1]);
   \   000056                ; Setup parameters for call to function DisplaySmg
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   12....       LCALL   ??DisplaySmg?relay
   \   000063   02....       LJMP    ??ReportData_3 & 0xFFFF
   1469                          }
   1470                        #endif
   1471                        
   1472                    }
   1473                  }
   1474                  break;
   1475                case FUN_CODE_SET_ADDR://ÉèµØÖ·
   1476                  {
   1477                    if(pRxFrame->ADDR==NativeAddr)//ÊÇ·ñ±¾»úµØÖ·
   \                     ??ReportData_2:
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F8           MOV     R0,A
   \   00006C   90....       MOV     DPTR,#NativeAddr
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   68           XRL     A,R0
   \   000071   6003         JZ      $+5
   \   000073   02....       LJMP    ??ReportData_3 & 0xFFFF
   1478                    {
   1479                    NativeAddr=pRxFrame->pData[0];
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   90....       MOV     DPTR,#NativeAddr
   \   000081   F0           MOVX    @DPTR,A
   1480                    osal_nv_item_init(ZCD_NV_NATIVE_ADDRESS,sizeof(NativeAddr),NULL);
   \   000082                ; Setup parameters for call to function osal_nv_item_init
   \   000082   E4           CLR     A
   \   000083   F5..         MOV     ?V0 + 0,A
   \   000085   F5..         MOV     ?V0 + 1,A
   \   000087   78..         MOV     R0,#?V0 + 0
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008C   7C01         MOV     R4,#0x1
   \   00008E   7D00         MOV     R5,#0x0
   \   000090   7A01         MOV     R2,#0x1
   \   000092   7B04         MOV     R3,#0x4
   \   000094   12....       LCALL   ??osal_nv_item_init?relay
   \   000097   7402         MOV     A,#0x2
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   1481                    osal_nv_write(ZCD_NV_NATIVE_ADDRESS,0,sizeof(NativeAddr),&NativeAddr);
   \   00009C                ; Setup parameters for call to function osal_nv_write
   \   00009C   75....       MOV     ?V0 + 0,#NativeAddr & 0xff
   \   00009F   75....       MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
   \   0000A2   78..         MOV     R0,#?V0 + 0
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   75..01       MOV     ?V0 + 0,#0x1
   \   0000AA   75..00       MOV     ?V0 + 1,#0x0
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B2   7C00         MOV     R4,#0x0
   \   0000B4   7D00         MOV     R5,#0x0
   \   0000B6   7A01         MOV     R2,#0x1
   \   0000B8   7B04         MOV     R3,#0x4
   \   0000BA   12....       LCALL   ??osal_nv_write?relay
   \   0000BD   7404         MOV     A,#0x4
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
   1482                    FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,pRxFrame->pData,1);//´ò°ü
   1483                    SendDataRequest(Frame,FrameLen);//·¢ËÍ
   \   0000C2                ; Setup parameters for call to function SendDataRequest
   \   0000C2                ; Setup parameters for call to function FramePackage
   \   0000C2   78..         MOV     R0,#?V0 + 0
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C7   EE           MOV     A,R6
   \   0000C8   2403         ADD     A,#0x3
   \   0000CA   F5..         MOV     ?V0 + 0,A
   \   0000CC   EF           MOV     A,R7
   \   0000CD   3400         ADDC    A,#0x0
   \   0000CF   F5..         MOV     ?V0 + 1,A
   \   0000D1   78..         MOV     R0,#?V0 + 0
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   FC           MOV     R4,A
   \   0000DD   8018         SJMP    ??ReportData_5
   1484                    }
   1485                  }
   1486                  break;
   1487                case FUN_CODE_READ_ADDR://¶ÁµØÖ·
   1488                  {
   1489                    FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,&NativeAddr,1);//´ò°ü
   1490                    SendDataRequest(Frame,FrameLen);//·¢ËÍ
   \                     ??ReportData_1:
   \   0000DF                ; Setup parameters for call to function SendDataRequest
   \   0000DF                ; Setup parameters for call to function FramePackage
   \   0000DF   75..01       MOV     ?V0 + 0,#0x1
   \   0000E2   75..00       MOV     ?V0 + 1,#0x0
   \   0000E5   78..         MOV     R0,#?V0 + 0
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EA   75....       MOV     ?V0 + 0,#NativeAddr & 0xff
   \   0000ED   75....       MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
   \   0000F0   78..         MOV     R0,#?V0 + 0
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F5   7C11         MOV     R4,#0x11
   \                     ??ReportData_5:
   \   0000F7   8E82         MOV     DPL,R6
   \   0000F9   8F83         MOV     DPH,R7
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F9           MOV     R1,A
   \   0000FD   7404         MOV     A,#0x4
   \   0000FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000102   AA82         MOV     R2,DPL
   \   000104   AB83         MOV     R3,DPH
   \   000106   12....       LCALL   ??FramePackage?relay
   \   000109   7404         MOV     A,#0x4
   \   00010B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010E   EA           MOV     A,R2
   \   00010F   FC           MOV     R4,A
   \   000110   EB           MOV     A,R3
   \   000111   FD           MOV     R5,A
   \   000112   85..82       MOV     DPL,?XSP + 0
   \   000115   85..83       MOV     DPH,?XSP + 1
   \   000118   AA82         MOV     R2,DPL
   \   00011A   AB83         MOV     R3,DPH
   \   00011C   12....       LCALL   ??SendDataRequest?relay
   1491                    
   1492                  }
   1493                  break;
   1494                }
   1495            
   1496            
   1497          
   1498          }
   \                     ??ReportData_3:
   \   00011F   7414         MOV     A,#0x14
   \   000121   02....       LJMP    ?Subroutine5 & 0xFFFF
   1499          #if defined(GTA_WMSCB_R1)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1500          void StepMotorRun(uint8 Dir,uint16 StepNum)
   \                     StepMotorRun:
   1501          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 4,R1
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   8B..         MOV     ?V0 + 1,R3
   1502            uint8 ForwardStep[4]={0x03,0x09,0x0C,0x06};
   \   000010   7404         MOV     A,#0x4
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7583..       MOV     DPH,#(`?<Constant {3, 9, 12, 6}>` >> 8) & 0xff
   \   00001C   7582..       MOV     DPL,#`?<Constant {3, 9, 12, 6}>` & 0xff
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1503            uint8 BackStep[4]={0x03,0x06,0x0C,0x09};
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   AC82         MOV     R4,DPL
   \   00002C   AD83         MOV     R5,DPH
   \   00002E   7583..       MOV     DPH,#(`?<Constant {3, 6, 12, 9}>` >> 8) & 0xff
   \   000031   7582..       MOV     DPL,#`?<Constant {3, 6, 12, 9}>` & 0xff
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1504            uint16 i=0,j=0,k=0;
   \   000039   FE           MOV     R6,A
   \   00003A   FF           MOV     R7,A
   \   00003B   F5..         MOV     ?V0 + 2,A
   \   00003D   F5..         MOV     ?V0 + 3,A
   1505            uint8 index=0,l=0;
   \   00003F   F5..         MOV     ?V0 + 6,A
   \   000041   F5..         MOV     ?V0 + 5,A
   1506            for(i=0;i<StepNum;i++)
   \   000043   02....       LJMP    ??StepMotorRun_0 & 0xFFFF
   1507            {
   1508              if(Dir)
   1509                ctrl_GTA_WMSCB('C',ForwardStep[index]);
   1510              else
   1511                ctrl_GTA_WMSCB('C',BackStep[index]);
   \                     ??StepMotorRun_1:
   \   000046                ; Setup parameters for call to function ctrl_GTA_WMSCB
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \                     ??StepMotorRun_2:
   \   00004C   E582         MOV     A,DPL
   \   00004E   25..         ADD     A,?V0 + 8
   \   000050   F582         MOV     DPL,A
   \   000052   E583         MOV     A,DPH
   \   000054   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000057   FA           MOV     R2,A
   \   000058   7943         MOV     R1,#0x43
   \   00005A   12....       LCALL   ??ctrl_GTA_WMSCB?relay
   1512              if(i==(k*255-1)||i==0)
   \   00005D   E5..         MOV     A,?V0 + 2
   \   00005F   75F0FF       MOV     B,#-0x1
   \   000062   A4           MUL     AB
   \   000063   F8           MOV     R0,A
   \   000064   AAF0         MOV     R2,B
   \   000066   75F0FF       MOV     B,#-0x1
   \   000069   E5..         MOV     A,?V0 + 3
   \   00006B   A4           MUL     AB
   \   00006C   2A           ADD     A,R2
   \   00006D   F9           MOV     R1,A
   \   00006E   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000071   6E           XRL     A,R6
   \   000072   7002         JNZ     ??StepMotorRun_3
   \   000074   E9           MOV     A,R1
   \   000075   6F           XRL     A,R7
   \                     ??StepMotorRun_3:
   \   000076   6004         JZ      ??StepMotorRun_4
   \   000078   EE           MOV     A,R6
   \   000079   4F           ORL     A,R7
   \   00007A   7024         JNZ     ??StepMotorRun_5
   1513              {
   1514                SegDisplay(l);
   \                     ??StepMotorRun_4:
   \   00007C                ; Setup parameters for call to function SegDisplay
   \   00007C   A9..         MOV     R1,?V0 + 5
   \   00007E   12....       LCALL   ??SegDisplay?relay
   1515                if(l++>8)l=0;
   \   000081   85....       MOV     ?V0 + 7,?V0 + 5
   \   000084   7401         MOV     A,#0x1
   \   000086   25..         ADD     A,?V0 + 7
   \   000088   F5..         MOV     ?V0 + 5,A
   \   00008A   E5..         MOV     A,?V0 + 7
   \   00008C   C3           CLR     C
   \   00008D   9409         SUBB    A,#0x9
   \   00008F   4003         JC      ??StepMotorRun_6
   \   000091   75..00       MOV     ?V0 + 5,#0x0
   1516                k++;
   \                     ??StepMotorRun_6:
   \   000094   E5..         MOV     A,?V0 + 2
   \   000096   2401         ADD     A,#0x1
   \   000098   F5..         MOV     ?V0 + 2,A
   \   00009A   E5..         MOV     A,?V0 + 3
   \   00009C   3400         ADDC    A,#0x0
   \   00009E   F5..         MOV     ?V0 + 3,A
   1517              }
   1518              ctrl_GTA_WMSCB('A',i);
   \                     ??StepMotorRun_5:
   \   0000A0                ; Setup parameters for call to function ctrl_GTA_WMSCB
   \   0000A0   EE           MOV     A,R6
   \   0000A1   FA           MOV     R2,A
   \   0000A2   7941         MOV     R1,#0x41
   \   0000A4   12....       LCALL   ??ctrl_GTA_WMSCB?relay
   1519              
   1520              if(++index>=4)index=0;
   \   0000A7   05..         INC     ?V0 + 6
   \   0000A9   E5..         MOV     A,?V0 + 6
   \   0000AB   C3           CLR     C
   \   0000AC   9404         SUBB    A,#0x4
   \   0000AE   4003         JC      ??StepMotorRun_7
   \   0000B0   75..00       MOV     ?V0 + 6,#0x0
   1521              
   1522              for(j=0;j<3000;j++)
   \                     ??StepMotorRun_7:
   \   0000B3   78B8         MOV     R0,#-0x48
   \   0000B5   790B         MOV     R1,#0xb
   1523              {
   1524                asm("nop");            
   \                     ??StepMotorRun_8:
   \   0000B7   00           nop
   1525              }
   \   0000B8   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000BB   49           ORL     A,R1
   \   0000BC   70F9         JNZ     ??StepMotorRun_8
   \   0000BE   EE           MOV     A,R6
   \   0000BF   2401         ADD     A,#0x1
   \   0000C1   0E           INC     R6
   \   0000C2   EF           MOV     A,R7
   \   0000C3   3400         ADDC    A,#0x0
   \   0000C5   FF           MOV     R7,A
   \                     ??StepMotorRun_0:
   \   0000C6   C3           CLR     C
   \   0000C7   EE           MOV     A,R6
   \   0000C8   95..         SUBB    A,?V0 + 0
   \   0000CA   EF           MOV     A,R7
   \   0000CB   95..         SUBB    A,?V0 + 1
   \   0000CD   5012         JNC     ??StepMotorRun_9
   \   0000CF   E5..         MOV     A,?V0 + 4
   \   0000D1   85....       MOV     ?V0 + 8,?V0 + 6
   \   0000D4   7003         JNZ     $+5
   \   0000D6   02....       LJMP    ??StepMotorRun_1 & 0xFFFF
   \   0000D9                ; Setup parameters for call to function ctrl_GTA_WMSCB
   \   0000D9   7404         MOV     A,#0x4
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   02....       LJMP    ??StepMotorRun_2 & 0xFFFF
   1526              //ctrl_GTA_WMSCB('A',StepNum);
   1527            }
   1528          }
   \                     ??StepMotorRun_9:
   \   0000E1   7408         MOV     A,#0x8
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E6   7F0A         MOV     R7,#0xa
   \   0000E8   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E8           MOV     A,R0
   \   000001   24FF         ADD     A,#-0x1
   \   000003   18           DEC     R0
   \   000004   E9           MOV     A,R1
   \   000005   34FF         ADDC    A,#-0x1
   \   000007   F9           MOV     R1,A
   \   000008   E8           MOV     A,R0
   \   000009   22           RET
   1529          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1530          void SegDisplay(uint8 num)
   \                     SegDisplay:
   1531          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   1532            uint8 DispNum[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   AC82         MOV     R4,DPL
   \   000014   AD83         MOV     R5,DPH
   \   000016   7583..       MOV     DPH,#(`?<Constant {63, 6, 91, 79, 102, 109, 125, 7, 1` >> 8) & 0xff
   \   000019   7582..       MOV     DPL,#`?<Constant {63, 6, 91, 79, 102, 109, 125, 7, 1` & 0xff
   \   00001C   740A         MOV     A,#0xa
   \   00001E   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1533            //ctrl_GTA_WMSCB('M',0x80);
   1534            if(num<0x10)
   \   000021   EE           MOV     A,R6
   \   000022   C3           CLR     C
   \   000023   9410         SUBB    A,#0x10
   \   000025   5019         JNC     ??SegDisplay_0
   1535              ctrl_GTA_WMSCB('B',DispNum[num]);
   \   000027                ; Setup parameters for call to function ctrl_GTA_WMSCB
   \   000027   8E..         MOV     ?V0 + 0,R6
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   E582         MOV     A,DPL
   \   000031   25..         ADD     A,?V0 + 0
   \   000033   F582         MOV     DPL,A
   \   000035   E583         MOV     A,DPH
   \   000037   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00003A   FA           MOV     R2,A
   \   00003B   7942         MOV     R1,#0x42
   \   00003D   12....       LCALL   ??ctrl_GTA_WMSCB?relay
   1536          }
   \                     ??SegDisplay_0:
   \   000040   740A         MOV     A,#0xa
   \   000042   02....       LJMP    ?Subroutine5 & 0xFFFF
   1537          #endif

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1538          uint16 FramePackage(uint8 *pFrame,uint8 addr,uint8 cmd,uint8 *data,uint16 datalen)
   \                     FramePackage:
   1539          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   1540            uint16 i;
   1541            uint16 crc;
   1542            uint8 *p;
   1543              p=pFrame;
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1544            *p++=FRAME_HEAD;//²»Ã÷bug ÔÙ¼ÓÒ»¸ö×Ö½Ú
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   747E         MOV     A,#0x7e
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   1545            *p++=FRAME_HEAD;
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   1546            *p++=addr;
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   1547            *p++=cmd;
   \   000016   EC           MOV     A,R4
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   AE82         MOV     R6,DPL
   \   00001B   AF83         MOV     R7,DPH
   1548            for(i=0;i<datalen;i++)
   \   00001D   7C00         MOV     R4,#0x0
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   740E         MOV     A,#0xe
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   7410         MOV     A,#0x10
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 1,A
   \   000037   8024         SJMP    ??FramePackage_0
   1549            {
   1550              *p++=*data++;
   \                     ??FramePackage_1:
   \   000039   8882         MOV     DPL,R0
   \   00003B   8983         MOV     DPH,R1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   F0           MOVX    @DPTR,A
   \   000043   8882         MOV     DPL,R0
   \   000045   8983         MOV     DPH,R1
   \   000047   A3           INC     DPTR
   \   000048   A882         MOV     R0,DPL
   \   00004A   A983         MOV     R1,DPH
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   A3           INC     DPTR
   \   000051   AE82         MOV     R6,DPL
   \   000053   AF83         MOV     R7,DPH
   1551            }
   \   000055   EC           MOV     A,R4
   \   000056   2401         ADD     A,#0x1
   \   000058   0C           INC     R4
   \   000059   ED           MOV     A,R5
   \   00005A   3400         ADDC    A,#0x0
   \   00005C   FD           MOV     R5,A
   \                     ??FramePackage_0:
   \   00005D   C3           CLR     C
   \   00005E   EC           MOV     A,R4
   \   00005F   95..         SUBB    A,?V0 + 0
   \   000061   ED           MOV     A,R5
   \   000062   95..         SUBB    A,?V0 + 1
   \   000064   40D3         JC      ??FramePackage_1
   1552            //crc=Crc16Code(pFrame+1,datalen+2);//FRAME_HEAD²»¼Æ
   1553             crc=Crc16Code(pFrame+2,datalen+2);//FRAME_HEAD²»¼Æ
   \   000066                ; Setup parameters for call to function Crc16Code
   \   000066   E5..         MOV     A,?V0 + 0
   \   000068   2402         ADD     A,#0x2
   \   00006A   F9           MOV     R1,A
   \   00006B   EA           MOV     A,R2
   \   00006C   2402         ADD     A,#0x2
   \   00006E   FA           MOV     R2,A
   \   00006F   EB           MOV     A,R3
   \   000070   3400         ADDC    A,#0x0
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   ??Crc16Code?relay
   1554            *p++=LO_UINT16(crc);
   \   000076   EA           MOV     A,R2
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   1555            *p=HI_UINT16(crc);
   \   00007D   EB           MOV     A,R3
   \   00007E   F0           MOVX    @DPTR,A
   1556            //return datalen+5;
   1557            return datalen+6;//¶à¼ÓÒ»¸öFRAME_HEAD
   \   00007F   E5..         MOV     A,?V0 + 0
   \   000081   2406         ADD     A,#0x6
   \   000083   FA           MOV     R2,A
   \   000084   E5..         MOV     A,?V0 + 1
   \   000086   3400         ADDC    A,#0x0
   \   000088   FB           MOV     R3,A
   \   000089   7F06         MOV     R7,#0x6
   \   00008B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1558          }
   1559          
   1560            /*********************************************************************
   1561           * º¯ÊýÃû³Æ£ºReadADC
   1562           * ¹¦    ÄÜ£º¶ÁÈ¡ADCÖµ
   1563           * Èë¿Ú²ÎÊý£ºÍ¨µÀ
   1564           * ³ö¿Ú²ÎÊý£ºÎÞ
   1565           * ·µ »Ø Öµ£ºADÊý¾Ý()
   1566           ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1567          uint16 ReadADC( uint8 channel )
   \                     ReadADC:
   1568          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
   1569            volatile unsigned char tmp,n;
   1570            signed short adcvalue;
   1571            float voltagevalue_X;
   1572          
   1573            /* XÖá¼ÓËÙ¶È²É¼¯ */
   1574            /* ÉèÖÃ»ù×¼µçÑ¹¡¢³éÈ¡ÂÊºÍµ¥¶ËÊäÈëÍ¨µÀ */
   1575            ADCCON3 = ((0x02 << 6) |  // ²ÉÓÃAVDD5Òý½ÅÉÏµÄµçÑ¹Îª»ù×¼µçÑ¹
   1576                       (0x03 << 4) |  // ³éÈ¡ÂÊÎª512£¬ÏàÓ¦µÄÓÐÐ§Î»Îª12Î»(×î¸ßÎ»Îª·ûºÅÎ»)
   1577                       channel);
   \   000007   74B0         MOV     A,#-0x50
   \   000009   4C           ORL     A,R4
   \   00000A   F5B6         MOV     0xb6,A
   1578          
   1579            /* µÈ´ýÍ¨µÀ×ª»»Íê³É */
   1580            while ((ADCCON1 & 0x80) != 0x80);
   \                     ??ReadADC_0:
   \   00000C   E5B4         MOV     A,0xb4
   \   00000E   A2E7         MOV     C,0xE0 /* A   */.7
   \   000010   50FA         JNC     ??ReadADC_0
   1581          
   1582            /* ´ÓADCL£¬ADCH¶ÁÈ¡×ª»»Öµ£¬´Ë²Ù×÷»¹ÇåÁãADCCON1.EOC */
   1583            adcvalue = (signed short)ADCL;
   \   000012   E5BA         MOV     A,0xba
   \   000014   F5..         MOV     ?V0 + 0,A
   1584            adcvalue |= (signed short)(ADCH << 8); 
   \   000016   E5BB         MOV     A,0xbb
   \   000018   F8           MOV     R0,A
   \   000019   E4           CLR     A
   \   00001A   C8           XCH     A,R0
   \   00001B   F5..         MOV     ?V0 + 1,A
   1585          
   1586            /* ÈôadcvalueÐ¡ÓÚ0£¬¾ÍÈÏÎªËüÎª0 */
   1587            if(adcvalue < 0) adcvalue = 0;
   \   00001D   C3           CLR     C
   \   00001E   9400         SUBB    A,#0x0
   \   000020   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000022   65D0         XRL     A,PSW
   \   000024   33           RLC     A
   \   000025   5004         JNC     ??ReadADC_1
   \   000027   88..         MOV     ?V0 + 0,R0
   \   000029   88..         MOV     ?V0 + 1,R0
   1588              
   1589            adcvalue >>= 4;  // È¡³ö12Î»ÓÐÐ§Î»
   1590              
   1591            /* ½«×ª»»Öµ»»ËãÎªÊµ¼ÊµçÑ¹Öµ */
   1592            voltagevalue_X = (adcvalue * 3.3) / 2047;  // 2047ÊÇÄ£ÄâÊäÈë´ïµ½VREFÊ±µÄÂúÁ¿³ÌÖµ
   1593                                                       // ÓÉÓÚÓÐÐ§Î»ÊÇ12Î»(×î¸ßÎ»Îª·ûºÅÎ»)£¬
   1594                                                       // ËùÒÔÕýµÄÂúÁ¿³ÌÖµÎª2047
   1595                                                       // ´Ë´¦£¬VREF = 3.3V
   1596            return ((uint16)(voltagevalue_X * 1000));  // µçÑ¹·Å´ó100±¶±ãÓÚ´«Êä¼°ÉÏÎ»»ú´¦Àí
   \                     ??ReadADC_1:
   \   00002B   7404         MOV     A,#0x4
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?SS_SHR
   \   000032   E5..         MOV     A,?V0 + 1
   \   000034   33           RLC     A
   \   000035   95E0         SUBB    A,0xE0 /* A   */
   \   000037   F5..         MOV     ?V0 + 2,A
   \   000039   F5..         MOV     ?V0 + 3,A
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?L_TO_FLT
   \   000040   90....       MOV     DPTR,#__Constant_40533333
   \   000043   78..         MOV     R0,#?V0 + 4
   \   000045   12....       LCALL   ?L_MOV_X
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   79..         MOV     R1,#?V0 + 4
   \   00004C   12....       LCALL   ?FLT_MUL
   \   00004F   90....       MOV     DPTR,#__Constant_44ffe000
   \   000052   78..         MOV     R0,#?V0 + 4
   \   000054   12....       LCALL   ?L_MOV_X
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   79..         MOV     R1,#?V0 + 4
   \   00005B   12....       LCALL   ?FLT_DIV
   \   00005E   90....       MOV     DPTR,#__Constant_447a0000
   \   000061   78..         MOV     R0,#?V0 + 4
   \   000063   12....       LCALL   ?L_MOV_X
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   79..         MOV     R1,#?V0 + 4
   \   00006A   12....       LCALL   ?FLT_MUL
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?FLT_TO_L
   \   000072   AA..         MOV     R2,?V0 + 0
   \   000074   AB..         MOV     R3,?V0 + 1
   \   000076   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000079                REQUIRE ADCCON3
   \   000079                REQUIRE ADCCON1
   \   000079                REQUIRE ADCL
   \   000079                REQUIRE ADCH
   1597          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1598          void SendDataRequest(uint8 *pBuf,uint16 len)
   \                     SendDataRequest:
   1599          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1600              if(!ZG_DEVICE_COORDINATOR_TYPE)//·ÇÐ­µ÷Æ÷
   \   000005   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000008   E0           MOVX    A,@DPTR
   \   000009   90....       MOV     DPTR,#TestDirectSent_DstAddr + 8
   \   00000C   600A         JZ      ??SendDataRequest_0
   1601                {
   1602                  TestDirectSent_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;//µØÖ·´«ËÍ
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   1603                  TestDirectSent_DstAddr.endPoint = 0;
   1604                  TestDirectSent_DstAddr.addr.shortAddr = 0x0000;
   \                     ??CrossCallReturnLabel_18:
   \   000013   90....       MOV     DPTR,#TestDirectSent_DstAddr
   \   000016   8003         SJMP    ??CrossCallReturnLabel_3
   1605                }
   1606                else
   1607                {
   1608                  if(ZG_DEVICE_COORDINATOR_TYPE)
   1609                  {
   1610                    TestDirectSent_DstAddr.addrMode=(afAddrMode_t)AddrBroadcast;//Addr16Bit;//µØÖ·´«ËÍ
   \                     ??SendDataRequest_0:
   \   000018   12....       LCALL   ?Subroutine7 & 0xFFFF
   1611                    TestDirectSent_DstAddr.endPoint = 0;
   1612                    TestDirectSent_DstAddr.addr.shortAddr = 0xffff;//destAddr;
   1613                    //TestDirectSent_DstAddr.addr.extAddr
   1614                  }
   1615                }
   \                     ??CrossCallReturnLabel_3:
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
   1616               AF_DataRequest(    
   1617                        &TestDirectSent_DstAddr,               //µØÖ·
   1618                        &TransmitApp_epDesc,                //ÃèÊö
   1619                        TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1620                          len,                                  //len
   1621                          pBuf,//TransmitApp_Msg,             //DATA
   1622                        &TransmitApp_TransID,               //
   1623                        TRANSMITAPP_TX_OPTIONS,
   1624                        AF_DEFAULT_RADIUS 
   1625                        );
   \   00001E                ; Setup parameters for call to function AF_DataRequest
   \   00001E   75..1E       MOV     ?V0 + 0,#0x1e
   \   000021   78..         MOV     R0,#?V0 + 0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000026   75....       MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
   \   000029   75....       MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8A..         MOV     ?V0 + 0,R2
   \   000033   8B..         MOV     ?V0 + 1,R3
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   8C..         MOV     ?V0 + 0,R4
   \   00003C   8D..         MOV     ?V0 + 1,R5
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   75..A1       MOV     ?V0 + 0,#-0x5f
   \   000046   75..00       MOV     ?V0 + 1,#0x0
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   7920         MOV     R1,#0x20
   \   000050   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000052   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   000054   7A..         MOV     R2,#TestDirectSent_DstAddr & 0xff
   \   000056   7B..         MOV     R3,#(TestDirectSent_DstAddr >> 8) & 0xff
   \   000058   12....       LCALL   ??AF_DataRequest?relay
   \   00005B   7409         MOV     A,#0x9
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   1626               HalLedBlink (HAL_LED_3, 1, 50, 200);
   \   000060                ; Setup parameters for call to function HalLedBlink
   \   000060   7CC8         MOV     R4,#-0x38
   \   000062   7D00         MOV     R5,#0x0
   \   000064   02....       LJMP    ?Subroutine0 & 0xFFFF
   1627          }
   1628          
   1629          #if defined(GTA_WTHSB_R1)
   1630          uint8 readTempHumi(void)
   1631          {
   1632           float f_humi=0,f_temp=0; 
   1633           
   1634            uint8 checksum;
   1635           
   1636            /* ¿ØÖÆSHT11½øÐÐÎÂÊª¶È²âÁ¿ */
   1637            
   1638            
   1639            s_measure(temp_val,&checksum,TEMP); // ²âÁ¿ÎÂ¶È
   1640            s_measure(humi_val,&checksum,HUMI); // ²âÁ¿Ïà¶ÔÊª¶È
   1641            f_humi=BUILD_UINT16(humi_val[0],humi_val[1]);
   1642            f_temp=BUILD_UINT16(temp_val[0],temp_val[1]);
   1643            calc_sth11(&f_humi,&f_temp);
   1644            humi_val[0]=f_humi;//&(uint8)f_humi;
   1645            humi_val[1]=(f_humi-humi_val[0])*100;  
   1646            temp_val[0]=f_temp; 
   1647            temp_val[1]=(f_temp-temp_val[0])*100;  
   1648            return TRUE;
   1649          }
   1650          #endif
   1651          
   1652          #if defined(GTA_WMSCB_R1)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1653          void init_GTA_WMSCB(void)
   \                     init_GTA_WMSCB:
   1654          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1655            P0SEL=P0SEL&0x8C;//10001100
   \   000000   53F38C       ANL     0xf3,#0x8c
   1656            P1SEL=P1SEL&0xF0;
   \   000003   53F4F0       ANL     0xf4,#0xf0
   1657            P2SEL=P2SEL&0xFA;
   \   000006   53F5FA       ANL     0xf5,#0xfa
   1658            //HAL_CONFIG_IO_OUTPUT(0, HAL_LCD_CS_PIN, 1);
   1659            IO_DIR_PORT_PIN(0, 0, IO_OUT);
   \   000009   43FD01       ORL     0xfd,#0x1
   1660            IO_DIR_PORT_PIN(0, 1, IO_OUT);
   \   00000C   43FD02       ORL     0xfd,#0x2
   1661            IO_DIR_PORT_PIN(0, 4, IO_OUT);
   \   00000F   43FD10       ORL     0xfd,#0x10
   1662            IO_DIR_PORT_PIN(0, 5, IO_OUT);
   \   000012   43FD20       ORL     0xfd,#0x20
   1663            IO_DIR_PORT_PIN(0, 6, IO_OUT);
   \   000015   43FD40       ORL     0xfd,#0x40
   1664            IO_DIR_PORT_PIN(1, 0, IO_OUT);
   \   000018   43FE01       ORL     0xfe,#0x1
   1665            IO_DIR_PORT_PIN(1, 1, IO_OUT);
   \   00001B   43FE02       ORL     0xfe,#0x2
   1666            IO_DIR_PORT_PIN(1, 2, IO_OUT);
   \   00001E   43FE04       ORL     0xfe,#0x4
   1667            IO_DIR_PORT_PIN(1, 3, IO_OUT);
   \   000021   43FE08       ORL     0xfe,#0x8
   1668            IO_DIR_PORT_PIN(2, 0, IO_OUT);
   \   000024   43FF01       ORL     0xff,#0x1
   1669            IO_DIR_PORT_PIN(2, 2, IO_OUT);
   \   000027   43FF04       ORL     0xff,#0x4
   1670          }
   \   00002A   02....       LJMP    ?BRET
   \   00002D                REQUIRE P0SEL
   \   00002D                REQUIRE P1SEL
   \   00002D                REQUIRE P2SEL
   \   00002D                REQUIRE P0DIR
   \   00002D                REQUIRE P1DIR
   \   00002D                REQUIRE P2DIR
   1671          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1672          void ctrl_GTA_WMSCB(uint8 port,uint8 data)
   \                     ctrl_GTA_WMSCB:
   1673          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1674            //uint8 i=0;
   1675            //init_GTA_WMSCB();
   1676            asm("nop"); 
   \   000000   00           nop
   1677            asm("nop"); 
   \   000001   00           nop
   1678          
   1679            T82C55A_WR=1;
   \   000002   D2A2         SETB    0xa0.2
   1680            asm("nop"); 
   \   000004   00           nop
   1681            asm("nop"); 
   \   000005   00           nop
   1682          
   1683            switch(port)
   \   000006   E9           MOV     A,R1
   \   000007   24BF         ADD     A,#-0x41
   \   000009   600C         JZ      ??ctrl_GTA_WMSCB_0
   \   00000B   14           DEC     A
   \   00000C   600D         JZ      ??ctrl_GTA_WMSCB_1
   \   00000E   14           DEC     A
   \   00000F   6010         JZ      ??ctrl_GTA_WMSCB_2
   \   000011   24F6         ADD     A,#-0xa
   \   000013   6010         JZ      ??ctrl_GTA_WMSCB_3
   \   000015   8012         SJMP    ??ctrl_GTA_WMSCB_4
   1684            {
   1685            case        'A':
   1686              T82C55A_ADDR0=0;
   \                     ??ctrl_GTA_WMSCB_0:
   \   000017   C2A0         CLR     0xa0.0
   1687              T82C55A_ADDR1=0;
   \   000019   8002         SJMP    ??ctrl_GTA_WMSCB_5
   1688              break;
   1689            case        'B':
   1690              T82C55A_ADDR0=1;
   \                     ??ctrl_GTA_WMSCB_1:
   \   00001B   D2A0         SETB    0xa0.0
   1691              T82C55A_ADDR1=0;
   \                     ??ctrl_GTA_WMSCB_5:
   \   00001D   C293         CLR     0x90.3
   1692              break;  
   \   00001F   8008         SJMP    ??ctrl_GTA_WMSCB_4
   1693            case        'C':
   1694              T82C55A_ADDR0=0;
   \                     ??ctrl_GTA_WMSCB_2:
   \   000021   C2A0         CLR     0xa0.0
   1695              T82C55A_ADDR1=1;
   \   000023   8002         SJMP    ??ctrl_GTA_WMSCB_6
   1696              break;
   1697            case        'M':
   1698              T82C55A_ADDR0=1;
   \                     ??ctrl_GTA_WMSCB_3:
   \   000025   D2A0         SETB    0xa0.0
   1699              T82C55A_ADDR1=1;
   \                     ??ctrl_GTA_WMSCB_6:
   \   000027   D293         SETB    0x90.3
   1700              break;
   1701            default:break;
   1702            }
   1703            asm("nop"); 
   \                     ??ctrl_GTA_WMSCB_4:
   \   000029   00           nop
   1704            asm("nop"); 
   \   00002A   00           nop
   1705          
   1706            T82C55A_WR=0;
   \   00002B   C2A2         CLR     0xa0.2
   1707            asm("nop"); 
   \   00002D   00           nop
   1708            asm("nop"); 
   \   00002E   00           nop
   1709          
   1710            if(data&0x01)
   \   00002F   EA           MOV     A,R2
   \   000030   A2E0         MOV     C,0xE0 /* A   */.0
   \   000032   5004         JNC     ??ctrl_GTA_WMSCB_7
   1711              T82C55A_D0=1;
   \   000034   D280         SETB    0x80.0
   \   000036   8002         SJMP    ??ctrl_GTA_WMSCB_8
   1712            else
   1713              T82C55A_D0=0;
   \                     ??ctrl_GTA_WMSCB_7:
   \   000038   C280         CLR     0x80.0
   1714            
   1715            if(data&0x02)
   \                     ??ctrl_GTA_WMSCB_8:
   \   00003A   A2E1         MOV     C,0xE0 /* A   */.1
   \   00003C   5004         JNC     ??ctrl_GTA_WMSCB_9
   1716              T82C55A_D1=1;
   \   00003E   D281         SETB    0x80.1
   \   000040   8002         SJMP    ??ctrl_GTA_WMSCB_10
   1717            else
   1718              T82C55A_D1=0;
   \                     ??ctrl_GTA_WMSCB_9:
   \   000042   C281         CLR     0x80.1
   1719            
   1720            if(data&0x04)
   \                     ??ctrl_GTA_WMSCB_10:
   \   000044   A2E2         MOV     C,0xE0 /* A   */.2
   \   000046   5004         JNC     ??ctrl_GTA_WMSCB_11
   1721              T82C55A_D2=1;
   \   000048   D284         SETB    0x80.4
   \   00004A   8002         SJMP    ??ctrl_GTA_WMSCB_12
   1722            else
   1723              T82C55A_D2=0;
   \                     ??ctrl_GTA_WMSCB_11:
   \   00004C   C284         CLR     0x80.4
   1724            
   1725            if(data&0x08)
   \                     ??ctrl_GTA_WMSCB_12:
   \   00004E   A2E3         MOV     C,0xE0 /* A   */.3
   \   000050   5004         JNC     ??ctrl_GTA_WMSCB_13
   1726              T82C55A_D3=1;
   \   000052   D285         SETB    0x80.5
   \   000054   8002         SJMP    ??ctrl_GTA_WMSCB_14
   1727            else
   1728              T82C55A_D3=0;
   \                     ??ctrl_GTA_WMSCB_13:
   \   000056   C285         CLR     0x80.5
   1729            
   1730            if(data&0x10)
   \                     ??ctrl_GTA_WMSCB_14:
   \   000058   A2E4         MOV     C,0xE0 /* A   */.4
   \   00005A   5004         JNC     ??ctrl_GTA_WMSCB_15
   1731              T82C55A_D4=1;
   \   00005C   D286         SETB    0x80.6
   \   00005E   8002         SJMP    ??ctrl_GTA_WMSCB_16
   1732            else
   1733              T82C55A_D4=0;
   \                     ??ctrl_GTA_WMSCB_15:
   \   000060   C286         CLR     0x80.6
   1734            
   1735            if(data&0x20)
   \                     ??ctrl_GTA_WMSCB_16:
   \   000062   A2E5         MOV     C,0xE0 /* A   */.5
   \   000064   5004         JNC     ??ctrl_GTA_WMSCB_17
   1736              T82C55A_D5=1;
   \   000066   D290         SETB    0x90.0
   \   000068   8002         SJMP    ??ctrl_GTA_WMSCB_18
   1737            else
   1738              T82C55A_D5=0;
   \                     ??ctrl_GTA_WMSCB_17:
   \   00006A   C290         CLR     0x90.0
   1739            
   1740            if(data&0x40)
   \                     ??ctrl_GTA_WMSCB_18:
   \   00006C   A2E6         MOV     C,0xE0 /* A   */.6
   \   00006E   5004         JNC     ??ctrl_GTA_WMSCB_19
   1741              T82C55A_D6=1;
   \   000070   D291         SETB    0x90.1
   \   000072   8002         SJMP    ??ctrl_GTA_WMSCB_20
   1742            else
   1743              T82C55A_D6=0;
   \                     ??ctrl_GTA_WMSCB_19:
   \   000074   C291         CLR     0x90.1
   1744            
   1745            if(data&0x80)
   \                     ??ctrl_GTA_WMSCB_20:
   \   000076   A2E7         MOV     C,0xE0 /* A   */.7
   \   000078   5004         JNC     ??ctrl_GTA_WMSCB_21
   1746              T82C55A_D7=1;
   \   00007A   D292         SETB    0x90.2
   \   00007C   8002         SJMP    ??ctrl_GTA_WMSCB_22
   1747            else
   1748              T82C55A_D7=0;
   \                     ??ctrl_GTA_WMSCB_21:
   \   00007E   C292         CLR     0x90.2
   1749            asm("nop"); 
   \                     ??ctrl_GTA_WMSCB_22:
   \   000080   00           nop
   1750            asm("nop"); 
   \   000081   00           nop
   1751          
   1752            T82C55A_WR=1;
   \   000082   D2A2         SETB    0xa0.2
   1753            asm("nop"); 
   \   000084   00           nop
   1754            asm("nop"); 
   \   000085   00           nop
   1755          
   1756            T82C55A_WR=0;
   \   000086   C2A2         CLR     0xa0.2
   1757            
   1758          }
   \   000088   02....       LJMP    ?BRET
   \   00008B                REQUIRE _A_P2
   \   00008B                REQUIRE _A_P1
   \   00008B                REQUIRE _A_P0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for NativeAddr>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessZDOIncomingMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessZDOIncomingMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_SendTheMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ChangeState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ChangeState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_SetSendEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_SetSendEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_DisplayResults?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_DisplayResults

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initUart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initUart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??uartRxCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FrameUnPackage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FrameUnPackage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Crc16Code?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Crc16Code

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SentDataInBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SentDataInBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendBindRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReportData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReportData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StepMotorRun?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StepMotorRun

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SegDisplay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SegDisplay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FramePackage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FramePackage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadADC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadADC

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendDataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??init_GTA_WMSCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    init_GTA_WMSCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ctrl_GTA_WMSCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ctrl_GTA_WMSCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GTA Zigbee">`:
   \   000000   47544120     DB "GTA Zigbee"
   \            5A696762
   \            656500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {3, 9, 12, 6}>`:
   \   000000   03           DB 3
   \   000001   09           DB 9
   \   000002   0C           DB 12
   \   000003   06           DB 6

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {3, 6, 12, 9}>`:
   \   000000   03           DB 3
   \   000001   06           DB 6
   \   000002   0C           DB 12
   \   000003   09           DB 9

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {63, 6, 91, 79, 102, 109, 125, 7, 1`:
   \   000000   3F           DB 63
   \   000001   06           DB 6
   \   000002   5B           DB 91
   \   000003   4F           DB 79
   \   000004   66           DB 102
   \   000005   6D           DB 109
   \   000006   7D           DB 125
   \   000007   07           DB 7
   \   000008   7F           DB 127
   \   000009   6F           DB 111

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40533333:
   \   000000   33335340     DD 40533333H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_44ffe000:
   \   000000   00E0FF44     DD 44FFE000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_447a0000:
   \   000000   00007A44     DD 447A0000H
   1759          
   1760          #endif

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     26  Crc16Code
       1      0     48  FramePackage
                          0 0  14 -> Crc16Code
       1      0     49  FrameUnPackage
                          0 0  16 -> Crc16Code
       0      0     16  ReadADC
       0      0     67  ReportData
                          0 0  30 -> ControlStepMotor
                          0 0  30 -> DisplaySmg
                          0 0  34 -> FramePackage
                          0 0  30 -> SendDataRequest
                          0 0  32 -> osal_nv_item_init
                          0 0  34 -> osal_nv_write
       2      0     46  SegDisplay
                          0 0  20 -> ctrl_GTA_WMSCB
       0      0     45  SendBindRequest
                          0 0  20 -> HalLedBlink
                          0 0  20 -> NLME_GetShortAddr
                          0 0  29 -> ZDP_EndDeviceBindReq
       0      0     49  SendDataRequest
                          0 0  19 -> AF_DataRequest
                          0 0  10 -> HalLedBlink
       0      0     19  SentDataInBind
                          0 0  19 -> AF_DataRequest
                          0 0  10 -> HalLedBlink
       2      0     26  StepMotorRun
                          0 0  26 -> SegDisplay
                          0 0  26 -> ctrl_GTA_WMSCB
       2      0      0  TransmitApp_ChangeState
                          2 0   0 -> TransmitApp_SetSendEvt
       0      0     28  TransmitApp_DisplayResults
                          0 0  12 -> osal_GetSystemClock
                          0 0  12 -> osal_stop_timerEx
       0      0     25  TransmitApp_HandleKeys
                          0 0   9 -> HalLedBlink
                          0 0   9 -> osal_set_event
       1      0     16  TransmitApp_Init
                          0 0  12 -> HalLcdWriteString
                          0 0  12 -> RegisterForKeys
                          0 0  12 -> ZDO_RegisterForZDOMsg
                          0 0  12 -> afDataReqMTU
                          0 0  12 -> afRegister
                          0 0  12 -> initUart
                          0 0  14 -> osal_nv_item_init
                          0 0  16 -> osal_nv_read
       0      0      0  TransmitApp_MessageMSGCB
       0      0     16  TransmitApp_ProcessEvent
                          0 0  16 -> HalLedBlink
                          0 0  16 -> SendBindRequest
                          0 0  16 -> TransmitApp_DisplayResults
                          0 0  16 -> TransmitApp_HandleKeys
                          0 0  16 -> TransmitApp_ProcessZDOMsgs
                          0 0  16 -> TransmitApp_SendTheMessage
                          0 0  16 -> TransmitApp_SetSendEvt
                          0 0  16 -> osal_GetSystemClock
                          0 0  16 -> osal_msg_deallocate
                          0 0  16 -> osal_msg_receive
                          0 0  16 -> osal_start_timerEx
       0      0     43  TransmitApp_ProcessZDOIncomingMsgs
                          0 0  33 -> FrameUnPackage
                          0 0  33 -> HalLedBlink
                          0 0  33 -> HalUARTWrite
                          0 0  33 -> ReportData
       0      0     26  TransmitApp_ProcessZDOMsgs
                          0 0  10 -> HalLedBlink
                          0 0  10 -> HalLedSet
                          0 0  10 -> TransmitApp_ProcessZDOIncomingMsgs
                          0 0  10 -> ZDO_ParseEPListRsp
                          0 0  10 -> osal_mem_free
                          0 0  10 -> osal_stop_timerEx
       0      0     35  TransmitApp_SendTheMessage
                          0 0  19 -> AF_DataRequest
                          0 0  10 -> HalLedBlink
                          0 0  10 -> osal_start_timerEx
       2      0     16  TransmitApp_SetSendEvt
                          2 0   0 -> osal_start_timerEx
       0      0     26  ctrl_GTA_WMSCB
       2      0     41  initUart
                          2 0  29 -> HalUARTOpen
       0      0      0  init_GTA_WMSCB
       0      0    149  uartRxCB
                          0 0 149 -> AF_DataRequest
                          0 0 140 -> HalLedBlink
                          0 0 140 -> HalUARTRead


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "GTA Zigbee">
       4  ?<Constant {3, 6, 12, 9}>
       4  ?<Constant {3, 9, 12, 6}>
      10  ?<Constant {63, 6, 91, 79, 102, 109, 125, 7, 1
       1  ?<Initializer for NativeAddr>
       6  ??Crc16Code?relay
       6  ??FramePackage?relay
       6  ??FrameUnPackage?relay
       6  ??ReadADC?relay
       6  ??ReportData?relay
       6  ??SegDisplay?relay
       6  ??SendBindRequest?relay
       6  ??SendDataRequest?relay
       6  ??SentDataInBind?relay
       6  ??StepMotorRun?relay
       5  ??Subroutine16_0
       5  ??Subroutine17_0
       5  ??Subroutine18_0
       5  ??Subroutine19_0
       6  ??TransmitApp_ChangeState?relay
       6  ??TransmitApp_DisplayResults?relay
       6  ??TransmitApp_HandleKeys?relay
       6  ??TransmitApp_Init?relay
       6  ??TransmitApp_MessageMSGCB?relay
       6  ??TransmitApp_ProcessEvent?relay
       6  ??TransmitApp_ProcessZDOIncomingMsgs?relay
       6  ??TransmitApp_ProcessZDOMsgs?relay
       6  ??TransmitApp_SendTheMessage?relay
       6  ??TransmitApp_SetSendEvt?relay
       6  ??ctrl_GTA_WMSCB?relay
       6  ??initUart?relay
       6  ??init_GTA_WMSCB?relay
       6  ??uartRxCB?relay
       9  ?Subroutine0
       5  ?Subroutine1
      13  ?Subroutine10
       7  ?Subroutine11
      12  ?Subroutine12
       6  ?Subroutine13
      10  ?Subroutine14
       3  ?Subroutine15
       5  ?Subroutine2
       7  ?Subroutine3
       5  ?Subroutine4
       6  ?Subroutine5
      12  ?Subroutine6
      12  ?Subroutine7
       2  ?Subroutine8
       7  ?Subroutine9
       1  ADCCON1
       1  ADCCON3
       1  ADCH
       1  ADCL
      87  Crc16Code
       1  Flag_ReportData
     142  FramePackage
     312  FrameUnPackage
       1  NativeAddr
       1  P0DIR
       1  P0SEL
       1  P1DIR
       1  P1SEL
       1  P2DIR
       1  P2SEL
     121  ReadADC
     292  ReportData
      69  SegDisplay
     135  SendBindRequest
     103  SendDataRequest
      78  SentDataInBind
     235  StepMotorRun
      12  TestDirectSent_DstAddr
      25  TransmitApp_ChangeState
       2  TransmitApp_ClusterList
     123  TransmitApp_DisplayResults
      12  TransmitApp_DstAddr
      55  TransmitApp_HandleKeys
     275  TransmitApp_Init
       2  TransmitApp_MaxDataLength
       3  TransmitApp_MessageMSGCB
     102  TransmitApp_Msg
       1  TransmitApp_NwkState
     327  TransmitApp_ProcessEvent
     111  TransmitApp_ProcessZDOIncomingMsgs
     181  TransmitApp_ProcessZDOMsgs
     185  TransmitApp_SendTheMessage
      22  TransmitApp_SetSendEvt
      12  TransmitApp_SimpleDesc
       1  TransmitApp_State
       1  TransmitApp_TaskID
       1  TransmitApp_TransID
       6  TransmitApp_epDesc
       1  _A_P0
       1  _A_P1
       1  _A_P2
       4  __Constant_40533333
       4  __Constant_447a0000
       4  __Constant_44ffe000
       4  clkShdw
     139  ctrl_GTA_WMSCB
      97  initUart
      45  init_GTA_WMSCB
       2  pktCounter
       4  rxAccum
       4  rxTotal
       1  timerOn
       1  timesToSend
       4  txAccum
       4  txTotal
     153  uartRxCB

 
 3 456 bytes in segment BANKED_CODE
   144 bytes in segment BANK_RELAYS
    13 bytes in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    55 bytes in segment XDATA_ROM_C
   163 bytes in segment XDATA_Z
 
 3 601 bytes of CODE  memory
    43 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+ 13 bytes shared)
   164 bytes of XDATA memory

Errors: none
Warnings: 19
