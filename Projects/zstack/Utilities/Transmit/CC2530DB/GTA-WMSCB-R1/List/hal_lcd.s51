///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            17/Aug/2016  12:16:07 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Components\hal\t /
//                          arget\CC2530EB\hal_lcd.c                          /
//    Command line       =  -f E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zsta /
//                          ck\Utilities\Transmit\CC2530DB\..\..\..\Tools\CC2 /
//                          530DB\f8wEndev.cfg (-DCPU32MHZ                    /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f         /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0          /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00001000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1178                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=3           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=2   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\ZSTACK-GTAMODBUS-v1.0£¨ /
//                          Û³ÎÄ£©\Components\hal\target\CC2530EB\hal_lcd.c   /
//                          -D xNWK_AUTO_POLL -D xMT_TASK -D xZTOOL_P1 -D     /
//                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                   /
//                          ZDNWKMGR_MIN_TRANSMISSIONS=0 -D xGTA_DEBUG -D     /
//                          ZIGBEEPRO -D GTA_WMSCB_R1 -lC                     /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\GTA-WMSCB-R1\List\    /
//                          -lA E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zst /
//                          ack\Utilities\Transmit\CC2530DB\GTA-WMSCB-R1\List /
//                          \ --diag_suppress Pe001,Pa010 -o                  /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\GTA-WMSCB-R1\Obj\ -e  /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\ -I                   /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\Source\ -I         /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\ZMain\TI2530 /
//                          DB\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\ /
//                          zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\include\ -I                       /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\hal\target\CC2530EB\ -I                      /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\include\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ /
//                          ÎÄ£©\Projects\zstack\Utilities\Transmit\CC2530DB\ /
//                          ..\..\..\..\..\Components\mac\high_level\ -I      /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\low_level\srf04\ -I                      /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mac\low_level\srf04\single_chip\ -I          /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\mt\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Proj /
//                          ects\zstack\Utilities\Transmit\CC2530DB\..\..\..\ /
//                          ..\..\Components\osal\include\ -I                 /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\services\saddr\ -I                           /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\services\sdata\ -I                           /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\af\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£ /
//                          ©\Projects\zstack\Utilities\Transmit\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\nwk\ -I              /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sapi\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³Î /
//                          Ä£©\Projects\zstack\Utilities\Transmit\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\sec\ -I            /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\stack\sys\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ /
//                          £©\Projects\zstack\Utilities\Transmit\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\zdo\ -I             /
//                          E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\ -I E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Pr /
//                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\. /
//                          .\..\..\Components\zmac\f8w\ -Ohz                 /
//                          --require_prototypes                              /
//    List file          =  E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Projects\zstack\ /
//                          Utilities\Transmit\CC2530DB\GTA-WMSCB-R1\List\hal /
//                          _lcd.s51                                          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_lcd

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??HalLcdDisplayPercentBar?relay
        FUNCTION ??HalLcdDisplayPercentBar?relay,0203H
        PUBLIC ??HalLcdInit?relay
        FUNCTION ??HalLcdInit?relay,0203H
        PUBLIC ??HalLcdWriteScreen?relay
        FUNCTION ??HalLcdWriteScreen?relay,0203H
        PUBLIC ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,0203H
        PUBLIC ??HalLcdWriteStringValue?relay
        FUNCTION ??HalLcdWriteStringValue?relay,0203H
        PUBLIC ??HalLcdWriteStringValueValue?relay
        FUNCTION ??HalLcdWriteStringValueValue?relay,0203H
        PUBLIC ??HalLcdWriteValue?relay
        FUNCTION ??HalLcdWriteValue?relay,0203H
        PUBLIC ??HalLcd_HW_Clear?relay
        FUNCTION ??HalLcd_HW_Clear?relay,0203H
        PUBLIC ??HalLcd_HW_ClearAllSpecChars?relay
        FUNCTION ??HalLcd_HW_ClearAllSpecChars?relay,0203H
        PUBLIC ??HalLcd_HW_Control?relay
        FUNCTION ??HalLcd_HW_Control?relay,0203H
        PUBLIC ??HalLcd_HW_FontCharSet?relay
        FUNCTION ??HalLcd_HW_FontCharSet?relay,0203H
        PUBLIC ??HalLcd_HW_FontMode?relay
        FUNCTION ??HalLcd_HW_FontMode?relay,0203H
        PUBLIC ??HalLcd_HW_Init?relay
        FUNCTION ??HalLcd_HW_Init?relay,0203H
        PUBLIC ??HalLcd_HW_SetBackLight?relay
        FUNCTION ??HalLcd_HW_SetBackLight?relay,0203H
        PUBLIC ??HalLcd_HW_SetContrast?relay
        FUNCTION ??HalLcd_HW_SetContrast?relay,0203H
        PUBLIC ??HalLcd_HW_WaitUs?relay
        FUNCTION ??HalLcd_HW_WaitUs?relay,0203H
        PUBLIC ??HalLcd_HW_Write?relay
        FUNCTION ??HalLcd_HW_Write?relay,0203H
        PUBLIC ??HalLcd_HW_WriteChar?relay
        FUNCTION ??HalLcd_HW_WriteChar?relay,0203H
        PUBLIC ??HalLcd_HW_WriteLine?relay
        FUNCTION ??HalLcd_HW_WriteLine?relay,0203H
        PUBLIC HalLcdDisplayPercentBar
        FUNCTION HalLcdDisplayPercentBar,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC HalLcdInit
        FUNCTION HalLcdInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLcdWriteScreen
        FUNCTION HalLcdWriteScreen,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLcdWriteString
        FUNCTION HalLcdWriteString,021203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC HalLcdWriteStringValue
        FUNCTION HalLcdWriteStringValue,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 46, STACK
        PUBLIC HalLcdWriteStringValueValue
        FUNCTION HalLcdWriteStringValueValue,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 47, STACK
        PUBLIC HalLcdWriteValue
        FUNCTION HalLcdWriteValue,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC HalLcd_HW_Clear
        FUNCTION HalLcd_HW_Clear,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLcd_HW_ClearAllSpecChars
        FUNCTION HalLcd_HW_ClearAllSpecChars,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalLcd_HW_Control
        FUNCTION HalLcd_HW_Control,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC HalLcd_HW_FontCharSet
        FUNCTION HalLcd_HW_FontCharSet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLcd_HW_FontMode
        FUNCTION HalLcd_HW_FontMode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLcd_HW_Init
        FUNCTION HalLcd_HW_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLcd_HW_SetBackLight
        FUNCTION HalLcd_HW_SetBackLight,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLcd_HW_SetContrast
        FUNCTION HalLcd_HW_SetContrast,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalLcd_HW_WaitUs
        FUNCTION HalLcd_HW_WaitUs,080203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC HalLcd_HW_Write
        FUNCTION HalLcd_HW_Write,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLcd_HW_WriteChar
        FUNCTION HalLcd_HW_WriteChar,021203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLcd_HW_WriteLine
        FUNCTION HalLcd_HW_WriteLine,021203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBWEAK PERCFG
        PUBWEAK U1BAUD
        PUBWEAK U1DBUF
        PUBWEAK U1GCR
        PUBWEAK U1UCR
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK _A_U1CSR
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
_ltoa               SYMBOL "_ltoa"
??_ltoa?relay       SYMBOL "?relay", _ltoa
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_strlen         SYMBOL "osal_strlen"
??osal_strlen?relay SYMBOL "?relay", osal_strlen
HalLcdDisplayPercentBar SYMBOL "HalLcdDisplayPercentBar"
??HalLcdDisplayPercentBar?relay SYMBOL "?relay", HalLcdDisplayPercentBar
HalLcdInit          SYMBOL "HalLcdInit"
??HalLcdInit?relay  SYMBOL "?relay", HalLcdInit
HalLcdWriteScreen   SYMBOL "HalLcdWriteScreen"
??HalLcdWriteScreen?relay SYMBOL "?relay", HalLcdWriteScreen
HalLcdWriteString   SYMBOL "HalLcdWriteString"
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
HalLcdWriteStringValue SYMBOL "HalLcdWriteStringValue"
??HalLcdWriteStringValue?relay SYMBOL "?relay", HalLcdWriteStringValue
HalLcdWriteStringValueValue SYMBOL "HalLcdWriteStringValueValue"
??HalLcdWriteStringValueValue?relay SYMBOL "?relay", HalLcdWriteStringValueValue
HalLcdWriteValue    SYMBOL "HalLcdWriteValue"
??HalLcdWriteValue?relay SYMBOL "?relay", HalLcdWriteValue
HalLcd_HW_Clear     SYMBOL "HalLcd_HW_Clear"
??HalLcd_HW_Clear?relay SYMBOL "?relay", HalLcd_HW_Clear
HalLcd_HW_ClearAllSpecChars SYMBOL "HalLcd_HW_ClearAllSpecChars"
??HalLcd_HW_ClearAllSpecChars?relay SYMBOL "?relay", HalLcd_HW_ClearAllSpecChars
HalLcd_HW_Control   SYMBOL "HalLcd_HW_Control"
??HalLcd_HW_Control?relay SYMBOL "?relay", HalLcd_HW_Control
HalLcd_HW_FontCharSet SYMBOL "HalLcd_HW_FontCharSet"
??HalLcd_HW_FontCharSet?relay SYMBOL "?relay", HalLcd_HW_FontCharSet
HalLcd_HW_FontMode  SYMBOL "HalLcd_HW_FontMode"
??HalLcd_HW_FontMode?relay SYMBOL "?relay", HalLcd_HW_FontMode
HalLcd_HW_Init      SYMBOL "HalLcd_HW_Init"
??HalLcd_HW_Init?relay SYMBOL "?relay", HalLcd_HW_Init
HalLcd_HW_SetBackLight SYMBOL "HalLcd_HW_SetBackLight"
??HalLcd_HW_SetBackLight?relay SYMBOL "?relay", HalLcd_HW_SetBackLight
HalLcd_HW_SetContrast SYMBOL "HalLcd_HW_SetContrast"
??HalLcd_HW_SetContrast?relay SYMBOL "?relay", HalLcd_HW_SetContrast
HalLcd_HW_WaitUs    SYMBOL "HalLcd_HW_WaitUs"
??HalLcd_HW_WaitUs?relay SYMBOL "?relay", HalLcd_HW_WaitUs
HalLcd_HW_Write     SYMBOL "HalLcd_HW_Write"
??HalLcd_HW_Write?relay SYMBOL "?relay", HalLcd_HW_Write
HalLcd_HW_WriteChar SYMBOL "HalLcd_HW_WriteChar"
??HalLcd_HW_WriteChar?relay SYMBOL "?relay", HalLcd_HW_WriteChar
HalLcd_HW_WriteLine SYMBOL "HalLcd_HW_WriteLine"
??HalLcd_HW_WriteLine?relay SYMBOL "?relay", HalLcd_HW_WriteLine

        EXTERN ??_ltoa?relay
        FUNCTION ??_ltoa?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H
        EXTERN _ltoa
        FUNCTION _ltoa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\ZSTACK-GTAMODBUS-v1.0£¨Û³ÎÄ£©\Components\hal\target\CC2530EB\hal_lcd.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_lcd.c
//    3   Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
//    4   Revision:       $Revision: 19404 $
//    5 
//    6   Description:    This file contains the interface to the HAL LCD Service.
//    7 
//    8 
//    9   Copyright 2007 - 2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /**************************************************************************************************
//   41  *                                           INCLUDES
//   42  **************************************************************************************************/
//   43 #include "hal_types.h"
//   44 #include "hal_lcd.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f8H
// union <unnamed> volatile __sfr _A_U1CSR
_A_U1CSR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f9H
// unsigned char volatile __sfr U1DBUF
U1DBUF:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0faH
// unsigned char volatile __sfr U1BAUD
U1BAUD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fbH
// unsigned char volatile __sfr U1UCR
U1UCR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fcH
// unsigned char volatile __sfr U1GCR
U1GCR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   45 #include "OSAL.h"
//   46 #include "OnBoard.h"
//   47 #include "hal_assert.h"
//   48 
//   49 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//   50   #include "DebugTrace.h"
//   51 #endif
//   52 
//   53 /**************************************************************************************************
//   54  *                                          CONSTANTS
//   55  **************************************************************************************************/
//   56 /*
//   57   LCD pins
//   58 
//   59   //control
//   60   P0.0 - LCD_RESET
//   61   P1.3 - FLASH_RESET
//   62   P1.2 - LCD_CS
//   63   
//   64   //spi
//   65   P1.5 - CLK
//   66   P1.6 - MOSI
//   67   P1.7 - MISO
//   68 */
//   69 
//   70 /* LCD Control lines */
//   71 #define HAL_LCD_RESET_PORT 0
//   72 #define HAL_LCD_RESET_PIN  0
//   73 
//   74 #define HAL_LCD_CS_PORT 1
//   75 #define HAL_LCD_CS_PIN  2
//   76 
//   77 /* LCD SPI lines */
//   78 #define HAL_LCD_CLK_PORT 1
//   79 #define HAL_LCD_CLK_PIN  5
//   80 
//   81 #define HAL_LCD_MOSI_PORT 1
//   82 #define HAL_LCD_MOSI_PIN  6
//   83 
//   84 #define HAL_LCD_MISO_PORT 1
//   85 #define HAL_LCD_MISO_PIN  7
//   86 
//   87 /* SPI settings */
//   88 #define HAL_SPI_CLOCK_POL_LO       0x00
//   89 #define HAL_SPI_CLOCK_POL_HI       0x80
//   90 #define HAL_SPI_CLOCK_PHA_0        0x00
//   91 #define HAL_SPI_CLOCK_PHA_1        0x40
//   92 #define HAL_SPI_TRANSFER_MSB_LAST 0x00
//   93 #define HAL_SPI_TRANSFER_MSB_FIRST 0x20
//   94 
//   95 
//   96 /* LCD lines */
//   97 #define LCD_MAX_LINE_COUNT              6
//   98 #define LCD_MAX_LINE_LENGTH             21
//   99 #define LCD_MAX_BUF                     25
//  100 
//  101 
//  102 /* Font Set */
//  103 #define LCD_X_WITCH              6
//  104 #define LCD_Y_WITCH             10
//  105 
//  106 
//  107 /* Defines for HW LCD */
//  108 #define FUNCTION_SET(options)           HalLcd_HW_Control(options)
//  109 
//  110 
//  111 /* Set Display Start Line */
//  112 #define LINE1                           0x00
//  113 #define LINE2                           0x01
//  114 #define LINE3                           0x02
//  115 #define LINE4                           0x03
//  116 
//  117 
//  118 
//  119 
//  120 /**************************************************************************************************
//  121  *                                           MACROS
//  122  **************************************************************************************************/
//  123 
//  124 #define HAL_IO_SET(port, pin, val)        HAL_IO_SET_PREP(port, pin, val)
//  125 #define HAL_IO_SET_PREP(port, pin, val)   st( P##port##_##pin## = val; )
//  126 
//  127 #define HAL_CONFIG_IO_OUTPUT(port, pin, val)      HAL_CONFIG_IO_OUTPUT_PREP(port, pin, val)
//  128 #define HAL_CONFIG_IO_OUTPUT_PREP(port, pin, val) st( P##port##SEL &= ~BV(pin); \ 
//  129                                                       P##port##_##pin## = val; \ 
//  130                                                       P##port##DIR |= BV(pin); )
//  131 
//  132 #define HAL_CONFIG_IO_PERIPHERAL(port, pin)      HAL_CONFIG_IO_PERIPHERAL_PREP(port, pin)
//  133 #define HAL_CONFIG_IO_PERIPHERAL_PREP(port, pin) st( P##port##SEL |= BV(pin); )
//  134 
//  135 
//  136 
//  137 /* SPI interface control */
//  138 #define LCD_SPI_BEGIN()     HAL_IO_SET(HAL_LCD_CS_PORT,  HAL_LCD_CS_PIN,  0); /* chip select */
//  139 #define LCD_SPI_END()                                                         \ 
//  140 {                                                                             \ 
//  141   asm("NOP");                                                                 \ 
//  142   asm("NOP");                                                                 \ 
//  143   asm("NOP");                                                                 \ 
//  144   asm("NOP");                                                                 \ 
//  145   HAL_IO_SET(HAL_LCD_CS_PORT,  HAL_LCD_CS_PIN,  1); /* chip select */         \ 
//  146 }
//  147 /* clear the received and transmit byte status, write tx data to buffer, wait till transmit done */
//  148 #define LCD_SPI_TX(x)                   { U1CSR &= ~(BV(2) | BV(1)); U1DBUF = x; while( !(U1CSR & BV(1)) ); }
//  149 #define LCD_SPI_WAIT_RXRDY()            { while(!(U1CSR & BV(1))); }
//  150 
//  151 
//  152 //#define FUNCTION_SET(options)     lcdControl(options)
//  153 
//  154 /* Control macros */
//  155 #define LCD_ACTIVATE_RESET()  HAL_IO_SET(HAL_LCD_RESET_PORT, HAL_LCD_RESET_PIN, 0);
//  156 #define LCD_RELEASE_RESET()   HAL_IO_SET(HAL_LCD_RESET_PORT, HAL_LCD_RESET_PIN, 1);
//  157 
//  158 
//  159 /**************************************************************************************************
//  160  *                                       GLOBAL VARIABLES
//  161  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  162 static uint8 *Lcd_Line1;
Lcd_Line1:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  163 
//  164 /**************************************************************************************************
//  165  *                                       FUNCTIONS - API
//  166  **************************************************************************************************/
//  167 #if (HAL_LCD == TRUE)
//  168 void HalLcd_HW_Init(void);
//  169 void HalLcd_HW_WaitUs(uint16 i);
//  170 void HalLcd_HW_Clear(void);
//  171 void HalLcd_HW_SetBackLight(unsigned char Deg) ;
//  172 void HalLcd_HW_FontCharSet(unsigned char Font_NUM,unsigned char Color);
//  173 void HalLcd_HW_FontMode(unsigned char Cover,unsigned char Color);
//  174 
//  175 
//  176 void HalLcd_HW_ClearAllSpecChars(void);
//  177 void HalLcd_HW_Control(uint8 cmd);
//  178 void HalLcd_HW_Write(unsigned char x,unsigned char y,unsigned char a);
//  179 void HalLcd_HW_SetContrast(uint8 value);
//  180 void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
//  181 void HalLcd_HW_WriteLine(uint8 line, const char *pText);
//  182 #endif //LCD
//  183 
//  184 
//  185 
//  186 #define NOP()  asm("NOP")
//  187 
//  188 
//  189 /**************************************************************************************************
//  190  * @fn      HalLcdInit
//  191  *
//  192  * @brief   Initilize LCD Service
//  193  *
//  194  * @param   init - pointer to void that contains the initialized value
//  195  *
//  196  * @return  None
//  197  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  198 void HalLcdInit(void)
HalLcdInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function HalLcdInit
        CODE
//  199 {
        FUNCALL HalLcdInit, HalLcd_HW_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  200   Lcd_Line1 = NULL;
        MOV     DPTR,#Lcd_Line1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  201 #if (HAL_LCD == TRUE)
//  202   HalLcd_HW_Init();
        ; Setup parameters for call to function HalLcd_HW_Init
        LCALL   ??HalLcd_HW_Init?relay
          CFI EndBlock cfiBlock0
//  203 #endif
//  204 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
//  205 
//  206 /*************************************************************************************************
//  207  *                    LCD EMULATION FUNCTIONS
//  208  *
//  209  * Some evaluation boards are equipped with Liquid Crystal Displays
//  210  * (LCD) which may be used to display diagnostic information. These
//  211  * functions provide LCD emulation, sending the diagnostic strings
//  212  * to Z-Tool via the RS232 serial port. These functions are enabled
//  213  * when the "LCD_SUPPORTED" compiler flag is placed in the makefile.
//  214  *
//  215  * Most applications update both lines (1 and 2) of the LCD whenever
//  216  * text is posted to the device. This emulator assumes that line 1 is
//  217  * updated first (saved locally) and the formatting and send operation
//  218  * is triggered by receipt of line 2. Nothing will be transmitted if
//  219  * only line 1 is updated.
//  220  *
//  221  *************************************************************************************************/
//  222 
//  223 
//  224 /**************************************************************************************************
//  225  * @fn      HalLcdWriteString
//  226  *
//  227  * @brief   Write a string to the LCD
//  228  *
//  229  * @param   str    - pointer to the string that will be displayed
//  230  *          option - display options
//  231  *
//  232  * @return  None
//  233  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  234 void HalLcdWriteString ( char *str, uint8 option)
HalLcdWriteString:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function HalLcdWriteString
        CODE
//  235 {
        FUNCALL HalLcdWriteString, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, HalLcd_HW_WriteLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x11
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 8,R1
//  236 #if (HAL_LCD == TRUE)
//  237 
//  238   uint8 strLen = 0;
//  239   uint8 totalLen = 0;
//  240   uint8 *buf;
//  241   uint8 tmpLen;
//  242 
//  243   if ( Lcd_Line1 == NULL )
        MOV     DPTR,#Lcd_Line1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??HalLcdWriteString_0
//  244   {
//  245     Lcd_Line1 = osal_mem_alloc( HAL_LCD_MAX_CHARS+1 );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x11
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#Lcd_Line1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  246     HalLcdWriteString( "ZIGCLOUD ELECTRONICS", 1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "ZIGCLOUD ELECTRONICS">` & 0xff
        MOV     R3,#(`?<Constant "ZIGCLOUD ELECTRONICS">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  247   }
//  248 
//  249   strLen = (uint8)osal_strlen( (char*)str );
??HalLcdWriteString_0:
        ; Setup parameters for call to function osal_strlen
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 7,A
//  250 
//  251   /* Check boundries */
//  252   if ( strLen > HAL_LCD_MAX_CHARS )
        CLR     C
        SUBB    A,#0x11
        JC      ??HalLcdWriteString_1
//  253     strLen = HAL_LCD_MAX_CHARS;
        MOV     ?V0 + 7,#0x10
//  254 
//  255   if ( option == HAL_LCD_LINE_1 )
??HalLcdWriteString_1:
        MOV     A,#0x1
        XRL     A,?V0 + 8
        JNZ     ??HalLcdWriteString_2
//  256   {
//  257     /* Line 1 gets saved for later */
//  258     osal_memcpy( Lcd_Line1, str, strLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,?V0 + 7
        MOV     R4,?V0 + 0
        MOV     R5,#0x0
        MOV     DPTR,#Lcd_Line1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  259     Lcd_Line1[strLen] = '\0';
        MOV     R0,?V0 + 7
        MOV     DPTR,#Lcd_Line1
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R2
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        LJMP    ??HalLcdWriteString_3 & 0xFFFF
//  260   }
//  261   else
//  262   {
//  263     /* Line 2 triggers action */
//  264     tmpLen = (uint8)osal_strlen( (char*)Lcd_Line1 );
??HalLcdWriteString_2:
        ; Setup parameters for call to function osal_strlen
        MOV     DPTR,#Lcd_Line1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 2,A
//  265     totalLen =  tmpLen + 1 + strLen + 1;
//  266     buf = osal_mem_alloc( totalLen );
        ; Setup parameters for call to function osal_mem_alloc
        ADD     A,?V0 + 7
        ADD     A,#0x2
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  267     if ( buf != NULL )
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??HalLcdWriteString_3
//  268     {
//  269       /* Concatenate strings */
//  270       osal_memcpy( buf, Lcd_Line1, tmpLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     DPTR,#Lcd_Line1
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 4,?V0 + 2
        MOV     R4,?V0 + 4
        MOV     R5,#0x0
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  271       buf[tmpLen++] = ' ';
        MOV     A,?V0 + 0
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_0:
        INC     ?V0 + 2
//  272       osal_memcpy( &buf[tmpLen], str, strLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 4,?V0 + 7
        MOV     R4,?V0 + 4
        MOV     R5,#0x0
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  273       buf[tmpLen+strLen] = '\0';
        MOV     A,?V0 + 2
        ADD     A,?V0 + 4
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
//  274 
//  275       /* Send it out */
//  276 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  277 
//  278 #if defined(SERIAL_DEBUG_SUPPORTED)
//  279       debug_str( (uint8*)buf );
//  280 #endif //LCD_SUPPORTED
//  281 
//  282 #endif //ZTOOL_P1
//  283 
//  284       /* Free mem */
//  285       osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
//  286     }
//  287   }
//  288 
//  289   /* Display the string */
//  290   HalLcd_HW_WriteLine (option, str);
??HalLcdWriteString_3:
        ; Setup parameters for call to function HalLcd_HW_WriteLine
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 8
        LCALL   ??HalLcd_HW_WriteLine?relay
//  291 
//  292 #endif //HAL_LCD
//  293 
//  294 }
        MOV     R7,#0x9
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  295 
//  296 /**************************************************************************************************
//  297  * @fn      HalLcdWriteValue
//  298  *
//  299  * @brief   Write a value to the LCD
//  300  *
//  301  * @param   value  - value that will be displayed
//  302  *          radix  - 8, 10, 16
//  303  *          option - display options
//  304  *
//  305  * @return  None
//  306  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  307 void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
HalLcdWriteValue:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function HalLcdWriteValue
        CODE
//  308 {
        FUNCALL HalLcdWriteValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteValue, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x29
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
//  309 #if (HAL_LCD == TRUE)
//  310   uint8 buf[LCD_MAX_BUF];
//  311 
//  312   _ltoa( value, &buf[0], radix );
        ; Setup parameters for call to function _ltoa
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        LCALL   ??_ltoa?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
//  313   HalLcdWriteString( (char*)buf, option );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     A,R6
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  314 #endif
//  315 }
        MOV     A,#0x19
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  316 
//  317 /**************************************************************************************************
//  318  * @fn      HalLcdWriteScreen
//  319  *
//  320  * @brief   Write a value to the LCD
//  321  *
//  322  * @param   line1  - string that will be displayed on line 1
//  323  *          line2  - string that will be displayed on line 2
//  324  *
//  325  * @return  None
//  326  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  327 void HalLcdWriteScreen( char *line1, char *line2 )
HalLcdWriteScreen:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function HalLcdWriteScreen
        CODE
//  328 {
        FUNCALL HalLcdWriteScreen, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteScreen, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  329 #if (HAL_LCD == TRUE)
//  330   HalLcdWriteString( line1, 1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        LCALL   ??HalLcdWriteString?relay
//  331   HalLcdWriteString( line2, 2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??HalLcdWriteString?relay
//  332 #endif
//  333 }
        LJMP    ??Subroutine5_0 & 0xFFFF
          CFI EndBlock cfiBlock4
//  334 
//  335 /**************************************************************************************************
//  336  * @fn      HalLcdWriteStringValue
//  337  *
//  338  * @brief   Write a string followed by a value to the LCD
//  339  *
//  340  * @param   title  - Title that will be displayed before the value
//  341  *          value  - value
//  342  *          format - redix
//  343  *          line   - line number
//  344  *
//  345  * @return  None
//  346  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  347 void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
HalLcdWriteStringValue:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function HalLcdWriteStringValue
        CODE
//  348 {
        FUNCALL HalLcdWriteStringValue, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValue, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValue, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 8,R4
        MOV     ?V0 + 9,R5
        MOV     ?V0 + 0,R1
        MOV     A,#0x2b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  349 #if (HAL_LCD == TRUE)
//  350   uint8 tmpLen;
//  351   uint8 buf[LCD_MAX_BUF];
//  352   uint32 err;
//  353 
//  354   tmpLen = (uint8)osal_strlen( (char*)title );
        ; Setup parameters for call to function osal_strlen
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 2,A
//  355   osal_memcpy( buf, title, tmpLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0 + 4,R2
        MOV     R4,?V0 + 4
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 43)
//  356   buf[tmpLen] = ' ';
        LCALL   ?Subroutine2 & 0xFFFF
//  357   err = (uint32)(value);
//  358   _ltoa( err, &buf[tmpLen+1], format );
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function _ltoa
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 45)
        MOV     R1,?V0 + 0
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        CLR     A
        MOV     R4,A
        MOV     R5,A
        LCALL   ??_ltoa?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 43)
//  359   HalLcdWriteString( (char*)buf, line );		
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,?V0 + 1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  360 #endif
//  361 }
        MOV     A,#0x19
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  362 
//  363 /**************************************************************************************************
//  364  * @fn      HalLcdWriteStringValue
//  365  *
//  366  * @brief   Write a string followed by a value to the LCD
//  367  *
//  368  * @param   title   - Title that will be displayed before the value
//  369  *          value1  - value #1
//  370  *          format1 - redix of value #1
//  371  *          value2  - value #2
//  372  *          format2 - redix of value #2
//  373  *          line    - line number
//  374  *
//  375  * @return  None
//  376  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  377 void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
HalLcdWriteStringValueValue:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function HalLcdWriteStringValueValue
        CODE
//  378                                   uint16 value2, uint8 format2, uint8 line )
//  379 {
        FUNCALL HalLcdWriteStringValueValue, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     ?V0 + 5,R1
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     A,#0x2f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
//  380 
//  381 #if (HAL_LCD == TRUE)
//  382 
//  383   uint8 tmpLen;
//  384   uint8 buf[LCD_MAX_BUF];
//  385   uint32 err;
//  386 
//  387   tmpLen = (uint8)osal_strlen( (char*)title );
        ; Setup parameters for call to function osal_strlen
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 6,A
//  388   if ( tmpLen )
        JZ      ??HalLcdWriteStringValueValue_0
//  389   {
//  390     osal_memcpy( buf, title, tmpLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 8,R6
        MOV     ?V0 + 9,R7
        MOV     ?V0 + 10,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV     ?V0 + 8,R2
        MOV     R4,?V0 + 8
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
//  391     buf[tmpLen++] = ' ';
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 8
        LCALL   ??Subroutine3_0 & 0xFFFF
//  392   }
??CrossCallReturnLabel_1:
        INC     ?V0 + 6
//  393 
//  394   err = (uint32)(value1);
//  395   _ltoa( err, &buf[tmpLen], format1 );
??HalLcdWriteStringValueValue_0:
        ; Setup parameters for call to function _ltoa
        MOV     ?V0 + 8,?V0 + 6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 8
        MOV     ?V0 + 8,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     ?V0 + 9,A
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     R1,?V0 + 5
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        CLR     A
        MOV     R4,A
        MOV     R5,A
        LCALL   ??_ltoa?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
//  396   tmpLen = (uint8)osal_strlen( (char*)buf );
        ; Setup parameters for call to function osal_strlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 6,A
//  397 
//  398   buf[tmpLen++] = ',';
        MOV     ?V0 + 2,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x2c
        MOVX    @DPTR,A
        INC     ?V0 + 6
//  399   buf[tmpLen++] = ' ';
        MOV     ?V0 + 2,?V0 + 6
        LCALL   ?Subroutine2 & 0xFFFF
//  400   err = (uint32)(value2);
//  401   _ltoa( err, &buf[tmpLen], format2 );
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function _ltoa
        MOV     A,#0x1
        ADD     A,?V0 + 6
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     ?V0 + 2,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     R1,?V0 + 4
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        CLR     A
        MOV     R4,A
        MOV     R5,A
        LCALL   ??_ltoa?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
//  402 
//  403   HalLcdWriteString( (char *)buf, line );		
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,?V0 + 7
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  404 
//  405 #endif
//  406 }
        MOV     A,#0x19
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function HalLcdWriteStringValue
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function HalLcdWriteStringValueValue
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+0
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 2
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9
        REQUIRE ??Subroutine3_0
        ; // Fall through to label ??Subroutine3_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine3_0:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function HalLcdWriteStringValueValue
          CFI Conditional ??CrossCallReturnLabel_1
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function HalLcdWriteStringValue
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+0
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function HalLcdWriteStringValueValue
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+0
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        MOV     DPL,A
        MOV     A,DPH
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function HalLcdWriteString
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function HalLcdWriteStringValueValue
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+0
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function HalLcdWriteStringValue
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+0
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function HalLcdWriteStringValueValue
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+0
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x20
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18
//  407 
//  408 /**************************************************************************************************
//  409  * @fn      HalLcdDisplayPercentBar
//  410  *
//  411  * @brief   Display percentage bar on the LCD
//  412  *
//  413  * @param   title   -
//  414  *          value   -
//  415  *
//  416  * @return  None
//  417  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  418 void HalLcdDisplayPercentBar( char *title, uint8 value )
HalLcdDisplayPercentBar:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function HalLcdDisplayPercentBar
        CODE
//  419 {
        FUNCALL HalLcdDisplayPercentBar, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdDisplayPercentBar, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdDisplayPercentBar, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdDisplayPercentBar, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R1
        MOV     R6,A
//  420 #if (HAL_LCD == TRUE)
//  421 
//  422   uint8 percent;
//  423   uint8 leftOver;
//  424   uint8 buf[17];
//  425   uint32 err;
//  426   uint8 x;
//  427 
//  428   /* Write the title: */
//  429   HalLcdWriteString( title, HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        LCALL   ??HalLcdWriteString?relay
//  430 
//  431   if ( value > 100 )
        MOV     A,R6
        CLR     C
        SUBB    A,#0x65
        JC      ??HalLcdDisplayPercentBar_0
//  432     value = 100;
        MOV     R6,#0x64
//  433 
//  434   /* convert to blocks */
//  435   percent = (uint8)(value / 10);
??HalLcdDisplayPercentBar_0:
        MOV     B,#0xa
        MOV     A,R6
        DIV     AB
        MOV     ?V0 + 3,A
//  436   leftOver = (uint8)(value % 10);
        MOV     A,R6
        MOV     B,#0xa
        DIV     AB
        MOV     R7,B
//  437 
//  438   /* Make window */
//  439   osal_memcpy( buf, "[          ]  ", 15 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "[          ]  ">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "[          ]  ">` >> 8) & 0xff
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0xf
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
//  440 
//  441   for ( x = 0; x < percent; x ++ )
        MOV     A,?V0 + 3
        JZ      ??HalLcdDisplayPercentBar_1
//  442   {
//  443     buf[1+x] = '>';
        MOV     R0,A
        MOV     R1,#0x0
        MOV     R2,#0x3e
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
??HalLcdDisplayPercentBar_2:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        ORL     A,R0
        JNZ     ??HalLcdDisplayPercentBar_2
//  444   }
        MOV     ?V0 + 2,?V0 + 3
//  445 
//  446   if ( leftOver >= 5 )
??HalLcdDisplayPercentBar_1:
        MOV     A,R7
        CLR     C
        SUBB    A,#0x5
        JC      ??HalLcdDisplayPercentBar_3
//  447     buf[1+x] = '+';
        MOV     ?V0 + 0,?V0 + 2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        MOV     A,#0x2b
        MOVX    @DPTR,A
//  448 
//  449   err = (uint32)value;
//  450   _ltoa( err, (uint8*)&buf[13], 10 );
??HalLcdDisplayPercentBar_3:
        ; Setup parameters for call to function _ltoa
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0xa
        MOV     A,R6
        MOV     R2,A
        CLR     A
        MOV     R3,A
        MOV     R4,A
        MOV     R5,A
        LCALL   ??_ltoa?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
//  451 
//  452   HalLcdWriteString( (char*)buf, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  453 
//  454 #endif
//  455 
//  456 }
        MOV     A,#0x11
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock19
//  457 
//  458 
//  459 #if (HAL_LCD == TRUE)
//  460 /**************************************************************************************************
//  461  *                                    HARDWARE LCD
//  462  **************************************************************************************************/
//  463 
//  464 /**************************************************************************************************
//  465  * @fn      halLcd_ConfigIO
//  466  *
//  467  * @brief   Configure IO lines needed for LCD control.
//  468  *
//  469  * @param   None
//  470  *
//  471  * @return  None
//  472  **************************************************************************************************/
//  473 static void halLcd_ConfigIO(void)
//  474 {
//  475   /* GPIO configuration */
//  476   HAL_CONFIG_IO_OUTPUT(HAL_LCD_RESET_PORT, HAL_LCD_RESET_PIN, 1);
//  477   HAL_CONFIG_IO_OUTPUT(HAL_LCD_CS_PORT, HAL_LCD_CS_PIN, 1);
//  478 }
//  479 
//  480 /**************************************************************************************************
//  481  * @fn      halLcd_ConfigSPI
//  482  *
//  483  * @brief   Configure SPI lines needed for talking to LCD.
//  484  *
//  485  * @param   None
//  486  *
//  487  * @return  None
//  488  **************************************************************************************************/
//  489 static void halLcd_ConfigSPI(void)
//  490 {
//  491   /* UART/SPI Peripheral configuration */
//  492 
//  493    uint8 baud_exponent;
//  494    uint8 baud_mantissa;
//  495 
//  496   /* Set SPI on UART 1 alternative 2 */
//  497   PERCFG |= 0x02;
//  498 
//  499   /* Configure clk, master out and master in lines */
//  500   HAL_CONFIG_IO_PERIPHERAL(HAL_LCD_CLK_PORT,  HAL_LCD_CLK_PIN);
//  501   HAL_CONFIG_IO_PERIPHERAL(HAL_LCD_MOSI_PORT, HAL_LCD_MOSI_PIN);
//  502   HAL_CONFIG_IO_PERIPHERAL(HAL_LCD_MISO_PORT, HAL_LCD_MISO_PIN);
//  503 
//  504 
//  505   /* Set SPI speed to 1 MHz (the values assume system clk of 32MHz)
//  506    * Confirm on board that this results in 1MHz spi clk.
//  507    */
//  508   baud_exponent = 15;
//  509   baud_mantissa =  0;
//  510 
//  511   /* Configure SPI */
//  512   U1UCR  = 0x80;      /* Flush and goto IDLE state. 8-N-1. */
//  513   //U1CSR  = 0x00;      
//  514   U1CSR &= ~0xA0;/* SPI mode, master. */
//  515   U1GCR  = HAL_SPI_TRANSFER_MSB_FIRST | HAL_SPI_CLOCK_PHA_1 | HAL_SPI_CLOCK_POL_HI | baud_exponent;
//  516   U1BAUD = baud_mantissa;
//  517 }
//  518 
//  519 /**************************************************************************************************
//  520  * @fn      HalLcd_HW_Init
//  521  *
//  522  * @brief   Initilize HW LCD Driver.
//  523  *
//  524  * @param   None
//  525  *
//  526  * @return  None
//  527  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  528 void HalLcd_HW_Init(void)
HalLcd_HW_Init:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function HalLcd_HW_Init
        CODE
//  529 {
        FUNCALL HalLcd_HW_Init, HalLcd_HW_WaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, HalLcd_HW_WaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, HalLcd_HW_WaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, HalLcd_HW_SetBackLight
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, HalLcd_HW_Clear
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, HalLcd_HW_SetBackLight
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, HalLcd_HW_FontCharSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, HalLcd_HW_FontMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  530   /* Initialize LCD IO lines */
//  531   halLcd_ConfigIO();
        ANL     0xf3,#0xfe
        SETB    0x80.0
        ORL     0xfd,#0x1
        ANL     0xf4,#0xfb
        SETB    0x90.2
        ORL     0xfe,#0x4
//  532 
//  533   /* Initialize SPI */
//  534   halLcd_ConfigSPI();
        ORL     0xf1,#0x2
        ORL     0xf4,#0x20
        ORL     0xf4,#0x40
        ORL     0xf4,#0x80
        MOV     0xfb,#-0x80
        ANL     0xf8,#0x5f
        MOV     0xfc,#-0x11
        MOV     0xfa,#0x0
//  535 
//  536   /* Perform reset */
//  537   LCD_ACTIVATE_RESET();
        CLR     0x80.0
//  538   HalLcd_HW_WaitUs(8000); // 8ms
        ; Setup parameters for call to function HalLcd_HW_WaitUs
        MOV     R2,#0x40
        MOV     R3,#0x1f
        LCALL   ??HalLcd_HW_WaitUs?relay
//  539   LCD_RELEASE_RESET();
        SETB    0x80.0
//  540   HalLcd_HW_WaitUs(30000); //60ms
        ; Setup parameters for call to function HalLcd_HW_WaitUs
        MOV     R2,#0x30
        MOV     R3,#0x75
        LCALL   ??HalLcd_HW_WaitUs?relay
//  541   HalLcd_HW_WaitUs(30000); 
        ; Setup parameters for call to function HalLcd_HW_WaitUs
        MOV     R2,#0x30
        MOV     R3,#0x75
        LCALL   ??HalLcd_HW_WaitUs?relay
//  542 
//  543   HalLcd_HW_SetBackLight(0); // ÉèÖÃ±³¹âÁÁ¶È 
        ; Setup parameters for call to function HalLcd_HW_SetBackLight
        MOV     R1,#0x0
        LCALL   ??HalLcd_HW_SetBackLight?relay
//  544   HalLcd_HW_Clear();
        ; Setup parameters for call to function HalLcd_HW_Clear
        LCALL   ??HalLcd_HW_Clear?relay
//  545   HalLcd_HW_SetBackLight(100);
        ; Setup parameters for call to function HalLcd_HW_SetBackLight
        MOV     R1,#0x64
        LCALL   ??HalLcd_HW_SetBackLight?relay
//  546 	
//  547   HalLcd_HW_FontCharSet(0,1);  // ÉèÖÃ×ÖÌå¼°¸²¸ÇÄ£Ê½
        ; Setup parameters for call to function HalLcd_HW_FontCharSet
        MOV     R2,#0x1
        MOV     R1,#0x0
        LCALL   ??HalLcd_HW_FontCharSet?relay
//  548   HalLcd_HW_FontMode(1,0);
        ; Setup parameters for call to function HalLcd_HW_FontMode
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLcd_HW_FontMode?relay
//  549 }
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock20
        REQUIRE _A_P0
        REQUIRE PERCFG
        REQUIRE P1SEL
        REQUIRE U1UCR
        REQUIRE _A_U1CSR
        REQUIRE U1GCR
        REQUIRE U1BAUD
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE _A_P1
        REQUIRE P1DIR
//  550 
//  551 /**************************************************************************************************
//  552  * @fn      HalLcd_HW_Control
//  553  *
//  554  * @brief   Write 1 command to the LCD
//  555  *
//  556  * @param   uint8 cmd - command to be written to the LCD
//  557  *
//  558  * @return  None
//  559  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  560 void HalLcd_HW_Control(uint8 cmd)
HalLcd_HW_Control:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function HalLcd_HW_Control
        CODE
//  561 {
        ; Saved register size: 0
        ; Auto size: 0
//  562   LCD_SPI_BEGIN();
        CLR     0x90.2
//  563   LCD_SPI_TX(cmd);
        ANL     0xf8,#0xf9
        MOV     0xf9,R1
??HalLcd_HW_Control_0:
        MOV     C,0xf8.1
        JNC     ??HalLcd_HW_Control_0
//  564   LCD_SPI_WAIT_RXRDY();
??HalLcd_HW_Control_1:
        MOV     C,0xf8.1
        JNC     ??HalLcd_HW_Control_1
//  565   LCD_SPI_END();
        NOP
        NOP
        NOP
        NOP
        SETB    0x90.2
//  566 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock21
        REQUIRE _A_P1
        REQUIRE _A_U1CSR
        REQUIRE U1DBUF
//  567 
//  568 /*********************************************************************
//  569  * º¯ÊýÃû³Æ£ºHalLcd_HW_Write
//  570  * ¹¦    ÄÜ£ºÐ´ÈëÒ»¸ö±ê×¼ASCII×Ö·û
//  571  * Èë¿Ú²ÎÊý£ºx  XÖá×ø±ê     
//  572  *           y  YÖá×ø±ê
//  573  *           a  ÒªÏÔÊ¾×Ö·ûµÄASCIIÂë
//  574  * ³ö¿Ú²ÎÊý£ºÎÞ
//  575  * ·µ »Ø Öµ£ºÎÞ
//  576  ********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  577 void HalLcd_HW_Write(unsigned char x,unsigned char y,unsigned char a)
HalLcd_HW_Write:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function HalLcd_HW_Write
        CODE
//  578 {
        FUNCALL HalLcd_HW_Write, HalLcd_HW_Control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Write, HalLcd_HW_Control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Write, HalLcd_HW_Control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Write, HalLcd_HW_Control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     A,R2
        MOV     R7,A
        MOV     A,R3
        MOV     R6,A
//  579 
//  580   LCD_SPI_BEGIN();	//SSÖÃµÍµçÆ½	
        CLR     0x90.2
//  581   FUNCTION_SET(0x07);	//´«ËÍÖ¸Áî0x07
        ; Setup parameters for call to function HalLcd_HW_Control
        MOV     R1,#0x7
        LCALL   ??HalLcd_HW_Control?relay
//  582   FUNCTION_SET(x);	//ÒªÏÔÊ¾×Ö·ûµÄ×óÉÏ½ÇµÄXÖáÎ»ÖÃ
        ; Setup parameters for call to function HalLcd_HW_Control
        MOV     R1,?V0 + 0
        LCALL   ??HalLcd_HW_Control?relay
//  583   FUNCTION_SET(y);	//ÒªÏÔÊ¾×Ö·ûµÄ×óÉÏ½ÇµÄYÖáÎ»ÖÃ
        ; Setup parameters for call to function HalLcd_HW_Control
        MOV     A,R7
        MOV     R1,A
        LCALL   ??HalLcd_HW_Control?relay
//  584   FUNCTION_SET(a);	//ÒªÏÔÊ¾×Ö·ûASCII×Ö·ûµÄASCIIÂëÖµ
        ; Setup parameters for call to function HalLcd_HW_Control
        MOV     A,R6
        MOV     R1,A
        LCALL   ??HalLcd_HW_Control?relay
//  585   LCD_SPI_END();	//Íê³É²Ù×÷ÖÃSS¸ßµçÆ½
        NOP
        NOP
        NOP
        NOP
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock22
        REQUIRE _A_P1
//  586 }
//  587 
//  588 
//  589 /**************************************************************************************************
//  590  * @fn          HalLcd_HW_SetContrast
//  591  *
//  592  * @brief       Set display contrast
//  593  *
//  594  * @param       uint8 value - contrast value
//  595  *
//  596  * @return      none
//  597  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  598 void HalLcd_HW_SetContrast(uint8 value)
HalLcd_HW_SetContrast:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function HalLcd_HW_SetContrast
        CODE
//  599 {
        ; Saved register size: 0
        ; Auto size: 0
//  600   return;
        LJMP    ?BRET
          CFI EndBlock cfiBlock23
//  601 }
//  602 
//  603 /**************************************************************************************************
//  604  * @fn      HalLcd_HW_Clear
//  605  *
//  606  * @brief   Clear the HW LCD
//  607  *
//  608  * @param   None
//  609  *
//  610  * @return  None
//  611  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  612 void HalLcd_HW_Clear(void)
HalLcd_HW_Clear:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function HalLcd_HW_Clear
        CODE
//  613 {
        FUNCALL HalLcd_HW_Clear, HalLcd_HW_Control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  614   //ÇåÆÁ²Ù×÷
//  615   LCD_SPI_BEGIN();		//SSÖÃµÍµçÆ½
        CLR     0x90.2
//  616   FUNCTION_SET(0x80);		//ËÍÖ¸Áî0x80
        ; Setup parameters for call to function HalLcd_HW_Control
        MOV     R1,#-0x80
        LCALL   ??HalLcd_HW_Control?relay
//  617   LCD_SPI_END();		//Íê³É²Ù×÷ÖÃSS¸ßµçÆ½
        NOP
        NOP
        NOP
        NOP
        SETB    0x90.2
//  618 }
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock24
        REQUIRE _A_P1
//  619 
//  620 /*********************************************************************
//  621  * º¯ÊýÃû³Æ£ºHalLcd_HW_SetBackLight
//  622  * ¹¦    ÄÜ£ºÉèÖÃ±³¹âÁÁ¶È
//  623  * Èë¿Ú²ÎÊý£ºdeg    ±³¹âÁÁ¶ÈÖµ(·¶Î§£º0-127)
//  624  * ³ö¿Ú²ÎÊý£ºÎÞ
//  625  * ·µ »Ø Öµ£ºÎÞ
//  626  ********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  627 void HalLcd_HW_SetBackLight(unsigned char Deg) 
HalLcd_HW_SetBackLight:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function HalLcd_HW_SetBackLight
        CODE
//  628 {
        FUNCALL HalLcd_HW_SetBackLight, HalLcd_HW_Control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_SetBackLight, HalLcd_HW_Control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  629 
//  630   LCD_SPI_BEGIN();		//SSÖÃµÍµçÆ½	
        CLR     0x90.2
//  631   FUNCTION_SET(0x8A);		//´«ËÍÖ¸Áî0x8A
        ; Setup parameters for call to function HalLcd_HW_Control
        MOV     R1,#-0x76
        LCALL   ??HalLcd_HW_Control?relay
//  632   FUNCTION_SET(Deg);		//·¢ËÍÉèÖÃÖµ
        ; Setup parameters for call to function HalLcd_HW_Control
        MOV     A,R6
        MOV     R1,A
        LCALL   ??HalLcd_HW_Control?relay
//  633   LCD_SPI_END();		//Íê³É²Ù×÷ÖÃSS¸ßµçÆ½
        NOP
        NOP
        NOP
        NOP
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock25
        REQUIRE _A_P1
//  634 }
//  635 
//  636 /*********************************************************************
//  637  * º¯ÊýÃû³Æ£ºHalLcd_HW_FontCharSet
//  638  * ¹¦    ÄÜ£ºASCII×Ö·û×ÖÌåÉèÖÃ
//  639  * Èë¿Ú²ÎÊý£ºFont_NUM ×ÖÌåÑ¡Ôñ,ÒÔÇý¶¯Ëù´øµÄ×Ö¿âÎª×¼
//  640  *           Color  ÎÄ±¾ÑÕÉ«,½ö×÷ÓÃÓÚASCII×Ö¿â 
//  641  * ³ö¿Ú²ÎÊý£ºÎÞ
//  642  * ·µ »Ø Öµ£ºÎÞ
//  643  ********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  644 void HalLcd_HW_FontCharSet(unsigned char Font_NUM,unsigned char Color)
HalLcd_HW_FontCharSet:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function HalLcd_HW_FontCharSet
        CODE
//  645 {
        FUNCALL HalLcd_HW_FontCharSet, HalLcd_HW_Control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_FontCharSet, HalLcd_HW_Control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  646   unsigned char ucTemp=0;
//  647 	
//  648   ucTemp = (Font_NUM<<4)|Color;
//  649   //ÉèÖÃASCII×Ö·ûµÄ×ÖÐÍ
//  650   LCD_SPI_BEGIN();		//SSÖÃµÍµçÆ½			
        CLR     0x90.2
//  651   FUNCTION_SET(0x81);		//´«ËÍÖ¸Áî0x81
        ; Setup parameters for call to function HalLcd_HW_Control
        MOV     R1,#-0x7f
        LCALL   ??HalLcd_HW_Control?relay
//  652   FUNCTION_SET(ucTemp);		//·¢ËÍÉèÖÃÖµ
        ; Setup parameters for call to function HalLcd_HW_Control
        MOV     A,R6
        SWAP    A
        ANL     A,#0xf0
        ORL     A,R7
        MOV     R1,A
        LCALL   ??HalLcd_HW_Control?relay
//  653   LCD_SPI_END();		//Íê³É²Ù×÷ÖÃSS¸ßµçÆ½	
        NOP
        NOP
        NOP
        NOP
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock26
        REQUIRE _A_P1
//  654 }
//  655 
//  656 /*********************************************************************
//  657  * º¯ÊýÃû³Æ£ºHalLcd_HW_FontMode
//  658  * ¹¦    ÄÜ£ºÉèÖÃ×Ö·ûÏÔÊ¾¸²¸ÇÄ£Ê½
//  659  * Èë¿Ú²ÎÊý£ºCover  ×Ö·û¸²¸ÇÄ£Ê½ÉèÖÃ£¬0»ò1
//  660  *	     Color  ¸²¸ÇÄ£Ê½Îª1Ê±×Ö·ûÏÔÊ¾Ê±µÄ±³¾°¸²¸ÇÉ« 
//  661  * ³ö¿Ú²ÎÊý£ºÎÞ
//  662  * ·µ »Ø Öµ£ºÎÞ
//  663  ********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  664 void HalLcd_HW_FontMode(unsigned char Cover,unsigned char Color)
HalLcd_HW_FontMode:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function HalLcd_HW_FontMode
        CODE
//  665 {
        FUNCALL HalLcd_HW_FontMode, HalLcd_HW_Control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_FontMode, HalLcd_HW_Control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  666   unsigned char ucTemp=0;
//  667 	
//  668   ucTemp = (Cover<<4)|Color;
//  669 	
//  670   LCD_SPI_BEGIN();		//SSÖÃµÍµçÆ½			
        CLR     0x90.2
//  671   FUNCTION_SET(0x89);		//´«ËÍÖ¸Áî0x89
        ; Setup parameters for call to function HalLcd_HW_Control
        MOV     R1,#-0x77
        LCALL   ??HalLcd_HW_Control?relay
//  672   FUNCTION_SET(ucTemp);		//·¢ËÍÉèÖÃÖµ
        ; Setup parameters for call to function HalLcd_HW_Control
        MOV     A,R6
        SWAP    A
        ANL     A,#0xf0
        ORL     A,R7
        MOV     R1,A
        LCALL   ??HalLcd_HW_Control?relay
//  673   LCD_SPI_END();		//Íê³É²Ù×÷ÖÃSS¸ßµçÆ½	
        NOP
        NOP
        NOP
        NOP
          CFI EndBlock cfiBlock27
        REQUIRE ?Subroutine1
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine1
//  674 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        SETB    0x90.2
          CFI EndBlock cfiBlock28
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock29
//  675 
//  676 
//  677 /**************************************************************************************************
//  678  * @fn      HalLcd_HW_ClearAllSpecChars
//  679  *
//  680  * @brief   Clear all special chars
//  681  *
//  682  * @param   None
//  683  *
//  684  * @return  None
//  685  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  686 void HalLcd_HW_ClearAllSpecChars(void)
HalLcd_HW_ClearAllSpecChars:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function HalLcd_HW_ClearAllSpecChars
        CODE
//  687 {
        ; Saved register size: 0
        ; Auto size: 0
//  688   return;
        LJMP    ?BRET
          CFI EndBlock cfiBlock30
//  689 }
//  690 
//  691 /**************************************************************************************************
//  692  * @fn      HalLcd_HW_WriteChar
//  693  *
//  694  * @brief   Write one char to the display
//  695  *
//  696  * @param   uint8 line - line number that the char will be displayed
//  697  *          uint8 col - colum where the char will be displayed
//  698  *
//  699  * @return  None
//  700  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  701 void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text)
HalLcd_HW_WriteChar:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function HalLcd_HW_WriteChar
        CODE
//  702 {
        FUNCALL HalLcd_HW_WriteChar, HalLcd_HW_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     ?V0 + 0,R2
//  703   if (col < LCD_MAX_LINE_LENGTH)
        MOV     A,R2
        CLR     C
        SUBB    A,#0x15
        JNC     ??HalLcd_HW_WriteChar_0
//  704   {
//  705     HalLcd_HW_Write(col*LCD_X_WITCH, (line-1)*LCD_Y_WITCH, text);
        ; Setup parameters for call to function HalLcd_HW_Write
        MOV     B,#0xa
        MOV     A,#-0x1
        ADD     A,R7
        MUL     AB
        MOV     R2,A
        MOV     B,#0x6
        MOV     A,?V0 + 0
        MUL     AB
        MOV     R1,A
        LCALL   ??HalLcd_HW_Write?relay
//  706   }
//  707   else
//  708   {
//  709     return;
//  710   }
//  711 }
??HalLcd_HW_WriteChar_0:
        SJMP    ??Subroutine5_0
          CFI EndBlock cfiBlock31
//  712 
//  713 /**************************************************************************************************
//  714  * @fn          halLcdWriteLine
//  715  *
//  716  * @brief       Write one line on display
//  717  *
//  718  * @param       uint8 line - display line
//  719  *              char *pText - text buffer to write
//  720  *
//  721  * @return      none
//  722  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  723 void HalLcd_HW_WriteLine(uint8 line, const char *pText)
HalLcd_HW_WriteLine:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function HalLcd_HW_WriteLine
        CODE
//  724 {
        FUNCALL HalLcd_HW_WriteLine, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_WriteLine, HalLcd_HW_WriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_WriteLine, HalLcd_HW_WriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     ?V0 + 1,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  725   uint8 count;
//  726   uint8 totalLength = (uint8)osal_strlen( (char *)pText );
        ; Setup parameters for call to function osal_strlen
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 2,A
//  727 
//  728   /* Write the content first */
//  729   for (count=0; count<totalLength; count++)
        MOV     ?V0 + 0,#0x0
        SJMP    ??HalLcd_HW_WriteLine_0
//  730   {
//  731     HalLcd_HW_WriteChar(line, count, (*(pText++)));
??HalLcd_HW_WriteLine_1:
        ; Setup parameters for call to function HalLcd_HW_WriteChar
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R2,?V0 + 0
        MOV     R1,?V0 + 1
        LCALL   ??HalLcd_HW_WriteChar?relay
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  732   }
        INC     ?V0 + 0
??HalLcd_HW_WriteLine_0:
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,?V0 + 2
        JC      ??HalLcd_HW_WriteLine_1
//  733 
//  734   /* Write blank spaces to rest of the line */
//  735   for(count=totalLength; count<LCD_MAX_LINE_LENGTH;count++)
        MOV     ?V0 + 0,?V0 + 2
        SJMP    ??HalLcd_HW_WriteLine_2
//  736   {
//  737     HalLcd_HW_WriteChar(line, count, ' ');
??HalLcd_HW_WriteLine_3:
        ; Setup parameters for call to function HalLcd_HW_WriteChar
        MOV     R3,#0x20
        MOV     R2,?V0 + 0
        MOV     R1,?V0 + 1
        LCALL   ??HalLcd_HW_WriteChar?relay
//  738   }
        INC     ?V0 + 0
??HalLcd_HW_WriteLine_2:
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x15
        JC      ??HalLcd_HW_WriteLine_3
//  739 }
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock32
//  740 
//  741 /**************************************************************************************************
//  742  * @fn      HalLcd_HW_WaitUs
//  743  *
//  744  * @brief   wait for x us. @ 32MHz MCU clock it takes 32 "nop"s for 1 us delay.
//  745  *
//  746  * @param   x us. range[0-65536]
//  747  *
//  748  * @return  None
//  749  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  750 void HalLcd_HW_WaitUs(uint16 microSecs)
HalLcd_HW_WaitUs:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function HalLcd_HW_WaitUs
        CODE
//  751 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??HalLcd_HW_WaitUs_0
//  752   while(microSecs--)
//  753   {
//  754     /* 32 NOPs == 1 usecs */
//  755     asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
??HalLcd_HW_WaitUs_1:
        nop
        nop
        nop
        nop
        nop
//  756     asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
        nop
        nop
        nop
        nop
        nop
//  757     asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
        nop
        nop
        nop
        nop
        nop
//  758     asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
        nop
        nop
        nop
        nop
        nop
//  759     asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
        nop
        nop
        nop
        nop
        nop
//  760     asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
        nop
        nop
        nop
        nop
        nop
//  761     asm("nop"); asm("nop");
        nop
        nop
//  762   }
??HalLcd_HW_WaitUs_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??HalLcd_HW_WaitUs_1
//  763 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock33

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdInit?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcdInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteString?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcdWriteString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteValue?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcdWriteValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteScreen?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcdWriteScreen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteStringValue?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcdWriteStringValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteStringValueValue?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcdWriteStringValueValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdDisplayPercentBar?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcdDisplayPercentBar

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcd_HW_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_Control?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcd_HW_Control

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_Write?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcd_HW_Write

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_SetContrast?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcd_HW_SetContrast

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_Clear?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcd_HW_Clear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_SetBackLight?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcd_HW_SetBackLight

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_FontCharSet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcd_HW_FontCharSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_FontMode?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcd_HW_FontMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_ClearAllSpecChars?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcd_HW_ClearAllSpecChars

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_WriteChar?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcd_HW_WriteChar

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_WriteLine?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcd_HW_WriteLine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_WaitUs?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalLcd_HW_WaitUs

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZIGCLOUD ELECTRONICS">`:
        DB "ZIGCLOUD ELECTRONICS"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "[          ]  ">`:
        DB "[          ]  "

        END
//  764 #endif
//  765 
//  766 
//  767 /**************************************************************************************************
//  768 **************************************************************************************************/
//  769 
//  770 
//  771 
// 
// 1 451 bytes in segment BANKED_CODE
//   114 bytes in segment BANK_RELAYS
//    12 bytes in segment SFR_AN
//    36 bytes in segment XDATA_ROM_C
//     2 bytes in segment XDATA_Z
// 
// 1 565 bytes of CODE  memory
//    36 bytes of CONST memory
//     0 bytes of DATA  memory (+ 12 bytes shared)
//     2 bytes of XDATA memory
//
//Errors: none
//Warnings: none
