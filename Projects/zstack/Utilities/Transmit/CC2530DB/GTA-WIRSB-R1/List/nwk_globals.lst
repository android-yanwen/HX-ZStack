###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             15/Aug/2016  21:39:44 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Co #
#                          mponents\stack\nwk\nwk_globals.c                   #
#    Command line       =  -f D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£© #
#                          \Projects\zstack\Utilities\Transmit\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO         #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00001000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1178                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=3             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=2    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\work\ZSTACK-GTAMODBUS-Ö÷ #
#                          ¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Components\stack\nwk\nwk_glob #
#                          als.c -D NWK_AUTO_POLL -D MT_TASK -D ZTOOL_P1 -D   #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                      #
#                          ZDNWKMGR_MIN_TRANSMISSIONS=0 -D GTA_DEBUG -D       #
#                          ZIGBEEPRO -D GTA_WIRSB_R1 -lC                      #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\GTA-WIRS #
#                          B-R1\List\ -lA D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«14 #
#                          0707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC #
#                          2530DB\GTA-WIRSB-R1\List\ --diag_suppress          #
#                          Pe001,Pa010 -o D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«14 #
#                          0707£¨Û³ÎÄ£©\Projects\zstack\Utilities\Transmit\CC #
#                          2530DB\GTA-WIRSB-R1\Obj\ -e --no_code_motion       #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£© #
#                          \Projects\zstack\Utilities\Transmit\CC2530DB\ -I   #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\Sourc #
#                          e\ -I D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³Î #
#                          Ä£©\Projects\zstack\Utilities\Transmit\CC2530DB\.. #
#                          \..\..\ZMain\TI2530DB\ -I                          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\hal\include\ -I                  #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\hal\target\CC2530EB\ -I          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\include\ -I                  #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf04\ -I          #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf04\single_chip\ #
#                           -I D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£ #
#                          ©\Projects\zstack\Utilities\Transmit\CC2530DB\..\. #
#                          .\..\..\..\Components\mt\ -I                       #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\osal\include\ -I                 #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\services\saddr\ -I               #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\services\sdata\ -I               #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\af\ -I                     #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\nwk\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sapi\ -I                   #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sec\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\sys\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\stack\zdo\ -I                    #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\zmac\ -I                         #
#                          D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\..\..\.. #
#                          \..\..\Components\zmac\f8w\ -Ohz                   #
#                          --require_prototypes                               #
#    List file          =  D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\GTA-WIRS #
#                          B-R1\List\nwk_globals.lst                          #
#    Object file        =  D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Pr #
#                          ojects\zstack\Utilities\Transmit\CC2530DB\GTA-WIRS #
#                          B-R1\Obj\nwk_globals.r51                           #
#                                                                             #
#                                                                             #
###############################################################################

D:\work\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707£¨Û³ÎÄ£©\Components\stack\nwk\nwk_globals.c
      1          /**************************************************************************************************
      2            Filename:       nwk_globals.c
      3            Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
      4            Revision:       $Revision: 29656 $
      5          
      6            Description:    User definable Network Parameters.
      7          
      8          
      9            Copyright 2004-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "AddrMgr.h"
     47          #include "AssocList.h"
     48          #include "BindingTable.h"
     49          #include "nwk_util.h"
     50          #include "nwk_globals.h"
     51          #include "APS.h"
     52          #include "ssp.h"
     53          #include "rtg.h"
     54          #include "ZDConfig.h"
     55          #include "ZGlobals.h"
     56          
     57          #if defined ( LCD_SUPPORTED )
     58            #include "OnBoard.h"
     59          #endif
     60          
     61          /* HAL */
     62          #include "hal_lcd.h"
     63          
     64          #include "hal_uart.h"//microdjg
     65          #include "OnBoard.h"//microdjg
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          /*********************************************************************
     71           * CONSTANTS
     72           */
     73          
     74          // Maximums for the data buffer queue
     75          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     76          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     77          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     78          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     79          
     80          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     81          // A known shortcoming is that when a message is enqueued as "hold" for a
     82          // sleeping device, the timer tick may have counted down to 1, so that msg
     83          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     84          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     85          // So the hold time will vary within this interval:
     86          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     87          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     88          #define NWK_INDIRECT_CNT_RTG_TMR    1
     89          // To hold msg for sleeping end devices for 30 secs:
     90          // #define CNT_RTG_TIMER            1
     91          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     92          // To hold msg for sleeping end devices for 30 mins:
     93          // #define CNT_RTG_TIMER            60
     94          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     95          // To hold msg for sleeping end devices for 30 days:
     96          // #define CNT_RTG_TIMER            60
     97          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     98          // Maximum msgs to hold per associated device.
     99          #define NWK_INDIRECT_MSG_MAX_PER    3
    100          // Maximum total msgs to hold for all associated devices.
    101          #define NWK_INDIRECT_MSG_MAX_ALL    \
    102                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
    103          
    104          /*********************************************************************
    105           * TYPEDEFS
    106           */
    107          
    108          /*********************************************************************
    109           * NWK GLOBAL VARIABLES
    110           */
    111          
    112          // Variables for MAX list size

   \                                 In  segment CODE_C, align 1
    113          CONST uint16 gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   1500         DW 21
    114          
    115          // Variables for MAX Sleeping End Devices

   \                                 In  segment CODE_C, align 1
    116          CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
   \                     gNWK_MAX_SLEEPING_END_DEVICES:
   \   000000   0F           DB 15
    117          
    118          // Variables for MAX data buffer levels

   \                                 In  segment CODE_C, align 1
    119          CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In  segment CODE_C, align 1
    120          CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    121          CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    122          CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
    123          

   \                                 In  segment CODE_C, align 1
    124          CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   01           DB 1

   \                                 In  segment CODE_C, align 1
    125          CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In  segment CODE_C, align 1
    126          CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
    127          
    128          // change this if using a different stack profile...
    129          // Cskip array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    131          
    132          #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133            uint8 CskipRtrs[1] = {0};
   \                     CskipRtrs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134            uint8 CskipChldrn[1] = {0};
   \                     CskipChldrn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          #elif ( STACK_PROFILE_ID == HOME_CONTROLS )
    136            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
    137            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
    138          #elif ( STACK_PROFILE_ID == GENERIC_STAR )
    139            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    140            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    141          #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
    142            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    143            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    144          #endif // STACK_PROFILE_ID
    145          
    146          // Minimum lqi value that is required for association

   \                                 In  segment XDATA_I, align 1, keep-with-next
    147          uint8 gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
   \                     gMIN_TREE_LINK_COST:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
   \   000001                REQUIRE __INIT_XDATA_I
    148          
    149          // Statically defined Associated Device List

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 378
   \   00017A                REQUIRE __INIT_XDATA_Z
    151          
    152          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )

   \                                 In  segment CODE_C, align 1
    153            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = NWK_MIN_ROUTER_CHILDREN;
   \                     gNWK_MIN_ROUTER_CHILDREN:
   \   000000   0000         DW 0

   \                                 In  segment CODE_C, align 1
    154            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = NWK_MIN_ENDDEVICE_CHILDREN;
   \                     gNWK_MIN_ENDDEVICE_CHILDREN:
   \   000000   0000         DW 0
    155          #else
    156            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = 0;
    157            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = 0;
    158          #endif
    159          

   \                                 In  segment CODE_C, align 1
    160          CONST uint16 gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   2800         DW 40

   \                                 In  segment CODE_C, align 1
    161          CONST uint16 gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
   \                     gMAX_RTG_SRC_ENTRIES:
   \   000000   0C00         DW 12

   \                                 In  segment CODE_C, align 1
    162          CONST uint8 gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   08           DB 8
    163          

   \                                 In  segment CODE_C, align 1
    164          CONST uint8 gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   04           DB 4
    165          
    166           // Table of neighboring nodes (not including child nodes)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 92
   \   00005C                REQUIRE __INIT_XDATA_Z
    168          

   \                                 In  segment CODE_C, align 1
    169          CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
   \                     gMAX_SOURCE_ROUTE:
   \   000000   0C           DB 12
    170          

   \                                 In  segment CODE_C, align 1
    171          CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
   \                     gMAX_BROADCAST_QUEUED:
   \   000000   0A           DB 10
    172          

   \                                 In  segment CODE_C, align 1
    173          CONST uint8 gLINK_DOWN_TRIGGER = LINK_DOWN_TRIGGER;
   \                     gLINK_DOWN_TRIGGER:
   \   000000   03           DB 3
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST uint8 gMAX_PASSIVE_ACK_CNT = MAX_PASSIVE_ACK_CNT;
   \                     gMAX_PASSIVE_ACK_CNT:
   \   000000   08           DB 8
    176          
    177          // Routing table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 280
   \   000118                REQUIRE __INIT_XDATA_Z
    179          
    180          #if defined ( ZIGBEE_SOURCE_ROUTING )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181            rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
   \                     rtgSrcTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182            uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
   \                     rtgSrcRelayList:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z
    183          #endif
    184          
    185          // Table of current RREQ packets in the network

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    186          rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z
    187          
    188          // Table of data broadcast packets currently in circulation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    190          
    191          // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
    194          

   \                                 In  segment CODE_C, align 1
    195          CONST uint8 gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    196          
    197          // For tree addressing, this switch allows the allocation of a
    198          // router address to an end device when end device address are
    199          // all used up.  If this option is enabled, address space
    200          // could be limited.

   \                                 In  segment CODE_C, align 1
    201          CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
   \                     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
   \   000000   00           DB 0
    202          
    203          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    204          // number of link status periods after the last received address conflict report
    205          // (network status command)

   \                                 In  segment CODE_C, align 1
    206          CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
   \                     gNWK_CONFLICTED_ADDR_EXPIRY_TIME:
   \   000000   04           DB 4
    207          #endif
    208          
    209          #if defined ( ZIGBEE_FREQ_AGILITY )
    210          CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
    211          #endif
    212          
    213          // The time limited to one MTO RReq (Concentrator Announce) in milliseconds.

   \                                 In  segment CODE_C, align 1
    214          CONST uint16 gMTO_RREQ_LIMIT_TIME = MTO_RREQ_LIMIT_TIME;
   \                     gMTO_RREQ_LIMIT_TIME:
   \   000000   E803         DW 1000
    215          
    216          // The number of seconds a MTO routing entry will last.

   \                                 In  segment CODE_C, align 1
    217          CONST uint8 gMTO_ROUTE_EXPIRY_TIME = MTO_ROUTE_EXPIRY_TIME;
   \                     gMTO_ROUTE_EXPIRY_TIME:
   \   000000   FF           DB 255
    218          
    219          // Route Discovery Request Default Radius

   \                                 In  segment CODE_C, align 1
    220          CONST uint8 gDEFAULT_ROUTE_REQUEST_RADIUS = DEFAULT_ROUTE_REQUEST_RADIUS;
   \                     gDEFAULT_ROUTE_REQUEST_RADIUS:
   \   000000   1E           DB 30
    221          
    222          // Network message radius

   \                                 In  segment CODE_C, align 1
    223          CONST uint8 gDEF_NWK_RADIUS = DEF_NWK_RADIUS;
   \                     gDEF_NWK_RADIUS:
   \   000000   1E           DB 30
    224          
    225          #if ( ZSTACK_ROUTER_BUILD )
    226          CONST uint16 gLINK_STATUS_JITTER_MASK = LINK_STATUS_JITTER_MASK;
    227          #endif
    228          
    229          /*********************************************************************
    230           * APS GLOBAL VARIABLES
    231           */
    232          
    233          // The Maximum number of binding records
    234          // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    235          CONST uint16 gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
   \                     gNWK_MAX_BINDING_ENTRIES:
   \   000000   0400         DW 4
    236          
    237          #if defined ( REFLECTOR )
    238            // The Maximum number of cluster IDs in a binding record
    239            // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    240            CONST uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
   \                     gMAX_BINDING_CLUSTER_IDS:
   \   000000   04           DB 4
    241          

   \                                 In  segment CODE_C, align 1
    242            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
   \                     gBIND_REC_SIZE:
   \   000000   0E00         DW 14
    243          
    244            // Binding Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    245            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
   \                     BindingTable:
   \   000000                DS 56
   \   000038                REQUIRE __INIT_XDATA_Z
    246          #endif
    247          
    248          // Maximum number allowed in the groups table.

   \                                 In  segment CODE_C, align 1
    249          CONST uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    250          
    251          // APS End Device Broadcast Table
    252          #if ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    253            apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
   \                     apsEndDeviceBroadcastTable:
   \   000000                DS 90
   \   00005A                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    254            uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
   \                     gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`
   \   000001                REQUIRE __INIT_XDATA_I
    255          #endif
    256          
    257          /*********************************************************************
    258           * SECURITY GLOBAL VARIABLES
    259           */
    260          
    261          // This is the default pre-configured key,
    262          // change this to make a unique key
    263          // SEC_KEY_LEN is defined in ssp.h.
    264          
    265          #if defined ( DEFAULT_KEY )

   \                                 In  segment CODE_C, align 1
    266          CONST uint8 defaultKey[SEC_KEY_LEN] = DEFAULT_KEY;
   \                     defaultKey:
   \   000000   01           DB 1
   \   000001   03           DB 3
   \   000002   05           DB 5
   \   000003   07           DB 7
   \   000004   09           DB 9
   \   000005   0B           DB 11
   \   000006   0D           DB 13
   \   000007   0F           DB 15
   \   000008   00           DB 0
   \   000009   02           DB 2
   \   00000A   04           DB 4
   \   00000B   06           DB 6
   \   00000C   08           DB 8
   \   00000D   0A           DB 10
   \   00000E   0C           DB 12
   \   00000F   0D           DB 13
    267          #else
    268          CONST uint8 defaultKey[SEC_KEY_LEN] =
    269          {
    270          #if defined ( APP_TP ) || defined ( APP_TP2 )
    271            // Key for ZigBee Conformance Testing
    272            0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    273            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    274          #else
    275            // Key for In-House Testing
    276            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    277            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    278          #endif
    279          };
    280          #endif
    281          
    282          // This is the default pre-configured Trust Center Link key,
    283          // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    284          CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] = DEFAULT_TC_LINK_KEY;
   \                     defaultTCLinkKey:
   \   000000   5A           DB 90
   \   000001   69           DB 105
   \   000002   67           DB 103
   \   000003   42           DB 66
   \   000004   65           DB 101
   \   000005   65           DB 101
   \   000006   41           DB 65
   \   000007   6C           DB 108
   \   000008   6C           DB 108
   \   000009   69           DB 105
   \   00000A   61           DB 97
   \   00000B   6E           DB 110
   \   00000C   63           DB 99
   \   00000D   65           DB 101
   \   00000E   30           DB 48
   \   00000F   39           DB 57
    285          
    286          /*********************************************************************
    287           * GLOBAL VARIABLES - Statistics
    288           */
    289          
    290          #if defined ( PACKET_FILTER_STATS )
    291            uint32 apsInvalidPackets = 0;
    292            uint32 apsSecurityFailures = 0;
    293            uint32 nwkInvalidPackets = 0;
    294            uint32 nwkSecurityFailures = 0;
    295          #endif
    296          
    297          /*********************************************************************
    298           * STATUS STRINGS
    299           */
    300          #if defined ( LCD_SUPPORTED )
    301            const char PingStr[]         = "Ping Rcvd from";
    302            const char AssocCnfStr[]     = "Assoc Cnf";
    303            const char SuccessStr[]      = "Success";
    304            const char EndDeviceStr[]    = "EndDevice:";
    305            const char ParentStr[]       = "Parent:";
    306            const char ZigbeeCoordStr[]  = "GTA ZigBee Coord";
    307            const char NetworkIDStr[]    = "Network ID:";
    308            const char RouterStr[]       = "Router:";
    309            const char OrphanRspStr[]    = "Orphan Response";
    310            const char SentStr[]         = "Sent";
    311            const char FailedStr[]       = "Failed";
    312            const char AssocRspFailStr[] = "Assoc Rsp fail";
    313            const char AssocIndStr[]     = "Assoc Ind";
    314            const char AssocCnfFailStr[] = "Assoc Cnf fail";
    315            const char EnergyLevelStr[]  = "Energy Level";
    316            const char ScanFailedStr[]   = "Scan Failed";
    317          #endif
    318          
    319          /*********************************************************************
    320           * @fn       nwk_globals_init()
    321           *
    322           * @brief
    323           *
    324           *   Initialize nwk layer globals.  These are the system defaults and
    325           *   should be changed by the user here.  The default definitions are
    326           *   defined in nwk.h or NLMEDE.h.
    327           *
    328           * @param   none
    329           *
    330           * @return  none
    331           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    332          void nwk_globals_init( void )
   \                     nwk_globals_init:
    333          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    334            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A1A         MOV     R2,#0x1a
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??AddrMgrInit?relay
    335          
    336          #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    337            if ( ZSTACK_ROUTER_BUILD )
    338            {
    339              // Initialize the Cskip Table
    340              Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
    341              RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
    342            }
    343          #endif
    344          
    345            // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
    346            // to 0 (compiler flag).
    347            if ( ZSTACK_ROUTER_BUILD && NWK_LINK_STATUS_PERIOD )
    348            {
    349              NLME_InitLinkStatus();
    350            }
    351          
    352          #if defined ( ZIGBEE_FREQ_AGILITY )
    353            NwkFreqAgilityInit();
    354          #endif
    355          }
   \   00000B                REQUIRE ?Subroutine0
   \   00000B                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    356          
    357          /*********************************************************************
    358           * @fn       NIB_init()
    359           *
    360           * @brief
    361           *
    362           *   Initialize attribute values in NIB
    363           *
    364           * @param   none
    365           *
    366           * @return  none
    367           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    368          void NIB_init()
   \                     NIB_init:
    369          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    370            _NIB.SequenceNum = LO_UINT16(osal_rand());
   \   000004                ; Setup parameters for call to function osal_rand
   \   000004   12....       LCALL   ??osal_rand?relay
   \   000007   EA           MOV     A,R2
   \   000008   90....       MOV     DPTR,#_NIB
   \   00000B   F0           MOVX    @DPTR,A
    371          
    372            _NIB.nwkProtocolVersion = ZB_PROT_VERS;
   \   00000C   90....       MOV     DPTR,#_NIB + 17
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    373            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   000012   90....       MOV     DPTR,#_NIB + 4
   \   000015   7414         MOV     A,#0x14
   \   000017   F0           MOVX    @DPTR,A
    374          
    375          #if ( NWK_MODE == NWK_MODE_MESH )
    376            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000018   90....       MOV     DPTR,#_NIB + 40
   \   00001B   740F         MOV     A,#0xf
   \   00001D   F0           MOVX    @DPTR,A
    377            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   00001E   A3           INC     DPTR
   \   00001F   F0           MOVX    @DPTR,A
    378          #endif
    379          
    380            // BROADCAST SETTINGS:
    381            // *******************
    382            //   Broadcast Delivery Time
    383            //     - set to multiples of 100ms
    384            //     - should be 500ms more than the retry time
    385            //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
    386            //   Passive Ack Timeout
    387            //     - set to multiples of 100ms
    388            _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   000020   90....       MOV     DPTR,#zgBcastDeliveryTime
   \   000023   E0           MOVX    A,@DPTR
   \   000024   90....       MOV     DPTR,#_NIB + 7
   \   000027   F0           MOVX    @DPTR,A
    389            _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   000028   90....       MOV     DPTR,#zgPassiveAckTimeout
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   90....       MOV     DPTR,#_NIB + 1
   \   00002F   F0           MOVX    @DPTR,A
    390            _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   000030   90....       MOV     DPTR,#zgMaxBcastRetires
   \   000033   E0           MOVX    A,@DPTR
   \   000034   90....       MOV     DPTR,#_NIB + 2
   \   000037   F0           MOVX    @DPTR,A
    391          
    392            _NIB.ReportConstantCost = 0;
   \   000038   90....       MOV     DPTR,#_NIB + 8
   \   00003B   E4           CLR     A
   \   00003C   F0           MOVX    @DPTR,A
    393            _NIB.RouteDiscRetries = 0;
   \   00003D   A3           INC     DPTR
   \   00003E   F0           MOVX    @DPTR,A
    394            _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   00003F   90....       MOV     DPTR,#_NIB + 11
   \   000042   F0           MOVX    @DPTR,A
    395            _NIB.nwkAllFresh = NWK_ALL_FRESH;
   \   000043   90....       MOV     DPTR,#_NIB + 104
   \   000046   04           INC     A
   \   000047   F0           MOVX    @DPTR,A
    396          
    397            if ( ZG_SECURE_ENABLED )
    398            {
    399              _NIB.SecurityLevel = SECURITY_LEVEL;
    400            }
    401            else
    402            {
    403              _NIB.SecurityLevel = 0;
   \   000048   90....       MOV     DPTR,#_NIB + 12
   \   00004B   E4           CLR     A
   \   00004C   F0           MOVX    @DPTR,A
    404            }
    405          
    406          #if defined ( ZIGBEEPRO )
    407            _NIB.SymLink = FALSE;
   \   00004D   A3           INC     DPTR
   \   00004E   F0           MOVX    @DPTR,A
    408          #else
    409            _NIB.SymLink = TRUE;
    410          #endif
    411          
    412            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00004F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000052   E0           MOVX    A,@DPTR
   \   000053   90....       MOV     DPTR,#_NIB + 14
   \   000056   F0           MOVX    @DPTR,A
    413          
    414            _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   000057   90....       MOV     DPTR,#zgIndirectMsgTimeout
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   90....       MOV     DPTR,#_NIB + 15
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   E4           CLR     A
   \   000061   F0           MOVX    @DPTR,A
    415          
    416            _NIB.RouteDiscoveryTime = zgRouteDiscoveryTime;
   \   000062   90....       MOV     DPTR,#zgRouteDiscoveryTime
   \   000065   E0           MOVX    A,@DPTR
   \   000066   90....       MOV     DPTR,#_NIB + 18
   \   000069   F0           MOVX    @DPTR,A
    417            _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   00006A   90....       MOV     DPTR,#zgRouteExpiryTime
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   90....       MOV     DPTR,#_NIB + 19
   \   000071   12....       LCALL   ?Subroutine1 & 0xFFFF
    418          
    419            _NIB.nwkDevAddress = INVALID_NODE_ADDR;
    420            _NIB.nwkLogicalChannel = 0;
   \                     ??CrossCallReturnLabel_0:
   \   000074   A3           INC     DPTR
   \   000075   E4           CLR     A
   \   000076   12....       LCALL   ?Subroutine1 & 0xFFFF
    421            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
    422            osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_1:
   \   000079                ; Setup parameters for call to function osal_memset
   \   000079   7C08         MOV     R4,#0x8
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   7A..         MOV     R2,#(_NIB + 25) & 0xff
   \   000081   7B..         MOV     R3,#((_NIB + 25) >> 8) & 0xff
   \   000083   12....       LCALL   ??osal_memset?relay
    423            _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   000086   90....       MOV     DPTR,#_NIB + 33
   \   000089   74FE         MOV     A,#-0x2
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   04           INC     A
   \   00008E   F0           MOVX    @DPTR,A
    424          
    425            osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   00008F                ; Setup parameters for call to function sAddrExtCpy
   \   00008F   7C..         MOV     R4,#zgExtendedPANID & 0xff
   \   000091   7D..         MOV     R5,#(zgExtendedPANID >> 8) & 0xff
   \   000093   7A..         MOV     R2,#(_NIB + 53) & 0xff
   \   000095   7B..         MOV     R3,#((_NIB + 53) >> 8) & 0xff
   \   000097   12....       LCALL   ??sAddrExtCpy?relay
    426          
    427            _NIB.nwkKeyLoaded = FALSE;
   \   00009A   90....       MOV     DPTR,#_NIB + 61
   \   00009D   E4           CLR     A
   \   00009E   F0           MOVX    @DPTR,A
    428          
    429          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    430            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
   \   00009F   90....       MOV     DPTR,#_NIB + 96
   \   0000A2   7402         MOV     A,#0x2
   \   0000A4   F0           MOVX    @DPTR,A
    431            _NIB.nwkUniqueAddr = FALSE;
   \   0000A5   A3           INC     DPTR
   \   0000A6   E4           CLR     A
   \   0000A7   F0           MOVX    @DPTR,A
    432          #else
    433            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
    434            _NIB.nwkUniqueAddr = TRUE;
    435          #endif
    436          
    437            _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD;
   \   0000A8   A3           INC     DPTR
   \   0000A9   740F         MOV     A,#0xf
   \   0000AB   F0           MOVX    @DPTR,A
    438            _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
   \   0000AC   A3           INC     DPTR
   \   0000AD   7403         MOV     A,#0x3
   \   0000AF   F0           MOVX    @DPTR,A
    439          
    440            //MTO and source routing
    441            _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
   \   0000B0   90....       MOV     DPTR,#zgConcentratorDiscoveryTime
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   90....       MOV     DPTR,#_NIB + 102
   \   0000B7   F0           MOVX    @DPTR,A
    442            _NIB.nwkIsConcentrator = zgConcentratorEnable;
   \   0000B8   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   90....       MOV     DPTR,#_NIB + 101
   \   0000BF   F0           MOVX    @DPTR,A
    443            _NIB.nwkConcentratorRadius = zgConcentratorRadius;
   \   0000C0   90....       MOV     DPTR,#zgConcentratorRadius
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   90....       MOV     DPTR,#_NIB + 103
   \   0000C7   F0           MOVX    @DPTR,A
    444          
    445          #if defined ( ZIGBEE_MULTICAST )
    446            _NIB.nwkUseMultiCast = TRUE;
   \   0000C8   90....       MOV     DPTR,#_NIB + 100
   \   0000CB   7401         MOV     A,#0x1
   \   0000CD   F0           MOVX    @DPTR,A
    447          #else
    448            _NIB.nwkUseMultiCast = FALSE;
    449          #endif
    450          
    451          #if defined ( NV_RESTORE )
    452            if ( osal_nv_read( ZCD_NV_NWKMGR_ADDR, 0, sizeof( _NIB.nwkManagerAddr ),
    453                               &_NIB.nwkManagerAddr ) != SUCCESS )
    454          #endif
    455            {
    456              _NIB.nwkManagerAddr = 0x0000;
   \   0000CE   90....       MOV     DPTR,#_NIB + 105
   \   0000D1   E4           CLR     A
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   F0           MOVX    @DPTR,A
    457            }
    458          
    459            _NIB.nwkUpdateId = 0;
   \   0000D5   90....       MOV     DPTR,#_NIB + 109
   \   0000D8   F0           MOVX    @DPTR,A
    460            _NIB.nwkTotalTransmissions = 0;
   \   0000D9   90....       MOV     DPTR,#_NIB + 107
   \   0000DC   F0           MOVX    @DPTR,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   F0           MOVX    @DPTR,A
    461          
    462            if ( ZSTACK_ROUTER_BUILD )
    463            {
    464          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    465              NLME_InitStochasticAddressing();
    466          #else
    467              NLME_InitTreeAddressing();
    468          #endif
    469            }
    470          }
   \   0000DF   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   74FE         MOV     A,#-0x2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   04           INC     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    471          
    472          /*********************************************************************
    473           * @fn       nwk_Status()
    474           *
    475           * @brief
    476           *
    477           *   Status report.
    478           *
    479           * @param   statusCode
    480           * @param   statusValue
    481           *
    482           * @return  none
    483           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    484          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    485          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    486          #if defined ( LCD_SUPPORTED )
    487            switch ( statusCode )
    488            {
    489              case NWK_STATUS_COORD_ADDR:
    490                if ( ZSTACK_ROUTER_BUILD )
    491                {
    492                  HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
    493                  HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
    494                  BuzzerControl( BUZZER_BLIP );
    495                }
    496                break;
    497          
    498              case NWK_STATUS_ROUTER_ADDR:
    499                if ( ZSTACK_ROUTER_BUILD )
    500                {
    501                  HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_LINE_1 );
    502                }
    503                break;
    504          
    505              case NWK_STATUS_ORPHAN_RSP:
    506                if ( ZSTACK_ROUTER_BUILD )
    507                {
    508                  if ( statusValue == ZSuccess )
    509                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
    510                  else
    511                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
    512                }
    513                break;
    514          
    515              case NWK_ERROR_ASSOC_RSP:
    516                if ( ZSTACK_ROUTER_BUILD )
    517                {
    518                  HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
    519                  HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    520                }
    521                break;
    522          
    523              case NWK_STATUS_ED_ADDR:
    524                if ( ZSTACK_END_DEVICE_BUILD )
    525                {
    526                  HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_LINE_1 );
    527                }
    528                break;
    529          
    530              case NWK_STATUS_PARENT_ADDR:
    531                      HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
    532                break;
    533          
    534              case NWK_STATUS_ASSOC_CNF:
    535                HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
    536                break;
    537          
    538              case NWK_ERROR_ASSOC_CNF_DENIED:
    539                HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
    540                HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    541                break;
    542          
    543              case NWK_ERROR_ENERGY_SCAN_FAILED:
    544                HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
    545                break;
    546            }
    547          #endif
    548            
    549            /*
    550             switch ( statusCode )
    551            {
    552              case NWK_STATUS_COORD_ADDR:
    553                  #if defined (GTA_DEBUG)  
    554                  HalUARTWrite(HAL_UART_PORT_0,"1",1);//microdjg
    555                  #endif
    556                  break;
    557          
    558              case NWK_STATUS_ROUTER_ADDR:
    559                  #if defined (GTA_DEBUG)  
    560                  HalUARTWrite(HAL_UART_PORT_0,"2",1);//microdjg
    561                  #endif
    562                  break;
    563          
    564              case NWK_STATUS_ORPHAN_RSP:
    565                  #if defined (GTA_DEBUG)  
    566                  HalUARTWrite(HAL_UART_PORT_0,"3",1);//microdjg
    567                  #endif
    568                  break;
    569          
    570              case NWK_ERROR_ASSOC_RSP:
    571                  #if defined (GTA_DEBUG)  
    572                  HalUARTWrite(HAL_UART_PORT_0,"4",1);//microdjg
    573                  #endif
    574                  break;
    575          
    576              case NWK_STATUS_ED_ADDR:
    577                  #if defined (GTA_DEBUG)  
    578                  HalUARTWrite(HAL_UART_PORT_0,"5",1);//microdjg
    579                  #endif
    580                  break;
    581          
    582              case NWK_STATUS_PARENT_ADDR:
    583                  #if defined (GTA_DEBUG)  
    584                  HalUARTWrite(HAL_UART_PORT_0,"6",1);//microdjg
    585                  #endif
    586                  break;
    587          
    588              case NWK_STATUS_ASSOC_CNF:
    589                  #if defined (GTA_DEBUG)  
    590                  HalUARTWrite(HAL_UART_PORT_0,"7",1);//microdjg
    591                  #endif
    592                  break;
    593          
    594              case NWK_ERROR_ASSOC_CNF_DENIED:
    595                  #if defined (GTA_DEBUG)  
    596                  HalUARTWrite(HAL_UART_PORT_0,"8",1);//microdjg
    597                  #endif
    598                  SystemReset();
    599                  break;
    600          
    601              case NWK_ERROR_ENERGY_SCAN_FAILED:
    602                  #if defined (GTA_DEBUG)  
    603                  HalUARTWrite(HAL_UART_PORT_0,"9",1);//microdjg
    604                  #endif
    605                  break;
    606            }
    607           */
    608          }
   \   000000   02....       LJMP    ?BRET
    609          
    610          /*********************************************************************
    611           * @fn       nwk_UpdateStatistics()
    612           *
    613           * @brief   Update network layer statistic counters
    614           *
    615           * @param   statisticCode
    616           *
    617           * @return  none
    618           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    619          void nwk_UpdateStatistics( uint8 statisticCode )
   \                     nwk_UpdateStatistics:
    620          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    621          #if defined ( PACKET_FILTER_STATS )
    622            switch ( statisticCode )
    623            {
    624              case STAT_NWK_INVALID_PACKET:
    625                nwkInvalidPackets++;
    626                break;
    627          
    628              case STAT_NWK_SECURITY_FAILURE:
    629                nwkInvalidPackets++;
    630                nwkSecurityFailures++;
    631                break;
    632          
    633              case STAT_APS_INVALID_PACKET:
    634                apsInvalidPackets++;
    635                break;
    636          
    637              case STAT_APS_SECURITY_FAILURE:
    638                apsSecurityFailures++;
    639                break;
    640            }
    641          #endif
    642          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LINK_COST>`:
   \   000000   06           DB 6

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`:
   \   000000   12           DB 18

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_globals_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_globals_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NIB_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NIB_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_Status?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_Status

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_UpdateStatistics?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_UpdateStatistics
    643          
    644          /*********************************************************************
    645          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0      0  NIB_init
                          2 0 0 -> osal_memset
                          2 0 0 -> osal_rand
                          2 0 0 -> sAddrExtCpy
       0      0      0  nwk_Status
       0      0      0  nwk_UpdateStatistics
       2      0      0  nwk_globals_init
                          2 0 0 -> AddrMgrInit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST
       1  ?<Initializer for gMIN_TREE_LINK_COST>
       6  ??NIB_init?relay
       6  ??nwk_Status?relay
       6  ??nwk_UpdateStatistics?relay
       6  ??nwk_globals_init?relay
       7  ?Subroutine0
       9  ?Subroutine1
     378  AssociatedDevList
      56  BindingTable
       2  Cskip
       1  CskipChldrn
       1  CskipRtrs
     226  NIB_init
      90  apsEndDeviceBroadcastTable
      36  bcastHoldAckMask
       9  bcastHoldHandle
      72  bcastTable
      16  defaultKey
      16  defaultTCLinkKey
       1  gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES
       1  gAPS_MAX_GROUPS
       2  gBIND_REC_SIZE
       1  gDEFAULT_ROUTE_REQUEST_RADIUS
       1  gDEF_NWK_RADIUS
       1  gLINK_DOWN_TRIGGER
       1  gMAX_BCAST
       1  gMAX_BINDING_CLUSTER_IDS
       1  gMAX_BROADCAST_QUEUED
       1  gMAX_NEIGHBOR_ENTRIES
       1  gMAX_PASSIVE_ACK_CNT
       1  gMAX_RREQ_ENTRIES
       2  gMAX_RTG_ENTRIES
       2  gMAX_RTG_SRC_ENTRIES
       1  gMAX_SOURCE_ROUTE
       1  gMIN_TREE_LINK_COST
       1  gMTO_ROUTE_EXPIRY_TIME
       2  gMTO_RREQ_LIMIT_TIME
       1  gNWK_CONFLICTED_ADDR_EXPIRY_TIME
       1  gNWK_INDIRECT_CNT_RTG_TMR
       1  gNWK_INDIRECT_MSG_MAX_ALL
       1  gNWK_INDIRECT_MSG_MAX_PER
       2  gNWK_MAX_BINDING_ENTRIES
       1  gNWK_MAX_DATABUFS_CONFIRMED
       1  gNWK_MAX_DATABUFS_SCHEDULED
       1  gNWK_MAX_DATABUFS_TOTAL
       1  gNWK_MAX_DATABUFS_WAITING
       2  gNWK_MAX_DEVICE_LIST
       1  gNWK_MAX_SLEEPING_END_DEVICES
       2  gNWK_MIN_ENDDEVICE_CHILDREN
       2  gNWK_MIN_ROUTER_CHILDREN
       1  gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
      92  neighborTable
       3  nwk_Status
       3  nwk_UpdateStatistics
      11  nwk_globals_init
      64  rtDiscTable
      24  rtgSrcRelayList
      72  rtgSrcTable
     280  rtgTable

 
   259 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
    70 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
 1 177 bytes in segment XDATA_Z
 
   355 bytes of CODE  memory
 1 179 bytes of XDATA memory

Errors: none
Warnings: none
