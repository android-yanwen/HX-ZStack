###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             09/Sep/2014  13:37:57 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZSTAC #
#                          K-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utiliti #
#                          es\Transmit\Source\TransmitApp.c                   #
#    Command line       =  -f "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          STACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Uti #
#                          lities\Transmit\CC2530DB\..\..\..\Tools\CC2530DB\f #
#                          8wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func        #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "C:\Documents and           #
#                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯É #
#                          Ï´«140707\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"         #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00001000          #
#                          -DZDAPP_CONFIG_PAN_ID=0x1178                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=3             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=2    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Documents and           #
#                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯É #
#                          Ï´«140707\Projects\zstack\Utilities\Transmit\Sourc #
#                          e\TransmitApp.c" -D NWK_AUTO_POLL -D MT_TASK -D    #
#                          ZTOOL_P1 -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          #
#                          ZDNWKMGR_MIN_TRANSMISSIONS=0 -D GTA_DEBUG -D       #
#                          ZIGBEEPRO -D GTA_WHFRFID_R1 -lC "C:\Documents and  #
#                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯É #
#                          Ï´«140707\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\GTA-WHFRFID-R1\List\" -lA "C:\Documents and    #
#                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯É #
#                          Ï´«140707\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\GTA-WHFRFID-R1\List\" --diag_suppress          #
#                          Pe001,Pa010 -o "C:\Documents and                   #
#                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯É #
#                          Ï´«140707\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\GTA-WHFRFID-R1\Obj\" -e --no_code_motion       #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          STACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Uti #
#                          lities\Transmit\CC2530DB\" -I "C:\Documents and    #
#                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯É #
#                          Ï´«140707\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\..\Source\" -I "C:\Documents and               #
#                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯É #
#                          Ï´«140707\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\..\..\..\ZMain\TI2530DB\" -I "C:\Documents     #
#                          and Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö #
#                          ÷¶¯ÉÏ´«140707\Projects\zstack\Utilities\Transmit\C #
#                          C2530DB\..\..\..\..\..\Components\hal\include\"    #
#                          -I "C:\Documents and Settings\Administrator\×ÀÃæ\Z #
#                          STACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Uti #
#                          lities\Transmit\CC2530DB\..\..\..\..\..\Components #
#                          \hal\target\CC2530EB\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯É #
#                          Ï´«140707\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\include\" -I     #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSTA #
#                          CK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utilit #
#                          ies\Transmit\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\high_level\" -I "C:\Documents and                #
#                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯É #
#                          Ï´«140707\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\low_level\srf04\ #
#                          " -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\U #
#                          tilities\Transmit\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\low_level\srf04\single_chip\" -I            #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSTA #
#                          CK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utilit #
#                          ies\Transmit\CC2530DB\..\..\..\..\..\Components\mt #
#                          \" -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\ #
#                          Utilities\Transmit\CC2530DB\..\..\..\..\..\Compone #
#                          nts\osal\include\" -I "C:\Documents and            #
#                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯É #
#                          Ï´«140707\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\..\..\..\..\..\Components\services\saddr\" -I  #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSTA #
#                          CK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utilit #
#                          ies\Transmit\CC2530DB\..\..\..\..\..\Components\se #
#                          rvices\sdata\" -I "C:\Documents and                #
#                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯É #
#                          Ï´«140707\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\..\..\..\..\..\Components\stack\af\" -I        #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSTA #
#                          CK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utilit #
#                          ies\Transmit\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\nwk\" -I "C:\Documents and                     #
#                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯É #
#                          Ï´«140707\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\..\..\..\..\..\Components\stack\sapi\" -I      #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSTA #
#                          CK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utilit #
#                          ies\Transmit\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\sec\" -I "C:\Documents and                     #
#                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯É #
#                          Ï´«140707\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\..\..\..\..\..\Components\stack\sys\" -I       #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSTA #
#                          CK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utilit #
#                          ies\Transmit\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\zdo\" -I "C:\Documents and                     #
#                          Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯É #
#                          Ï´«140707\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\..\..\..\..\..\Components\zmac\" -I            #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\ZSTA #
#                          CK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utilit #
#                          ies\Transmit\CC2530DB\..\..\..\..\..\Components\zm #
#                          ac\f8w\" -Ohz --require_prototypes                 #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\ZSTAC #
#                          K-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utiliti #
#                          es\Transmit\CC2530DB\GTA-WHFRFID-R1\List\TransmitA #
#                          pp.lst                                             #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\ZSTAC #
#                          K-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utiliti #
#                          es\Transmit\CC2530DB\GTA-WHFRFID-R1\Obj\TransmitAp #
#                          p.r51                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c
      1          /**************************************************************************************************
      2            Filename:       TransmitApp.c
      3            Revised:        $Date: 2012-03-05 09:54:49 -0800 (Mon, 05 Mar 2012) $
      4            Revision:       $Revision: 29619 $
      5          
      6            Description:    Transmit Application (no Profile).
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application will send a data packet to another
     42            tranmitApp device as fast as it can.  The receiving
     43            transmitApp device will calculate the following transmit
     44            rate statistics:
     45              - Number bytes in the last second
     46              - Number of seconds running
     47              - Average number of bytes per second
     48              - Number of packets received.
     49          
     50            The application will send one message and as soon as it
     51            receives the confirmation for that message it will send
     52            the next message.
     53          
     54            If you would like a delay between messages
     55            define TRANSMITAPP_DELAY_SEND and set the delay amount
     56            in TRANSMITAPP_SEND_DELAY.
     57          
     58            TransmitApp_MaxDataLength defines the message size
     59          
     60            Set TRANSMITAPP_TX_OPTIONS to AF_MSG_ACK_REQUEST to send
     61            the message expecting an APS ACK, this will decrease your
     62            throughput.  Set TRANSMITAPP_TX_OPTIONS to 0 for no
     63            APS ACK.
     64          
     65            This applications doesn't have a profile, so it handles
     66            everything directly - itself.
     67          
     68            Key control:
     69              SW1:  Starts and stops the transmitting
     70              SW2:  initiates end device binding
     71              SW3:  Resets the display totals
     72              SW4:  initiates a match description request
     73          
     74            Notes:
     75          
     76              This application was intended to be used to test the maximum
     77              throughput between 2 devices in a network - between routers
     78              coordinators.
     79          
     80              Although not recommended, it can be used between
     81              an end device and a router (or coordinator), but you must
     82              enable the delay feature (TRANSMITAPP_DELAY_SEND and
     83              TRANSMITAPP_SEND_DELAY).  If you don't include the delay, the
     84              end device can't receive messages because it will stop polling.
     85              Also, the delay must be greater than RESPONSE_POLL_RATE (default 100 MSec).
     86          *********************************************************************/
     87          
     88          /*********************************************************************
     89           * INCLUDES
     90           */
     91          #include "OSAL.h"
     92          #include "AF.h"
     93          #include "ZDObject.h"
     94          #include "ZDProfile.h"
     95          
     96          #include "TransmitApp.h"

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1
     97          #include "OnBoard.h"
     98          
     99          #include "DebugTrace.h"
    100          
    101          /* HAL */
    102          #include "hal_lcd.h"
    103          #include "hal_led.h"
    104          #include "hal_key.h"
    105          #include "hal_uart.h"
    106          
    107          #include "OSAL_NV.h"
    108          
    109          #include "ZComDef.h"
    110          #include "sapi.h"//
    111          
    112          #include "hal_types.h"
    113          
    114          #if defined(GTA_WTHSB_R1)
    115          #include "hal_sht11.h"
    116          #endif
    117          
    118          #if defined(GTA_WHFRFID_R1)
    119          #include "WHFRFID.h"
    120          #endif
    121          
    122          /*********************************************************************
    123           * MACROS
    124           */
    125          
    126          /*********************************************************************
    127           * CONSTANTS
    128           */
    129          //#define TRANSMITAPP_RANDOM_LEN
    130          
    131          #define TRANSMITAPP_STATE_WAITING 0
    132          #define TRANSMITAPP_STATE_SENDING 1
    133          
    134          #if !defined ( RTR_NWK )
    135            // Use these 2 lines to add a delay between each packet sent
    136            //  - default for end devices
    137            #define TRANSMITAPP_DELAY_SEND
    138            #define TRANSMITAPP_SEND_DELAY    (RESPONSE_POLL_RATE * 2)  // in MSecs
    139          #endif
    140          
    141          // Send with or without APS ACKs
    142          //#define TRANSMITAPP_TX_OPTIONS    (AF_DISCV_ROUTE | AF_ACK_REQUEST)
    143          #define TRANSMITAPP_TX_OPTIONS    AF_DISCV_ROUTE
    144          
    145          #define TRANSMITAPP_INITIAL_MSG_COUNT  2
    146          
    147          #define TRANSMITAPP_TRANSMIT_TIME   4  // 4 MS
    148          #define TRANSMITAPP_DISPLAY_TIMER   (2 * 1000)
    149          
    150          #if defined ( TRANSMITAPP_FRAGMENTED )
    151          #define TRANSMITAPP_MAX_DATA_LEN    225
    152          #else
    153          #define TRANSMITAPP_MAX_DATA_LEN    102
    154          #endif
    155          
    156          /*********************************************************************
    157           * TYPEDEFS
    158           */
    159          
    160          /*********************************************************************
    161           * GLOBAL VARIABLES
    162           */
    163          
    164          
    165          // This is the buffer that is sent out as data.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ];
   \                     TransmitApp_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
    167          
    168          // This is the Cluster ID List and should be filled with Application
    169          // specific cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    170          const cId_t TransmitApp_ClusterList[TRANSMITAPP_MAX_CLUSTERS] =
   \                     TransmitApp_ClusterList:
   \   000000   A100         DW 161
    171          {
    172            TRANSMITAPP_CLUSTERID_TESTMSG  // MSG Cluster ID
    173          };
    174          

   \                                 In  segment XDATA_ROM_C, align 1
    175          const SimpleDescriptionFormat_t TransmitApp_SimpleDesc =
   \                     TransmitApp_SimpleDesc:
   \   000000   01           DB 1
   \   000001   050F         DW 3845
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW TransmitApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW TransmitApp_ClusterList
    176          {
    177            TRANSMITAPP_ENDPOINT,              //  int    Endpoint;
    178            TRANSMITAPP_PROFID,                //  uint16 AppProfId[2];
    179            TRANSMITAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    180            TRANSMITAPP_DEVICE_VERSION,        //  int    AppDevVer:4;
    181            TRANSMITAPP_FLAGS,                 //  int    AppFlags:4;
    182            TRANSMITAPP_MAX_CLUSTERS,          //  byte   AppNumInClusters;
    183            (cId_t *)TransmitApp_ClusterList,  //  byte   *pAppInClusterList;
    184            TRANSMITAPP_MAX_CLUSTERS,          //  byte   AppNumInClusters;
    185            (cId_t *)TransmitApp_ClusterList   //  byte   *pAppInClusterList;
    186          };
    187          
    188          // This is the Endpoint/Interface description.  It is defined here, but
    189          // filled-in in TransmitApp_Init().  Another way to go would be to fill
    190          // in the structure here and make it a "const" (in code space).  The
    191          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          endPointDesc_t TransmitApp_epDesc;
   \                     TransmitApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    193          
    194          /*********************************************************************
    195           * EXTERNAL VARIABLES
    196           */
    197          
    198          /*********************************************************************
    199           * EXTERNAL FUNCTIONS
    200           */
    201          
    202          /*********************************************************************
    203           * LOCAL VARIABLES
    204           */
    205          
    206          // Task ID for event processing - received when TransmitApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          byte TransmitApp_TaskID;
   \                     TransmitApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    208          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    209          devStates_t TransmitApp_NwkState;
   \                     TransmitApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    210          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          static byte TransmitApp_TransID;  // This is the unique message ID (counter)
   \                     TransmitApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    212          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          afAddrType_t TransmitApp_DstAddr;
   \                     TransmitApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214          afAddrType_t TestDirectSent_DstAddr;
   \                     TestDirectSent_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          byte TransmitApp_State;
   \                     TransmitApp_State:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    216          
    217          // Shadow of the OSAL system clock used for calculating actual time expired.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          static uint32 clkShdw;
   \                     clkShdw:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    219          // Running total count of test messages recv/sent since beginning current run.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          static uint32 rxTotal, txTotal;
   \                     rxTotal:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     txTotal:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    221          // Running count of test messages recv/sent since last display / update - 1 Hz.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    222          static uint32 rxAccum, txAccum;
   \                     rxAccum:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     txAccum:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    223          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    224          static byte timerOn;
   \                     timerOn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    225          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    226          static byte timesToSend;
   \                     timesToSend:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    227          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    228          uint16 pktCounter;
   \                     pktCounter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    229          
    230          // Max Data Request Length

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    231          uint16 TransmitApp_MaxDataLength;
   \                     TransmitApp_MaxDataLength:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    232          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    233          uint8   NativeAddr=0x01;
   \                     NativeAddr:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for NativeAddr>`
   \   000001                REQUIRE __INIT_XDATA_I
    234          
    235          #if defined(GTA_DEBUG)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    236          uint8 Test_Mark=0;
   \                     Test_Mark:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    237          uint8 Test_Buf[15];
   \                     Test_Buf:
   \   000000                DS 15
   \   00000F                REQUIRE __INIT_XDATA_Z
    238          #endif
    239          
    240          #if defined(GTA_WTHSB_R1)
    241          
    242          char temp_val[2];
    243          char humi_val[2];
    244          static uint8 readTempHumi(void);
    245          #endif
    246          
    247          #if defined(GTA_WMSCB_R1)
    248          
    249          #endif
    250          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    251          uint8 Flag_ReportData=0;
   \                     Flag_ReportData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    252          
    253          /*********************************************************************
    254           * LOCAL FUNCTIONS
    255           */
    256          void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    257          void TransmitApp_HandleKeys( byte shift, byte keys );
    258          void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    259          void TransmitApp_ProcessZDOIncomingMsgs( zdoIncomingMsg_t *inMsg );//microdjg
    260          void TransmitApp_SendTheMessage( void );
    261          void TransmitApp_ChangeState( void );
    262          
    263          void ReportData(ModBusFrame_t *pRxFrame);
    264          uint16 FramePackage(uint8 *pFrame,uint8 addr,uint8 cmd,uint8 *data,uint16 datalen);
    265          uint16 ReadADC(uint8 channel);
    266          void SendDataRequest(uint8 *pBuf,uint16 len);
    267          
    268          /*********************************************************************
    269           * NETWORK LAYER CALLBACKS
    270           */
    271          
    272          /*********************************************************************
    273           * PUBLIC FUNCTIONS
    274           */
    275          void TransmitApp_DisplayResults( void );
    276          
    277          /*********************************************************************
    278           * @fn      TransmitApp_Init
    279           *
    280           * @brief   Initialization function for the Generic App Task.
    281           *          This is called during initialization and should contain
    282           *          any application specific initialization (ie. hardware
    283           *          initialization/setup, table initialization, power up
    284           *          notificaiton ... ).
    285           *
    286           * @param   task_id - the ID assigned by OSAL.  This ID should be
    287           *                    used to send messages and set timers.
    288           *
    289           * @return  none
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          void TransmitApp_Init( byte task_id )
   \                     TransmitApp_Init:
    292          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    293          #if !defined ( TRANSMITAPP_FRAGMENTED )
    294            afDataReqMTU_t mtu;
    295          #endif
    296            uint16 i;
    297            
    298            #if defined(GTA_WTHSB_R1)
    299            Hal_SHT11_Init();
    300            s_connectionreset();
    301            #endif
    302            
    303            
    304            initUart(uartRxCB);//microdjg
   \   00000C                ; Setup parameters for call to function initUart
   \   00000C   7A..         MOV     R2,#??uartRxCB?relay & 0xff
   \   00000E   7B..         MOV     R3,#(??uartRxCB?relay >> 8) & 0xff
   \   000010   12....       LCALL   ??initUart?relay
    305            osal_nv_item_init(ZCD_NV_NATIVE_ADDRESS,sizeof(NativeAddr),NULL);
   \   000013                ; Setup parameters for call to function osal_nv_item_init
   \   000013   E4           CLR     A
   \   000014   F5..         MOV     ?V0 + 0,A
   \   000016   F5..         MOV     ?V0 + 1,A
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   7C01         MOV     R4,#0x1
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   7A01         MOV     R2,#0x1
   \   000023   7B04         MOV     R3,#0x4
   \   000025   12....       LCALL   ??osal_nv_item_init?relay
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?DEALLOC_XSTACK8
    306            osal_nv_read(ZCD_NV_NATIVE_ADDRESS,0,sizeof(NativeAddr),&NativeAddr);
   \   00002D                ; Setup parameters for call to function osal_nv_read
   \   00002D   75....       MOV     ?V0 + 0,#NativeAddr & 0xff
   \   000030   75....       MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   75..01       MOV     ?V0 + 0,#0x1
   \   00003B   75..00       MOV     ?V0 + 1,#0x0
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7C00         MOV     R4,#0x0
   \   000045   7D00         MOV     R5,#0x0
   \   000047   7A01         MOV     R2,#0x1
   \   000049   7B04         MOV     R3,#0x4
   \   00004B   12....       LCALL   ??osal_nv_read?relay
   \   00004E   7404         MOV     A,#0x4
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
    307            
    308            TransmitApp_TaskID = task_id;
   \   000053   EE           MOV     A,R6
   \   000054   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000057   F0           MOVX    @DPTR,A
    309            TransmitApp_NwkState = DEV_INIT;
   \   000058   90....       MOV     DPTR,#TransmitApp_NwkState
   \   00005B   7401         MOV     A,#0x1
   \   00005D   F0           MOVX    @DPTR,A
    310            TransmitApp_TransID = 0;
   \   00005E   90....       MOV     DPTR,#TransmitApp_TransID
   \   000061   E4           CLR     A
   \   000062   F0           MOVX    @DPTR,A
    311          
    312            pktCounter = 0;
   \   000063   90....       MOV     DPTR,#pktCounter
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   F0           MOVX    @DPTR,A
    313          
    314            TransmitApp_State = TRANSMITAPP_STATE_WAITING;
   \   000069   90....       MOV     DPTR,#TransmitApp_State
   \   00006C   F0           MOVX    @DPTR,A
    315          
    316            // Device hardware initialization can be added here or in main() (Zmain.c).
    317            // If the hardware is application specific - add it here.
    318            // If the hardware is other parts of the device add it in main().
    319          
    320            TransmitApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;//°ó¶¨·¢
   \   00006D   90....       MOV     DPTR,#TransmitApp_DstAddr + 8
   \   000070   F0           MOVX    @DPTR,A
    321            TransmitApp_DstAddr.endPoint = 0;
   \   000071   A3           INC     DPTR
   \   000072   F0           MOVX    @DPTR,A
    322            TransmitApp_DstAddr.addr.shortAddr = 0;//ÎÞËùÎ½
   \   000073   90....       MOV     DPTR,#TransmitApp_DstAddr
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   F0           MOVX    @DPTR,A
    323          
    324            // Fill out the endpoint description.
    325            TransmitApp_epDesc.endPoint = TRANSMITAPP_ENDPOINT;
   \   000079   90....       MOV     DPTR,#TransmitApp_epDesc
   \   00007C   04           INC     A
   \   00007D   F0           MOVX    @DPTR,A
    326            TransmitApp_epDesc.task_id = &TransmitApp_TaskID;
   \   00007E   A3           INC     DPTR
   \   00007F   74..         MOV     A,#TransmitApp_TaskID & 0xff
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   74..         MOV     A,#(TransmitApp_TaskID >> 8) & 0xff
   \   000085   F0           MOVX    @DPTR,A
    327            TransmitApp_epDesc.simpleDesc
    328                      = (SimpleDescriptionFormat_t *)&TransmitApp_SimpleDesc;
   \   000086   A3           INC     DPTR
   \   000087   74..         MOV     A,#TransmitApp_SimpleDesc & 0xff
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   74..         MOV     A,#(TransmitApp_SimpleDesc >> 8) & 0xff
   \   00008D   12....       LCALL   ??Subroutine24_0 & 0xFFFF
    329            TransmitApp_epDesc.latencyReq = noLatencyReqs;
    330            
    331            
    332            
    333            //if(ZG_DEVICE_COORDINATOR_TYPE)
    334            //{
    335              //HalLcdInit();
    336              //HalLcd_HW_WriteLine(HAL_LCD_LINE_1,"GTA Zigbee Test");
    337              HalLcdWriteString( "GTA Zigbee", HAL_LCD_LINE_1 );
   \                     ??CrossCallReturnLabel_33:
   \   000090                ; Setup parameters for call to function HalLcdWriteString
   \   000090   7901         MOV     R1,#0x1
   \   000092   7A..         MOV     R2,#`?<Constant "GTA Zigbee">` & 0xff
   \   000094   7B..         MOV     R3,#(`?<Constant "GTA Zigbee">` >> 8) & 0xff
   \   000096   12....       LCALL   ??HalLcdWriteString?relay
    338            //}
    339          
    340          
    341            // Register the endpoint/interface description with the AF
    342            afRegister( &TransmitApp_epDesc );
   \   000099                ; Setup parameters for call to function afRegister
   \   000099   7A..         MOV     R2,#TransmitApp_epDesc & 0xff
   \   00009B   7B..         MOV     R3,#(TransmitApp_epDesc >> 8) & 0xff
   \   00009D   12....       LCALL   ??afRegister?relay
    343          
    344            // Register for all key events - This app will handle all key events
    345            RegisterForKeys( TransmitApp_TaskID );
   \   0000A0                ; Setup parameters for call to function RegisterForKeys
   \   0000A0   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F9           MOV     R1,A
   \   0000A5   12....       LCALL   ??RegisterForKeys?relay
    346          
    347            // Update the display
    348          #if defined ( LCD_SUPPORTED )
    349            HalLcdWriteString( "TransmitApp", HAL_LCD_LINE_2 );
    350          #endif
    351          
    352            // Set the data length
    353          #if defined ( TRANSMITAPP_FRAGMENTED )
    354            TransmitApp_MaxDataLength = TRANSMITAPP_MAX_DATA_LEN;
    355          #else
    356            mtu.kvp        = FALSE;
   \   0000A8   85..82       MOV     DPL,?XSP + 0
   \   0000AB   85..83       MOV     DPH,?XSP + 1
   \   0000AE   E4           CLR     A
   \   0000AF   F0           MOVX    @DPTR,A
    357            mtu.aps.secure = FALSE;
   \   0000B0   04           INC     A
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   E4           CLR     A
   \   0000B5   12....       LCALL   ?Subroutine7 & 0xFFFF
    358            TransmitApp_MaxDataLength = afDataReqMTU( &mtu );
   \                     ??CrossCallReturnLabel_4:
   \   0000B8   12....       LCALL   ??afDataReqMTU?relay
   \   0000BB   E9           MOV     A,R1
   \   0000BC   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   0000BF   12....       LCALL   ??Subroutine24_0 & 0xFFFF
    359          #endif
    360          
    361            // Generate the data
    362            for (i=0; i<TransmitApp_MaxDataLength; i++)
   \                     ??CrossCallReturnLabel_35:
   \   0000C2   F8           MOV     R0,A
   \   0000C3   8012         SJMP    ??TransmitApp_Init_0
    363            {
    364              TransmitApp_Msg[i] = (uint8) i;
   \                     ??TransmitApp_Init_1:
   \   0000C5   74..         MOV     A,#TransmitApp_Msg & 0xff
   \   0000C7   28           ADD     A,R0
   \   0000C8   F582         MOV     DPL,A
   \   0000CA   74..         MOV     A,#(TransmitApp_Msg >> 8) & 0xff
   \   0000CC   39           ADDC    A,R1
   \   0000CD   F583         MOV     DPH,A
   \   0000CF   E8           MOV     A,R0
   \   0000D0   F0           MOVX    @DPTR,A
    365            }
   \   0000D1   2401         ADD     A,#0x1
   \   0000D3   08           INC     R0
   \   0000D4   E9           MOV     A,R1
   \   0000D5   3400         ADDC    A,#0x0
   \                     ??TransmitApp_Init_0:
   \   0000D7   F9           MOV     R1,A
   \   0000D8   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   FA           MOV     R2,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   FB           MOV     R3,A
   \   0000E0   C3           CLR     C
   \   0000E1   E8           MOV     A,R0
   \   0000E2   9A           SUBB    A,R2
   \   0000E3   E9           MOV     A,R1
   \   0000E4   9B           SUBB    A,R3
   \   0000E5   40DE         JC      ??TransmitApp_Init_1
    366          
    367            ZDO_RegisterForZDOMsg( TransmitApp_TaskID, End_Device_Bind_rsp );
   \   0000E7                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000E7   7A20         MOV     R2,#0x20
   \   0000E9   7B80         MOV     R3,#-0x80
   \   0000EB   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F9           MOV     R1,A
   \   0000F0   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    368            ZDO_RegisterForZDOMsg( TransmitApp_TaskID, Match_Desc_rsp );
   \   0000F3                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000F3   7A06         MOV     R2,#0x6
   \   0000F5   7B80         MOV     R3,#-0x80
   \   0000F7   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F9           MOV     R1,A
   \   0000FC   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    369            ZDO_RegisterForZDOMsg( TransmitApp_TaskID,TRANSMITAPP_CLUSTERID_TESTMSG);
   \   0000FF                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000FF   7AA1         MOV     R2,#-0x5f
   \   000101   7B00         MOV     R3,#0x0
   \   000103   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000106   E0           MOVX    A,@DPTR
   \   000107   F9           MOV     R1,A
   \   000108   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    370            
    371          }
   \   00010B   7402         MOV     A,#0x2
   \   00010D                REQUIRE ?Subroutine4
   \   00010D                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine23_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function afDataReqMTU
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET
    372          
    373          /*********************************************************************
    374           * @fn      TransmitApp_ProcessEvent
    375           *
    376           * @brief   Generic Application Task event processor.  This function
    377           *          is called to process all events for the task.  Events
    378           *          include timers, messages and any other user defined events.
    379           *
    380           * @param   task_id  - The OSAL assigned task ID.
    381           * @param   events - events to process.  This is a bit map and can
    382           *                   contain more than one event.
    383           *
    384           * @return  none
    385           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    386          UINT16 TransmitApp_ProcessEvent( byte task_id, UINT16 events )
   \                     TransmitApp_ProcessEvent:
    387          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    388            afIncomingMSGPacket_t *MSGpkt;
    389            afDataConfirm_t *afDataConfirm;
    390            (void)task_id;  // Intentionally unreferenced parameter
    391          
    392            // Data Confirmation message fields
    393            ZStatus_t sentStatus;
    394            byte sentEP;
    395            
    396            
    397            
    398            uint8 Frame[20];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
                         ^
Warning[Pe177]: variable "Frame" was declared but never referenced
    399            uint8 data[10];//
                         ^
Warning[Pe177]: variable "data" was declared but never referenced
    400            uint16 i=0,j=0;
                          ^
Warning[Pe177]: variable "i" was declared but never referenced

    uint16 i=0,j=0;
               ^
"C:\Documents and Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c",400  Warning[Pe177]: 
          variable "j" was declared but never referenced
    401            uint8 led=0;
                         ^
Warning[Pe177]: variable "led" was declared but never referenced
    402            uint16 temp;
                          ^
Warning[Pe177]: variable "temp" was declared but never referenced
    403            uint16 FrameLen;
                          ^
Warning[Pe177]: variable "FrameLen" was declared but never referenced
    404            
    405          
    406            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??TransmitApp_ProcessEvent_0 & 0xFFFF
    407            {
    408              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   800D         SJMP    ??TransmitApp_ProcessEvent_1
    409              while ( MSGpkt )
    410              {
    411                switch ( MSGpkt->hdr.event )
    412                {
    413                  case ZDO_CB_MSG:
    414                    TransmitApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    415                    break;
    416          
    417                  case KEY_CHANGE:
    418                    TransmitApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    419                    break;
    420          
    421                  case AF_DATA_CONFIRM_CMD:
    422                    // This message is received as a confirmation of a data packet sent.
    423                    // The status is of ZStatus_t type [defined in ZComDef.h]
    424                    // The message fields are defined in AF.h
    425                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    426                    sentEP = afDataConfirm->endpoint;
    427                    sentStatus = afDataConfirm->hdr.status;
    428          
    429                    if ( (ZSuccess == sentStatus) &&
    430                         (TransmitApp_epDesc.endPoint == sentEP) )
    431                    {
    432          #if !defined ( TRANSMITAPP_RANDOM_LEN )
    433                      txAccum += TransmitApp_MaxDataLength;
    434          #endif
    435                      if ( !timerOn )
    436                      {
    437                        osal_start_timerEx( TransmitApp_TaskID,TRANSMITAPP_RCVTIMER_EVT,
    438                                                               TRANSMITAPP_DISPLAY_TIMER);
    439                        clkShdw = osal_GetSystemClock();
    440                        timerOn = TRUE;
    441                      }
    442                    }
    443          
    444                    // Action taken when confirmation is received: Send the next message.
    445                    TransmitApp_SetSendEvt();
    446                    break;
    447          
    448                  case AF_INCOMING_MSG_CMD:
    449                    TransmitApp_MessageMSGCB( MSGpkt );
    450                    
    451                    break;
    452          
    453                  case ZDO_STATE_CHANGE:
    454                    TransmitApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??TransmitApp_ProcessEvent_2:
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   90....       MOV     DPTR,#TransmitApp_NwkState
   \   000017   F0           MOVX    @DPTR,A
    455                    break;
    456          
    457                  default:
    458                    break;
    459                }
    460          
    461                // Release the memory
    462                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??TransmitApp_ProcessEvent_3:
   \   000018                ; Setup parameters for call to function osal_msg_deallocate
   \   000018   AA..         MOV     R2,?V0 + 0
   \   00001A   AB..         MOV     R3,?V0 + 1
   \   00001C   12....       LCALL   ??osal_msg_deallocate?relay
    463          
    464                // Next
    465                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
   \   00001F                ; Setup parameters for call to function osal_msg_receive
   \                     ??TransmitApp_ProcessEvent_1:
   \   00001F   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   12....       LCALL   ??osal_msg_receive?relay
   \   000027   8A..         MOV     ?V0 + 0,R2
   \   000029   8B..         MOV     ?V0 + 1,R3
   \   00002B   E5..         MOV     A,?V0 + 0
   \   00002D   45..         ORL     A,?V0 + 1
   \   00002F   7003         JNZ     $+5
   \   000031   02....       LJMP    ??TransmitApp_ProcessEvent_4 & 0xFFFF
   \   000034   85..82       MOV     DPL,?V0 + 0
   \   000037   85..83       MOV     DPH,?V0 + 1
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   2440         ADD     A,#0x40
   \   00003D   6017         JZ      ??TransmitApp_ProcessEvent_5
   \   00003F   24EF         ADD     A,#-0x11
   \   000041   60CF         JZ      ??TransmitApp_ProcessEvent_2
   \   000043   24FE         ADD     A,#-0x2
   \   000045   6006         JZ      ??TransmitApp_ProcessEvent_6
   \   000047   24D6         ADD     A,#-0x2a
   \   000049   601F         JZ      ??TransmitApp_ProcessEvent_7
   \   00004B   80CB         SJMP    ??TransmitApp_ProcessEvent_3
   \                     ??TransmitApp_ProcessEvent_6:
   \   00004D                ; Setup parameters for call to function TransmitApp_ProcessZDOMsgs
   \   00004D   AA..         MOV     R2,?V0 + 0
   \   00004F   AB..         MOV     R3,?V0 + 1
   \   000051   12....       LCALL   ??TransmitApp_ProcessZDOMsgs?relay
   \   000054   80C2         SJMP    ??TransmitApp_ProcessEvent_3
   \                     ??TransmitApp_ProcessEvent_5:
   \   000056                ; Setup parameters for call to function TransmitApp_HandleKeys
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FA           MOV     R2,A
   \   00005B   85..82       MOV     DPL,?V0 + 0
   \   00005E   85..83       MOV     DPH,?V0 + 1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   12....       LCALL   ??TransmitApp_HandleKeys?relay
   \   000068   80AE         SJMP    ??TransmitApp_ProcessEvent_3
   \                     ??TransmitApp_ProcessEvent_7:
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   704D         JNZ     ??TransmitApp_ProcessEvent_8
   \   00006E   90....       MOV     DPTR,#TransmitApp_epDesc
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F8           MOV     R0,A
   \   000073   85..82       MOV     DPL,?V0 + 0
   \   000076   85..83       MOV     DPH,?V0 + 1
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   68           XRL     A,R0
   \   00007D   703C         JNZ     ??TransmitApp_ProcessEvent_8
   \   00007F   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F5..         MOV     ?V0 + 4,A
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F5..         MOV     ?V0 + 5,A
   \   000089   E4           CLR     A
   \   00008A   F5..         MOV     ?V0 + 6,A
   \   00008C   F5..         MOV     ?V0 + 7,A
   \   00008E   90....       MOV     DPTR,#txAccum
   \   000091   78..         MOV     R0,#?V0 + 4
   \   000093   12....       LCALL   ?L_ADD_TO_X
   \   000096   90....       MOV     DPTR,#timerOn
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   701F         JNZ     ??TransmitApp_ProcessEvent_8
   \   00009C                ; Setup parameters for call to function osal_start_timerEx
   \   00009C   7CD0         MOV     R4,#-0x30
   \   00009E   7D07         MOV     R5,#0x7
   \   0000A0   7A02         MOV     R2,#0x2
   \   0000A2   7B00         MOV     R3,#0x0
   \   0000A4   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   12....       LCALL   ??osal_start_timerEx?relay
   \   0000AC                ; Setup parameters for call to function osal_GetSystemClock
   \   0000AC   12....       LCALL   ??osal_GetSystemClock?relay
   \   0000AF   90....       MOV     DPTR,#clkShdw
   \   0000B2   12....       LCALL   ?XSTORE_R2345
   \   0000B5   90....       MOV     DPTR,#timerOn
   \   0000B8   7401         MOV     A,#0x1
   \   0000BA   F0           MOVX    @DPTR,A
   \                     ??TransmitApp_ProcessEvent_8:
   \   0000BB                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   0000BB   12....       LCALL   ??TransmitApp_SetSendEvt?relay
   \   0000BE   02....       LJMP    ??TransmitApp_ProcessEvent_3 & 0xFFFF
    466              }
    467          
    468              // Squash compiler warnings until values are used.
    469              (void)sentStatus;
    470              (void)sentEP;
    471          
    472              // Return unprocessed events
    473              return (events ^ SYS_EVENT_MSG);
   \                     ??TransmitApp_ProcessEvent_4:
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   6480         XRL     A,#0x80
   \   0000C6   8078         SJMP    ??TransmitApp_ProcessEvent_9
    474            }
    475          
    476            // Send a message out
    477            if ( events & TRANSMITAPP_SEND_MSG_EVT )
   \                     ??TransmitApp_ProcessEvent_0:
   \   0000C8   EE           MOV     A,R6
   \   0000C9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000CB   5010         JNC     ??TransmitApp_ProcessEvent_10
    478            {
    479              if ( TransmitApp_State == TRANSMITAPP_STATE_SENDING )
   \   0000CD   90....       MOV     DPTR,#TransmitApp_State
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   6401         XRL     A,#0x1
   \   0000D3   7003         JNZ     ??TransmitApp_ProcessEvent_11
    480              {
    481                TransmitApp_SendTheMessage();
   \   0000D5                ; Setup parameters for call to function TransmitApp_SendTheMessage
   \   0000D5   12....       LCALL   ??TransmitApp_SendTheMessage?relay
    482              }
    483          
    484              // Return unprocessed events
    485              return (events ^ TRANSMITAPP_SEND_MSG_EVT);
   \                     ??TransmitApp_ProcessEvent_11:
   \   0000D8   EE           MOV     A,R6
   \   0000D9   6401         XRL     A,#0x1
   \   0000DB   8061         SJMP    ??TransmitApp_ProcessEvent_12
    486            }
    487          
    488            // Timed wait from error
    489            if ( events & TRANSMITAPP_SEND_ERR_EVT )
   \                     ??TransmitApp_ProcessEvent_10:
   \   0000DD   5404         ANL     A,#0x4
   \   0000DF   6008         JZ      ??TransmitApp_ProcessEvent_13
    490            {
    491              TransmitApp_SetSendEvt();
   \   0000E1                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   0000E1   12....       LCALL   ??TransmitApp_SetSendEvt?relay
    492          
    493              // Return unprocessed events
    494              return (events ^ TRANSMITAPP_SEND_ERR_EVT);
   \   0000E4   EE           MOV     A,R6
   \   0000E5   6404         XRL     A,#0x4
   \   0000E7   8055         SJMP    ??TransmitApp_ProcessEvent_12
    495            }
    496          
    497            // Receive timer
    498            if ( events & TRANSMITAPP_RCVTIMER_EVT )
   \                     ??TransmitApp_ProcessEvent_13:
   \   0000E9   EE           MOV     A,R6
   \   0000EA   5402         ANL     A,#0x2
   \   0000EC   6018         JZ      ??TransmitApp_ProcessEvent_14
    499            {
    500              // Setup to display the next result
    501              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT,
    502                                                      TRANSMITAPP_DISPLAY_TIMER );
   \   0000EE                ; Setup parameters for call to function osal_start_timerEx
   \   0000EE   7CD0         MOV     R4,#-0x30
   \   0000F0   7D07         MOV     R5,#0x7
   \   0000F2   7A02         MOV     R2,#0x2
   \   0000F4   7B00         MOV     R3,#0x0
   \   0000F6   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F9           MOV     R1,A
   \   0000FB   12....       LCALL   ??osal_start_timerEx?relay
    503              TransmitApp_DisplayResults();
   \   0000FE                ; Setup parameters for call to function TransmitApp_DisplayResults
   \   0000FE   12....       LCALL   ??TransmitApp_DisplayResults?relay
    504          
    505              return (events ^ TRANSMITAPP_RCVTIMER_EVT);
   \   000101   EE           MOV     A,R6
   \   000102   6402         XRL     A,#0x2
   \   000104   8038         SJMP    ??TransmitApp_ProcessEvent_12
    506            }
    507            if ( events & TRANSMITAPP_BIND_REQUEST_EVT)//microdjg
   \                     ??TransmitApp_ProcessEvent_14:
   \   000106   EE           MOV     A,R6
   \   000107   5408         ANL     A,#0x8
   \   000109   6008         JZ      ??TransmitApp_ProcessEvent_15
    508            {
    509              SendBindRequest();//×Ô¶¯¿ªÊ¼°ó¶¨ microdjg
   \   00010B                ; Setup parameters for call to function SendBindRequest
   \   00010B   12....       LCALL   ??SendBindRequest?relay
    510              //osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT,3000 );
    511              return (events ^ TRANSMITAPP_BIND_REQUEST_EVT);
   \   00010E   EE           MOV     A,R6
   \   00010F   6408         XRL     A,#0x8
   \   000111   802B         SJMP    ??TransmitApp_ProcessEvent_12
    512            }
    513            
    514            
    515            if ( events & TRANSMITAPP_START_REPORT_EVT )
   \                     ??TransmitApp_ProcessEvent_15:
   \   000113   EE           MOV     A,R6
   \   000114   5410         ANL     A,#0x10
   \   000116   602B         JZ      ??TransmitApp_ProcessEvent_16
    516            {
    517              if(Flag_ReportData)
   \   000118   90....       MOV     DPTR,#Flag_ReportData
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   6010         JZ      ??TransmitApp_ProcessEvent_17
    518                {
    519                  osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 1000);
   \   00011E                ; Setup parameters for call to function osal_start_timerEx
   \   00011E   7CE8         MOV     R4,#-0x18
   \   000120   7D03         MOV     R5,#0x3
   \   000122   7A10         MOV     R2,#0x10
   \   000124   7B00         MOV     R3,#0x0
   \   000126   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   F9           MOV     R1,A
   \   00012B   12....       LCALL   ??osal_start_timerEx?relay
    520                }
    521              HalLedBlink(HAL_LED_1,1,50,300);
   \                     ??TransmitApp_ProcessEvent_17:
   \   00012E                ; Setup parameters for call to function HalLedBlink
   \   00012E   7C2C         MOV     R4,#0x2c
   \   000130   7D01         MOV     R5,#0x1
   \   000132   7B32         MOV     R3,#0x32
   \   000134   7A01         MOV     R2,#0x1
   \   000136   7901         MOV     R1,#0x1
   \   000138   12....       LCALL   ??HalLedBlink?relay
    522              
    523              
    524              
    525              
    526              #if defined ( GTA_WWSB_R1 )||(GTA_WFSB_R1) //´«¸ÐÆ÷   
    527              temp=ReadADC(4);//¶ÁÓêµÎµçÑ¹Öµ
    528              data[0]=1;
    529              if(temp>3000)
    530                data[1]=0x01;
    531              else
    532                data[1]=0x00;
    533              //data[1]=LO_UINT16(temp);
    534              //data[2]=HI_UINT16(temp);
    535              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    536              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    537              #endif
    538              
    539              
    540              #if defined (GTA_WVSB_R1)||(GTA_WIRSB_R1)
    541              temp=ReadADC(4);//¶ÁÓêµÎµçÑ¹Öµ
    542              data[0]=1;
    543              if(temp>3000)
    544                data[1]=0x00;
    545              else
    546                data[1]=0x01;
    547              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    548              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    549              #endif
    550              
    551              #if defined ( GTA_WUSB_R1 )
    552              IO_DIR_PORT_PIN(0, 6, IO_IN);
    553              data[0]=1;
    554              if(IO_SENSOR)
    555                data[1]=0x01;
    556              else
    557                data[1]=0x00;
    558              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
    559              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    560              #endif
    561              
    562              #if defined (GTA_WISB_R1)
    563              temp=ReadADC(4);//
    564              data[0]=2;
    565              data[1]=LO_UINT16(temp);
    566              data[2]=HI_UINT16(temp);
    567              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,3);//´ò°ü
    568              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    569              #endif
    570              
    571              
    572              #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷  
    573              
    574              readTempHumi();
    575              data[0]=4;
    576              data[1]=humi_val[0];//L
    577              data[2]=humi_val[1];//H
    578              data[3]=temp_val[0];
    579              data[4]=temp_val[1];
    580              FrameLen=FramePackage(Frame,NativeAddr,0x03,data,5);//´ò°ü
    581              SendDataRequest(Frame,FrameLen);//·¢ËÍ
    582              
    583              #endif
    584              
    585              
    586              
    587              
    588              return (events ^ TRANSMITAPP_START_REPORT_EVT);
   \   00013B   EE           MOV     A,R6
   \   00013C   6410         XRL     A,#0x10
   \                     ??TransmitApp_ProcessEvent_12:
   \   00013E   FA           MOV     R2,A
   \   00013F   EF           MOV     A,R7
   \                     ??TransmitApp_ProcessEvent_9:
   \   000140   FB           MOV     R3,A
   \   000141   8004         SJMP    ??TransmitApp_ProcessEvent_18
    589            }
    590            
    591            
    592          
    593            // Discard unknown events
    594            return 0;
   \                     ??TransmitApp_ProcessEvent_16:
   \   000143   7A00         MOV     R2,#0x0
   \   000145   7B00         MOV     R3,#0x0
   \                     ??TransmitApp_ProcessEvent_18:
   \   000147   02....       LJMP    ?Subroutine1 & 0xFFFF
    595          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    596          
    597          /*********************************************************************
    598           * Event Generation Functions
    599           */
    600          /*********************************************************************
    601           * @fn      TransmitApp_ProcessZDOMsgs()
    602           *
    603           * @brief   Process response messages
    604           *
    605           * @param   none
    606           *
    607           * @return  none
    608           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    609          void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     TransmitApp_ProcessZDOMsgs:
    610          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    611            switch ( inMsg->clusterID )
   \   000005   EA           MOV     A,R2
   \   000006   240C         ADD     A,#0xc
   \   000008   F582         MOV     DPL,A
   \   00000A   EB           MOV     A,R3
   \   00000B   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00000E   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000011   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for TransmitApp_ProcessZDOMsgs>_0`:
   \   000014   0000         DW        0
   \   000016   0300         DW        3
   \   000018   A100         DW        161
   \   00001A   ....         DW        ??TransmitApp_ProcessZDOMsgs_0
   \   00001C   0680         DW        32774
   \   00001E   ....         DW        ??TransmitApp_ProcessZDOMsgs_1
   \   000020   2080         DW        32800
   \   000022   ....         DW        ??TransmitApp_ProcessZDOMsgs_2
   \   000024   ....         DW        ??TransmitApp_ProcessZDOMsgs_3
    612            {
    613              case End_Device_Bind_rsp:
    614                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
   \                     ??TransmitApp_ProcessZDOMsgs_2:
   \   000026   EA           MOV     A,R2
   \   000027   2413         ADD     A,#0x13
   \   000029   F582         MOV     DPL,A
   \   00002B   EB           MOV     A,R3
   \   00002C   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00002F   7015         JNZ     ??TransmitApp_ProcessZDOMsgs_4
    615                {
    616                  // Light LED
    617                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000031                ; Setup parameters for call to function HalLedSet
   \   000031   7A01         MOV     R2,#0x1
   \   000033   7908         MOV     R1,#0x8
   \   000035   12....       LCALL   ??HalLedSet?relay
    618                  osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_BIND_REQUEST_EVT );
   \   000038                ; Setup parameters for call to function osal_stop_timerEx
   \   000038   7A08         MOV     R2,#0x8
   \   00003A   7B00         MOV     R3,#0x0
   \   00003C   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   12....       LCALL   ??osal_stop_timerEx?relay
   \   000044   8063         SJMP    ??TransmitApp_ProcessZDOMsgs_3
    619          
    620                }
    621          #if defined(BLINK_LEDS)
    622                else
    623                {
    624                  // Flash LED to show failure
    625                  //HalLedSet ( HAL_LED_2, HAL_LED_MODE_FLASH );//4
    626                  HalLedBlink(HAL_LED_2,1,50,1000);//Ö¸Ê¾°ó¶¨ÓÐÎó
   \                     ??TransmitApp_ProcessZDOMsgs_4:
   \   000046                ; Setup parameters for call to function HalLedBlink
   \   000046   7CE8         MOV     R4,#-0x18
   \   000048   7D03         MOV     R5,#0x3
   \   00004A   7B32         MOV     R3,#0x32
   \   00004C   7A01         MOV     R2,#0x1
   \   00004E   7902         MOV     R1,#0x2
   \   000050   8054         SJMP    ??TransmitApp_ProcessZDOMsgs_5
    627                }
    628          #endif
    629                break;
    630          
    631              case Match_Desc_rsp:
    632                {
    633                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??TransmitApp_ProcessZDOMsgs_1:
   \   000052                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000052   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   000055   8A..         MOV     ?V0 + 0,R2
   \   000057   8B..         MOV     ?V0 + 1,R3
   \   000059   AE..         MOV     R6,?V0 + 0
   \   00005B   AF..         MOV     R7,?V0 + 1
    634                  if ( pRsp )
   \   00005D   EE           MOV     A,R6
   \   00005E   4F           ORL     A,R7
   \   00005F   6048         JZ      ??TransmitApp_ProcessZDOMsgs_3
    635                  {
    636                    if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   E0           MOVX    A,@DPTR
   \   000066   7028         JNZ     ??TransmitApp_ProcessZDOMsgs_6
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6022         JZ      ??TransmitApp_ProcessZDOMsgs_6
    637                    {
    638                      TransmitApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00006E   90....       MOV     DPTR,#TransmitApp_DstAddr + 8
   \   000071   7402         MOV     A,#0x2
   \   000073   12....       LCALL   ?Subroutine11 & 0xFFFF
    639                      TransmitApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \                     ??CrossCallReturnLabel_12:
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F8           MOV     R0,A
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   90....       MOV     DPTR,#TransmitApp_DstAddr
   \   00007E   E8           MOV     A,R0
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   E9           MOV     A,R1
   \   000082   12....       LCALL   ?Subroutine9 & 0xFFFF
    640                      // Take the first endpoint, Can be changed to search through endpoints
    641                      TransmitApp_DstAddr.endPoint = pRsp->epList[0];
   \                     ??CrossCallReturnLabel_8:
   \   000085   90....       MOV     DPTR,#TransmitApp_DstAddr + 9
   \   000088   F0           MOVX    @DPTR,A
    642          
    643                      // Light LED
    644                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000089                ; Setup parameters for call to function HalLedSet
   \   000089   7A01         MOV     R2,#0x1
   \   00008B   7908         MOV     R1,#0x8
   \   00008D   12....       LCALL   ??HalLedSet?relay
    645                    }
    646                    osal_mem_free( pRsp );
   \                     ??TransmitApp_ProcessZDOMsgs_6:
   \   000090                ; Setup parameters for call to function osal_mem_free
   \   000090   EE           MOV     A,R6
   \   000091   FA           MOV     R2,A
   \   000092   EF           MOV     A,R7
   \   000093   FB           MOV     R3,A
   \   000094   12....       LCALL   ??osal_mem_free?relay
   \   000097   8010         SJMP    ??TransmitApp_ProcessZDOMsgs_3
    647                  }
    648                }
    649                break;
    650                
    651            case TRANSMITAPP_CLUSTERID_TESTMSG://microdjg
    652              {  
    653                //osal_set_event( TransmitApp_TaskID, AF_INCOMING_MSG_CMD );///
    654                TransmitApp_ProcessZDOIncomingMsgs(inMsg);
   \                     ??TransmitApp_ProcessZDOMsgs_0:
   \   000099                ; Setup parameters for call to function TransmitApp_ProcessZDOIncomingMsgs
   \   000099   12....       LCALL   ??TransmitApp_ProcessZDOIncomingMsgs?relay
    655                HalLedBlink(HAL_LED_4,1,50,500);///
   \   00009C                ; Setup parameters for call to function HalLedBlink
   \   00009C   7CF4         MOV     R4,#-0xc
   \   00009E   7D01         MOV     R5,#0x1
   \   0000A0   7B32         MOV     R3,#0x32
   \   0000A2   7A01         MOV     R2,#0x1
   \   0000A4   7908         MOV     R1,#0x8
   \                     ??TransmitApp_ProcessZDOMsgs_5:
   \   0000A6   12....       LCALL   ??HalLedBlink?relay
    656              }
    657            }
    658          }
   \                     ??TransmitApp_ProcessZDOMsgs_3:
   \   0000A9   80..         SJMP    ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
    659          
    660          /*********************************************************************
    661           * @fn      TransmitApp_HandleKeys
    662           *
    663           * @brief   Handles all key events for this device.
    664           *
    665           * @param   shift - true if in shift/alt.
    666           * @param   keys - bit field for key events. Valid entries:
    667           *                 EVAL_SW4
    668           *                 EVAL_SW3
    669           *                 EVAL_SW2
    670           *                 EVAL_SW1
    671           *
    672           * @return  none
    673           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    674          void TransmitApp_HandleKeys( byte shift, byte keys )
   \                     TransmitApp_HandleKeys:
    675          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    676            //zAddrType_t dstAddr;
    677                
    678              if ( keys == HAL_KEY_INT_1)
   \   000007   74E1         MOV     A,#-0x1f
   \   000009   6E           XRL     A,R6
   \   00000A   703E         JNZ     ??TransmitApp_HandleKeys_0
    679              {
    680                #if defined(GTA_DEBUG)
    681                Test_Mark=0x01;
   \   00000C   90....       MOV     DPTR,#Test_Mark
   \   00000F   7401         MOV     A,#0x1
   \   000011   F0           MOVX    @DPTR,A
    682                HalUARTWrite(HAL_UART_PORT_0,Test_Buf,15);
   \   000012                ; Setup parameters for call to function HalUARTWrite
   \   000012   7C0F         MOV     R4,#0xf
   \   000014   7D00         MOV     R5,#0x0
   \   000016   7A..         MOV     R2,#Test_Buf & 0xff
   \   000018   7B..         MOV     R3,#(Test_Buf >> 8) & 0xff
   \   00001A   7900         MOV     R1,#0x0
   \   00001C   12....       LCALL   ??HalUARTWrite?relay
    683                #endif
    684                Flag_ReportData=!Flag_ReportData;
   \   00001F   90....       MOV     DPTR,#Flag_ReportData
   \   000022   E0           MOVX    A,@DPTR
   \   000023   7004         JNZ     ??TransmitApp_HandleKeys_1
   \   000025   7401         MOV     A,#0x1
   \   000027   8001         SJMP    ??TransmitApp_HandleKeys_2
   \                     ??TransmitApp_HandleKeys_1:
   \   000029   E4           CLR     A
   \                     ??TransmitApp_HandleKeys_2:
   \   00002A   F0           MOVX    @DPTR,A
    685                HalLedBlink (HAL_LED_1, 1, 50, 100);
   \   00002B                ; Setup parameters for call to function HalLedBlink
   \   00002B   7C64         MOV     R4,#0x64
   \   00002D   7D00         MOV     R5,#0x0
   \   00002F   7B32         MOV     R3,#0x32
   \   000031   7A01         MOV     R2,#0x1
   \   000033   7901         MOV     R1,#0x1
   \   000035   12....       LCALL   ??HalLedBlink?relay
    686                if(Flag_ReportData)
   \   000038   90....       MOV     DPTR,#Flag_ReportData
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   600C         JZ      ??TransmitApp_HandleKeys_0
    687                {
    688                  //osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT, 2000);
    689                  osal_set_event( TransmitApp_TaskID, TRANSMITAPP_START_REPORT_EVT );
   \   00003E                ; Setup parameters for call to function osal_set_event
   \   00003E   7A10         MOV     R2,#0x10
   \   000040   7B00         MOV     R3,#0x0
   \   000042   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   ??osal_set_event?relay
    690                }
    691              }
    692           //}
    693          }
   \                     ??TransmitApp_HandleKeys_0:
   \   00004A                REQUIRE ?Subroutine2
   \   00004A                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    694          
    695          /*********************************************************************
    696           * LOCAL FUNCTIONS
    697           */
    698          
    699          /*********************************************************************
    700           * @fn      TransmitApp_MessageMSGCB
    701           *
    702           * @brief   Data message processor callback.  This function processes
    703           *          any incoming data - probably from other devices.  So, based
    704           *          on cluster ID, perform the intended action.
    705           *
    706           * @param   none
    707           *
    708           * @return  none
    709           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    710          void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     TransmitApp_MessageMSGCB:
    711          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    712            uint16 i;
                          ^
Warning[Pe177]: variable "i" was declared but never referenced
    713            uint8 error = FALSE;
                         ^
Warning[Pe177]: variable "error" was declared but never referenced
    714          //HalLedBlink (HAL_LED_2, 1, 50, 300);
    715          //HalUARTWrite(HAL_UART_PORT_0,pkt->cmd.Data,pkt->cmd.DataLength);//microdjg
    716            switch ( pkt->clusterId )
    717            {
    718              case TRANSMITAPP_CLUSTERID_TESTMSG:
    719                
    720                //HalUARTWrite(HAL_UART_PORT_0,pkt->cmd.Data,pkt->cmd.DataLength);//microdjg
    721                //HalLedBlink ( HAL_LED_2, 1, 50, 300 );//Blink to indicate RX
    722                break;
    723            default:break;
    724            }
    725          }
   \   000000   02....       LJMP    ?BRET
    726          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    727          void TransmitApp_ProcessZDOIncomingMsgs( zdoIncomingMsg_t *inMsg )
   \                     TransmitApp_ProcessZDOIncomingMsgs:
    728          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    729              ModBusFrame_t RxFrame;
    730              uint16 temp;
                            ^
Warning[Pe177]: variable "temp" was declared but never referenced
    731              //uint8 recdatabuf[20];
    732              HalLedBlink (HAL_LED_2, 1, 50, 300);
   \   00000E                ; Setup parameters for call to function HalLedBlink
   \   00000E   7C2C         MOV     R4,#0x2c
   \   000010   7D01         MOV     R5,#0x1
   \   000012   7B32         MOV     R3,#0x32
   \   000014   7A01         MOV     R2,#0x1
   \   000016   7902         MOV     R1,#0x2
   \   000018   12....       LCALL   ??HalLedBlink?relay
    733              uint8 i;
    734              //#if defined(GTA_DEBUG)
    735              //  uint8 i;
    736              //#endif
    737              
    738              //HalUARTWrite(HAL_UART_PORT_0,inMsg->asdu,inMsg->asduLen);//²âÊÔ
    739              
    740              if(ZG_DEVICE_COORDINATOR_TYPE)
   \   00001B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   7069         JNZ     ??TransmitApp_ProcessZDOIncomingMsgs_0
    741              {
    742                
    743                if(inMsg->asduLen!=0&&inMsg->asdu[0]!=0)
   \   000021   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000024   6019         JZ      ??TransmitApp_ProcessZDOIncomingMsgs_1
   \   000026   EE           MOV     A,R6
   \   000027   2413         ADD     A,#0x13
   \   000029   F582         MOV     DPL,A
   \   00002B   EF           MOV     A,R7
   \   00002C   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00002F   600E         JZ      ??TransmitApp_ProcessZDOIncomingMsgs_1
    744                {/*
    745                  for(i=0;i<inMsg->asduLen;i++)
    746                  {
    747                    recdatabuf[i]=inMsg->asdu[i];
    748                  } 
    749                  HalUARTWrite(HAL_UART_PORT_0,recdatabuf,inMsg->asduLen);
    750                  */
    751                  HalUARTWrite(HAL_UART_PORT_0,inMsg->asdu,inMsg->asduLen);
   \   000031                ; Setup parameters for call to function HalUARTWrite
   \   000031   12....       LCALL   ?Subroutine16 & 0xFFFF
    752                }
   \                     ??CrossCallReturnLabel_20:
   \   000034   FC           MOV     R4,A
   \   000035   7D00         MOV     R5,#0x0
   \   000037   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   ??HalUARTWrite?relay
    753                
    754                //HalUARTWrite(HAL_UART_PORT_0,recdatabuf,inMsg->asduLen);
    755                #if defined(GTA_DEBUG)
    756                if(Test_Mark==0x01)
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_1:
   \   00003F   90....       MOV     DPTR,#Test_Mark
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6401         XRL     A,#0x1
   \   000045   706A         JNZ     ??TransmitApp_ProcessZDOIncomingMsgs_2
    757                {
    758                  for(i=0;i<15;i++)
    759                  {
    760                    Test_Buf[i]=0;
   \   000047   E4           CLR     A
   \   000048   90....       MOV     DPTR,#Test_Buf
   \   00004B   780F         MOV     R0,#0xf
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_3:
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   D8FC         DJNZ    R0,??TransmitApp_ProcessZDOIncomingMsgs_3
    761                  }
    762                  for(i=0;i<inMsg->asduLen;i++)
   \   000051   FB           MOV     R3,A
   \   000052   8026         SJMP    ??TransmitApp_ProcessZDOIncomingMsgs_4
    763                  {
    764                    Test_Buf[i]=inMsg->asdu[i];
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_5:
   \   000054   8B82         MOV     DPL,R3
   \   000056   A882         MOV     R0,DPL
   \   000058   EE           MOV     A,R6
   \   000059   2413         ADD     A,#0x13
   \   00005B   12....       LCALL   ?Subroutine19 & 0xFFFF
    765                  }
   \                     ??CrossCallReturnLabel_45:
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   28           ADD     A,R0
   \   000060   FA           MOV     R2,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   3400         ADDC    A,#0x0
   \   000065   8A82         MOV     DPL,R2
   \   000067   F583         MOV     DPH,A
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   C0E0         PUSH    A
   \   00006C   74..         MOV     A,#Test_Buf & 0xff
   \   00006E   28           ADD     A,R0
   \   00006F   F582         MOV     DPL,A
   \   000071   74..         MOV     A,#(Test_Buf >> 8) & 0xff
   \   000073   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000076   D0E0         POP     A
   \   000078   F0           MOVX    @DPTR,A
   \   000079   0B           INC     R3
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_4:
   \   00007A   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00007D   F8           MOV     R0,A
   \   00007E   EB           MOV     A,R3
   \   00007F   C3           CLR     C
   \   000080   98           SUBB    A,R0
   \   000081   40D1         JC      ??TransmitApp_ProcessZDOIncomingMsgs_5
    766                  Test_Mark=0;
   \   000083   90....       MOV     DPTR,#Test_Mark
   \   000086   E4           CLR     A
   \   000087   F0           MOVX    @DPTR,A
   \   000088   8027         SJMP    ??TransmitApp_ProcessZDOIncomingMsgs_2
    767                }
    768                
    769                #endif
    770              }
    771              else
    772              {
    773                FrameUnPackage(inMsg->asdu,&RxFrame);//check Package
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_0:
   \   00008A                ; Setup parameters for call to function FrameUnPackage
   \   00008A   85..82       MOV     DPL,?XSP + 0
   \   00008D   85..83       MOV     DPH,?XSP + 1
   \   000090   AC82         MOV     R4,DPL
   \   000092   AD83         MOV     R5,DPH
   \   000094   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000097   12....       LCALL   ??FrameUnPackage?relay
    774                if(RxFrame.COMFIRM==FRAME_CHECK_RIGHT)
   \   00009A   7417         MOV     A,#0x17
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   6401         XRL     A,#0x1
   \   0000A2   700D         JNZ     ??TransmitApp_ProcessZDOIncomingMsgs_2
    775                {
    776                  ReportData(&RxFrame);
   \   0000A4                ; Setup parameters for call to function ReportData
   \   0000A4   85..82       MOV     DPL,?XSP + 0
   \   0000A7   85..83       MOV     DPH,?XSP + 1
   \   0000AA   AA82         MOV     R2,DPL
   \   0000AC   AB83         MOV     R3,DPH
   \   0000AE   12....       LCALL   ??ReportData?relay
    777                  
    778                }
    779              } 
    780              
    781          }
   \                     ??TransmitApp_ProcessZDOIncomingMsgs_2:
   \   0000B1   7418         MOV     A,#0x18
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B6   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FA           MOV     R2,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FB           MOV     R3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   EE           MOV     A,R6
   \   000001   2410         ADD     A,#0x10
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine26_0
   \   000003                ; // Fall through to label ??Subroutine26_0
    782          
    783          /*********************************************************************
    784           * @fn      TransmitApp_SendTheMessage
    785           *
    786           * @brief   Send "the" message.
    787           *
    788           * @param   none
    789           *
    790           * @return  none
    791           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    792          void TransmitApp_SendTheMessage( void )
   \                     TransmitApp_SendTheMessage:
    793          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    794            uint16 len;
    795            uint8 tmp;
    796          
    797            do {
    798              // put the sequence number in the message
    799              tmp = HI_UINT8( TransmitApp_TransID );
   \                     ??TransmitApp_SendTheMessage_0:
   \   000005   90....       MOV     DPTR,#TransmitApp_TransID
   \   000008   E0           MOVX    A,@DPTR
   \   000009   C4           SWAP    A
   \   00000A   540F         ANL     A,#0xf
   \   00000C   FE           MOV     R6,A
    800              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \   00000D   C3           CLR     C
   \   00000E   940A         SUBB    A,#0xa
   \   000010   5004         JNC     ??TransmitApp_SendTheMessage_1
   \   000012   7830         MOV     R0,#0x30
   \   000014   8002         SJMP    ??TransmitApp_SendTheMessage_2
   \                     ??TransmitApp_SendTheMessage_1:
   \   000016   7837         MOV     R0,#0x37
    801              TransmitApp_Msg[2] = tmp;
   \                     ??TransmitApp_SendTheMessage_2:
   \   000018   E8           MOV     A,R0
   \   000019   2E           ADD     A,R6
   \   00001A   90....       MOV     DPTR,#TransmitApp_Msg + 2
   \   00001D   F0           MOVX    @DPTR,A
    802              tmp = LO_UINT8( TransmitApp_TransID );
   \   00001E   90....       MOV     DPTR,#TransmitApp_TransID
   \   000021   E0           MOVX    A,@DPTR
   \   000022   540F         ANL     A,#0xf
   \   000024   FE           MOV     R6,A
    803              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \   000025   C3           CLR     C
   \   000026   940A         SUBB    A,#0xa
   \   000028   5004         JNC     ??TransmitApp_SendTheMessage_3
   \   00002A   7830         MOV     R0,#0x30
   \   00002C   8002         SJMP    ??TransmitApp_SendTheMessage_4
   \                     ??TransmitApp_SendTheMessage_3:
   \   00002E   7837         MOV     R0,#0x37
    804              TransmitApp_Msg[3] = tmp;
   \                     ??TransmitApp_SendTheMessage_4:
   \   000030   E8           MOV     A,R0
   \   000031   2E           ADD     A,R6
   \   000032   90....       MOV     DPTR,#TransmitApp_Msg + 3
   \   000035   12....       LCALL   ??Subroutine25_0 & 0xFFFF
    805          
    806              len = TransmitApp_MaxDataLength;
    807          
    808          #if defined ( TRANSMITAPP_RANDOM_LEN )
    809              len = (uint8)(osal_rand() & 0x7F);
    810              if( len > TransmitApp_MaxDataLength || len == 0 )
    811                len = TransmitApp_MaxDataLength;
    812              else if ( len < 4 )
    813                len = 4;
    814          #endif
    815          	
    816              tmp = AF_DataRequest( &TransmitApp_DstAddr, &TransmitApp_epDesc,
    817                                     TRANSMITAPP_CLUSTERID_TESTMSG,
    818                                     len, TransmitApp_Msg,
    819                                    &TransmitApp_TransID,
    820                                     TRANSMITAPP_TX_OPTIONS,
    821                                     AF_DEFAULT_RADIUS );
   \                     ??CrossCallReturnLabel_41:
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003B   75....       MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
   \   00003E   75....       MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75....       MOV     ?V0 + 0,#TransmitApp_Msg & 0xff
   \   000049   75....       MOV     ?V0 + 1,#(TransmitApp_Msg >> 8) & 0xff
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   000054   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000057   75..A1       MOV     ?V0 + 0,#-0x5f
   \   00005A   75..00       MOV     ?V0 + 1,#0x0
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   7920         MOV     R1,#0x20
   \   000064   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000066   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   000068   7A..         MOV     R2,#TransmitApp_DstAddr & 0xff
   \   00006A   7B..         MOV     R3,#(TransmitApp_DstAddr >> 8) & 0xff
   \   00006C   12....       LCALL   ??AF_DataRequest?relay
   \   00006F   7409         MOV     A,#0x9
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   E9           MOV     A,R1
   \   000075   FE           MOV     R6,A
    822              HalLedBlink ( HAL_LED_3, 1, 50, 200 );//Blink to indicate TX  microdjg
   \   000076                ; Setup parameters for call to function HalLedBlink
   \   000076   7CC8         MOV     R4,#-0x38
   \   000078   7D00         MOV     R5,#0x0
   \   00007A   7B32         MOV     R3,#0x32
   \   00007C   7A01         MOV     R2,#0x1
   \   00007E   7904         MOV     R1,#0x4
   \   000080   12....       LCALL   ??HalLedBlink?relay
    823          
    824          #if defined ( TRANSMITAPP_RANDOM_LEN )
    825              if ( tmp == afStatus_SUCCESS )
    826              {
    827                txAccum += len;
    828              }
    829          #endif
    830          
    831              if ( timesToSend )
   \   000083   90....       MOV     DPTR,#timesToSend
   \   000086   E0           MOVX    A,@DPTR
   \   000087   600A         JZ      ??TransmitApp_SendTheMessage_5
    832              {
    833                timesToSend--;
    834              }
    835            } while ( (timesToSend != 0) && (afStatus_SUCCESS == tmp) );
   \   000089   14           DEC     A
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   6006         JZ      ??TransmitApp_SendTheMessage_5
   \   00008D   EE           MOV     A,R6
   \   00008E   7003         JNZ     $+5
   \   000090   02....       LJMP    ??TransmitApp_SendTheMessage_0 & 0xFFFF
    836          
    837            if ( afStatus_SUCCESS == tmp )
   \                     ??TransmitApp_SendTheMessage_5:
   \   000093   EE           MOV     A,R6
   \   000094   700E         JNZ     ??TransmitApp_SendTheMessage_6
    838            {
    839              pktCounter++;
   \   000096   90....       MOV     DPTR,#pktCounter
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   2401         ADD     A,#0x1
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   3400         ADDC    A,#0x0
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   8010         SJMP    ??TransmitApp_SendTheMessage_7
    840            }
    841            else
    842            {
    843              // Error, so wait (10 mSec) and try again.
    844              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_SEND_ERR_EVT, 10 );
   \                     ??TransmitApp_SendTheMessage_6:
   \   0000A4                ; Setup parameters for call to function osal_start_timerEx
   \   0000A4   7C0A         MOV     R4,#0xa
   \   0000A6   7D00         MOV     R5,#0x0
   \   0000A8   7A04         MOV     R2,#0x4
   \   0000AA   7B00         MOV     R3,#0x0
   \   0000AC   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F9           MOV     R1,A
   \   0000B1   12....       LCALL   ??osal_start_timerEx?relay
    845            }
    846          }
   \                     ??TransmitApp_SendTheMessage_7:
   \   0000B4   02....       LJMP    ??Subroutine23_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001   75..1E       MOV     ?V0 + 0,#0x1e
   \   000004   78..         MOV     R0,#?V0 + 0
   \   000006   22           RET
    847          
    848          /*********************************************************************
    849           * @fn      TransmitApp_ChangeState
    850           *
    851           * @brief   Toggle the Sending/Waiting state flag
    852           *
    853           * @param   none
    854           *
    855           * @return  none
    856           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    857          void TransmitApp_ChangeState( void )
   \                     TransmitApp_ChangeState:
    858          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    859            if ( TransmitApp_State == TRANSMITAPP_STATE_WAITING )
   \   000004   90....       MOV     DPTR,#TransmitApp_State
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700D         JNZ     ??TransmitApp_ChangeState_0
    860            {
    861              TransmitApp_State = TRANSMITAPP_STATE_SENDING;
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
    862              TransmitApp_SetSendEvt();
   \   00000D                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   00000D   12....       LCALL   ??TransmitApp_SetSendEvt?relay
    863              timesToSend = TRANSMITAPP_INITIAL_MSG_COUNT;
   \   000010   90....       MOV     DPTR,#timesToSend
   \   000013   7402         MOV     A,#0x2
   \   000015   8001         SJMP    ??TransmitApp_ChangeState_1
    864            }
    865            else
    866            {
    867              TransmitApp_State = TRANSMITAPP_STATE_WAITING;
   \                     ??TransmitApp_ChangeState_0:
   \   000017   E4           CLR     A
   \                     ??TransmitApp_ChangeState_1:
   \   000018   F0           MOVX    @DPTR,A
    868            }
    869          }
   \   000019                REQUIRE ?Subroutine3
   \   000019                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    870          
    871          /*********************************************************************
    872           * @fn      TransmitApp_SetSendEvt
    873           *
    874           * @brief   Set the event flag
    875           *
    876           * @param   none
    877           *
    878           * @return  none
    879           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    880          void TransmitApp_SetSendEvt( void )
   \                     TransmitApp_SetSendEvt:
    881          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    882          #if defined( TRANSMITAPP_DELAY_SEND )
    883            // Adds a delay to sending the data
    884            osal_start_timerEx( TransmitApp_TaskID,
    885                              TRANSMITAPP_SEND_MSG_EVT, TRANSMITAPP_SEND_DELAY );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   7CC8         MOV     R4,#-0x38
   \   000006   7D00         MOV     R5,#0x0
   \   000008   7A01         MOV     R2,#0x1
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??osal_start_timerEx?relay
    886          #else
    887            // No Delay - just send the data
    888            osal_set_event( TransmitApp_TaskID, TRANSMITAPP_SEND_MSG_EVT );
    889          #endif
    890          }
   \   000014   80..         SJMP    ?Subroutine3
    891          
    892          /*********************************************************************
    893           * @fn      TransmitApp_DisplayResults
    894           *
    895           * @brief   Display the results and clear the accumulators
    896           *
    897           * @param   none
    898           *
    899           * @return  none
    900           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    901          void TransmitApp_DisplayResults( void )
   \                     TransmitApp_DisplayResults:
    902          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    903          #ifdef LCD_SUPPORTED
    904            #define LCD_W  16
    905            uint32 rxShdw, txShdw, tmp;
    906            byte lcd_buf[LCD_W+1];
    907            byte idx;
    908          #endif
    909          
    910            // The OSAL timers are not real-time, so calculate the actual time expired.
    911            uint32 msecs = osal_GetSystemClock() - clkShdw;
   \   000005                ; Setup parameters for call to function osal_GetSystemClock
   \   000005   12....       LCALL   ??osal_GetSystemClock?relay
   \   000008   8A..         MOV     ?V0 + 4,R2
   \   00000A   8B..         MOV     ?V0 + 5,R3
   \   00000C   8C..         MOV     ?V0 + 6,R4
   \   00000E   8D..         MOV     ?V0 + 7,R5
   \   000010   90....       MOV     DPTR,#clkShdw
   \   000013   78..         MOV     R0,#?V0 + 4
   \   000015   12....       LCALL   ?L_SUB_X
    912            clkShdw = osal_GetSystemClock();
   \   000018                ; Setup parameters for call to function osal_GetSystemClock
   \   000018   12....       LCALL   ??osal_GetSystemClock?relay
   \   00001B   90....       MOV     DPTR,#clkShdw
   \   00001E   12....       LCALL   ?XSTORE_R2345
    913          
    914            rxTotal += rxAccum;
   \   000021   90....       MOV     DPTR,#rxAccum
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_MOV_X
   \   000029   90....       MOV     DPTR,#rxTotal
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?L_ADD_TO_X
    915            txTotal += txAccum;
   \   000031   90....       MOV     DPTR,#txAccum
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?L_MOV_X
   \   000039   90....       MOV     DPTR,#txTotal
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?L_ADD_TO_X
    916          
    917          #if defined ( LCD_SUPPORTED )
    918            rxShdw = (rxAccum * 1000 + msecs/2) / msecs;
    919            txShdw = (txAccum * 1000 + msecs/2) / msecs;
    920          
    921            osal_memset( lcd_buf, ' ', LCD_W );
    922            lcd_buf[LCD_W] = NULL;
    923          
    924            idx = 4;
    925            tmp = (rxShdw >= 100000) ? 99999 : rxShdw;
    926            do
    927            {
    928              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
    929              tmp /= 10;
    930            } while ( tmp );
    931          
    932            idx = LCD_W-1;
    933            tmp = rxTotal;
    934            do
    935            {
    936              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
    937              tmp /= 10;
    938            } while ( tmp );
    939          
    940            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_1 );
    941            osal_memset( lcd_buf, ' ', LCD_W );
    942          
    943            idx = 4;
    944            tmp = (txShdw >= 100000) ? 99999 : txShdw;
    945            do
    946            {
    947              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
    948              tmp /= 10;
    949            } while ( tmp );
    950          
    951            idx = LCD_W-1;
    952            tmp = txTotal;
    953            do
    954            {
    955              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
    956              tmp /= 10;
    957            } while ( tmp );
    958          
    959            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
    960          
    961          #elif defined( MT_TASK )
    962            DEBUG_INFO( COMPID_APP, SEVERITY_INFORMATION, 3,
    963                        rxAccum, (uint16)msecs, (uint16)rxTotal );
   \   000041                ; Setup parameters for call to function debug_msg
   \   000041   90....       MOV     DPTR,#rxTotal
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?L_MOV_X
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   78..         MOV     R0,#?V0 + 4
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   90....       MOV     DPTR,#rxAccum
   \   000056   78..         MOV     R0,#?V0 + 0
   \   000058   12....       LCALL   ?L_MOV_X
   \   00005B   AC..         MOV     R4,?V0 + 0
   \   00005D   AD..         MOV     R5,?V0 + 1
   \   00005F   7B03         MOV     R3,#0x3
   \   000061   7A03         MOV     R2,#0x3
   \   000063   7907         MOV     R1,#0x7
   \   000065   12....       LCALL   ??debug_msg?relay
   \   000068   7404         MOV     A,#0x4
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
    964          #else
    965            (void)msecs;  // Not used when no output
    966          #endif
    967          
    968            if ( (rxAccum == 0) && (txAccum == 0) )
   \   00006D   90....       MOV     DPTR,#rxAccum
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?L_MOV_X
   \   000075   E5..         MOV     A,?V0 + 0
   \   000077   45..         ORL     A,?V0 + 1
   \   000079   45..         ORL     A,?V0 + 2
   \   00007B   45..         ORL     A,?V0 + 3
   \   00007D   7023         JNZ     ??TransmitApp_DisplayResults_0
   \   00007F   90....       MOV     DPTR,#txAccum
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?L_MOV_X
   \   000087   E5..         MOV     A,?V0 + 0
   \   000089   45..         ORL     A,?V0 + 1
   \   00008B   45..         ORL     A,?V0 + 2
   \   00008D   45..         ORL     A,?V0 + 3
   \   00008F   7011         JNZ     ??TransmitApp_DisplayResults_0
    969            {
    970              osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT );
   \   000091                ; Setup parameters for call to function osal_stop_timerEx
   \   000091   7A02         MOV     R2,#0x2
   \   000093   7B00         MOV     R3,#0x0
   \   000095   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F9           MOV     R1,A
   \   00009A   12....       LCALL   ??osal_stop_timerEx?relay
    971              timerOn = FALSE;
   \   00009D   90....       MOV     DPTR,#timerOn
   \   0000A0   E4           CLR     A
   \   0000A1   F0           MOVX    @DPTR,A
    972            }
    973          
    974            rxAccum = txAccum = 0;
   \                     ??TransmitApp_DisplayResults_0:
   \   0000A2   90....       MOV     DPTR,#txAccum
   \   0000A5   E4           CLR     A
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   90....       MOV     DPTR,#rxAccum
   \   0000B0   F0           MOVX    @DPTR,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   F0           MOVX    @DPTR,A
    975          }
   \   0000B7   02....       LJMP    ?Subroutine1 & 0xFFFF
    976          
    977          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    978          void initUart(halUARTCBack_t pf)
   \                     initUart:
    979          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    980            halUARTCfg_t uartConfig;
    981            
    982            uartConfig.configured           = TRUE;              
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7401         MOV     A,#0x1
   \   000011   F0           MOVX    @DPTR,A
    983            uartConfig.baudRate             = HAL_UART_BR_9600;//HAL_UART_BR_38400;  //HAL_UART_BR_19200;
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
    984            uartConfig.flowControl          = FALSE;              
   \   000017   7402         MOV     A,#0x2
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E4           CLR     A
   \   00001D   F0           MOVX    @DPTR,A
    985            uartConfig.flowControlThreshold = 48;
   \   00001E   7403         MOV     A,#0x3
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7430         MOV     A,#0x30
   \   000025   12....       LCALL   ??Subroutine24_0 & 0xFFFF
    986            uartConfig.rx.maxBufSize        = RX_BUF_LEN;
   \                     ??CrossCallReturnLabel_36:
   \   000028   740A         MOV     A,#0xa
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   12....       LCALL   ?Subroutine13 & 0xFFFF
    987            uartConfig.tx.maxBufSize        = 128;
   \                     ??CrossCallReturnLabel_37:
   \   000030   7412         MOV     A,#0x12
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?Subroutine13 & 0xFFFF
    988            
    989            uartConfig.idleTimeout          = 6;   
   \                     ??CrossCallReturnLabel_38:
   \   000038   7405         MOV     A,#0x5
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   7406         MOV     A,#0x6
   \   00003F   F0           MOVX    @DPTR,A
    990            uartConfig.intEnable            = TRUE;              
   \   000040   7416         MOV     A,#0x16
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   7401         MOV     A,#0x1
   \   000047   F0           MOVX    @DPTR,A
    991            uartConfig.callBackFunc         = pf;
   \   000048   741B         MOV     A,#0x1b
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   EA           MOV     A,R2
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   EB           MOV     A,R3
   \   000051   12....       LCALL   ?Subroutine7 & 0xFFFF
    992            
    993            HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
   \                     ??CrossCallReturnLabel_5:
   \   000054   7900         MOV     R1,#0x0
   \   000056   12....       LCALL   ??HalUARTOpen?relay
    994          }
   \   000059   741D         MOV     A,#0x1d
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005E   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7480         MOV     A,#-0x80
   \   000002                REQUIRE ??Subroutine24_0
   \   000002                ; // Fall through to label ??Subroutine24_0
    995          
    996          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    997          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
    998          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 153
   \   000005   7467         MOV     A,#0x67
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    999            uint8 pBuf[RX_BUF_LEN];
   1000            uint16 len;
   1001            static uint16 destAddr;
   1002            ModBusFrame_t *pRxFrame;
   1003            zAddrType_t dstAddr;
   1004            #if defined (GTA_WHFRFID_R1) 
   1005            RC623Frame_t *pRC623Frame;
   1006            uint8 Frame[15];//ÁÙÊ±Éè¶¨µÄ´óÐ¡  
   1007            uint8 data[10];//
   1008            uint16 FrameLen;
   1009            uint8 i;
   1010            #endif
   1011           
   1012              len = HalUARTRead( HAL_UART_PORT_0, pBuf, RX_BUF_LEN );
   \   00000A                ; Setup parameters for call to function HalUARTRead
   \   00000A   7C80         MOV     R4,#-0x80
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7419         MOV     A,#0x19
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
   \   000017   7900         MOV     R1,#0x0
   \   000019   12....       LCALL   ??HalUARTRead?relay
   \   00001C   8A..         MOV     ?V0 + 2,R2
   \   00001E   8B..         MOV     ?V0 + 3,R3
   1013              if ( len>0 ) 
   \   000020   EA           MOV     A,R2
   \   000021   45..         ORL     A,?V0 + 3
   \   000023   7003         JNZ     $+5
   \   000025   02....       LJMP    ??uartRxCB_0 & 0xFFFF
   1014              {
   1015                //SentDataInBind(pBuf,len);
   1016                if(!ZG_DEVICE_COORDINATOR_TYPE)//·ÇÐ­µ÷Æ÷
   \   000028   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   7003         JNZ     $+5
   \   00002E   02....       LJMP    ??uartRxCB_1 & 0xFFFF
   1017                {
   1018                  #if defined (GTA_WHFRFID_R1) 
   1019                  UnPackRC623Data(pBuf,pRC623Frame);
                                              ^
Warning[Pe549]: variable "pRC623Frame" is used before its value is set

    static uint16 destAddr;
                  ^
"C:\Documents and Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c",1001  Warning[Pe177]: 
          variable "destAddr" was declared but never referenced

    ModBusFrame_t *pRxFrame;
                   ^
"C:\Documents and Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c",1002  Warning[Pe177]: 
          variable "pRxFrame" was declared but never referenced

    zAddrType_t dstAddr;
                ^
"C:\Documents and Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c",1003  Warning[Pe177]: 
          variable "dstAddr" was declared but never referenced

    uint8 i;
          ^
"C:\Documents and Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c",1009  Warning[Pe177]: 
          variable "i" was declared but never referenced
   \   000031                ; Setup parameters for call to function UnPackRC623Data
   \   000031   EE           MOV     A,R6
   \   000032   FC           MOV     R4,A
   \   000033   EF           MOV     A,R7
   \   000034   FD           MOV     R5,A
   \   000035   7419         MOV     A,#0x19
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   AA82         MOV     R2,DPL
   \   00003C   AB83         MOV     R3,DPH
   \   00003E   12....       LCALL   ??UnPackRC623Data?relay
   1020                  if(pRC623Frame->Comfirm==FRAME_CHECK_RIGHT)
   \   000041   EE           MOV     A,R6
   \   000042   2418         ADD     A,#0x18
   \   000044   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6401         XRL     A,#0x1
   \   00004A   6003         JZ      $+5
   \   00004C   02....       LJMP    ??uartRxCB_0 & 0xFFFF
   1021                  {
   1022                    switch(pRC623Frame->Cmd)
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000056   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for uartRxCB>_0`:
   \   000059   0102         DW        513
   \   00005B   01           DB        1
   \   00005C   ....         DW        ??uartRxCB_0
   \   00005E   ....         DW        ??uartRxCB_2
   \   000060   ....         DW        ??uartRxCB_3
   1023                    {
   1024                        case RFID_CMD_SET_ISOTYPE:
   1025          
   1026                          break;
   1027                        case RFID_CMD_SELECT_CARD:
   1028          
   1029                          break;
   1030                        case RFID_CMD_GET_CARD_ID:
   1031                          data[0]=7;
   \                     ??uartRxCB_3:
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   7407         MOV     A,#0x7
   \   00006A   F0           MOVX    @DPTR,A
   1032                          data[1]=MODBUS_RFID_CMD_GET_CARD_ID&0x00FF;
   \   00006B   7401         MOV     A,#0x1
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   7402         MOV     A,#0x2
   \   000072   F0           MOVX    @DPTR,A
   1033                          data[2]=(MODBUS_RFID_CMD_GET_CARD_ID>>8)&0x00FF;
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   740A         MOV     A,#0xa
   \   000078   12....       LCALL   ?Subroutine8 & 0xFFFF
   1034                          data[3]=pRC623Frame->Data[1];
   \                     ??CrossCallReturnLabel_6:
   \   00007B   C0E0         PUSH    A
   \   00007D   7403         MOV     A,#0x3
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   D0E0         POP     A
   \   000084   12....       LCALL   ?Subroutine6 & 0xFFFF
   1035                          data[4]=pRC623Frame->Data[2];
   \                     ??CrossCallReturnLabel_2:
   \   000087   C0E0         PUSH    A
   \   000089   7404         MOV     A,#0x4
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   D0E0         POP     A
   \   000090   12....       LCALL   ?Subroutine5 & 0xFFFF
   1036                          data[5]=pRC623Frame->Data[3];
   \                     ??CrossCallReturnLabel_0:
   \   000093   C0E0         PUSH    A
   \   000095   7405         MOV     A,#0x5
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   D0E0         POP     A
   \   00009C   12....       LCALL   ?Subroutine11 & 0xFFFF
   1037                          data[6]=pRC623Frame->Data[4];
   \                     ??CrossCallReturnLabel_13:
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   C0E0         PUSH    A
   \   0000A9   7406         MOV     A,#0x6
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   D0E0         POP     A
   \   0000B0   F0           MOVX    @DPTR,A
   1038                          //data[4]=pRC623Frame->Data[3];
   1039                          FrameLen=FramePackage(Frame,NativeAddr,0x03,data,7);//´ò°ü
   1040                          SendDataRequest(Frame,FrameLen);//·¢ËÍ
   \   0000B1                ; Setup parameters for call to function SendDataRequest
   \   0000B1                ; Setup parameters for call to function FramePackage
   \   0000B1   75..07       MOV     ?V0 + 0,#0x7
   \   0000B4   804B         SJMP    ??uartRxCB_4
   1041                          break;
   1042                        case RFID_CMD_FIND_ISO14443_CARD:
   1043                          //for(i=0;i<RC623Frame.DataLen;i++)
   1044                          //{
   1045                          //  RC623Frame.Data
   1046                          //}
   1047                          data[0]=5;//2+1+2
   \                     ??uartRxCB_2:
   \   0000B6   85..82       MOV     DPL,?XSP + 0
   \   0000B9   85..83       MOV     DPH,?XSP + 1
   \   0000BC   7405         MOV     A,#0x5
   \   0000BE   F0           MOVX    @DPTR,A
   1048                          data[1]=MODBUS_RFID_CMD_FIND_ISO14443_CARD&0x00FF;
   \   0000BF   7401         MOV     A,#0x1
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   7401         MOV     A,#0x1
   \   0000C6   F0           MOVX    @DPTR,A
   1049                          data[2]=(MODBUS_RFID_CMD_FIND_ISO14443_CARD>>8)&0x00FF;
   \   0000C7   04           INC     A
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   740A         MOV     A,#0xa
   \   0000CD   12....       LCALL   ?Subroutine9 & 0xFFFF
   1050                          data[3]=pRC623Frame->Data[0];
   \                     ??CrossCallReturnLabel_9:
   \   0000D0   C0E0         PUSH    A
   \   0000D2   7403         MOV     A,#0x3
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   D0E0         POP     A
   \   0000D9   12....       LCALL   ?Subroutine8 & 0xFFFF
   1051                          data[4]=pRC623Frame->Data[1];
   \                     ??CrossCallReturnLabel_7:
   \   0000DC   C0E0         PUSH    A
   \   0000DE   7404         MOV     A,#0x4
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   D0E0         POP     A
   \   0000E5   12....       LCALL   ?Subroutine6 & 0xFFFF
   1052                          data[5]=pRC623Frame->Data[2];
   \                     ??CrossCallReturnLabel_3:
   \   0000E8   C0E0         PUSH    A
   \   0000EA   7405         MOV     A,#0x5
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   D0E0         POP     A
   \   0000F1   12....       LCALL   ?Subroutine5 & 0xFFFF
   1053                          data[6]=pRC623Frame->Data[3];
   \                     ??CrossCallReturnLabel_1:
   \   0000F4   C0E0         PUSH    A
   \   0000F6   7406         MOV     A,#0x6
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   D0E0         POP     A
   \   0000FD   F0           MOVX    @DPTR,A
   1054                          FrameLen=FramePackage(Frame,NativeAddr,0x03,data,6);//´ò°ü
   1055                          SendDataRequest(Frame,FrameLen);//·¢ËÍ
   \   0000FE                ; Setup parameters for call to function SendDataRequest
   \   0000FE                ; Setup parameters for call to function FramePackage
   \   0000FE   75..06       MOV     ?V0 + 0,#0x6
   \                     ??uartRxCB_4:
   \   000101   75..00       MOV     ?V0 + 1,#0x0
   \   000104   78..         MOV     R0,#?V0 + 0
   \   000106   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000109   7402         MOV     A,#0x2
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   8582..       MOV     ?V0 + 0,DPL
   \   000111   8583..       MOV     ?V0 + 1,DPH
   \   000114   78..         MOV     R0,#?V0 + 0
   \   000116   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000119   7C03         MOV     R4,#0x3
   \   00011B   90....       MOV     DPTR,#NativeAddr
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   F9           MOV     R1,A
   \   000120   740E         MOV     A,#0xe
   \   000122   12....       LCALL   ?XSTACK_DISP0_8
   \   000125   AA82         MOV     R2,DPL
   \   000127   AB83         MOV     R3,DPH
   \   000129   12....       LCALL   ??FramePackage?relay
   \   00012C   7404         MOV     A,#0x4
   \   00012E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000131   EA           MOV     A,R2
   \   000132   FC           MOV     R4,A
   \   000133   EB           MOV     A,R3
   \   000134   FD           MOV     R5,A
   \   000135   740A         MOV     A,#0xa
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   AA82         MOV     R2,DPL
   \   00013C   AB83         MOV     R3,DPH
   \   00013E   12....       LCALL   ??SendDataRequest?relay
   1056          
   1057                          break;
   \   000141   8056         SJMP    ??uartRxCB_0
   1058                        case RFID_CMD_CONFIG_KEY:
   1059          
   1060                          break;
   1061                        case RFID_CMD_READ_VAL:
   1062          
   1063                          break;
   1064                        default:
   1065                          break;
   1066                    }
   1067                  }
   1068                  #else
   1069                  TestDirectSent_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;//µØÖ·´«ËÍ
   1070                  TestDirectSent_DstAddr.endPoint = 0;
   1071                  TestDirectSent_DstAddr.addr.shortAddr = 0x0000;
   1072              
   1073                  AF_DataRequest( 
   1074                                &TestDirectSent_DstAddr,               //µØÖ·
   1075                                &TransmitApp_epDesc,                //ÃèÊö
   1076                                TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1077                                  len,                                  //len
   1078                                  pBuf,//TransmitApp_Msg,             //DATA
   1079                                &TransmitApp_TransID,               //
   1080                                TRANSMITAPP_TX_OPTIONS,
   1081                                AF_DEFAULT_RADIUS 
   1082                                );
   1083                  HalLedBlink (HAL_LED_3, 1, 50, 200);
   1084                  #endif
   1085                }
   1086                else
   1087                {
   1088                  //destAddr=BUILD_UINT16(pBuf[1],pBuf[0]);
   1089                  if(ZG_DEVICE_COORDINATOR_TYPE)
   1090                  {
   1091                    TestDirectSent_DstAddr.addrMode=(afAddrMode_t)AddrBroadcast;//Addr16Bit;//µØÖ·´«ËÍ
   \                     ??uartRxCB_1:
   \   000143   90....       MOV     DPTR,#TestDirectSent_DstAddr + 8
   \   000146   12....       LCALL   ?Subroutine10 & 0xFFFF
   1092                    TestDirectSent_DstAddr.endPoint = 0;
   1093                    TestDirectSent_DstAddr.addr.shortAddr = 0xffff;//destAddr;
   \                     ??CrossCallReturnLabel_10:
   \   000149   12....       LCALL   ?Subroutine12 & 0xFFFF
   1094                    //TestDirectSent_DstAddr.addr.extAddr
   1095                    
   1096                    AF_DataRequest( 
   1097                                &TestDirectSent_DstAddr,               //µØÖ·
   1098                                &TransmitApp_epDesc,                //ÃèÊö
   1099                                TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1100                                  len,                                  //len
   1101                                  pBuf,//TransmitApp_Msg,             //DATA
   1102                                &TransmitApp_TransID,               //
   1103                                TRANSMITAPP_TX_OPTIONS,
   1104                                AF_DEFAULT_RADIUS 
   1105                                );
   \                     ??CrossCallReturnLabel_39:
   \   00014C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014F   75....       MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
   \   000152   75....       MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
   \   000155   78..         MOV     R0,#?V0 + 0
   \   000157   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015A   741C         MOV     A,#0x1c
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   8582..       MOV     ?V0 + 0,DPL
   \   000162   8583..       MOV     ?V0 + 1,DPH
   \   000165   78..         MOV     R0,#?V0 + 0
   \   000167   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016A   78..         MOV     R0,#?V0 + 2
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016F   75..A1       MOV     ?V0 + 0,#-0x5f
   \   000172   75..00       MOV     ?V0 + 1,#0x0
   \   000175   78..         MOV     R0,#?V0 + 0
   \   000177   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017A   7920         MOV     R1,#0x20
   \   00017C   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   00017E   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   000180   7A..         MOV     R2,#TestDirectSent_DstAddr & 0xff
   \   000182   7B..         MOV     R3,#(TestDirectSent_DstAddr >> 8) & 0xff
   \   000184   12....       LCALL   ??AF_DataRequest?relay
   \   000187   7409         MOV     A,#0x9
   \   000189   12....       LCALL   ?DEALLOC_XSTACK8
   1106                    HalLedBlink (HAL_LED_3, 1, 50, 200);
   \   00018C                ; Setup parameters for call to function HalLedBlink
   \   00018C   7CC8         MOV     R4,#-0x38
   \   00018E   7D00         MOV     R5,#0x0
   \   000190   7B32         MOV     R3,#0x32
   \   000192   7A01         MOV     R2,#0x1
   \   000194   7904         MOV     R1,#0x4
   \   000196   12....       LCALL   ??HalLedBlink?relay
   1107                  }
   1108                }
   1109              }
   1110          
   1111          }
   \                     ??uartRxCB_0:
   \   000199   7499         MOV     A,#-0x67
   \   00019B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00019E   7F04         MOV     R7,#0x4
   \   0001A0   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine25_0
   \   000002                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   90....       MOV     DPTR,#TestDirectSent_DstAddr
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   22           RET
   1112          /*********************************************************************
   1113          *********************************************************************/
   1114          
   1115          
   1116          
   1117          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1118          void FrameUnPackage(uint8 *pBuf,ModBusFrame_t *pFrame)
   \                     FrameUnPackage:
   1119          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1120             uint16 crc;
   1121             uint8 datalen;
   1122             uint8 cmd;
   1123             uint8 i;
   1124             
   1125             if(pBuf[0]==FRAME_HEAD)
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   647E         XRL     A,#0x7e
   \   000014   6003         JZ      $+5
   \   000016   02....       LJMP    ??FrameUnPackage_0 & 0xFFFF
   1126             {
   1127             	cmd=pBuf[2];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 5,A
   1128          	switch(cmd)
   \   00001E   14           DEC     A
   \   00001F   6024         JZ      ??FrameUnPackage_1
   \   000021   24FE         ADD     A,#-0x2
   \   000023   6020         JZ      ??FrameUnPackage_1
   \   000025   24FE         ADD     A,#-0x2
   \   000027   601C         JZ      ??FrameUnPackage_1
   \   000029   14           DEC     A
   \   00002A   6019         JZ      ??FrameUnPackage_1
   \   00002C   24F7         ADD     A,#-0x9
   \   00002E   607E         JZ      ??FrameUnPackage_2
   \   000030   14           DEC     A
   \   000031   7003         JNZ     $+5
   \   000033   02....       LJMP    ??FrameUnPackage_3 & 0xFFFF
   \   000036   14           DEC     A
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??FrameUnPackage_4 & 0xFFFF
   \   00003C   14           DEC     A
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??FrameUnPackage_5 & 0xFFFF
   \   000042   02....       LJMP    ??FrameUnPackage_6 & 0xFFFF
   1129          		{
   1130          		case FUN_CODE_READ_COIL_STATE:		
   1131          		case FUN_CODE_READ_HOLDING_REGISTERS:
   1132          			datalen =4;
   1133          			break;
   1134          		case 0x05:	
   1135          		case 0x06:
   1136          			datalen =4;
   \                     ??FrameUnPackage_1:
   \   000045   75..04       MOV     ?V0 + 4,#0x4
   1137          			break;
   1138          		case 0x0F:
   1139          			datalen =5+((BUILD_UINT16(pBuf[6],pBuf[5])+7)/8);//2+2+1+(N+7)/8
   1140          			break;
   1141          		case 0x10:
   1142          			datalen=5+((BUILD_UINT16(pBuf[6],pBuf[5])*2));//2+2+1+2N
   1143          			break;
   1144          		case 0x11:
   1145                                  datalen = 0;
   1146                                  break;
   1147          		case 0x12:
   1148          			datalen = 1;	//1+ 6;
   1149          			break;
   1150          		default:pFrame->COMFIRM=FRAME_CHECK_CMD_WRONG;
   1151          			return ;
   1152          		}
   1153             	crc=BUILD_UINT16(pBuf[3+datalen],pBuf[3+datalen+1]);
   \                     ??FrameUnPackage_7:
   \   000048   85....       MOV     ?V0 + 2,?V0 + 4
   \   00004B   E5..         MOV     A,?V0 + 0
   \   00004D   25..         ADD     A,?V0 + 2
   \   00004F   F8           MOV     R0,A
   \   000050   EB           MOV     A,R3
   \   000051   3400         ADDC    A,#0x0
   \   000053   F9           MOV     R1,A
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FA           MOV     R2,A
   \   00005D   8882         MOV     DPL,R0
   \   00005F   8983         MOV     DPH,R1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F9           MOV     R1,A
   \   000067   EA           MOV     A,R2
   \   000068   2400         ADD     A,#0x0
   \   00006A   F5..         MOV     ?V0 + 2,A
   \   00006C   E4           CLR     A
   \   00006D   39           ADDC    A,R1
   \   00006E   F5..         MOV     ?V0 + 3,A
   1154               if(crc==Crc16Code(pBuf+1,datalen+2))//pBuf+1  ²»¼ÆHEAD  ³¤¶ÈÊÇ1+1+1-1
   \   000070                ; Setup parameters for call to function Crc16Code
   \   000070   7402         MOV     A,#0x2
   \   000072   25..         ADD     A,?V0 + 4
   \   000074   F9           MOV     R1,A
   \   000075   85..82       MOV     DPL,?V0 + 0
   \   000078   8B83         MOV     DPH,R3
   \   00007A   A3           INC     DPTR
   \   00007B   AA82         MOV     R2,DPL
   \   00007D   AB83         MOV     R3,DPH
   \   00007F   12....       LCALL   ??Crc16Code?relay
   \   000082   EA           MOV     A,R2
   \   000083   65..         XRL     A,?V0 + 2
   \   000085   7003         JNZ     ??FrameUnPackage_8
   \   000087   EB           MOV     A,R3
   \   000088   65..         XRL     A,?V0 + 3
   \                     ??FrameUnPackage_8:
   \   00008A   6003         JZ      $+5
   \   00008C   02....       LJMP    ??FrameUnPackage_9 & 0xFFFF
   1155               	{
   1156               		pFrame->CMD=cmd;
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   A3           INC     DPTR
   \   000094   E5..         MOV     A,?V0 + 5
   \   000096   12....       LCALL   ?Subroutine11 & 0xFFFF
   1157          		pFrame->DATALEN=datalen;
   \                     ??CrossCallReturnLabel_14:
   \   000099   A3           INC     DPTR
   \   00009A   E5..         MOV     A,?V0 + 4
   \   00009C   F0           MOVX    @DPTR,A
   1158          		pFrame->ADDR=pBuf[1];
   \   00009D   85..82       MOV     DPL,?V0 + 0
   \   0000A0   85..83       MOV     DPH,?V0 + 1
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   F0           MOVX    @DPTR,A
   1159          		for(i=0;i<datalen;i++)
   \   0000AA   7A00         MOV     R2,#0x0
   \   0000AC   8074         SJMP    ??FrameUnPackage_10
   \                     ??FrameUnPackage_2:
   \   0000AE   8A82         MOV     DPL,R2
   \   0000B0   8B83         MOV     DPH,R3
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FA           MOV     R2,A
   \   0000BA   85..82       MOV     DPL,?V0 + 0
   \   0000BD   8B83         MOV     DPH,R3
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F9           MOV     R1,A
   \   0000C6   EA           MOV     A,R2
   \   0000C7   2407         ADD     A,#0x7
   \   0000C9   F5..         MOV     ?V0 + 2,A
   \   0000CB   E9           MOV     A,R1
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   F5..         MOV     ?V0 + 3,A
   \   0000D0   7403         MOV     A,#0x3
   \   0000D2   78..         MOV     R0,#?V0 + 2
   \   0000D4   12....       LCALL   ?US_SHR
   \   0000D7   E5..         MOV     A,?V0 + 2
   \                     ??FrameUnPackage_11:
   \   0000D9   2405         ADD     A,#0x5
   \   0000DB   F5..         MOV     ?V0 + 4,A
   \   0000DD   02....       LJMP    ??FrameUnPackage_7 & 0xFFFF
   \                     ??FrameUnPackage_3:
   \   0000E0   8A82         MOV     DPL,R2
   \   0000E2   8B83         MOV     DPH,R3
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   C3           CLR     C
   \   0000EC   33           RLC     A
   \   0000ED   80EA         SJMP    ??FrameUnPackage_11
   \                     ??FrameUnPackage_4:
   \   0000EF   75..00       MOV     ?V0 + 4,#0x0
   \   0000F2   02....       LJMP    ??FrameUnPackage_7 & 0xFFFF
   \                     ??FrameUnPackage_5:
   \   0000F5   75..01       MOV     ?V0 + 4,#0x1
   \   0000F8   02....       LJMP    ??FrameUnPackage_7 & 0xFFFF
   \                     ??FrameUnPackage_6:
   \   0000FB   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000FE   7403         MOV     A,#0x3
   \   000100   8032         SJMP    ??FrameUnPackage_12
   1160                              {
   1161                              pFrame->pData[i]=pBuf[3+i];
   \                     ??FrameUnPackage_13:
   \   000102   8A82         MOV     DPL,R2
   \   000104   A882         MOV     R0,DPL
   \   000106   E5..         MOV     A,?V0 + 0
   \   000108   28           ADD     A,R0
   \   000109   F582         MOV     DPL,A
   \   00010B   E5..         MOV     A,?V0 + 1
   \   00010D   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   1162                              }
   \                     ??CrossCallReturnLabel_44:
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   E0           MOVX    A,@DPTR
   \   000114   C0E0         PUSH    A
   \   000116   EE           MOV     A,R6
   \   000117   28           ADD     A,R0
   \   000118   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   D0E0         POP     A
   \   000120   F0           MOVX    @DPTR,A
   \   000121   0A           INC     R2
   \                     ??FrameUnPackage_10:
   \   000122   EA           MOV     A,R2
   \   000123   C3           CLR     C
   \   000124   95..         SUBB    A,?V0 + 4
   \   000126   40DA         JC      ??FrameUnPackage_13
   1163                          pFrame->COMFIRM=FRAME_CHECK_RIGHT;
   \   000128   12....       LCALL   ?Subroutine17 & 0xFFFF
   1164                          return ;//ÍêÈ«ÕýÈ· ²¢°Ñ°ü·µ»Ø
   1165               	}
   1166          	 	
   1167             }
   \                     ??CrossCallReturnLabel_23:
   \   00012B   7401         MOV     A,#0x1
   \   00012D   8005         SJMP    ??FrameUnPackage_12
   1168             else
   1169             {
   1170             	 pFrame->COMFIRM=FRAME_CHECK_HEAD_WRONG;
   \                     ??FrameUnPackage_0:
   \   00012F   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000132   7402         MOV     A,#0x2
   \                     ??FrameUnPackage_12:
   \   000134   F0           MOVX    @DPTR,A
   1171          	 return ;
   1172             }
   \                     ??FrameUnPackage_9:
   \   000135                REQUIRE ?Subroutine1
   \   000135                ; // Fall through to label ?Subroutine1
   1173               
   1174          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   EE           MOV     A,R6
   \   000001   2417         ADD     A,#0x17
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET
   1175          
   1176          
   1177          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1178          uint16 Crc16Code(uint8 *str, uint8 len)//Modbus Ckeck Code.//LO First
   \                     Crc16Code:
   1179          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FC           MOV     R4,A
   1180              uint16 code = 0xFFFF;
   \   00000B   7AFF         MOV     R2,#-0x1
   \   00000D   7BFF         MOV     R3,#-0x1
   1181              uint16 Poly = 0xA001;
   1182          // Dnp is 0x3D65 or A6BC
   1183          
   1184              int flag = 0;
   \   00000F   7E00         MOV     R6,#0x0
   1185              int j = 0;
   \   000011   7800         MOV     R0,#0x0
   \   000013   7900         MOV     R1,#0x0
   1186          
   1187              for(j=0; j<len; j++)
   \   000015   802D         SJMP    ??Crc16Code_0
   1188              {
   1189          		code ^= (uint16) (*str);
   \                     ??Crc16Code_1:
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6A           XRL     A,R2
   \   000019   FA           MOV     R2,A
   1190          		for(int i=0; i<8;i++)
   \   00001A   7D08         MOV     R5,#0x8
   1191          		{
   1192          			if ( code & 0x0001 ) flag = 1;
   \                     ??Crc16Code_2:
   \   00001C   EA           MOV     A,R2
   \   00001D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001F   5002         JNC     ??Crc16Code_3
   \   000021   7E01         MOV     R6,#0x1
   1193          			code = code>>1;
   \                     ??Crc16Code_3:
   \   000023   EB           MOV     A,R3
   \   000024   C3           CLR     C
   \   000025   13           RRC     A
   \   000026   FB           MOV     R3,A
   \   000027   EA           MOV     A,R2
   \   000028   13           RRC     A
   \   000029   FA           MOV     R2,A
   1194          			if ( flag )
   \   00002A   EE           MOV     A,R6
   \   00002B   600A         JZ      ??Crc16Code_4
   1195          			{
   1196          				code ^= Poly;
   \   00002D   7401         MOV     A,#0x1
   \   00002F   6A           XRL     A,R2
   \   000030   FA           MOV     R2,A
   \   000031   74A0         MOV     A,#-0x60
   \   000033   6B           XRL     A,R3
   \   000034   FB           MOV     R3,A
   1197          				flag = 0;
   \   000035   7E00         MOV     R6,#0x0
   1198          			}
   1199          		}
   \                     ??Crc16Code_4:
   \   000037   1D           DEC     R5
   \   000038   ED           MOV     A,R5
   \   000039   70E1         JNZ     ??Crc16Code_2
   1200          		str ++;
   \   00003B   A3           INC     DPTR
   1201              }
   \   00003C   E8           MOV     A,R0
   \   00003D   2401         ADD     A,#0x1
   \   00003F   08           INC     R0
   \   000040   E9           MOV     A,R1
   \   000041   3400         ADDC    A,#0x0
   \   000043   F9           MOV     R1,A
   \                     ??Crc16Code_0:
   \   000044   8C..         MOV     ?V0 + 0,R4
   \   000046   C3           CLR     C
   \   000047   E8           MOV     A,R0
   \   000048   95..         SUBB    A,?V0 + 0
   \   00004A   E9           MOV     A,R1
   \   00004B   9400         SUBB    A,#0x0
   \   00004D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00004F   65D0         XRL     A,PSW
   \   000051   33           RLC     A
   \   000052   40C3         JC      ??Crc16Code_1
   1202              return code;
   \   000054   02....       LJMP    ??Subroutine23_0 & 0xFFFF
   1203          }
   1204          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B32         MOV     R3,#0x32
   \   000002   7A01         MOV     R2,#0x1
   \   000004   7904         MOV     R1,#0x4
   \   000006   12....       LCALL   ??HalLedBlink?relay
   \   000009                REQUIRE ??Subroutine23_0
   \   000009                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1205          void SentDataInBind(uint8 *pdata,uint16 len)
   \                     SentDataInBind:
   1206          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1207            //uint8 data[]="hello";
   1208               AF_DataRequest( 
   1209                              &TransmitApp_DstAddr,               //µØÖ·
   1210                              &TransmitApp_epDesc,                //ÃèÊö
   1211                              TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1212                              len,                                  //len
   1213                              pdata,//TransmitApp_Msg,             //DATA
   1214                              &TransmitApp_TransID,               //
   1215                              TRANSMITAPP_TX_OPTIONS,
   1216                              AF_DEFAULT_RADIUS 
   1217                              );
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   8A..         MOV     ?V0 + 0,R2
   \   00001A   8B..         MOV     ?V0 + 1,R3
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   8C..         MOV     ?V0 + 0,R4
   \   000023   8D..         MOV     ?V0 + 1,R5
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..A1       MOV     ?V0 + 0,#-0x5f
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7920         MOV     R1,#0x20
   \   000037   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   000039   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   00003B   7A..         MOV     R2,#TransmitApp_DstAddr & 0xff
   \   00003D   7B..         MOV     R3,#(TransmitApp_DstAddr >> 8) & 0xff
   \   00003F   12....       LCALL   ??AF_DataRequest?relay
   \   000042   7409         MOV     A,#0x9
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   1218               HalLedBlink (HAL_LED_3, 1, 50, 300);
   \   000047                ; Setup parameters for call to function HalLedBlink
   \   000047   7C2C         MOV     R4,#0x2c
   \   000049   7D01         MOV     R5,#0x1
   \   00004B   02....       LJMP    ?Subroutine0 & 0xFFFF
   1219          }
   1220          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1221          void SendBindRequest(void)
   \                     SendBindRequest:
   1222          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1223              zAddrType_t dstAddr;
   1224              dstAddr.addrMode = Addr16Bit;
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
   1225              dstAddr.addr.shortAddr = 0x0000; // Coordinator
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
   1226              ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
   1227                            TransmitApp_epDesc.endPoint,
   1228                            TRANSMITAPP_PROFID,
   1229                            TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
   1230                            TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
   1231                            FALSE );
   \   00001C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001C   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00001F   8A..         MOV     ?V0 + 0,R2
   \   000021   8B..         MOV     ?V0 + 1,R3
   \   000023   AC..         MOV     R4,?V0 + 0
   \   000025   AD..         MOV     R5,?V0 + 1
   \   000027   75....       MOV     ?V0 + 0,#TransmitApp_ClusterList & 0xff
   \   00002A   75....       MOV     ?V0 + 1,#(TransmitApp_ClusterList >> 8) & 0xff
   \   00002D                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   00002D   75..00       MOV     ?V0 + 2,#0x0
   \   000030   78..         MOV     R0,#?V0 + 2
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..01       MOV     ?V0 + 2,#0x1
   \   00003D   78..         MOV     R0,#?V0 + 2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..01       MOV     ?V0 + 0,#0x1
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..05       MOV     ?V0 + 0,#0x5
   \   000052   75..0F       MOV     ?V0 + 1,#0xf
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   90....       MOV     DPTR,#TransmitApp_epDesc
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   7409         MOV     A,#0x9
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
   \   000068   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   00006B   7409         MOV     A,#0x9
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   1232              HalLedBlink (HAL_LED_1, 1, 50, 300);
   \   000070                ; Setup parameters for call to function HalLedBlink
   \   000070   7C2C         MOV     R4,#0x2c
   \   000072   7D01         MOV     R5,#0x1
   \   000074   7B32         MOV     R3,#0x32
   \   000076   7A01         MOV     R2,#0x1
   \   000078   7901         MOV     R1,#0x1
   \   00007A   12....       LCALL   ??HalLedBlink?relay
   1233          }
   \   00007D   7409         MOV     A,#0x9
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   7F03         MOV     R7,#0x3
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
   1234          
   1235          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1236          void ReportData(ModBusFrame_t *pRxFrame)
   \                     ReportData:
   1237          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1238           /* 
   1239            #if defined ( GTA_WWSB_R1 ) //ÓêµÎ´«¸ÐÆ÷   
   1240            uint8 Frame[10];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
   1241            uint8 data[3];//GTA_WWSB_R1 Êý¾ÝÎª3
   1242            #endif
   1243            #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷   
   1244            uint8 Frame[10];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
   1245            uint8 data[5];//GTA_WWSB_R1 Êý¾ÝÎª3
   1246            #endif
   1247          */
   1248          
   1249            #if defined (GTA_WHFRFID_R1)
   1250            RC623Frame_t pframe;
                                ^
Warning[Pe177]: variable "pframe" was declared but never referenced
   1251            uint16 cmd;
   1252            #endif
   1253          
   1254            uint8 Frame[20];//ÁÙÊ±Éè¶¨µÄ´óÐ¡
   1255            uint8 data[10];//
                         ^
Warning[Pe177]: variable "data" was declared but never referenced
   1256            uint16 i=0,j=0;
                          ^
Warning[Pe177]: variable "i" was declared but never referenced

    uint16 i=0,j=0;
               ^
"C:\Documents and Settings\Administrator\×ÀÃæ\ZSTACK-GTAMODBUS-Ö÷¶¯ÉÏ´«140707\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c",1256  Warning[Pe177]: 
          variable "j" was declared but never referenced
   1257            uint8 led=0;
                         ^
Warning[Pe177]: variable "led" was declared but never referenced
   1258          
   1259            
   1260            uint16 temp;
                          ^
Warning[Pe177]: variable "temp" was declared but never referenced
   1261            uint16 FrameLen;
   1262            switch(pRxFrame->CMD)
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   24FD         ADD     A,#-0x3
   \   000016   6010         JZ      ??ReportData_0
   \   000018   24F2         ADD     A,#-0xe
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??ReportData_1 & 0xFFFF
   \   00001F   14           DEC     A
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??ReportData_2 & 0xFFFF
   \   000025   02....       LJMP    ??ReportData_3 & 0xFFFF
   1263                {
   1264                case FUN_CODE_READ_HOLDING_REGISTERS://¶Á¼Ä´æÆ÷Êý¾Ý
   1265                  {
   1266                    //temp=BUILD_UINT16(pRxFrame->pData[1],pRxFrame->pData[0]);
   1267                    //if(temp==NativeAddr)//1 2×Ö½ÚÊÇµØÖ·£¬ÊÇ·ñ±¾»úµØÖ·
   1268                    if(pRxFrame->ADDR==NativeAddr)//ÊÇ·ñ±¾»úµØÖ·
   \                     ??ReportData_0:
   \   000028   8E82         MOV     DPL,R6
   \   00002A   8F83         MOV     DPH,R7
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   90....       MOV     DPTR,#NativeAddr
   \   000031   E0           MOVX    A,@DPTR
   \   000032   68           XRL     A,R0
   \   000033   6003         JZ      $+5
   \   000035   02....       LJMP    ??ReportData_3 & 0xFFFF
   1269                    {
   1270                        #if defined ( GTA_WWSB_R1 )||(GTA_WFSB_R1) //´«¸ÐÆ÷   
   1271                        temp=ReadADC(4);//¶ÁÓêµÎµçÑ¹Öµ
   1272                        data[0]=1;
   1273                        if(temp>3000)
   1274                          data[1]=0x01;
   1275                        else
   1276                          data[1]=0x00;
   1277                        //data[1]=LO_UINT16(temp);
   1278                        //data[2]=HI_UINT16(temp);
   1279                        FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
   1280                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1281                        #endif
   1282                        
   1283                        #if defined ( GTA_WUSB_R1 )
   1284                        IO_DIR_PORT_PIN(0, 6, IO_IN);
   1285                        data[0]=1;
   1286                        if(IO_SENSOR)
   1287                          data[1]=0x01;
   1288                        else
   1289                          data[1]=0x00;
   1290                        FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
   1291                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1292                        #endif
   1293          
   1294                        #if defined(GTA_WRCB_R1)
   1295                        IO_DIR_PORT_PIN(0, 6, IO_OUT);
   1296                        IO_DIR_PORT_PIN(0, 0, IO_OUT);
   1297                        if(pRxFrame->pData[0]==0x01)
   1298                          {
   1299                            if(pRxFrame->pData[1]==0x00)
   1300                              IO_RELAY1=0;
   1301                            if(pRxFrame->pData[1]==0x01)
   1302                              IO_RELAY1=1;
   1303                          }
   1304                        if(pRxFrame->pData[0]==0x02)
   1305                          {
   1306                            if(pRxFrame->pData[1]==0x00)
   1307                              IO_RELAY2=0;
   1308                            if(pRxFrame->pData[1]==0x01)
   1309                              IO_RELAY2=1;
   1310                          }
   1311                        #endif
   1312                        
   1313                        
   1314                        #if defined (GTA_WVSB_R1)||(GTA_WIRSB_R1)
   1315                        temp=ReadADC(4);//¶ÁÓêµÎµçÑ¹Öµ
   1316                        data[0]=1;
   1317                        if(temp>3000)
   1318                          data[1]=0x00;
   1319                        else
   1320                          data[1]=0x01;
   1321                        FrameLen=FramePackage(Frame,NativeAddr,0x03,data,2);//´ò°ü
   1322                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1323                        #endif
   1324                        
   1325                        #if defined (GTA_WISB_R1)
   1326                        temp=ReadADC(4);//
   1327                        data[0]=2;
   1328                        data[1]=LO_UINT16(temp);
   1329                        data[2]=HI_UINT16(temp);
   1330                        FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,data,3);//´ò°ü
   1331                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1332                        #endif
   1333                        
   1334                        
   1335                        #if defined ( GTA_WTHSB_R1 ) //ÎÂÊª¶È´«¸ÐÆ÷  
   1336                        osal_int_disable( INTS_ALL );
   1337                        readTempHumi();
   1338                        osal_int_enable( INTS_ALL );
   1339                        data[0]=4;
   1340                        data[1]=humi_val[0];//L
   1341                        data[2]=humi_val[1];//H
   1342                        data[3]=temp_val[0];
   1343                        data[4]=temp_val[1];
   1344                        FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,data,5);//´ò°ü
   1345                        SendDataRequest(Frame,FrameLen);//·¢ËÍ
   1346                        #endif
   1347                        
   1348                        #if defined (GTA_WHFRFID_R1)
   1349                        cmd=BUILD_UINT16(pRxFrame->pData[0],pRxFrame->pData[1]);
   1350                          switch(cmd)
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FA           MOV     R2,A
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   EA           MOV     A,R2
   \   00004C   2400         ADD     A,#0x0
   \   00004E   F5..         MOV     ?V0 + 0,A
   \   000050   E4           CLR     A
   \   000051   39           ADDC    A,R1
   \   000052   F5..         MOV     ?V0 + 1,A
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for ReportData>_0`:
   \   000059   010A         DW        2561
   \   00005B   01           DB        1
   \   00005C   ....         DW        ??ReportData_3
   \   00005E   ....         DW        ??ReportData_4
   \   000060   ....         DW        ??ReportData_5
   1351                          {
   1352                          case MODBUS_RFID_CMD_FIND_ISO14443_CARD://7E xx 03 01 0A 00 00 xx
   1353                            FrameLen=PackUpRC623Data(RFID_CMD_FIND_ISO14443_CARD,&(pRxFrame->pData[2]),Frame);//´ò°ü
   1354                             HalUARTWrite(HAL_UART_PORT_0,Frame,FrameLen);
   \                     ??ReportData_4:
   \   000062                ; Setup parameters for call to function HalUARTWrite
   \   000062                ; Setup parameters for call to function PackUpRC623Data
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   8582..       MOV     ?V0 + 0,DPL
   \   00006B   8583..       MOV     ?V0 + 1,DPH
   \   00006E   78..         MOV     R0,#?V0 + 0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   EE           MOV     A,R6
   \   000074   2405         ADD     A,#0x5
   \   000076   FC           MOV     R4,A
   \   000077   EF           MOV     A,R7
   \   000078   3400         ADDC    A,#0x0
   \   00007A   FD           MOV     R5,A
   \   00007B   7A01         MOV     R2,#0x1
   \   00007D   801B         SJMP    ??ReportData_6
   1355                            //SendDataRequest(Frame,FrameLen);
   1356                            break;
   1357                          case MODBUS_RFID_CMD_GET_CARD_ID:
   1358                            FrameLen=PackUpRC623Data(RFID_CMD_GET_CARD_ID,&(pRxFrame->pData[2]),Frame);//´ò°ü
   1359                             HalUARTWrite(HAL_UART_PORT_0,Frame,FrameLen);
   \                     ??ReportData_5:
   \   00007F                ; Setup parameters for call to function HalUARTWrite
   \   00007F                ; Setup parameters for call to function PackUpRC623Data
   \   00007F   85..82       MOV     DPL,?XSP + 0
   \   000082   85..83       MOV     DPH,?XSP + 1
   \   000085   8582..       MOV     ?V0 + 0,DPL
   \   000088   8583..       MOV     ?V0 + 1,DPH
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   EE           MOV     A,R6
   \   000091   2405         ADD     A,#0x5
   \   000093   FC           MOV     R4,A
   \   000094   EF           MOV     A,R7
   \   000095   3400         ADDC    A,#0x0
   \   000097   FD           MOV     R5,A
   \   000098   7A02         MOV     R2,#0x2
   \                     ??ReportData_6:
   \   00009A   7B02         MOV     R3,#0x2
   \   00009C   12....       LCALL   ??PackUpRC623Data?relay
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A4   EA           MOV     A,R2
   \   0000A5   FC           MOV     R4,A
   \   0000A6   EB           MOV     A,R3
   \   0000A7   FD           MOV     R5,A
   \   0000A8   85..82       MOV     DPL,?XSP + 0
   \   0000AB   85..83       MOV     DPH,?XSP + 1
   \   0000AE   AA82         MOV     R2,DPL
   \   0000B0   AB83         MOV     R3,DPH
   \   0000B2   7900         MOV     R1,#0x0
   \   0000B4   12....       LCALL   ??HalUARTWrite?relay
   1360                            break;
   \   0000B7   02....       LJMP    ??ReportData_3 & 0xFFFF
   1361                          case MODBUS_RFID_CMD_READ_VAL:
   1362                            
   1363                            break;
   1364                          default:
   1365                            break;
   1366                          }
   1367                        
   1368                        #endif
   1369                          
   1370                        #if defined(GTA_WMSCB_R1)
   1371                         /*
   1372                        ctrl_GTA_WMSCB('M',0x80);
   1373                        for(j=0;j<1000;j++)
   1374                        {
   1375                         
   1376                         ctrl_GTA_WMSCB('A',led);
   1377                         ctrl_GTA_WMSCB('B',led++);
   1378                        StepMotorRun(1,4096);
   1379                        StepMotorRun(0,4096);
   1380                        }
   1381                          */
   1382                          init_GTA_WMSCB();
   1383                          ctrl_GTA_WMSCB('M',0x80);
   1384                          if(pRxFrame->pData[0]==0x00)
   1385                          {
   1386                            //ctrl_GTA_WMSCB('M',0x80);
   1387                            osal_int_disable( INTS_ALL );
   1388                            StepMotorRun(pRxFrame->pData[1],BUILD_UINT16(pRxFrame->pData[2],pRxFrame->pData[3]));
   1389                            osal_int_enable( INTS_ALL );
   1390                          }
   1391                          if(pRxFrame->pData[0]==0x01)
   1392                          {
   1393                            //ctrl_GTA_WMSCB('M',0x80);
   1394                            ctrl_GTA_WMSCB('A',pRxFrame->pData[1]);
   1395                          }
   1396                          if(pRxFrame->pData[0]==0x02)
   1397                          {
   1398          
   1399                            SegDisplay(pRxFrame->pData[1]);
   1400                          }
   1401                        #endif
   1402                        
   1403                    }
   1404                  }
   1405                  break;
   1406                case FUN_CODE_SET_ADDR://ÉèµØÖ·
   1407                  {
   1408                    if(pRxFrame->ADDR==NativeAddr)//ÊÇ·ñ±¾»úµØÖ·
   \                     ??ReportData_2:
   \   0000BA   8E82         MOV     DPL,R6
   \   0000BC   8F83         MOV     DPH,R7
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F8           MOV     R0,A
   \   0000C0   90....       MOV     DPTR,#NativeAddr
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   68           XRL     A,R0
   \   0000C5   6003         JZ      $+5
   \   0000C7   02....       LJMP    ??ReportData_3 & 0xFFFF
   1409                    {
   1410                    NativeAddr=pRxFrame->pData[0];
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   90....       MOV     DPTR,#NativeAddr
   \   0000D5   F0           MOVX    @DPTR,A
   1411                    osal_nv_item_init(ZCD_NV_NATIVE_ADDRESS,sizeof(NativeAddr),NULL);
   \   0000D6                ; Setup parameters for call to function osal_nv_item_init
   \   0000D6   E4           CLR     A
   \   0000D7   F5..         MOV     ?V0 + 0,A
   \   0000D9   F5..         MOV     ?V0 + 1,A
   \   0000DB   78..         MOV     R0,#?V0 + 0
   \   0000DD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E0   7C01         MOV     R4,#0x1
   \   0000E2   7D00         MOV     R5,#0x0
   \   0000E4   7A01         MOV     R2,#0x1
   \   0000E6   7B04         MOV     R3,#0x4
   \   0000E8   12....       LCALL   ??osal_nv_item_init?relay
   \   0000EB   7402         MOV     A,#0x2
   \   0000ED   12....       LCALL   ?DEALLOC_XSTACK8
   1412                    osal_nv_write(ZCD_NV_NATIVE_ADDRESS,0,sizeof(NativeAddr),&NativeAddr);
   \   0000F0                ; Setup parameters for call to function osal_nv_write
   \   0000F0   75....       MOV     ?V0 + 0,#NativeAddr & 0xff
   \   0000F3   75....       MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
   \   0000F6   78..         MOV     R0,#?V0 + 0
   \   0000F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FB   75..01       MOV     ?V0 + 0,#0x1
   \   0000FE   75..00       MOV     ?V0 + 1,#0x0
   \   000101   78..         MOV     R0,#?V0 + 0
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   7C00         MOV     R4,#0x0
   \   000108   7D00         MOV     R5,#0x0
   \   00010A   7A01         MOV     R2,#0x1
   \   00010C   7B04         MOV     R3,#0x4
   \   00010E   12....       LCALL   ??osal_nv_write?relay
   \   000111   7404         MOV     A,#0x4
   \   000113   12....       LCALL   ?DEALLOC_XSTACK8
   1413                    FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,pRxFrame->pData,1);//´ò°ü
   1414                    SendDataRequest(Frame,FrameLen);//·¢ËÍ
   \   000116                ; Setup parameters for call to function SendDataRequest
   \   000116                ; Setup parameters for call to function FramePackage
   \   000116   78..         MOV     R0,#?V0 + 0
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011B   EE           MOV     A,R6
   \   00011C   2403         ADD     A,#0x3
   \   00011E   F5..         MOV     ?V0 + 0,A
   \   000120   EF           MOV     A,R7
   \   000121   3400         ADDC    A,#0x0
   \   000123   F5..         MOV     ?V0 + 1,A
   \   000125   78..         MOV     R0,#?V0 + 0
   \   000127   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012A   8E82         MOV     DPL,R6
   \   00012C   8F83         MOV     DPH,R7
   \   00012E   A3           INC     DPTR
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   FC           MOV     R4,A
   \   000131   8018         SJMP    ??ReportData_7
   1415                    }
   1416                  }
   1417                  break;
   1418                case FUN_CODE_READ_ADDR://¶ÁµØÖ·
   1419                  {
   1420                    FrameLen=FramePackage(Frame,pRxFrame->ADDR,pRxFrame->CMD,&NativeAddr,1);//´ò°ü
   1421                    SendDataRequest(Frame,FrameLen);//·¢ËÍ
   \                     ??ReportData_1:
   \   000133                ; Setup parameters for call to function SendDataRequest
   \   000133                ; Setup parameters for call to function FramePackage
   \   000133   75..01       MOV     ?V0 + 0,#0x1
   \   000136   75..00       MOV     ?V0 + 1,#0x0
   \   000139   78..         MOV     R0,#?V0 + 0
   \   00013B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013E   75....       MOV     ?V0 + 0,#NativeAddr & 0xff
   \   000141   75....       MOV     ?V0 + 1,#(NativeAddr >> 8) & 0xff
   \   000144   78..         MOV     R0,#?V0 + 0
   \   000146   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000149   7C11         MOV     R4,#0x11
   \                     ??ReportData_7:
   \   00014B   8E82         MOV     DPL,R6
   \   00014D   8F83         MOV     DPH,R7
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   F9           MOV     R1,A
   \   000151   7404         MOV     A,#0x4
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   AA82         MOV     R2,DPL
   \   000158   AB83         MOV     R3,DPH
   \   00015A   12....       LCALL   ??FramePackage?relay
   \   00015D   7404         MOV     A,#0x4
   \   00015F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000162   EA           MOV     A,R2
   \   000163   FC           MOV     R4,A
   \   000164   EB           MOV     A,R3
   \   000165   FD           MOV     R5,A
   \   000166   85..82       MOV     DPL,?XSP + 0
   \   000169   85..83       MOV     DPH,?XSP + 1
   \   00016C   AA82         MOV     R2,DPL
   \   00016E   AB83         MOV     R3,DPH
   \   000170   12....       LCALL   ??SendDataRequest?relay
   1422                    
   1423                  }
   1424                  break;
   1425                }
   1426            
   1427            
   1428          
   1429          }
   \                     ??ReportData_3:
   \   000173   7414         MOV     A,#0x14
   \   000175   02....       LJMP    ?Subroutine4 & 0xFFFF
   1430          #if defined(GTA_WMSCB_R1)
   1431          void StepMotorRun(uint8 Dir,uint16 StepNum)
   1432          {
   1433            uint8 ForwardStep[4]={0x03,0x09,0x0C,0x06};
   1434            uint8 BackStep[4]={0x03,0x06,0x0C,0x09};
   1435            uint16 i=0,j=0,k=0;
   1436            uint8 index=0,l=0;
   1437            for(i=0;i<StepNum;i++)
   1438            {
   1439              if(Dir)
   1440                ctrl_GTA_WMSCB('C',ForwardStep[index]);
   1441              else
   1442                ctrl_GTA_WMSCB('C',BackStep[index]);
   1443              if(i==(k*255-1)||i==0)
   1444              {
   1445                SegDisplay(l);
   1446                if(l++>8)l=0;
   1447                k++;
   1448              }
   1449              ctrl_GTA_WMSCB('A',i);
   1450              
   1451              if(++index>=4)index=0;
   1452              
   1453              for(j=0;j<3000;j++)
   1454              {
   1455                asm("nop");            
   1456              }
   1457              //ctrl_GTA_WMSCB('A',StepNum);
   1458            }
   1459          }
   1460          
   1461          void SegDisplay(uint8 num)
   1462          {
   1463            uint8 DispNum[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
   1464            //ctrl_GTA_WMSCB('M',0x80);
   1465            if(num<0x10)
   1466              ctrl_GTA_WMSCB('B',DispNum[num]);
   1467          }
   1468          #endif

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1469          uint16 FramePackage(uint8 *pFrame,uint8 addr,uint8 cmd,uint8 *data,uint16 datalen)
   \                     FramePackage:
   1470          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   1471            uint16 i;
   1472            uint16 crc;
   1473            uint8 *p;
   1474              p=pFrame;
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1475            *p++=FRAME_HEAD;//²»Ã÷bug ÔÙ¼ÓÒ»¸ö×Ö½Ú
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   747E         MOV     A,#0x7e
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   1476            *p++=FRAME_HEAD;
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   1477            *p++=addr;
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   1478            *p++=cmd;
   \   000016   EC           MOV     A,R4
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   AE82         MOV     R6,DPL
   \   00001B   AF83         MOV     R7,DPH
   1479            for(i=0;i<datalen;i++)
   \   00001D   7C00         MOV     R4,#0x0
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   740E         MOV     A,#0xe
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   7410         MOV     A,#0x10
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 1,A
   \   000037   8024         SJMP    ??FramePackage_0
   1480            {
   1481              *p++=*data++;
   \                     ??FramePackage_1:
   \   000039   8882         MOV     DPL,R0
   \   00003B   8983         MOV     DPH,R1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   F0           MOVX    @DPTR,A
   \   000043   8882         MOV     DPL,R0
   \   000045   8983         MOV     DPH,R1
   \   000047   A3           INC     DPTR
   \   000048   A882         MOV     R0,DPL
   \   00004A   A983         MOV     R1,DPH
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   A3           INC     DPTR
   \   000051   AE82         MOV     R6,DPL
   \   000053   AF83         MOV     R7,DPH
   1482            }
   \   000055   EC           MOV     A,R4
   \   000056   2401         ADD     A,#0x1
   \   000058   0C           INC     R4
   \   000059   ED           MOV     A,R5
   \   00005A   3400         ADDC    A,#0x0
   \   00005C   FD           MOV     R5,A
   \                     ??FramePackage_0:
   \   00005D   C3           CLR     C
   \   00005E   EC           MOV     A,R4
   \   00005F   95..         SUBB    A,?V0 + 0
   \   000061   ED           MOV     A,R5
   \   000062   95..         SUBB    A,?V0 + 1
   \   000064   40D3         JC      ??FramePackage_1
   1483            //crc=Crc16Code(pFrame+1,datalen+2);//FRAME_HEAD²»¼Æ
   1484             crc=Crc16Code(pFrame+2,datalen+2);//FRAME_HEAD²»¼Æ
   \   000066                ; Setup parameters for call to function Crc16Code
   \   000066   E5..         MOV     A,?V0 + 0
   \   000068   2402         ADD     A,#0x2
   \   00006A   F9           MOV     R1,A
   \   00006B   EA           MOV     A,R2
   \   00006C   2402         ADD     A,#0x2
   \   00006E   FA           MOV     R2,A
   \   00006F   EB           MOV     A,R3
   \   000070   3400         ADDC    A,#0x0
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   ??Crc16Code?relay
   1485            *p++=LO_UINT16(crc);
   \   000076   EA           MOV     A,R2
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   1486            *p=HI_UINT16(crc);
   \   00007D   EB           MOV     A,R3
   \   00007E   F0           MOVX    @DPTR,A
   1487            //return datalen+5;
   1488            return datalen+6;//¶à¼ÓÒ»¸öFRAME_HEAD
   \   00007F   E5..         MOV     A,?V0 + 0
   \   000081   2406         ADD     A,#0x6
   \   000083   FA           MOV     R2,A
   \   000084   E5..         MOV     A,?V0 + 1
   \   000086   3400         ADDC    A,#0x0
   \   000088   FB           MOV     R3,A
   \   000089   7F06         MOV     R7,#0x6
   \   00008B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1489          }
   1490          
   1491            /*********************************************************************
   1492           * º¯ÊýÃû³Æ£ºReadADC
   1493           * ¹¦    ÄÜ£º¶ÁÈ¡ADCÖµ
   1494           * Èë¿Ú²ÎÊý£ºÍ¨µÀ
   1495           * ³ö¿Ú²ÎÊý£ºÎÞ
   1496           * ·µ »Ø Öµ£ºADÊý¾Ý()
   1497           ********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1498          uint16 ReadADC( uint8 channel )
   \                     ReadADC:
   1499          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
   1500            volatile unsigned char tmp,n;
   1501            signed short adcvalue;
   1502            float voltagevalue_X;
   1503          
   1504            /* XÖá¼ÓËÙ¶È²É¼¯ */
   1505            /* ÉèÖÃ»ù×¼µçÑ¹¡¢³éÈ¡ÂÊºÍµ¥¶ËÊäÈëÍ¨µÀ */
   1506            ADCCON3 = ((0x02 << 6) |  // ²ÉÓÃAVDD5Òý½ÅÉÏµÄµçÑ¹Îª»ù×¼µçÑ¹
   1507                       (0x03 << 4) |  // ³éÈ¡ÂÊÎª512£¬ÏàÓ¦µÄÓÐÐ§Î»Îª12Î»(×î¸ßÎ»Îª·ûºÅÎ»)
   1508                       channel);
   \   000007   74B0         MOV     A,#-0x50
   \   000009   4C           ORL     A,R4
   \   00000A   F5B6         MOV     0xb6,A
   1509          
   1510            /* µÈ´ýÍ¨µÀ×ª»»Íê³É */
   1511            while ((ADCCON1 & 0x80) != 0x80);
   \                     ??ReadADC_0:
   \   00000C   E5B4         MOV     A,0xb4
   \   00000E   A2E7         MOV     C,0xE0 /* A   */.7
   \   000010   50FA         JNC     ??ReadADC_0
   1512          
   1513            /* ´ÓADCL£¬ADCH¶ÁÈ¡×ª»»Öµ£¬´Ë²Ù×÷»¹ÇåÁãADCCON1.EOC */
   1514            adcvalue = (signed short)ADCL;
   \   000012   E5BA         MOV     A,0xba
   \   000014   F5..         MOV     ?V0 + 0,A
   1515            adcvalue |= (signed short)(ADCH << 8); 
   \   000016   E5BB         MOV     A,0xbb
   \   000018   F8           MOV     R0,A
   \   000019   E4           CLR     A
   \   00001A   C8           XCH     A,R0
   \   00001B   F5..         MOV     ?V0 + 1,A
   1516          
   1517            /* ÈôadcvalueÐ¡ÓÚ0£¬¾ÍÈÏÎªËüÎª0 */
   1518            if(adcvalue < 0) adcvalue = 0;
   \   00001D   C3           CLR     C
   \   00001E   9400         SUBB    A,#0x0
   \   000020   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000022   65D0         XRL     A,PSW
   \   000024   33           RLC     A
   \   000025   5004         JNC     ??ReadADC_1
   \   000027   88..         MOV     ?V0 + 0,R0
   \   000029   88..         MOV     ?V0 + 1,R0
   1519              
   1520            adcvalue >>= 4;  // È¡³ö12Î»ÓÐÐ§Î»
   1521              
   1522            /* ½«×ª»»Öµ»»ËãÎªÊµ¼ÊµçÑ¹Öµ */
   1523            voltagevalue_X = (adcvalue * 3.3) / 2047;  // 2047ÊÇÄ£ÄâÊäÈë´ïµ½VREFÊ±µÄÂúÁ¿³ÌÖµ
   1524                                                       // ÓÉÓÚÓÐÐ§Î»ÊÇ12Î»(×î¸ßÎ»Îª·ûºÅÎ»)£¬
   1525                                                       // ËùÒÔÕýµÄÂúÁ¿³ÌÖµÎª2047
   1526                                                       // ´Ë´¦£¬VREF = 3.3V
   1527            return ((uint16)(voltagevalue_X * 1000));  // µçÑ¹·Å´ó100±¶±ãÓÚ´«Êä¼°ÉÏÎ»»ú´¦Àí
   \                     ??ReadADC_1:
   \   00002B   7404         MOV     A,#0x4
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?SS_SHR
   \   000032   E5..         MOV     A,?V0 + 1
   \   000034   33           RLC     A
   \   000035   95E0         SUBB    A,0xE0 /* A   */
   \   000037   F5..         MOV     ?V0 + 2,A
   \   000039   F5..         MOV     ?V0 + 3,A
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?L_TO_FLT
   \   000040   90....       MOV     DPTR,#__Constant_40533333
   \   000043   78..         MOV     R0,#?V0 + 4
   \   000045   12....       LCALL   ?L_MOV_X
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   79..         MOV     R1,#?V0 + 4
   \   00004C   12....       LCALL   ?FLT_MUL
   \   00004F   90....       MOV     DPTR,#__Constant_44ffe000
   \   000052   78..         MOV     R0,#?V0 + 4
   \   000054   12....       LCALL   ?L_MOV_X
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   79..         MOV     R1,#?V0 + 4
   \   00005B   12....       LCALL   ?FLT_DIV
   \   00005E   90....       MOV     DPTR,#__Constant_447a0000
   \   000061   78..         MOV     R0,#?V0 + 4
   \   000063   12....       LCALL   ?L_MOV_X
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   79..         MOV     R1,#?V0 + 4
   \   00006A   12....       LCALL   ?FLT_MUL
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?FLT_TO_L
   \   000072   AA..         MOV     R2,?V0 + 0
   \   000074   AB..         MOV     R3,?V0 + 1
   \   000076   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000079                REQUIRE ADCCON3
   \   000079                REQUIRE ADCCON1
   \   000079                REQUIRE ADCL
   \   000079                REQUIRE ADCH
   1528          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1529          void SendDataRequest(uint8 *pBuf,uint16 len)
   \                     SendDataRequest:
   1530          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1531              if(!ZG_DEVICE_COORDINATOR_TYPE)//·ÇÐ­µ÷Æ÷
   \   000005   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000008   E0           MOVX    A,@DPTR
   \   000009   90....       MOV     DPTR,#TestDirectSent_DstAddr + 8
   \   00000C   600A         JZ      ??SendDataRequest_0
   1532                {
   1533                  TestDirectSent_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;//µØÖ·´«ËÍ
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   1534                  TestDirectSent_DstAddr.endPoint = 0;
   1535                  TestDirectSent_DstAddr.addr.shortAddr = 0x0000;
   \                     ??CrossCallReturnLabel_34:
   \   000013   90....       MOV     DPTR,#TestDirectSent_DstAddr
   \   000016   8003         SJMP    ??CrossCallReturnLabel_11
   1536                }
   1537                else
   1538                {
   1539                  if(ZG_DEVICE_COORDINATOR_TYPE)
   1540                  {
   1541                    TestDirectSent_DstAddr.addrMode=(afAddrMode_t)AddrBroadcast;//Addr16Bit;//µØÖ·´«ËÍ
   \                     ??SendDataRequest_0:
   \   000018   12....       LCALL   ?Subroutine10 & 0xFFFF
   1542                    TestDirectSent_DstAddr.endPoint = 0;
   1543                    TestDirectSent_DstAddr.addr.shortAddr = 0xffff;//destAddr;
   1544                    //TestDirectSent_DstAddr.addr.extAddr
   1545                  }
   1546                }
   \                     ??CrossCallReturnLabel_11:
   \   00001B   12....       LCALL   ?Subroutine12 & 0xFFFF
   1547               AF_DataRequest(    
   1548                        &TestDirectSent_DstAddr,               //µØÖ·
   1549                        &TransmitApp_epDesc,                //ÃèÊö
   1550                        TRANSMITAPP_CLUSTERID_TESTMSG,      //×å
   1551                          len,                                  //len
   1552                          pBuf,//TransmitApp_Msg,             //DATA
   1553                        &TransmitApp_TransID,               //
   1554                        TRANSMITAPP_TX_OPTIONS,
   1555                        AF_DEFAULT_RADIUS 
   1556                        );
   \                     ??CrossCallReturnLabel_40:
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000021   75....       MOV     ?V0 + 0,#TransmitApp_TransID & 0xff
   \   000024   75....       MOV     ?V0 + 1,#(TransmitApp_TransID >> 8) & 0xff
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   8A..         MOV     ?V0 + 0,R2
   \   00002E   8B..         MOV     ?V0 + 1,R3
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   8C..         MOV     ?V0 + 0,R4
   \   000037   8D..         MOV     ?V0 + 1,R5
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   75..A1       MOV     ?V0 + 0,#-0x5f
   \   000041   75..00       MOV     ?V0 + 1,#0x0
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   7920         MOV     R1,#0x20
   \   00004B   7C..         MOV     R4,#TransmitApp_epDesc & 0xff
   \   00004D   7D..         MOV     R5,#(TransmitApp_epDesc >> 8) & 0xff
   \   00004F   7A..         MOV     R2,#TestDirectSent_DstAddr & 0xff
   \   000051   7B..         MOV     R3,#(TestDirectSent_DstAddr >> 8) & 0xff
   \   000053   12....       LCALL   ??AF_DataRequest?relay
   \   000056   7409         MOV     A,#0x9
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   1557               HalLedBlink (HAL_LED_3, 1, 50, 200);
   \   00005B                ; Setup parameters for call to function HalLedBlink
   \   00005B   7CC8         MOV     R4,#-0x38
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   02....       LJMP    ?Subroutine0 & 0xFFFF
   1558          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for NativeAddr>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessZDOIncomingMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessZDOIncomingMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_SendTheMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ChangeState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ChangeState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_SetSendEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_SetSendEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_DisplayResults?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_DisplayResults

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initUart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initUart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??uartRxCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FrameUnPackage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FrameUnPackage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Crc16Code?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Crc16Code

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SentDataInBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SentDataInBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendBindRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReportData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReportData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FramePackage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FramePackage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadADC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadADC

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendDataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendDataRequest

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GTA Zigbee">`:
   \   000000   47544120     DB "GTA Zigbee"
   \            5A696762
   \            656500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40533333:
   \   000000   33335340     DD 40533333H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_44ffe000:
   \   000000   00E0FF44     DD 44FFE000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_447a0000:
   \   000000   00007A44     DD 447A0000H
   1559          
   1560          #if defined(GTA_WTHSB_R1)
   1561          uint8 readTempHumi(void)
   1562          {
   1563           float f_humi=0,f_temp=0; 
   1564           
   1565            uint8 checksum;
   1566           
   1567            /* ¿ØÖÆSHT11½øÐÐÎÂÊª¶È²âÁ¿ */
   1568            
   1569            
   1570            s_measure(temp_val,&checksum,TEMP); // ²âÁ¿ÎÂ¶È
   1571            s_measure(humi_val,&checksum,HUMI); // ²âÁ¿Ïà¶ÔÊª¶È
   1572            f_humi=BUILD_UINT16(humi_val[0],humi_val[1]);
   1573            f_temp=BUILD_UINT16(temp_val[0],temp_val[1]);
   1574            calc_sth11(&f_humi,&f_temp);
   1575            humi_val[0]=f_humi;//&(uint8)f_humi;
   1576            humi_val[1]=(f_humi-humi_val[0])*100;  
   1577            temp_val[0]=f_temp; 
   1578            temp_val[1]=(f_temp-temp_val[0])*100;  
   1579            return TRUE;
   1580          }
   1581          #endif
   1582          
   1583          #if defined(GTA_WMSCB_R1)
   1584          void init_GTA_WMSCB(void)
   1585          {
   1586            P0SEL=P0SEL&0x8C;//10001100
   1587            P1SEL=P1SEL&0xF0;
   1588            P2SEL=P2SEL&0xFA;
   1589            //HAL_CONFIG_IO_OUTPUT(0, HAL_LCD_CS_PIN, 1);
   1590            IO_DIR_PORT_PIN(0, 0, IO_OUT);
   1591            IO_DIR_PORT_PIN(0, 1, IO_OUT);
   1592            IO_DIR_PORT_PIN(0, 4, IO_OUT);
   1593            IO_DIR_PORT_PIN(0, 5, IO_OUT);
   1594            IO_DIR_PORT_PIN(0, 6, IO_OUT);
   1595            IO_DIR_PORT_PIN(1, 0, IO_OUT);
   1596            IO_DIR_PORT_PIN(1, 1, IO_OUT);
   1597            IO_DIR_PORT_PIN(1, 2, IO_OUT);
   1598            IO_DIR_PORT_PIN(1, 3, IO_OUT);
   1599            IO_DIR_PORT_PIN(2, 0, IO_OUT);
   1600            IO_DIR_PORT_PIN(2, 2, IO_OUT);
   1601          }
   1602          
   1603          void ctrl_GTA_WMSCB(uint8 port,uint8 data)
   1604          {
   1605            //uint8 i=0;
   1606            //init_GTA_WMSCB();
   1607            asm("nop"); 
   1608            asm("nop"); 
   1609          
   1610            T82C55A_WR=1;
   1611            asm("nop"); 
   1612            asm("nop"); 
   1613          
   1614            switch(port)
   1615            {
   1616            case        'A':
   1617              T82C55A_ADDR0=0;
   1618              T82C55A_ADDR1=0;
   1619              break;
   1620            case        'B':
   1621              T82C55A_ADDR0=1;
   1622              T82C55A_ADDR1=0;
   1623              break;  
   1624            case        'C':
   1625              T82C55A_ADDR0=0;
   1626              T82C55A_ADDR1=1;
   1627              break;
   1628            case        'M':
   1629              T82C55A_ADDR0=1;
   1630              T82C55A_ADDR1=1;
   1631              break;
   1632            default:break;
   1633            }
   1634            asm("nop"); 
   1635            asm("nop"); 
   1636          
   1637            T82C55A_WR=0;
   1638            asm("nop"); 
   1639            asm("nop"); 
   1640          
   1641            if(data&0x01)
   1642              T82C55A_D0=1;
   1643            else
   1644              T82C55A_D0=0;
   1645            
   1646            if(data&0x02)
   1647              T82C55A_D1=1;
   1648            else
   1649              T82C55A_D1=0;
   1650            
   1651            if(data&0x04)
   1652              T82C55A_D2=1;
   1653            else
   1654              T82C55A_D2=0;
   1655            
   1656            if(data&0x08)
   1657              T82C55A_D3=1;
   1658            else
   1659              T82C55A_D3=0;
   1660            
   1661            if(data&0x10)
   1662              T82C55A_D4=1;
   1663            else
   1664              T82C55A_D4=0;
   1665            
   1666            if(data&0x20)
   1667              T82C55A_D5=1;
   1668            else
   1669              T82C55A_D5=0;
   1670            
   1671            if(data&0x40)
   1672              T82C55A_D6=1;
   1673            else
   1674              T82C55A_D6=0;
   1675            
   1676            if(data&0x80)
   1677              T82C55A_D7=1;
   1678            else
   1679              T82C55A_D7=0;
   1680            asm("nop"); 
   1681            asm("nop"); 
   1682          
   1683            T82C55A_WR=1;
   1684            asm("nop"); 
   1685            asm("nop"); 
   1686          
   1687            T82C55A_WR=0;
   1688            
   1689          }
   1690          
   1691          #endif

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     26  Crc16Code
       1      0    183  FramePackage
                          0 0  14 -> Crc16Code
       1      0     49  FrameUnPackage
                          0 0  16 -> Crc16Code
       0      0     16  ReadADC
       0      0     67  ReportData
                          0 0  34 -> FramePackage
                          0 0  30 -> HalUARTWrite
                          0 0  32 -> PackUpRC623Data
                          0 0  30 -> SendDataRequest
                          0 0  32 -> osal_nv_item_init
                          0 0  34 -> osal_nv_write
       0      0     45  SendBindRequest
                          0 0  20 -> HalLedBlink
                          0 0  20 -> NLME_GetShortAddr
                          0 0  29 -> ZDP_EndDeviceBindReq
       0      0    184  SendDataRequest
                          0 0  19 -> AF_DataRequest
                          0 0  10 -> HalLedBlink
       0      0     19  SentDataInBind
                          0 0  19 -> AF_DataRequest
                          0 0  10 -> HalLedBlink
       2      0      0  TransmitApp_ChangeState
                          2 0   0 -> TransmitApp_SetSendEvt
       0      0     36  TransmitApp_DisplayResults
                          0 0  20 -> debug_msg
                          0 0  16 -> osal_GetSystemClock
                          0 0  16 -> osal_stop_timerEx
       0      0     25  TransmitApp_HandleKeys
                          0 0   9 -> HalLedBlink
                          0 0   9 -> HalUARTWrite
                          0 0   9 -> osal_set_event
       1      0     16  TransmitApp_Init
                          0 0  12 -> HalLcdWriteString
                          0 0  12 -> RegisterForKeys
                          0 0  12 -> ZDO_RegisterForZDOMsg
                          0 0  12 -> afDataReqMTU
                          0 0  12 -> afRegister
                          0 0  12 -> initUart
                          0 0  14 -> osal_nv_item_init
                          0 0  16 -> osal_nv_read
       0      0      0  TransmitApp_MessageMSGCB
       0      0     16  TransmitApp_ProcessEvent
                          0 0  16 -> HalLedBlink
                          0 0  16 -> SendBindRequest
                          0 0  16 -> TransmitApp_DisplayResults
                          0 0  16 -> TransmitApp_HandleKeys
                          0 0  16 -> TransmitApp_ProcessZDOMsgs
                          0 0  16 -> TransmitApp_SendTheMessage
                          0 0  16 -> TransmitApp_SetSendEvt
                          0 0  16 -> osal_GetSystemClock
                          0 0  16 -> osal_msg_deallocate
                          0 0  16 -> osal_msg_receive
                          0 0  16 -> osal_start_timerEx
       1      0     43  TransmitApp_ProcessZDOIncomingMsgs
                          0 0  33 -> FrameUnPackage
                          0 0  33 -> HalLedBlink
                          0 0  33 -> HalUARTWrite
                          0 0  33 -> ReportData
       0      0     26  TransmitApp_ProcessZDOMsgs
                          0 0  10 -> HalLedBlink
                          0 0  10 -> HalLedSet
                          0 0  10 -> TransmitApp_ProcessZDOIncomingMsgs
                          0 0  10 -> ZDO_ParseEPListRsp
                          0 0  10 -> osal_mem_free
                          0 0  10 -> osal_stop_timerEx
       0      0     35  TransmitApp_SendTheMessage
                          0 0  19 -> AF_DataRequest
                          0 0  10 -> HalLedBlink
                          0 0  10 -> osal_start_timerEx
       2      0     16  TransmitApp_SetSendEvt
                          2 0   0 -> osal_start_timerEx
       2      0     41  initUart
                          2 0  29 -> HalUARTOpen
       1      0    174  uartRxCB
                          0 0 174 -> AF_DataRequest
                          0 0 169 -> FramePackage
                          0 0 165 -> HalLedBlink
                          0 0 165 -> HalUARTRead
                          0 0 165 -> SendDataRequest
                          0 0 165 -> UnPackRC623Data


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "GTA Zigbee">
       1  ?<Initializer for NativeAddr>
       6  ??Crc16Code?relay
       6  ??FramePackage?relay
       6  ??FrameUnPackage?relay
       6  ??ReadADC?relay
       6  ??ReportData?relay
       6  ??SendBindRequest?relay
       6  ??SendDataRequest?relay
       6  ??SentDataInBind?relay
       5  ??Subroutine23_0
       5  ??Subroutine24_0
       7  ??Subroutine25_0
       5  ??Subroutine26_0
       6  ??TransmitApp_ChangeState?relay
       6  ??TransmitApp_DisplayResults?relay
       6  ??TransmitApp_HandleKeys?relay
       6  ??TransmitApp_Init?relay
       6  ??TransmitApp_MessageMSGCB?relay
       6  ??TransmitApp_ProcessEvent?relay
       6  ??TransmitApp_ProcessZDOIncomingMsgs?relay
       6  ??TransmitApp_ProcessZDOMsgs?relay
       6  ??TransmitApp_SendTheMessage?relay
       6  ??TransmitApp_SetSendEvt?relay
       6  ??initUart?relay
       6  ??uartRxCB?relay
       9  ?Subroutine0
       5  ?Subroutine1
      12  ?Subroutine10
       7  ?Subroutine11
       2  ?Subroutine12
       2  ?Subroutine13
      14  ?Subroutine14
      10  ?Subroutine15
      12  ?Subroutine16
      11  ?Subroutine17
      16  ?Subroutine18
       3  ?Subroutine19
       5  ?Subroutine2
       6  ?Subroutine20
       4  ?Subroutine21
      10  ?Subroutine22
       7  ?Subroutine3
       6  ?Subroutine4
       6  ?Subroutine5
       5  ?Subroutine6
      12  ?Subroutine7
       6  ?Subroutine8
       5  ?Subroutine9
       1  ADCCON1
       1  ADCCON3
       1  ADCH
       1  ADCL
      87  Crc16Code
       1  Flag_ReportData
     142  FramePackage
     309  FrameUnPackage
       1  NativeAddr
     121  ReadADC
     376  ReportData
     135  SendBindRequest
      98  SendDataRequest
      78  SentDataInBind
      12  TestDirectSent_DstAddr
      15  Test_Buf
       1  Test_Mark
      25  TransmitApp_ChangeState
       2  TransmitApp_ClusterList
     186  TransmitApp_DisplayResults
      12  TransmitApp_DstAddr
      74  TransmitApp_HandleKeys
     269  TransmitApp_Init
       2  TransmitApp_MaxDataLength
       3  TransmitApp_MessageMSGCB
     102  TransmitApp_Msg
       1  TransmitApp_NwkState
     330  TransmitApp_ProcessEvent
     185  TransmitApp_ProcessZDOIncomingMsgs
     171  TransmitApp_ProcessZDOMsgs
     183  TransmitApp_SendTheMessage
      22  TransmitApp_SetSendEvt
      12  TransmitApp_SimpleDesc
       1  TransmitApp_State
       1  TransmitApp_TaskID
       1  TransmitApp_TransID
       6  TransmitApp_epDesc
       4  __Constant_40533333
       4  __Constant_447a0000
       4  __Constant_44ffe000
       4  clkShdw
      97  initUart
       2  pktCounter
       4  rxAccum
       4  rxTotal
       1  timerOn
       1  timesToSend
       4  txAccum
       4  txTotal
     419  uartRxCB

 
 3 507 bytes in segment BANKED_CODE
   120 bytes in segment BANK_RELAYS
     4 bytes in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    37 bytes in segment XDATA_ROM_C
   179 bytes in segment XDATA_Z
 
 3 628 bytes of CODE  memory
    25 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  4 bytes shared)
   180 bytes of XDATA memory

Errors: none
Warnings: 21
